
Функция ПолучитьОписаниеТаблицыВБазе77(ТипМетаданного, ИмяМетаданного) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Обмен_ОписаниеОбъектов77.Ссылка
	|ИЗ
	|	Справочник.Обмен_ОписаниеОбъектов77 КАК Обмен_ОписаниеОбъектов77
	|ГДЕ
	|	Обмен_ОписаниеОбъектов77.ТипМетаданного = &ТипМетаданного
	|	И Обмен_ОписаниеОбъектов77.ИмяМетаданного = &ИмяМетаданного
	|	И НЕ Обмен_ОписаниеОбъектов77.ТабличнаяЧасть";
	
	Запрос.УстановитьПараметр("ИмяМетаданного", ИмяМетаданного);
	Запрос.УстановитьПараметр("ТипМетаданного", ТипМетаданного);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
КонецФункции

Функция ПолучитьМассивПримитивныхТипов()
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	Массив.Добавить(Тип("Число"));
	Массив.Добавить(Тип("Дата"));
	Массив.Добавить(Тип("Булево"));
	Возврат Массив
КонецФункции

Функция ВыполнитьСверкуПоМетаданному(ОписаниеОбъекта77,Порция = 1000,МассивСвязанныхОбъектов = Неопределено,ЗагружатьВсеСвязанные = Ложь,МассивИД = неопределено,ВозвратТаблицы = Ложь,ЗагрузитьВсе = Ложь) Экспорт
	
	//Заполнение параметров загрузки
	Если Порция = 0 тогда 
		Возврат Ложь;
	КонецЕсли;
	ЭтоСправочник = ОписаниеОбъекта77.ТипМетаданного = "Справочник";
	Идентификатор = ?(ЭтоСправочник,"ID", "IDDoc");
	СтрокаМетаданные1С8 = ОписаниеОбъекта77.ТипМетаданного+"."+ОписаниеОбъекта77.ИмяМетаданного;
	Если МассивИД <> неопределено тогда
		Таблица = ЗагрузкаДанныеПоМетаданным(ОписаниеОбъекта77.ТипМетаданного,ОписаниеОбъекта77.ИмяМетаданного,,МассивИД,,,МассивСвязанныхОбъектов,,,ЗагрузитьВсе);
		Если не ВозвратТаблицы тогда
			Возврат Истина;
		Иначе
			Возврат Таблица;
		КонецЕсли;
	КонецЕсли;
	
	МассивРеквизитовДляСверки = ОписаниеОбъекта77.Реквизиты.НайтиСтроки(Новый Структура("РеквизитДляСверки",Истина));
	УсловиеSQL = "";
	Условие1С = "";
	Условие1СДляСверки = "";
	Условие1ССравнение = "";
	
	Если  ЭтоСправочник тогда
		Метаданное = Метаданные.Справочники[ОписаниеОбъекта77.ИмяМетаданного];
	Иначе
		Метаданное = Метаданные.Документы[ОписаниеОбъекта77.ИмяМетаданного];
	КонецЕсли;
	
	Реквизиты = Метаданное.Реквизиты;
	СтандартныеРеквизиты = Метаданное.СтандартныеРеквизиты;
	
	Для каждого строка из МассивРеквизитовДляСверки цикл
		Реквизит = Реквизиты.Найти(строка.ИмяРеквизита);
		Если Реквизит = неопределено тогда
			Для каждого СтандРекв из СтандартныеРеквизиты цикл
				Если СтандРекв.Имя = строка.ИмяРеквизита тогда 
					Реквизит = СтандРекв;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если реквизит = Неопределено тогда
			Продолжить;
		КонецЕсли;
		ЭтоБулево = Реквизит.Тип.СодержитТип(Тип("Булево"));
		
		УсловиеSQL = УсловиеSQL + " , "+строка.ИмяРеквизитаSQL+" AS "+строка.ИмяРеквизита + Символы.ПС;
		Если ЭтоБулево тогда
			Условие1С = Условие1С + " , ВЫБОР КОГДА Таблица." + строка.ИмяРеквизита+ " ТОГДА 1 ИНАЧЕ 0 КОНЕЦ как "+ строка.ИмяРеквизита + Символы.ПС;
		Иначе
			Условие1С = Условие1С + " , Таблица." + строка.ИмяРеквизита+?(ЗначениеЗаполнено(строка.СвязанныйТип) и не Строка.СвязанныйТип.ЭтоПеречисление,".ID_77","") + " как "+ строка.ИмяРеквизита + Символы.ПС;
		КонецЕсли;
		Условие1СДляСверки = Условие1СДляСверки + " , Таблица77." + строка.ИмяРеквизита + " как "+ строка.ИмяРеквизита + Символы.ПС;		
		Условие1ССравнение = Условие1ССравнение + "И вт77."+строка.ИмяРеквизита+" = втСправочник."+строка.ИмяРеквизита + Символы.ПС;
		
	КонецЦикла;
	
	
	//Получаем список объектов в базе 7.7	
	ТекстSQLЗапроса = 
	"SELECT Distinct
	| "+Идентификатор+" as ID_77
	| "+ УсловиеSQL +"
	| FROM [Nagat].."+ОписаниеОбъекта77.ИмяSQL+" (nolock)";
	Если ОписаниеОбъекта77.ИмяМетаданного = "Контрагенты" тогда
		ТекстSQLЗапроса = ТекстSQLЗапроса +Символы.ПС + "where ID ='     3   ' or PARENTID = '     3   '";
	КонецЕсли;
	
	ТаблицаID_77Типизированная = Новый ТаблицаЗначений;
	ТаблицаID_77Типизированная.Колонки.Добавить("ID_77",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9,ДопустимаяДлина.Фиксированная)));
	Для каждого строка из МассивРеквизитовДляСверки цикл
		тип = ?(строка.ПримитивныйТип,строка.ТипМетаданных,"Строка");
		Если строка.ПримитивныйТип и строка.ТипМетаданных = "Строка" тогда
			КвалификаторСтроки = Новый КвалификаторыСтроки(Строка.Длина,ДопустимаяДлина.Переменная);
			ТаблицаID_77Типизированная.Колонки.Добавить(строка.ИмяРеквизита,Новый ОписаниеТипов(тип,,КвалификаторСтроки));
		ИначеЕсли не строка.ПримитивныйТип тогда
			КвалификаторСтроки = Новый КвалификаторыСтроки(9,ДопустимаяДлина.Фиксированная);
			ТаблицаID_77Типизированная.Колонки.Добавить(строка.ИмяРеквизита,Новый ОписаниеТипов(тип,,КвалификаторСтроки));
		иначе
			ТаблицаID_77Типизированная.Колонки.Добавить(строка.ИмяРеквизита,Новый ОписаниеТипов(тип));	
		КонецЕсли;
	КонецЦикла;
	
	
	
	ТаблицаID_77 = РаботаСSQL.ВыполнитьЗапросSQL(ТекстSQLЗапроса,,Справочники.НастройкиПодключения.БазаCourierDS,Истина,,,,ТаблицаID_77Типизированная);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица77.ID_77 
	|	" + Условие1СДляСверки + "
	|ПОМЕСТИТЬ вт77
	|ИЗ
	|	&Таблица77 КАК Таблица77
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ID_77 
	|	"+Условие1С+"
	|ПОМЕСТИТЬ втСправочник
	|ИЗ
	|	"+СтрокаМетаданные1С8+" КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт77.ID_77
	|ИЗ
	|	вт77 КАК вт77
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСправочник КАК втСправочник
	|		ПО вт77.ID_77 = втСправочник.ID_77
	|		"+Условие1ССравнение+"
	|ГДЕ
	|	втСправочник.ID_77 ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("Таблица77",ТаблицаID_77);
	
	ТаблицаID_77 = Запрос.Выполнить().Выгрузить();
	
	//Формируем массив списков идентификаторов объектов к загрузке
	МассивIDКЗагрузке = Новый Массив;
	Ит = 0;
	МассивID = Новый Массив;
	Для каждого строка из ТаблицаID_77 цикл
		Если Ит = Порция тогда
			МассивIDКЗагрузке.Добавить(МассивID);
			Ит = 0;
			МассивID = Новый Массив;
		КонецЕсли;		
		МассивID.Добавить(Строка.ID_77);
		Ит = Ит + 1;
	КонецЦикла;
	МассивIDКЗагрузке.Добавить(МассивID);
	МассивСвязанныхОбъектов = ?(ЗагружатьВсеСвязанные,Новый Массив, МассивСвязанныхОбъектов); 
	
	//Запускаем загрузку массива
	Для каждого МассивID из МассивIDКЗагрузке цикл
		Таблица = ЗагрузкаДанныеПоМетаданным(ОписаниеОбъекта77.ТипМетаданного,ОписаниеОбъекта77.ИмяМетаданного,,МассивID,,,МассивСвязанныхОбъектов,,,?(ЗначениеЗаполнено(УсловиеSQL),Истина,Ложь));
	КонецЦикла;
	
	Если не ВозвратТаблицы тогда
		Возврат Истина;
	Иначе
		Возврат Таблица;
	КонецЕсли;
	
	
КонецФункции

//Функция для загрузки данных из 7.7
//Параметры:
//ТипМетаданных - тип метаданных(Справочник,Документ,Регистр);
//ВидМетаданных - имя метаданного;
//РазмерПорции - если указан - количество загружаемых объектов по сверке;
//СтрокаСоответствия - параметр для рекурсивного вызова, не заполнять;
//ИсключаемыйТип - параметр для рекурсивного вызова не заполнять;
//МассивСвязанныхОбъектов - тип Массив, массив описаний объектов связанных с загружаемым метаданным
//если передать пустой массив - будут загруженны все данные по всем метаданным ссылающиеся на загружаемые данные
//если не заполнить - данные не будут передаваться
//если заполнить ссылками на справочник "Обмен_ОписаниеОбъектов77" - будут проверенны связи, и если связи есть - данные будут загруженны
Функция ЗагрузкаДанныеПоМетаданным(ТипМетаданных,ВидМетаданных,РазмерПорции=0,МассивID = Неопределено,ТаблицаСсылок = Неопределено,ИсключаемыйТип = Неопределено,МассивСвязанныхОбъектов = неопределено, ТаблицаIDСсылка = Неопределено, ТолькоСсылку = Ложь,ЗагрузитьВсе = Ложь) Экспорт
	//Получим описание объекта в базе 7.7
	ОписаниеОбъекта77 = ПолучитьОписаниеТаблицыВБазе77(ТипМетаданных,ВидМетаданных);
	
	//Таблица реквизитов
	ТаблицаРеквизитов = ОписаниеОбъекта77.Реквизиты.Выгрузить();
	
	Попытка
		Метаданное = неопределено;
		Если ТипМетаданных = "Справочник" тогда
			Метаданное = Метаданные.Справочники[ВидМетаданных];
			Менеджер = Справочники[ВидМетаданных];
		ИначеЕсли ТипМетаданных = "Документ" тогда
			Метаданное = Метаданные.Документы[ВидМетаданных];
			Менеджер = Документы[ВидМетаданных];
		КонецЕсли;
	Исключение
		Возврат неопределено;
	КонецПопытки;
	
	//Если задан массив id получаем объекты к загрузке из 7.7 по нему, если нет то порцию
	//ЗагрузкаСвязанныхДанных = МассивID <> Неопределено;
	Если МассивID = Неопределено тогда
		ТекстЗапросаSQL = ПолучитьSQLЗапросСверкиПоID(ТипМетаданных+"."+ВидМетаданных,ОписаниеОбъекта77,РазмерПорции); 
	Иначе
		ТаблицаСсылок = ПолучитьТаблицуОбъектовПоID(ТипМетаданных,ВидМетаданных,МассивID,Менеджер,ТолькоСсылку,ЗагрузитьВсе); 	
		Если МассивID.Количество() = 0 тогда
			Возврат ТаблицаСсылок;
		КонецЕсли;
		ТекстЗапросаSQL = ПолучитьSQLЗапросПоID(ОписаниеОбъекта77,МассивID);
	КонецЕсли;
	
	//Получаем данные из 7.7
	ТаблицаДанных77= РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапросаSQL,,справочники.НастройкиПодключения.БазаCourierDS,Истина);	
	Если ТаблицаДанных77.Количество() = 0 тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТаблицаСсылок = Неопределено тогда
		ТаблицаСсылок = ПолучитьТаблицуОбъектовПоID(ТипМетаданных,ВидМетаданных,ТаблицаДанных77.ВыгрузитьКолонку("ID_77"),Менеджер,ТолькоСсылку);	
	КонецЕсли;
	
	Если ТолькоСсылку тогда
		Возврат ТаблицаСсылок;
	КонецЕсли;
	
	//Получаем описание ссылочных реквизитов
	ТаблицаСвязанныхРеквизитов = ПолучитьТаблицуСвязанныхРеквизитов(ОписаниеОбъекта77,ТаблицаДанных77,Метаданное);
	
	//Для каждого ссылочного реквизита получаем таблицу вида "id"-"СсылкаНаОбъект" и заодно создаем необходимые данные в текущей БД
	Для каждого Строка из ТаблицаСвязанныхРеквизитов цикл
		Если строка.ОписаниеОбъекта77 = ИсключаемыйТип тогда
			Строка.ТаблицаСсылок = ТаблицаIDСсылка;
			Продолжить
		КонецЕсли;
		//Костыль, убрать как будет время(
		Если Строка.ОписаниеОбъекта77 = ОписаниеОбъекта77 тогда
			ОбработатьЦикличныеСсылки(ТаблицаДанных77,Строка.ИмяРеквизита,Строка.МассивID);
		КонецЕсли;
		//Костыль, убрать как будет время)
		Если Строка.МассивID.Количество() = 0 тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ТолькоСсылку тогда 
			Продолжить;
		КонецЕсли;
		
		Если не Строка.ОписаниеОбъекта77.ЭтоПеречисление тогда
			ЗагрузкаДанныеПоМетаданным(Строка.ОписаниеОбъекта77.ТипМетаданного,Строка.ОписаниеОбъекта77.ИмяМетаданного,,Строка.МассивID,Строка.ТаблицаСсылок,?(Строка.ОписаниеОбъекта77 <> ОписаниеОбъекта77,ОписаниеОбъекта77,Неопределено),Новый Массив,ТаблицаСсылок,Строка.ТолькоСсылку);	
		КонецЕсли;
		Если Строка.ОписаниеОбъекта77 = ОписаниеОбъекта77 тогда
			Для каждого СтрокаСсылка из Строка.ТаблицаСсылок цикл
				Строки = ТаблицаДанных77.НайтиСтроки(Новый Структура("ID_77",СтрокаСсылка.ID_77));
				Для каждого строкаКУдалению из строки цикл
					ТаблицаДанных77.Удалить(строкаКУдалению);	
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	СтруктураТабличнойЧасти = Неопределено;
	Если ОписаниеОбъекта77.ТипМетаданного = "Справочник" тогда
		СписокРеквизитов = Метаданные.Справочники[ОписаниеОбъекта77.ИмяМетаданного].Реквизиты;
		СписокСтандартныхРеквизитов = Метаданные.Справочники[ОписаниеОбъекта77.ИмяМетаданного].СтандартныеРеквизиты;
	ИначеЕсли ОписаниеОбъекта77.ТипМетаданного = "Документ" тогда
		СписокРеквизитов = Метаданные.Документы[ОписаниеОбъекта77.ИмяМетаданного].Реквизиты;
		СписокСтандартныхРеквизитов = Метаданные.Документы[ОписаниеОбъекта77.ИмяМетаданного].СтандартныеРеквизиты;
		//Костыль до написания нормальных правил обмена и реализации возможности установки соответствия между объектами 77 и 8 
		//Если у документа есть таблична часть и в правилах есть описание табличной части в 7.7 получаем таблицу со ссылками
		//в объектной модели текущей базы
		ТабличнаяЧасть = Неопределено;		
		Если Метаданные.Документы[ОписаниеОбъекта77.ИмяМетаданного].ТабличныеЧасти.Количество() > 0 тогда
			ОписаниеТабличнойЧасти = Справочники.Обмен_ОписаниеОбъектов77.НайтиПоРеквизиту("ВладелецТабличнойЧасти",ОписаниеОбъекта77);
			Если ОписаниеТабличнойЧасти <> справочники.Обмен_ОписаниеОбъектов77.ПустаяСсылка() тогда	
				МетаданноеТабличнойЧасти = Метаданные.Документы[ОписаниеОбъекта77.ИмяМетаданного].ТабличныеЧасти[0];
				ИмяТаблицы = МетаданноеТабличнойЧасти.Имя;
				ТабличнаяЧастьДокументов = ПолучитьТабличнуюЧастьДокумента(ОписаниеТабличнойЧасти,МассивID,МетаданноеТабличнойЧасти,ОписаниеОбъекта77,ИсключаемыйТип,ТаблицаIDСсылка);						
				СтруктураТабличнойЧасти = Новый Структура("ИмяТаблицы,Таблица",ИмяТаблицы,ТабличнаяЧастьДокументов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Хардкод, надо подумать как обойтись без него
	Если ВидМетаданных = "Номенклатура" Тогда
		ТЗ_ЗСЯ = ОбменАлгоритмы77.ПолучитьТаблицуЗСЯ(ТаблицаДанных77.ВыгрузитьКолонку("ID_77"));
	КонецЕсли;
	
	Если ВидМетаданных = "Партии" и ТипМетаданных = "Справочник" тогда
		СтрокаРеквизита = ТаблицаСвязанныхРеквизитов.Добавить();
		СтрокаРеквизита.ИмяРеквизита = "Клиент";
		//СтрокаРеквизита.МассивID = ПолучитьКлиентовПартии(МассивID);
		СтрокаРеквизита.ОписаниеОбъекта77 = ПолучитьОписаниеТаблицыВБазе77("Справочник","Контрагенты");
		СтрокаРеквизита.ТаблицаСсылок = ПолучитьКлиентовПартии(МассивID);
		СтрокаРеквизита.ТолькоСсылку = Истина;
	КонецЕсли;
	
	
	МассивПримитивныхРеквизитов = Новый Структура;
	МассивИменРеквизитов = Новый Массив;
	ПримитивныеТипы = ПолучитьМассивПримитивныхТипов();
	Для каждого Реквизит из СписокРеквизитов цикл
		МассивИменРеквизитов.Добавить(Реквизит.Имя);
		Для каждого ПримитивныйТип из ПримитивныеТипы цикл
			Если Реквизит.Тип.СодержитТип(ПримитивныйТип) тогда
				МассивПримитивныхРеквизитов.Вставить(Реквизит.Имя,ПримитивныйТип);
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для каждого Реквизит из СписокСтандартныхРеквизитов цикл
		МассивИменРеквизитов.Добавить(Реквизит.Имя);
		Для каждого ПримитивныйТип из ПримитивныеТипы цикл
			Если Реквизит.Тип.СодержитТип(ПримитивныйТип) тогда
				МассивПримитивныхРеквизитов.Вставить(Реквизит.Имя,ПримитивныйТип);
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого СтрокаДанных Из ТаблицаДанных77 цикл
		СтрокаСоответствияТС = ТаблицаСсылок.Найти(СтрокаДанных.ID_77,"ID_77");	
		Если СтрокаСоответствияТС <> неопределено тогда
			ЗагрузитьОбъектПоСтроке(ОписаниеОбъекта77,СтрокаДанных,ТаблицаРеквизитов,ТаблицаСвязанныхРеквизитов,ТаблицаДанных77.Колонки,МассивПримитивныхРеквизитов,МассивИменРеквизитов,СтрокаСоответствияТС.Ссылка,СтруктураТабличнойЧасти);
		КонецЕсли;
	КонецЦикла;
	Если ТипМетаданных = "Справочник" тогда
		Если МассивСвязанныхОбъектов<> неопределено тогда
			Если МассивСвязанныхОбъектов.Количество() > 0 тогда
				ЗагрузитьОбъектыЗависимыеОбъекты(ОписаниеОбъекта77,МассивСвязанныхОбъектов,ТаблицаДанных77);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ТаблицаСсылок;
КонецФункции

Функция ПолучитьТабличнуюЧастьДокумента(ОписаниеТабличнойЧасти,МассивID,Метаданное,ОписаниеОбъекта77,ИсключаемыйТип,ТаблицаIDСсылка)
	
	ТекстЗапросаSQL = ПолучитьSQLЗапросПоID(ОписаниеТабличнойЧасти,МассивID,"IDDoc");
	
	ТаблицаДанных77 = РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапросаSQL,,Справочники.НастройкиПодключения.БазаCourierDS,Истина);
	
	ТаблицаСвязанныхРеквизитов = ПолучитьТаблицуСвязанныхРеквизитов(ОписаниеТабличнойЧасти,ТаблицаДанных77,Метаданное);
	
	Для каждого Строка из ТаблицаСвязанныхРеквизитов цикл
		Если строка.ОписаниеОбъекта77 = ИсключаемыйТип тогда
			Строка.ТаблицаСсылок = ТаблицаIDСсылка;
			Продолжить
		КонецЕсли;
		//Костыль, убрать как будет время(
		Если Строка.ОписаниеОбъекта77 = ОписаниеОбъекта77 тогда
			ОбработатьЦикличныеСсылки(ТаблицаДанных77,Строка.ИмяРеквизита,Строка.МассивID);
		КонецЕсли;
		//Костыль, убрать как будет время)
		Если Строка.МассивID.Количество() = 0 тогда
			Продолжить;
		КонецЕсли;	
		Если Строка.ТолькоСсылку тогда 
			Продолжить;
		КонецЕсли;
		Если не Строка.ОписаниеОбъекта77.ЭтоПеречисление тогда
			ЗагрузкаДанныеПоМетаданным(Строка.ОписаниеОбъекта77.ТипМетаданного,Строка.ОписаниеОбъекта77.ИмяМетаданного,,Строка.МассивID,Строка.ТаблицаСсылок,?(Строка.ОписаниеОбъекта77 <> ОписаниеОбъекта77,ОписаниеОбъекта77,Неопределено),Новый Массив,,Строка.ТолькоСсылку);	
		КонецЕсли;
		Если Строка.ОписаниеОбъекта77 = ОписаниеОбъекта77 тогда
			Для каждого СтрокаСсылка из Строка.ТаблицаСсылок цикл
				Строки = ТаблицаДанных77.НайтиСтроки(Новый Структура("ID_77",СтрокаСсылка.ID_77));
				Для каждого строкаКУдалению из строки цикл
					ТаблицаДанных77.Удалить(строкаКУдалению);	
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаРеквизитов = ОписаниеТабличнойЧасти.Реквизиты.Выгрузить();  
	
	МассивПримитивныхРеквизитов = Новый Структура;
	МассивИменРеквизитов = Новый Массив;
	ПримитивныеТипы = ПолучитьМассивПримитивныхТипов();
	Для каждого Реквизит из Метаданное.Реквизиты цикл
		МассивИменРеквизитов.Добавить(Реквизит.Имя);
		Для каждого ПримитивныйТип из ПримитивныеТипы цикл
			Если Реквизит.Тип.СодержитТип(ПримитивныйТип) тогда
				МассивПримитивныхРеквизитов.Вставить(Реквизит.Имя,ПримитивныйТип);
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для каждого Реквизит из Метаданное.СтандартныеРеквизиты цикл
		МассивИменРеквизитов.Добавить(Реквизит.Имя);
		Для каждого ПримитивныйТип из ПримитивныеТипы цикл
			Если Реквизит.Тип.СодержитТип(ПримитивныйТип) тогда
				МассивПримитивныхРеквизитов.Вставить(Реквизит.Имя,ПримитивныйТип);
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого строка из ТаблицаДанных77 цикл
		Для каждого СтрокаРеквизит из ТаблицаРеквизитов цикл
			Тип = Неопределено;
			Если МассивПримитивныхРеквизитов.Свойство(СтрокаРеквизит.ИмяРеквизита,Тип) Тогда 
				Если строка[СтрокаРеквизит.ИмяРеквизита] = null тогда
					Продолжить;
				КонецЕсли;
				Если Тип = Тип("Строка") тогда
					Продолжить;
				ИначеЕсли Тип = Тип("Дата") тогда
					ЗначениеДата = Строка[СтрокаРеквизит.ИмяРеквизита];
					Если ЗначениеДата = Дата("17530101") тогда
						ЗначениеДата = Дата("00010101");
					КонецЕсли;
					строка[СтрокаРеквизит.ИмяРеквизита]= ЗначениеДата;
				ИначеЕсли Тип = Тип("Булево") тогда
					Если СтрокаРеквизит.ИмяРеквизита = "ЭтоГруппа" тогда
						Продолжить;
					КонецЕсли;
					ЗначениеБулево = Строка[СтрокаРеквизит.ИмяРеквизита] = 1;
					строка[СтрокаРеквизит.ИмяРеквизита]= ЗначениеБулево;				
				Иначе
					строка[СтрокаРеквизит.ИмяРеквизита]= Строка[СтрокаРеквизит.ИмяРеквизита];
				КонецЕсли;
			ИначеЕсли МассивИменРеквизитов.Найти(СтрокаРеквизит.ИмяРеквизита) <> Неопределено тогда
				Если строка[СтрокаРеквизит.ИмяРеквизита] = null тогда
					Продолжить;
				КонецЕсли;
				СтрокаСсылочногоРеквизита = ТаблицаСвязанныхРеквизитов.Найти(СтрокаРеквизит.ИмяРеквизита,"ИмяРеквизита");
				Если СтрокаСсылочногоРеквизита <> неопределено тогда
					ТаблицаСоответствия = СтрокаСсылочногоРеквизита.ТаблицаСсылок;
					СтрокаСоответствия = ТаблицаСоответствия.Найти(Прав(Строка[СтрокаРеквизит.ИмяРеквизита],9),"ID_77");
					Если СтрокаСоответствия <> неопределено тогда
						строка[СтрокаРеквизит.ИмяРеквизита] = СтрокаСоответствия.Ссылка;   
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 	
	КонецЦикла;
	
	Возврат ТаблицаДанных77;
	
КонецФункции

Процедура ОбработатьЦикличныеСсылки(ТаблицаДанных,Колонка,МассивID)
	Для каждого строка из ТаблицаДанных цикл
		Если Строка[Колонка] = Строка.ID_77 тогда
			НомерЭлемента = МассивID.Найти(Строка[Колонка]);
			Если НомерЭлемента <> неопределено тогда
				МассивID.Удалить(НомерЭлемента);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьТаблицуОбъектовПоID(ТипМетаданных,ВидМетаданных,МассивID,Менеджер,ТолькоСсылку,ЗагрузитьВсе = Ложь)
	
	СтрокаМетаданные1С8 = ТипМетаданных+"."+ВидМетаданных;
	ТаблицаIDКЗагрузке = Новый ТаблицаЗначений;
	ТаблицаIDКЗагрузке.Колонки.Добавить("ID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9,ДопустимаяДлина.Переменная)));
	Для каждого ID из МассивID цикл
		НоваяСтрока = ТаблицаIDКЗагрузке.Добавить();
		НоваяСтрока.ID = ID;
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаID.ID
	|ПОМЕСТИТЬ вт1
	|ИЗ
	|	&ТаблицаID КАК ТаблицаID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт1.ID Как ID_77,
	|	ЕстьNULL(Таблица.Ссылка,Значение("+СтрокаМетаданные1С8+".ПустаяСсылка)) как Ссылка,
	|	Выбор когда Таблица.Ссылка есть null тогда истина иначе ложь конец как Загружать 
	|ИЗ
	|	вт1 КАК вт1
	|		ЛЕВОЕ СОЕДИНЕНИЕ "+СтрокаМетаданные1С8+" КАК Таблица
	|		ПО вт1.ID = Таблица.ID_77
	|СГРУППИРОВАТЬ ПО
	|	вт1.ID,
	|	ЕстьNULL(Таблица.Ссылка,Значение("+СтрокаМетаданные1С8+".ПустаяСсылка)),
	|	Выбор когда Таблица.Ссылка есть null тогда истина иначе ложь конец";
	
	Запрос.УстановитьПараметр("ТаблицаID",ТаблицаIDКЗагрузке);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если ЗагрузитьВсе тогда
		//Таблица.Колонки.Удалить("Загружать");
		Для каждого строка из Таблица цикл
			Если Строка.Ссылка.Пустая() и не Строка.ID_77 = "     0   " и не ТолькоСсылку тогда
				УИД = Новый УникальныйИдентификатор;
				Строка.Ссылка = Менеджер.ПолучитьСсылку(УИД);				
			КонецЕсли;
		КонецЦикла;
	Иначе
		СтрокиКЗагрузке = Таблица.НайтиСтроки(Новый Структура("Загружать",Истина));
		МассивID = Таблица.Скопировать(СтрокиКЗагрузке,"ID_77").ВыгрузитьКолонку("ID_77");
		//Таблица.Колонки.Удалить("Загружать");
		Для каждого строка из Таблица цикл
			Если Строка.Ссылка.Пустая() и не Строка.ID_77 = "     0   " и не ТолькоСсылку тогда
				УИД = Новый УникальныйИдентификатор;
				Строка.Ссылка = Менеджер.ПолучитьСсылку(УИД);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таблица;	
	
КонецФункции

Функция ПолучитьSQLЗапросПоID(ОписаниеОбъекта77, МассивID,ПолеПоиска=неопределено)
	
	Если ПолеПоиска = неопределено тогда
		ПолеПоиска = ?(ОписаниеОбъекта77.ТипМетаданного = "Справочник","ID", "IDDoc");
	КонецЕсли;
	
	СтрокаУсловие = "";
	
	Для каждого ID из МассивID цикл
		Если ЗначениеЗаполнено(ID) тогда
			СтрокаУсловие = СтрокаУсловие + "'"+ ID +"',";
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(СтрокаУсловие) тогда
		СтрокаУсловие = Лев(СтрокаУсловие,СтрДлина(СтрокаУсловие)-1);
		СтрокаУсловие = "WHERE O."+ПолеПоиска+" IN (" + СтрокаУсловие + ")";
	КонецЕсли;
	
	СтрокаПоля = "";
	Для каждого строка из ОписаниеОбъекта77.Реквизиты цикл
		Если ЗначениеЗаполнено(Строка.ИмяРеквизитаSQL) и ЗначениеЗаполнено(Строка.ИмяРеквизита) тогда
			СтрокаПоля = СтрокаПоля + "O." + Строка.ИмяРеквизитаSQL + " AS " + Строка.ИмяРеквизита + ","+Символы.ПС;	
		КонецЕсли;
	КонецЦикла;
	СтрокаПоляДокумент = "";
	Если ОписаниеОбъекта77.ТипМетаданного = "Документ" тогда
		СтрокаПоля = СтрокаПоля + "J.DOCNO AS Номер," + Символы.ПС + "Cast(LEFT(J.DATE_TIME_IDDOC,8)AS DATETIME) AS Дата" + Символы.ПС;
		СтрокаУсловие ="INNER JOIN [Nagat].._1SJOURN J (nolock) ON O.IDDOC = j.IDDOC" + Символы.ПС + СтрокаУсловие;
	ИначеЕсли ОписаниеОбъекта77.ТипМетаданного = "Справочник" и ОписаниеОбъекта77.ИмяМетаданного = "Партии" тогда 
		СтрокаПоля = СтрокаПоля + "ISNULL(P.Sp4128, '     0   ') AS Фирма" + Символы.ПС;
		СтрокаУсловие ="LEFT JOIN [Nagat].._1SJOURN P (nolock) ON O.SP411 = P.IDDOC" + Символы.ПС
		+ СтрокаУсловие;
	Иначе
		СтрокаПоля = Лев(СтрокаПоля,СтрДлина(СтрокаПоля)-2) + Символы.ПС;
	КонецЕсли;
	
	ТекстЗапросаSQL = 
	"SELECT 
	|"+СтрокаПоля+"
	|  FROM [Nagat].."+ОписаниеОбъекта77.ИмяSQL+" O (nolock)
	|"+СтрокаУсловие;
	
	Возврат ТекстЗапросаSQL;
	
	
КонецФункции

Функция ПолучитьТаблицуСвязанныхРеквизитов(ОписаниеОбъекта77,ТаблицаДанных77,Метаданное)
	
	ТаблицаСвязанныхРеквизитов = Новый ТаблицаЗначений;
	ТаблицаСвязанныхРеквизитов.Колонки.Добавить("ИмяРеквизита");
	ТаблицаСвязанныхРеквизитов.Колонки.Добавить("МассивID");
	ТаблицаСвязанныхРеквизитов.Колонки.Добавить("ОписаниеОбъекта77");
	ТаблицаСвязанныхРеквизитов.Колонки.Добавить("ТаблицаСсылок");	
	ТаблицаСвязанныхРеквизитов.Колонки.Добавить("ТолькоСсылку");
	МассивРеквизитов = Новый Массив;
	Для каждого Рекв из Метаданное.Реквизиты цикл
		МассивРеквизитов.Добавить(Рекв.Имя);	
	КонецЦикла;
	Для каждого Рекв из Метаданное.стандартныеРеквизиты цикл
		МассивРеквизитов.Добавить(Рекв.Имя);	
	КонецЦикла;
	
	
	Если Метаданное = Неопределено тогда
		Возврат ТаблицаСвязанныхРеквизитов;
	КонецЕсли;
	Для каждого строка из ОписаниеОбъекта77.Реквизиты цикл 
		Если МассивРеквизитов.Найти(Строка.ИмяРеквизита) = Неопределено тогда
			Продолжить;
		КонецЕсли;
		ТаблицаСсылок = Новый ТаблицаЗначений;
		ТаблицаСсылок.Колонки.Добавить("ID_77");
		ТаблицаСсылок.Колонки.Добавить("Ссылка");
		Если Строка.СвязанныйТип <> справочники.Обмен_ОписаниеОбъектов77.ПустаяСсылка() тогда		
			//Если Строка.СвязанныйТип.ТипМетаданного = "Документ" и не Строка.ТолькоСсылку тогда
			//	Продолжить;	
			//КонецЕсли;
			СтрокаСвязанныхРеквизитов = ТаблицаСвязанныхРеквизитов.Добавить();
			СтрокаСвязанныхРеквизитов.ТолькоСсылку = Строка.ТолькоСсылку;
			СтрокаСвязанныхРеквизитов.МассивID = ТаблицаДанных77.ВыгрузитьКолонку(Строка.ИмяРеквизита);
			Ит = 0;
			Для каждого ID из СтрокаСвязанныхРеквизитов.МассивID цикл
				Если СтрДлина(ID) = 13 тогда
					СтрокаСвязанныхРеквизитов.МассивID[Ит] = Прав(ID,9);
				КонецЕсли;
				Ит = Ит +1;
			КонецЦикла;
			СтрокаСвязанныхРеквизитов.ОписаниеОбъекта77 = Строка.СвязанныйТип;
			СтрокаСвязанныхРеквизитов.ИмяРеквизита = Строка.ИмяРеквизита;
			Если СтрокаСвязанныхРеквизитов.ОписаниеОбъекта77.ЭтоПеречисление тогда
				//Вставить поиск соответствия объекта
				Если Неопределено = Неопределено тогда
					Для каждого Реквизит из СтрокаСвязанныхРеквизитов.ОписаниеОбъекта77.Реквизиты цикл
						СтрокаТаблицыСсылок = ТаблицаСсылок.Добавить();
						СтрокаТаблицыСсылок.ID_77 = Реквизит.ЗначениеПеречисленияSQL;
						Если Метаданные.Перечисления.Найти(СтрокаСвязанныхРеквизитов.ОписаниеОбъекта77.ИмяМетаданного) <> неопределено тогда
							СтрокаТаблицыСсылок.Ссылка = Перечисления[СтрокаСвязанныхРеквизитов.ОписаниеОбъекта77.ИмяМетаданного][Реквизит.ИмяРеквизита];						
						ИначеЕсли СтрокаСвязанныхРеквизитов.ОписаниеОбъекта77.ИмяМетаданного = "Булево" тогда
							Если Реквизит.ИмяРеквизита = "Да" тогда
								СтрокаТаблицыСсылок.Ссылка = Истина;
							Иначе
								СтрокаТаблицыСсылок.Ссылка = Ложь;
							КонецЕсли;
						Иначе
							Если Метаданные.Справочники.Найти(СтрокаСвязанныхРеквизитов.ОписаниеОбъекта77.ИмяМетаданного) <> неопределено тогда
								СтрокаТаблицыСсылок.Ссылка = Справочники[СтрокаСвязанныхРеквизитов.ОписаниеОбъекта77.ИмяМетаданного][Реквизит.ИмяРеквизита];						
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли СтрокаСвязанныхРеквизитов.ТолькоСсылку тогда
				ТаблицаСсылок = ПолучитьТаблицуОбъектовПоID(Строка.СвязанныйТип.ТипМетаданного,Строка.СвязанныйТип.ИмяМетаданного,СтрокаСвязанныхРеквизитов.МассивID,"",СтрокаСвязанныхРеквизитов.ТолькоСсылку);
			КонецЕсли;
			СтрокаСвязанныхРеквизитов.ТаблицаСсылок = ТаблицаСсылок;
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаСвязанныхРеквизитов
	
КонецФункции

Функция ПолучитьSQLЗапросСверкиПоID(СтрокаМетаданные1С8,ОписаниеОбъекта77,РазмерПорции)
	
	Идентификатор = ?(ОписаниеОбъекта77.ТипМетаданного = "Справочник","ID", "IDDoc");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ID_77
	|ИЗ
	|	"+СтрокаМетаданные1С8+" КАК Таблица
	|ГДЕ
	|	Таблица.ID_77 <> """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтрокаУсловие = "";
	
	Пока Выборка.Следующий() цикл
		Если ЗначениеЗаполнено(Выборка.ID_77) тогда
			СтрокаУсловие = СтрокаУсловие + "'"+ Выборка.ID_77 +"',";
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(СтрокаУсловие) тогда
		СтрокаУсловие = Лев(СтрокаУсловие,СтрДлина(СтрокаУсловие)-1);
		СтрокаУсловие = "WHERE NOT "+Идентификатор+" IN (" + СтрокаУсловие + ")";
	КонецЕсли;
	
	СтрокаПоля = "";
	Для каждого строка из ОписаниеОбъекта77.Реквизиты цикл
		Если ЗначениеЗаполнено(Строка.ИмяРеквизитаSQL) тогда
			СтрокаПоля = СтрокаПоля + Строка.ИмяРеквизитаSQL+" AS " + Строка.ИмяРеквизита+",";	
		КонецЕсли;
	КонецЦикла;
	СтрокаПоля = Лев(СтрокаПоля,СтрДлина(СтрокаПоля)-1);
	ТекстЗапросаSQL = 
	"SELECT"+?(РазмерПорции <> 0," TOP " + Формат(РазмерПорции,"ЧДЦ=; ЧН=0; ЧГ=0"),"") +" 
	|"+СтрокаПоля+"
	|  FROM [Nagat].."+ОписаниеОбъекта77.ИмяSQL+" (nolock)
	|"+СтрокаУсловие;
	
	Возврат ТекстЗапросаSQL;
	
КонецФункции

Процедура ЗагрузитьОбъектПоСтроке(ОписаниеОбъекта77,Строка,ТаблицаРеквизитов, ТаблицаСвязанныхРеквизитов,КолонкиТаблицы,МассивПримитивныхРеквизитов,МассивИменРеквизитов, Ссылка, СтруктураТабличнойЧасти,ТаблицаЗСЯ = Неопределено)
	
	НовыйЭлемент = Неопределено;
	ЭтоНовыйЭлемент = Ложь;
	ЭтоЗаказ = ТипЗнч(Ссылка) = Тип("ДокументСсылка.Заказ");
	Если не Ссылка.Пустая() тогда
		НовыйЭлемент = Ссылка.ПолучитьОбъект();
		ЭтоНовыйЭлемент = Истина;
	КонецЕсли;
	Если НовыйЭлемент = неопределено тогда
		Если ОписаниеОбъекта77.ТипМетаданного = "Справочник" тогда
			СоздатьГруппу = Ложь;
			Если КолонкиТаблицы.Найти("ЭтоГруппа") <> неопределено тогда
				СоздатьГруппу =  Строка.ЭтоГруппа=1;
			КонецЕсли;
			Если СоздатьГруппу тогда
				НовыйЭлемент = Справочники[ОписаниеОбъекта77.ИмяМетаданного].СоздатьГруппу();
			Иначе
				НовыйЭлемент = Справочники[ОписаниеОбъекта77.ИмяМетаданного].СоздатьЭлемент();
			КонецЕсли;
			НовыйЭлемент.УстановитьСсылкуНового(Ссылка);
		ИначеЕсли ОписаниеОбъекта77.ТипМетаданного = "Документ" тогда
			НовыйЭлемент = Документы[ОписаниеОбъекта77.ИмяМетаданного].СоздатьДокумент();
			НовыйЭлемент.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
	КонецЕсли;
	НовыйЭлемент.ОбменДанными.Загрузка = Истина;
	
	Если ОписаниеОбъекта77.ИмяМетаданного = "Партии" тогда
		СтрокаКлиент = ТаблицаСвязанныхРеквизитов.Найти("Клиент","ИмяРеквизита");
	КонецЕсли;
	
	
	Для каждого СтрокаРеквизит из ТаблицаРеквизитов цикл
		Тип = Неопределено;
		Если МассивПримитивныхРеквизитов.Свойство(СтрокаРеквизит.ИмяРеквизита,Тип) Тогда 
			Если НовыйЭлемент[СтрокаРеквизит.ИмяРеквизита] = null тогда
				Продолжить;
			КонецЕсли;
			Если Тип = Тип("Строка") тогда
				НовыйЭлемент[СтрокаРеквизит.ИмяРеквизита]=СокрЛП(Строка[СтрокаРеквизит.ИмяРеквизита]);
			ИначеЕсли Тип = Тип("Дата") тогда
				ЗначениеДата = Строка[СтрокаРеквизит.ИмяРеквизита];
				Если ЗначениеДата = Дата("17530101") тогда
					ЗначениеДата = Дата("00010101");
				КонецЕсли;
				НовыйЭлемент[СтрокаРеквизит.ИмяРеквизита]= ЗначениеДата;
			ИначеЕсли Тип = Тип("Булево") тогда
				Если СтрокаРеквизит.ИмяРеквизита = "ЭтоГруппа" тогда
					Продолжить;
				КонецЕсли;
				ЗначениеБулево = Строка[СтрокаРеквизит.ИмяРеквизита] = 1;
				НовыйЭлемент[СтрокаРеквизит.ИмяРеквизита]= ЗначениеБулево;				
			Иначе
				НовыйЭлемент[СтрокаРеквизит.ИмяРеквизита]= Строка[СтрокаРеквизит.ИмяРеквизита];
			КонецЕсли;
		ИначеЕсли МассивИменРеквизитов.Найти(СтрокаРеквизит.ИмяРеквизита) <> Неопределено тогда
			Если НовыйЭлемент[СтрокаРеквизит.ИмяРеквизита] = null тогда
				Продолжить;
			КонецЕсли;
			СтрокаСсылочногоРеквизита = ТаблицаСвязанныхРеквизитов.Найти(СтрокаРеквизит.ИмяРеквизита,"ИмяРеквизита");
			Если СтрокаСсылочногоРеквизита <> неопределено тогда
				ТаблицаСоответствия = СтрокаСсылочногоРеквизита.ТаблицаСсылок;
				Если ЗначениеЗаполнено(ТаблицаСоответствия) тогда
					ИДПоиск = Прав(Строка[СтрокаРеквизит.ИмяРеквизита],9);
					СтрокаСоответствия = ТаблицаСоответствия.Найти(ИДПоиск,"ID_77");
					Если СтрокаСоответствия <> неопределено тогда
						НовыйЭлемент[СтрокаРеквизит.ИмяРеквизита] = СтрокаСоответствия.Ссылка;   
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СтрокаРеквизит.СвязанныйТип = ОписаниеОбъекта77 тогда
				НовыйЭлемент[СтрокаРеквизит.ИмяРеквизита] = НовыйЭлемент.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеОбъекта77.ИмяМетаданного = "Партии" тогда
		Если СтрокаКлиент <> неопределено тогда
			СтрокаКлиент = СтрокаКлиент.ТаблицаСсылок.Найти(Строка.ID_77,"id");
			Если СтрокаКлиент <> неопределено тогда
				НовыйЭлемент.Клиент = СтрокаКлиент.Ссылка;		
			КонецЕсли;
		КонецЕсли;
		Если не ЗначениеЗаполнено(НовыйЭлемент.Фирма) тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Фирмы.Ссылка
			|ИЗ
			|	Справочник.Фирмы КАК Фирмы
			|ГДЕ
			|	Фирмы.ID_77 = &ID_77";
			Запрос.УстановитьПараметр("ID_77",Строка.Фирма);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() цикл
				НовыйЭлемент.Фирма = Выборка.Ссылка;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	
	//Если ОписаниеОбъекта77.ТипМетаданного = "Номенклатура"
	//	и ТаблицаЗСЯ <> НЕОПРЕДЕЛЕНО и не СоздатьГруппу тогда
	//	Для каждого строка из ТаблицаЗСЯ цикл
	//		//НоваяСтрокаЗСЯ = НовыйЭлемент.ЗСЯ.Добавить();
	//		//НоваяСтрокаЗСЯ.Склад = константы.АдресХраненияТекущейБазы.Получить().ОсновнойСклад;
	//		//НоваяСтрокаЗСЯ.Зона = строка.z;
	//		//НоваяСтрокаЗСЯ.Стеллаж = строка.s;
	//		//НоваяСтрокаЗСЯ.Ячейка = строка.j;
	//		//МенеджерЗаписи = РегистрыСведений.ЗСЯНоменклатуры.СоздатьМенеджерЗаписи();
	//		//МенеджерЗаписи.Номенклатура = НовыйЭлемент.Ссылка;
	//		//МенеджерЗаписи.Склад = Справочники.МестаХранения.НайтиПоРеквизиту("ID_77",строка.Sklad);
	//		//МенеджерЗаписи.Зона = строка.z;
	//		//МенеджерЗаписи.Стеллаж = строка.s;
	//		//МенеджерЗаписи.Ячейка = строка.j;
	//		//МенеджерЗаписи.Записать();			
	//	КонецЦикла;
	//КонецЕсли;
	
	НовыйЭлемент.ID_77 = Строка.ID_77;
	Если ОписаниеОбъекта77.ТипМетаданного = "Документ" тогда
		НовыйЭлемент.Дата = Строка.Дата;
		НовыйЭлемент.Номер = СокрЛП(Строка.Номер);
		
		Попытка
			Если ОписаниеОбъекта77.ИмяМетаданного = "Заказ" и ОписаниеОбъекта77.ТипМетаданного = "Документ" тогда
				ТекстSQL = 
				"SET NOCOUNT ON
				|SELECT [docno]
				|      ,[d_doc]
				|      ,[d_end]
				|  FROM [CourierDS].[dbo].[t_self_delivery]
				|WHERE [docno] = "+Строка(НовыйЭлемент.Номер)+"   AND [d_doc] = '"+Формат(НовыйЭлемент.Дата,"ДФ=yyyy-dd-MM")+"'";
				ТаблицаСроков = РаботаСSQL.ВыполнитьЗапросSQL(ТекстSQL,,Справочники.НастройкиПодключения.БазаCourierDS,Истина);
				Для каждого СтрокаСроков из ТаблицаСроков цикл
					НовыйЭлемент.СрокХранения = СтрокаСроков.d_end;
					ТекстSQL = 
					"SET NOCOUNT ON
					|UPDATE [CourierDS].[dbo].[t_self_delivery]
					|   SET Changed = 0
					|WHERE [docno] = "+Строка(НовыйЭлемент.Номер)+"   AND [d_doc] = '"+Формат(НовыйЭлемент.Дата,"ДФ=yyyy-dd-MM")+"'";
					РаботаСSQL.ВыполнитьЗапросSQL(ТекстSQL,,Справочники.НастройкиПодключения.БазаCourierDS,Ложь);
				КонецЦикла;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если СтруктураТабличнойЧасти <> Неопределено тогда
			ИмяТаблицы = СтруктураТабличнойЧасти.ИмяТаблицы;
			НовыйЭлемент[ИмяТаблицы].Очистить();
			СтрокиТабличнойЧасти = СтруктураТабличнойЧасти.Таблица.НайтиСтроки(Новый Структура("ID_77",НовыйЭлемент.ID_77));
			ТаблицаЗаказа = Новый ТаблицаЗначений;
			МассивДобавляемыхСтрок = Новый Массив;
			Если ЭтоЗаказ и не ЭтоНовыйЭлемент и СтруктураТабличнойЧасти.ИмяТаблицы = "Товар" 
				и НовыйЭлемент.ТочкаСамовывоза.АдресХранения = НовыйЭлемент.Отдел.АдресХранения тогда	
				ТаблицаЗаказа = Ссылка.Товар.Выгрузить();
			КонецЕсли;
			Для каждого строкаТаблицы из СтрокиТабличнойЧасти цикл
				НоваяСтрока = НовыйЭлемент[ИмяТаблицы].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				Если ЭтоЗаказ тогда
					НоваяСтрока.КоличествоПриОформлении = НоваяСтрока.Количество;
				КонецЕсли;
			КонецЦикла;
			Для каждого строкаЗаказ из ТаблицаЗаказа цикл
				СтрокиТекЭлемента = НовыйЭлемент.Товар.НайтиСтроки(Новый Структура("Партия",строкаЗаказ.Партия));
				Если СтрокиТекЭлемента.Количество() = 0 тогда
					Для каждого строкаТекЭлемента из СтрокиТекЭлемента цикл
						строкаТекЭлемента.КоличествоПриОформлении = строкаЗаказ.КоличествоПриОформлении;
					КонецЦикла;
				Иначе
					МассивДобавляемыхСтрок.Добавить(строкаЗаказ);	
				КонецЕсли;
			КонецЦикла;
			Для каждого СтрокаДобавляемая из МассивДобавляемыхСтрок цикл
				СтрокаЗаказ = НовыйЭлемент.Товар.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗаказ,СтрокаДобавляемая);
			КонецЦикла;
		КонецЕсли;
		НовыйЭлемент.ДополнительныеСвойства.Вставить("ЭтоОбмен");
		НовыйЭлемент.Записать(РежимЗаписиДокумента.Запись);
		Попытка
			НовыйЭлемент.ОбменДанными.Загрузка = Ложь;
			НовыйЭлемент.ДополнительныеСвойства.Вставить("ЭтоОбмен");
			НовыйЭлемент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
	Иначе
		НовыйЭлемент.ОбменДанными.Загрузка = Истина;
		НовыйЭлемент.ДополнительныеСвойства.Вставить("ЭтоОбмен");
		НовыйЭлемент.Записать();		
		НовыйЭлемент.ОбменДанными.Загрузка = Ложь;
		ОбменАлгоритмыРИБД.Обмен_РИБДПриЗаписи(НовыйЭлемент,Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьОбъектыЗависимыеОбъекты(ОписаниеОбъекта77,МассивСвязанныхЭлементов,ТаблицаДанных)
	ТаблицаСвязанныхЭлементов = ПолучитьТаблицуСвязанныхЭлементов(ОписаниеОбъекта77);
	
	Если МассивСвязанныхЭлементов = неопределено или ТипЗнч(МассивСвязанныхЭлементов) <> Тип("Массив")
		Или ТипЗнч(ТаблицаДанных) <> Тип("ТаблицаЗначений") тогда
		Возврат;
	ИначеЕсли МассивСвязанныхЭлементов.Количество() = 0 тогда
		ТаблицаСвязанныхЭлементовДляЗагрузки = ТаблицаСвязанныхЭлементов;
	Иначе
		СписокСтрокДляЗагрузки = Новый Массив;
		Для Каждого строка из ТаблицаСвязанныхЭлементов Цикл
			Если МассивСвязанныхЭлементов.Найти(Строка.СвязанныйОбъект) <> Неопределено Тогда
				СписокСтрокДляЗагрузки.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		Если СписокСтрокДляЗагрузки.Количество() = 0 тогда
			Возврат;
		КонецЕсли;
		ТаблицаСвязанныхЭлементовДляЗагрузки = ТаблицаСвязанныхЭлементов.Скопировать(СписокСтрокДляЗагрузки);
	КонецЕсли;
	Если ТаблицаДанных.Колонки.Найти("ID_77") = неопределено или ТаблицаДанных.Количество() = 0 тогда 
		Возврат;
	КонецЕсли;
	МассивID = ТаблицаДанных.ВыгрузитьКолонку("ID_77");
	
	Для каждого строка из ТаблицаСвязанныхЭлементовДляЗагрузки цикл
		ТекстЗапросаSQL = ПолучитьSQLЗапросПоID(строка.СвязанныйОбъект,МассивID,строка.ПолеПоиска);
		ТаблицаДляID = РаботасSQL.ВыполнитьЗапросSQL(ТекстЗапросаSQL,,Справочники.НастройкиПодключения.БазаCourierDS,Истина);
		Если таблицаДляID.Количество() = 0 тогда 
			Продолжить;
		КонецЕсли;
		МассивIDДляЗагрузки = ТаблицаДляID.ВыгрузитьКолонку("ID_77");
		ЗагрузкаДанныеПоМетаданным(строка.СвязанныйОбъект.ТипМетаданного, строка.СвязанныйОбъект.ИмяМетаданного,,МассивIDДляЗагрузки);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуСвязанныхЭлементов(ОписаниеОбъекта77)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Обмен_ОписаниеОбъектов77Реквизиты.Ссылка КАК СвязанныйОбъект,
	|	Обмен_ОписаниеОбъектов77Реквизиты.ИмяРеквизитаSQL КАК ПолеПоиска
	|ИЗ
	|	Справочник.Обмен_ОписаниеОбъектов77.Реквизиты КАК Обмен_ОписаниеОбъектов77Реквизиты
	|ГДЕ
	|	Обмен_ОписаниеОбъектов77Реквизиты.СвязанныйТип = &СвязанныйТип
	|	И Обмен_ОписаниеОбъектов77Реквизиты.ИмяРеквизита = ""Владелец""
	|
	|СГРУППИРОВАТЬ ПО
	|	Обмен_ОписаниеОбъектов77Реквизиты.Ссылка,
	|	Обмен_ОписаниеОбъектов77Реквизиты.ИмяРеквизитаSQL";
	
	Запрос.УстановитьПараметр("СвязанныйТип", ОписаниеОбъекта77);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция ПолучитьКлиентовПартии(МассивIDПартии)
	СтрокаУсловие = "";
	Для каждого ID из МассивIDПартии цикл
		Если ЗначениеЗаполнено(ID) тогда
			СтрокаУсловие = СтрокаУсловие + "'"+ ID +"',";
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(СтрокаУсловие) тогда
		СтрокаУсловие = Лев(СтрокаУсловие,СтрДлина(СтрокаУсловие)-1);
	КонецЕсли;
	
	
	ТекстЗапроса = 	
	"SELECT part.ID as id_Part, prih.SP388 as kontr
	|FROM Nagat..SC396 part (nolock)
	|INNER JOIN  Nagat..DH386 prih (nolock) on part.SP411 = prih.IDDOC
	|WHERE part.ID in("+СтрокаУсловие+")";
	ТаблицаКонтрагентов = РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапроса,,Справочники.НастройкиПодключения.БазаCourierDS,Истина);
	
	ТаблицаКонтрагентовТипизированный = Новый ТаблицаЗначений;
	ТаблицаКонтрагентовТипизированный.Колонки.Добавить("id_Part",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9,ДопустимаяДлина.Фиксированная)));
	ТаблицаКонтрагентовТипизированный.Колонки.Добавить("kontr",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9,ДопустимаяДлина.Фиксированная)));
	Для каждого строка из ТаблицаКонтрагентов цикл
		СтрокаТЗ = ТаблицаКонтрагентовТипизированный.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗ,Строка);		
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрагентыПартии.kontr,
	|	КонтрагентыПартии.id_Part
	|ПОМЕСТИТЬ КонтрПартии
	|ИЗ
	|	&КонтрагентыПартии КАК КонтрагентыПартии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрПартии.id_Part КАК id,
	|	МАКСИМУМ(ЕСТЬNULL(Контрагенты.Ссылка, ЗНАЧЕНИЕ(справочник.Партии.ПустаяСсылка))) КАК Ссылка
	|ИЗ
	|	КонтрПартии КАК КонтрПартии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО КонтрПартии.kontr = Контрагенты.ID_77
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтрПартии.id_Part";
	
	Запрос.УстановитьПараметр("КонтрагентыПартии",ТаблицаКонтрагентовТипизированный);
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

//Хардкод, надо подумать как обойтись без него
Функция ПолучитьТаблицуЗСЯ(МассивIDНоменклатуры) Экспорт
	
	Если МассивIDНоменклатуры.Количество() > 0 тогда
		Условие ="(";
		Для каждого ID из МассивIDНоменклатуры цикл
			Условие = Условие+"'"+ID+"',";		
		КонецЦикла;
		Условие = Лев(Условие,СтрДлина(Условие)-1)+")";
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
	ТекстSQLЗапроса = 
	"set nocount on
	|SELECT TOP 100
	| c.PARENTEXT as nomID, zone.descr as z, c.sp4165 as s, c.sp4164 as j
	|from nagat..SC4161 c (NOLOCK)
	|inner JOIN nagat..SC2411 zone (NOLOCK) ON c.sp4164 = zone.id   
	|where 
	|c.PARENTEXT in" + Условие + " and c.SP4163='"+ ПараметрыСеанса.ОсновнойСклад.ID_77+"'";
	
	ТаблицаЗСЯ = РаботаСSQL.ВыполнитьЗапросSQL(ТекстSQLЗапроса,,Справочники.НастройкиПодключения.БазаCourierDS,Истина);	
	
	Возврат ТаблицаЗСЯ;
	
КонецФункции		

Функция ПолучитьЦенПрайсЛиста(МассивIDЦенПрайсЛиста) Экспорт
	
	
	Если МассивIDЦенПрайсЛиста.Количество() > 0 тогда
		Условие ="(";
		Для каждого ID из МассивIDЦенПрайсЛиста цикл
			Условие = Условие+"'"+ID+"',";		
		КонецЦикла;
		Условие = Лев(Условие,СтрДлина(Условие)-1)+")";
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
	ТекстSQLЗапроса = 
	"SET NOCOUNT ON 
	|	
	|SELECT [OBJID],
	|       [ID],
	|       [DATE],
	|       [VALUE]  AS Цена,
	|       '0' AS      ФиксЦена,
	|       '0' AS      ПроцентНаценки,
	|       '0' AS      ПроцентНаценкиМакс,
	|       '0' AS СпецЦена
	|       INTO        #prices
	|FROM   [Nagat].[dbo].[_1SCONST]
	|WHERE  [OBJID]  IN " + Условие + "
	|       AND [DATE] < GETDATE()
	|       AND (id = 3208)
	|		
	|		UNION
	|		
	|SELECT [OBJID],
	|       [ID],
	|       [DATE],
	|       '0',
	|       [VALUE],
	|       '0',
	|       '0',
	|       '0' 
	|       -- ,'0'
	|FROM   [Nagat].[dbo].[_1SCONST]
	|WHERE  [OBJID]  IN " + Условие + "
	|       AND [DATE] < GETDATE()
	|       AND (id = 3239)
	|		
	|		UNION
	|		
	|SELECT [OBJID],
	|       [ID],
	|       [DATE],
	|       '0',
	|       '0',
	|       [VALUE],
	|       '0',
	|       '0' 
	|       --    ,'0'
	|FROM   [Nagat].[dbo].[_1SCONST]
	|WHERE  [OBJID]  IN " + Условие + "
	|       AND [DATE] < GETDATE()
	|       AND (id = 3209)
	|		
	|		UNION
	|		
	|SELECT [OBJID],
	|       [ID],
	|       [DATE],
	|       '0',
	|       '0',
	|       '0',
	|       [VALUE],
	|       '0'
	|       --   ,'0'
	|FROM   [Nagat].[dbo].[_1SCONST]
	|WHERE  [OBJID]  IN " + Условие + "
	|       AND [DATE] < GETDATE()
	|       AND (id = 3210)
	|		
	|		UNION
	|		
	|SELECT [OBJID],
	|       [ID],
	|       [DATE],
	|       '0',
	|       '0',
	|       '0',
	|       '0',
	|       [VALUE] 
	|       --   ,'0'
	|FROM   [Nagat].[dbo].[_1SCONST]
	|WHERE  [OBJID]  IN " + Условие + "
	|       AND [DATE] < GETDATE()
	|       AND (id = 3240)
	|		
	|		
	|		
	|SELECT [OBJID],
	|       [ID],
	|       [DATE],
	|       CAST([VALUE]  AS NUMERIC(10, 2)) AS СпецПредложение
	|       INTO #specprice
	|FROM   [Nagat].[dbo].[_1SCONST]
	|WHERE  [OBJID]  IN " + Условие + "
	|       AND [DATE] < GETDATE()
	|       AND (id = 3328)
	|		
	|SELECT [OBJID],
	|       [ID],
	|       MAX([DATE]) AS DATE
	|       INTO #specpriceMaxDate
	|FROM   #specprice
	|GROUP BY
	|       [OBJID],
	|       [ID]
	|		
	|SELECT sp.[OBJID],
	|       sp.[ID],
	|       sp.[DATE],
	|       sp.СпецПредложение
	|       INTO #specpriceMaxDateValue
	|FROM   #specprice sp
	|       INNER JOIN #specpriceMaxDate spmd
	|            ON  sp.[OBJID] = spmd.[OBJID]
	|            AND sp.[DATE] = spmd.[DATE]
	|		
	|SELECT [OBJID],
	|       [DATE]                             AS Период,
	|       MAX(CAST(Цена AS NUMERIC(10, 2)))  AS Цена,
	|       MAX(CAST(ФиксЦена AS NUMERIC(10, 2))) AS ФиксЦена,
	|       MAX(CAST(ПроцентНаценки AS NUMERIC(10, 2))) AS ПроцентНаценки,
	|       MAX(CAST(ПроцентНаценкиМакс AS NUMERIC(10, 2))) AS ПроцентНаценкиМакс,
	|       MAX(CAST(СпецЦена AS NUMERIC(10, 2))) AS СпецЦена
	|       INTO #pricesAll
	|FROM   #prices
	|GROUP BY
	|       [OBJID],
	|       [DATE]
	|		
	|SELECT [OBJID],
	|       MAX(Период) AS Период
	|       INTO #pricesMAX
	|FROM   #pricesAll
	|GROUP BY
	|       [OBJID]
	|		
	|SELECT pa.[OBJID],
	|       pa.Период,
	|       pa.Цена,
	|       pa.ФиксЦена,
	|       pa.ПроцентНаценки,
	|       pa.ПроцентНаценкиМакс,
	|       pa.СпецЦена,
	|       isnull(specpriceMaxDateValue.СпецПредложение,0) AS СпецПредложение
	|FROM   #pricesAll pa
	|       INNER JOIN #pricesMAX pm
	|            ON  pa.[OBJID] = pm.[OBJID]
	|            AND pa.Период = pm.Период
	|       LEFT JOIN #specpriceMaxDateValue specpriceMaxDateValue
	|            ON  pa.[OBJID] = specpriceMaxDateValue.[OBJID]
	|            AND pa.Период = pm.Период 
	|			
	|		
	|		DROP TABLE #prices, #pricesMAX, #pricesAll, #specprice, 
	|#specpriceMaxDate, #specpriceMaxDateValue";
	
	
	ТаблицаЦен = РаботаСSQL.ВыполнитьЗапросSQL(ТекстSQLЗапроса,,Справочники.НастройкиПодключения.БазаCourierDS,Истина);	
	
	Возврат ТаблицаЦен;	
	
КонецФункции

Процедура ЗагрузитьЦеныПрайсЛиста(МассивНоменклатуры = неопределено) Экспорт
	Сообщить(ТекущаяДата());
	Запрос = Новый ЗАпрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦенаНоменклатуры.ЦенаПрайсЛиста
	|ПОМЕСТИТЬ втцены
	|ИЗ
	|	РегистрСведений.ЦенаНоменклатуры КАК ЦенаНоменклатуры
	|ГДЕ
	|	ЦенаНоменклатуры.Период = &Период
	|	И (ЦенаНоменклатуры.Цена <> 0
	|			ИЛИ ЦенаНоменклатуры.СпецЦена <> 0
	|			ИЛИ ЦенаНоменклатуры.СпецПредложение <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныПрайсЛиста.ID_77,
	|	ЦеныПрайсЛиста.Ссылка
	|ИЗ
	|	РегистрСведений.НастройкаСозданияЦеныПартии.СрезПоследних(&Период, ) КАК НастройкаСозданияЦеныПартииСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЦеныПрайсЛиста КАК ЦеныПрайсЛиста
	|		ПО НастройкаСозданияЦеныПартииСрезПоследних.РегионРаботы = ЦеныПрайсЛиста.РегионРаботы
	|			И НастройкаСозданияЦеныПартииСрезПоследних.ТипЦены = ЦеныПрайсЛиста.ТипЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ втцены КАК втцены
	|		ПО (ЦеныПрайсЛиста.Ссылка = втцены.ЦенаПрайсЛиста)
	|ГДЕ
	|	(ЦеныПрайсЛиста.Владелец В (&МассивНоменклатуры)
	|			ИЛИ &НеЗаполненМассив
	|				И втцены.ЦенаПрайсЛиста ЕСТЬ NULL )";
	Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("НеЗаполненМассив", ?(МассивНоменклатуры = неопределено,Истина,Ложь));
	
	ТаблицаЦПЛ = Запрос.Выполнить().Выгрузить();
	
	ИД = 0;
	МассивСтрокЦПЛ = Новый Массив;
	НаборЗаписей = РегистрыСведений.ЦенаНоменклатуры.СоздатьНаборЗаписей();
	Для каждого строка из ТаблицаЦПЛ цикл
		МассивСтрокЦПЛ.Добавить(Строка);
		Если ИД = 1000 тогда
			ТаблицаЦПЛПорция = ТаблицаЦПЛ.Скопировать(МассивСтрокЦПЛ);
			МассивIDЦенПрайсЛиста = ТаблицаЦПЛПорция.ВыгрузитьКолонку("ID_77");
			ТаблицаЦен = ПолучитьЦенПрайсЛиста(МассивIDЦенПрайсЛиста);
			ТаблицаПоследнихЗаписей = ПолучитьТаблицуПоследнихNЗаписейРегистраЦеныНоменклатуры(ТаблицаЦен.ВыгрузитьКолонку("OBJID"),4);
			Для каждого СтрокаЦен из ТаблицаЦен цикл
				СтрокаПорция = ТаблицаЦПЛПорция.Найти(СтрокаЦен.OBJID,"ID_77");
				//МенеджерЗаписиРегистраЦен.ЦенаПрайсЛиста = СтрокаПорция.Ссылка;	
				//СтрокаЦен = ТаблицаЦен.Найти(СтрокаПорция.ID_77,"OBJID");
				Если ЗначениеЗаполнено(СтрокаПорция) тогда
					НаборЗаписей.Очистить();
					ЦенаПрайсЛиста = СтрокаПорция.Ссылка; 
					НаборЗаписей.Отбор.ЦенаПрайсЛиста.Значение = ЦенаПрайсЛиста;
					НаборЗаписей.Отбор.ЦенаПрайсЛиста.Использование = Истина;
					ТабЗаписей = ТаблицаПоследнихЗаписей.Скопировать(Новый Структура("ЦенаПрайсЛиста",ЦенаПрайсЛиста));
					СтрокаТабЗаписей = ТабЗаписей.Найти(СтрокаЦен.Период,"Период");
					Если СтрокаТабЗаписей = неопределено тогда
						СтрокаТабЗаписей = ТабЗаписей.Добавить();
					КонецЕсли;
						
					ЗаполнитьЗначенияСвойств(СтрокаТабЗаписей,СтрокаЦен);
					СтрокаТабЗаписей.ЦенаПрайсЛиста = ЦенаПрайсЛиста;
						
					НаборЗаписей.Загрузить(ТабЗаписей);
					
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЦикла;
			ИД = 0;
			МассивСтрокЦПЛ.Очистить();
		КонецЕсли;
		ИД = ИД+1;
	КонецЦикла;     
	Если МассивСтрокЦПЛ.Количество() > 0 тогда
		ТаблицаЦПЛПорция = ТаблицаЦПЛ.Скопировать(МассивСтрокЦПЛ);
			МассивIDЦенПрайсЛиста = ТаблицаЦПЛПорция.ВыгрузитьКолонку("ID_77");
			ТаблицаЦен = ПолучитьЦенПрайсЛиста(МассивIDЦенПрайсЛиста);
			ТаблицаПоследнихЗаписей = ПолучитьТаблицуПоследнихNЗаписейРегистраЦеныНоменклатуры(ТаблицаЦен.ВыгрузитьКолонку("OBJID"),4);
			Для каждого СтрокаЦен из ТаблицаЦен цикл
				СтрокаПорция = ТаблицаЦПЛПорция.Найти(СтрокаЦен.OBJID,"ID_77");
				//МенеджерЗаписиРегистраЦен.ЦенаПрайсЛиста = СтрокаПорция.Ссылка;	
				//СтрокаЦен = ТаблицаЦен.Найти(СтрокаПорция.ID_77,"OBJID");
				Если ЗначениеЗаполнено(СтрокаПорция) тогда
					НаборЗаписей.Очистить();
					ЦенаПрайсЛиста = СтрокаПорция.Ссылка; 
					НаборЗаписей.Отбор.ЦенаПрайсЛиста.Значение = ЦенаПрайсЛиста;
					НаборЗаписей.Отбор.ЦенаПрайсЛиста.Использование = Истина;
					ТабЗаписей = ТаблицаПоследнихЗаписей.Скопировать(Новый Структура("ЦенаПрайсЛиста",ЦенаПрайсЛиста));
					СтрокаТабЗаписей = ТабЗаписей.Найти(СтрокаЦен.Период,"Период");
					Если СтрокаТабЗаписей = неопределено тогда
						СтрокаТабЗаписей = ТабЗаписей.Добавить();
					КонецЕсли;
						
					ЗаполнитьЗначенияСвойств(СтрокаТабЗаписей,СтрокаЦен);
					СтрокаТабЗаписей.ЦенаПрайсЛиста = ЦенаПрайсЛиста;
						
					НаборЗаписей.Загрузить(ТабЗаписей);
					
					НаборЗаписей.Записать();

				КонецЕсли;
			КонецЦикла;
			ИД = 0;
			МассивСтрокЦПЛ.Очистить();	
	КонецЕсли;
	Сообщить(ТекущаяДата());	
КонецПроцедуры

Функция ПолучитьТаблицуПоследнихNЗаписейРегистраЦеныНоменклатуры(МассивID77,КоличествоЗаписей)
	ЗапросЗаписей = Новый Запрос;
	ЗапросЗаписей.Текст = 
	"ВЫБРАТЬ
	|	ЦеныПрайсЛиста.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втЦеныПрайсЛиста
	|ИЗ
	|	Справочник.ЦеныПрайсЛиста КАК ЦеныПрайсЛиста
	|ГДЕ
	|	ЦеныПрайсЛиста.ID_77 В(&МассивID77)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦенаНоменклатуры.Период КАК Период,
	|	ЦенаНоменклатуры.ЦенаПрайсЛиста КАК ЦенаПрайсЛиста,
	|	ЦенаНоменклатуры.Цена,
	|	ЦенаНоменклатуры.ФиксЦена,
	|	ЦенаНоменклатуры.ПроцентНаценки,
	|	ЦенаНоменклатуры.ПроцентНаценкиМакс,
	|	ЦенаНоменклатуры.СпецЦена,
	|	ЦенаНоменклатуры.СпецПредложение,
	|	1 КАК Счетчик
	|ПОМЕСТИТЬ ВТДанныеРегистра
	|ИЗ
	|	РегистрСведений.ЦенаНоменклатуры КАК ЦенаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЦеныПрайсЛиста КАК втЦеныПрайсЛиста
	|		ПО ЦенаНоменклатуры.ЦенаПрайсЛиста = втЦеныПрайсЛиста.Ссылка
	|ГДЕ
	|	ЦенаНоменклатуры.Период < &ТекущаяДата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЦенаПрайсЛиста,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеРегистра.Период КАК Период,
	|	ВТДанныеРегистра.ЦенаПрайсЛиста КАК ЦенаПрайсЛиста,
	|	СУММА(ЕСТЬNULL(ВТДанныеРегистраСчетчик.Счетчик, 0)) КАК ПорядковыйНомер
	|ПОМЕСТИТЬ втУпорядоченныеЗаписи
	|ИЗ
	|	ВТДанныеРегистра КАК ВТДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеРегистра КАК ВТДанныеРегистраСчетчик
	|		ПО ВТДанныеРегистра.ЦенаПрайсЛиста = ВТДанныеРегистраСчетчик.ЦенаПрайсЛиста
	|			И ВТДанныеРегистра.Период <= ВТДанныеРегистраСчетчик.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеРегистра.Период,
	|	ВТДанныеРегистра.ЦенаПрайсЛиста
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ЦенаПрайсЛиста
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеРегистра.Период,
	|	ВТДанныеРегистра.ЦенаПрайсЛиста,
	|	ВТДанныеРегистра.Цена,
	|	ВТДанныеРегистра.ФиксЦена,
	|	ВТДанныеРегистра.ПроцентНаценки,
	|	ВТДанныеРегистра.ПроцентНаценкиМакс,
	|	ВТДанныеРегистра.СпецЦена,
	|	ВТДанныеРегистра.СпецПредложение
	|ИЗ
	|	втУпорядоченныеЗаписи КАК втУпорядоченныеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеРегистра КАК ВТДанныеРегистра
	|		ПО втУпорядоченныеЗаписи.Период = ВТДанныеРегистра.Период
	|			И втУпорядоченныеЗаписи.ЦенаПрайсЛиста = ВТДанныеРегистра.ЦенаПрайсЛиста
	|			И втУпорядоченныеЗаписи.ПорядковыйНомер <= &КоличествоЗаписей";
	ЗапросЗаписей.УстановитьПараметр("МассивID77",МассивID77);
	ЗапросЗаписей.УстановитьПараметр("КоличествоЗаписей",КоличествоЗаписей);
	ЗапросЗаписей.УстановитьПараметр("ТекущаяДата",НачалоДня(ТекущаяДата()));
	Возврат ЗапросЗаписей.Выполнить().Выгрузить();
КонецФункции

//Выгрузка в 7.7
Функция ВыгрузитьПартию(Партия) Экспорт
	
	ОбПартия = Партия.ПолучитьОбъект();
	ТекстЗапроса = 
	"exec p_ins_part
	|@DESCR = '"+Партия.Наименование+"',
	|@PARENTEXT = '"+Партия.Владелец.ID_77+"',
	|@ISMARK = "+Формат(Партия.ПометкаУдаления,"БЛ=0; БИ=1")+",
	|@SP412 = '"+Прав(Партия.Серия,20)+"',
	|@SP413 = '"+Формат(Партия.ГоденДо,"ДФ=yyyyMMdd")+"',
	|@SP401 = "+Формат(Партия.ЦенаПроизводителя,"ЧРД=.; ЧН=0; ЧГ=")+",
	|@SP402 = "+Формат(Партия.РеестроваяЦена,"ЧРД=.; ЧН=0; ЧГ=")+",
	|@SP398 = "+Формат(Партия.ЗакупочнаяЦена,"ЧРД=.; ЧН=0; ЧГ=")+",
	|@SP400 = '"+Прав(Партия.ШтрихКод,13)+"',
	|@SP716 = '"+Прав(Партия.Сертификат,50)+"',
	|@SP717 = '"+Формат(Партия.СертификатДо,"ДФ=yyyyMMdd")+"',
	|@SP788 = '"+Прав(Партия.Выдан,100)+"',
	|@SP2055 = '"+?(ЗначениеЗаполнено(Партия.Производитель.ID_77),Партия.Производитель.ID_77,"     0   ")+"',
	|@SP3237 = '"+?(ЗначениеЗаполнено(Партия.СтавкаНДС.ID_77),Партия.СтавкаНДС.ID_77,"     0   ")+"',
	|@SP3238 = "+Формат(Партия.Спецпризнак,"БЛ=0; БИ=1")+",
	|@SP3779= "+Формат(Партия.Подарок,"БЛ=0; БИ=1")+",
	|@SP3946 = "+Формат(Партия.Комиссия,"БЛ=0; БИ=1")+",
	|@SP4206 = "+Формат(Партия.ТипДоступности,"ЧРД=.; ЧН=0; ЧГ=");
	ОписаниеОшибки = "";
	Результат = РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапроса,,Справочники.НастройкиПодключения.БазаCourierDS,Истина,ОписаниеОшибки);
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") тогда
		Для каждого строка из Результат цикл
			ОбПартия.ID_77 = строка.id;
		КонецЦикла;
		ОбПартия.Записать();
		Возврат Истина;
	Иначе
		Сообщить(ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

Функция ВыгрузитьПеремещение(Перемещение) Экспорт
	
	ОбПеремещение = Перемещение.ПолучитьОбъект();
	ТекстЗапроса = 
	"exec p_ins_perem
	|@SP541 = '"+Перемещение.Поставщик.ID_77+"',
	|@SP542 = '"+Перемещение.Получатель.ID_77+"',
	|@SP1147 = "+Формат(Перемещение.РазрешитьПродажу,"БЛ=0; БИ=1")+",
	|@SP1222 = "+Формат(Перемещение.БезУчетаДефектуры,"БЛ=0; БИ=1")+",
	|@SP1698 = "+Формат(Перемещение.ВведенАвтоматически,"БЛ=0; БИ=1")+",	
	|@SP4442 = '"+Перемещение.ВремяПечати+"',	
	|@SP4490 = 1";
	ОписаниеОшибки = "";
	Результат = РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапроса,,Справочники.НастройкиПодключения.БазаCourierDS,Истина,ОписаниеОшибки);
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") тогда
		Для каждого строка из Результат цикл
			ОбПеремещение.ID_77 = строка.iddoc;
			ОбПеремещение.Номер = строка.docno;
		КонецЦикла;
		ОбПеремещение.Записать(РежимЗаписиДокумента.Запись);
	Иначе
		Сообщить(ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;	
	
	ВыгрузитьТЧПеремещеня(Перемещение);
	
КонецФункции

Функция ВыгрузитьТЧПеремещеня(Перемещение) Экспорт
	
	Для каждого строка из Перемещение.Товары цикл
		ТекстЗапроса = 
		"exec p_ins_perem_tch
		|@iddoc = '"+Перемещение.ID_77+"',
		|@LINENO_ = '"+Формат(строка.НомерСтроки,"ЧГ=")+"',
		|@SP543 = '"+строка.Товар.ID_77+"',
		|@SP544 = '"+строка.Партия.ID_77+"',
		|@SP545 = "+Формат(строка.Количество,"ЧРД=,; ЧН=0; ЧГ=");
		ОписаниеОшибки = "";
		Результат = РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапроса,,Справочники.НастройкиПодключения.БазаCourierDS,,ОписаниеОшибки);
		Если ЗначениеЗаполнено(ОписаниеОшибки) тогда
			Сообщить(ОписаниеОшибки);
		КонецЕсли;	
	КонецЦикла;	
	
КонецФункции

Функция ВыгрузитьТоварПодЗаказ(СтруктураТовараПодЗаказ) Экспорт
	
	ТекстЗапроса = 
	"exec p_ins_TovarPodZakaz
	|	@ISMARK = 0,
	|	@SP2956 = '"+СтруктураТовараПодЗаказ.ИД77_Заказа+"',
	|	@SP2955 = '"+СтруктураТовараПодЗаказ.ИД77_Товар+"',
	|	@SP2957 = '',
	|	@SP2958 = "+Формат(СтруктураТовараПодЗаказ.НеХватило,"ЧЦ=; ЧРД=; ЧРГ=; ЧН=0; ЧГ=")+",
	|	@SP2959 = '',
	|	@SP3501 = '"+Формат(СтруктураТовараПодЗаказ.ГоденДо,"ДФ=yyyyMMdd")+"',
	|	@SP2960 = '"+справочники.СтатусыТовараПодЗаказ.НайтиПоКоду(5).ID_77+"',
	|	@SP2990 = 0,
	|	@SP2964 = "+Формат(СтруктураТовараПодЗаказ.Цена,"ЧДЦ=2; ЧН=0; ЧГ=")+",
	|	@SP2965 = '### Не найдено сборкой, заказ невозможен',
	|	@SP2966 = 1,
	|	@SP2991 = 0,
	|	@SP2996 = 0,
	|	@SP3042 = 0,
	|	@SP3043 = 0,
	|	@SP3271 = '17530101',
	|	@SP3505 = '',
	|	@SP3506 = '     0   ',
	|	@SP3580 = 0,
	|	@SP3582 = 0,
	|	@Part = '"+СтруктураТовараПодЗаказ.ИД77_Партии+"'";
	ОписаниеОшибки = "";
	Результат = РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапроса,,Справочники.НастройкиПодключения.БазаCourierDS,Истина,ОписаниеОшибки);
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") тогда
		Возврат Истина;
	Иначе
		Сообщить(ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

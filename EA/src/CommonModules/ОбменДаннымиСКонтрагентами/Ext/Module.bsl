
#Область ПрограммныйИнтерфейс

Функция ЗагрузитьСправочникТоваров(Контрагент, ПараметрыЗагрузки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = ОбменДаннымиСКонтрагентамиКлиентСервер.РезультатЗагрузкиДанных();
	Результат.ВсегоСтрок = ПараметрыЗагрузки.ДанныеЗагрузки.Количество();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Код                      КАК Код,
	|	НоменклатураКонтрагентов.Ссылка                   КАК Ссылка,
	|	НоменклатураКонтрагентов.Наименование             КАК Наименование,
	|	НоменклатураКонтрагентов.Производитель            КАК Производитель,
	|	НоменклатураКонтрагентов.Штрихкод                 КАК Штрихкод,
	|	СоответствиеНоменклатурыКонтрагентов.Номенклатура КАК Номенклатура
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыКонтрагентов КАК СоответствиеНоменклатурыКонтрагентов
	|		ПО НоменклатураКонтрагентов.Ссылка = СоответствиеНоменклатурыКонтрагентов.НоменклатураКонтрагента
	|ГДЕ
	|	НоменклатураКонтрагентов.Владелец = &Владелец";
	
	ТаблицаСправочника = Запрос.Выполнить().Выгрузить();
	ТаблицаСправочника.Индексы.Добавить("Код");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураКонтрагентовКодыПоставщиков.Ссылка    КАК Ссылка,
	|	НоменклатураКонтрагентовКодыПоставщиков.Код       КАК Код,
	|	НоменклатураКонтрагентовКодыПоставщиков.Поставщик КАК Поставщик
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов.КодыПоставщиков КАК НоменклатураКонтрагентовКодыПоставщиков
	|ГДЕ
	|	НоменклатураКонтрагентовКодыПоставщиков.Ссылка.Владелец = &Владелец";
	
	ТаблицаКодовПоставщиков = Запрос.Выполнить().Выгрузить();
	ТаблицаКодовПоставщиков.Индексы.Добавить("Ссылка");
	
	ДанныеЗагрузки = ПараметрыЗагрузки.ДанныеЗагрузки;
	ИдентификаторыПоставщиков = ПараметрыЗагрузки.ИдентификаторыПоставщиков;
	
	НомерСтроки = 0;
	Для Каждого СтруктураДанных Из ДанныеЗагрузки Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Если Не СтруктураДанных.Свойство("КодТовара") Или Не СтруктураДанных.Свойство("НаименованиеТовара") Тогда
			ТекстОшибки = НСтр("ru='Для загрузки справочника товаров должны быть обязательно указаны ""Код"" и ""Наименование""'");
			ДобавитьСтрокуСОшибкой(Результат, НомерСтроки, ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтруктураДанных.КодТовара) = Тип("Число") Тогда
			КодТовара = Формат(СтруктураДанных.КодТовара, "ЧГ=0");
		Иначе
			КодТовара = СокрЛП(СтруктураДанных.КодТовара);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КодТовара) Тогда
			ТекстОшибки = НСтр("ru='Не заполнен код товара'");
			ДобавитьСтрокуСОшибкой(Результат, НомерСтроки, ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаСправочника.Найти(КодТовара, "Код");
		Если СтрокаТаблицы = Неопределено Тогда
			Объект = Справочники.НоменклатураКонтрагентов.СоздатьЭлемент();
			Объект.Владелец = Контрагент;
			Объект.Код = КодТовара;
		Иначе
			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
				И Не ДанныеНоменклатурыИзменены(СтрокаТаблицы, СтруктураДанных, ТаблицаКодовПоставщиков, ИдентификаторыПоставщиков) Тогда
				Результат.ЗагруженоСтрок = Результат.ЗагруженоСтрок + 1;
				Продолжить;
			КонецЕсли;
			
			Объект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		ЭтоНовый = Не ЗначениеЗаполнено(Объект.Ссылка);
		
		Объект.Наименование = СокрЛП(СтруктураДанных.НаименованиеТовара);
		
		Если СтруктураДанных.Свойство("НаименованиеПроизводителя") И ЗначениеЗаполнено(СтруктураДанных.НаименованиеПроизводителя) Тогда
			Объект.Производитель = СокрЛП(СтруктураДанных.НаименованиеПроизводителя);
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("Штрихкод") И ЗначениеЗаполнено(СтруктураДанных.Штрихкод) Тогда
			Объект.Штрихкод = СокрЛП(СтруктураДанных.Штрихкод);
		КонецЕсли;
		
		Для Каждого КлючЗначение Из СтруктураДанных Цикл
			Если СтрНачинаетсяС(КлючЗначение.Ключ, "Поставщик") Тогда
				Если ЗначениеЗаполнено(КлючЗначение.Значение)
					И (ЭтоНовый Или Не ЕстьДанныеПоставщика(ИдентификаторыПоставщиков[КлючЗначение.Ключ], КлючЗначение.Значение, ТаблицаКодовПоставщиков, Объект.Ссылка)) Тогда
					
					Если ТипЗнч(КлючЗначение.Значение) = Тип("Число") Тогда
						КодПоставщика = Формат(КлючЗначение.Значение, "ЧГ=0");
					Иначе
						КодПоставщика = СокрЛП(КлючЗначение.Значение);
					КонецЕсли;
					
					СтрокаТЧ = Объект.КодыПоставщиков.Добавить();
					СтрокаТЧ.Код = КодПоставщика;
					СтрокаТЧ.Поставщик = ИдентификаторыПоставщиков[КлючЗначение.Ключ];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			Объект.Записать();
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ДобавитьСтрокуСОшибкой(Результат, НомерСтроки, ТекстОшибки);
			Продолжить;
		КонецПопытки;
		
		Номенклатура = Неопределено;
		Если ЭтоНовый Или Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Номенклатура = СопоставитьНоменклатуруКонтрагента(Объект);
		КонецЕсли;
		
		Если ЭтоНовый Тогда
			Результат.СозданныеЭлементы.Вставить(СтруктураДанных.КодТовара, Объект.Ссылка);
			
			СтрокаТаблицы = ТаблицаСправочника.Добавить();
			СтрокаТаблицы.Код           = КодТовара;
			СтрокаТаблицы.Ссылка        = Объект.Ссылка;
			СтрокаТаблицы.Наименование  = Объект.Наименование;
			СтрокаТаблицы.Производитель = Объект.Производитель;
			СтрокаТаблицы.Штрихкод      = Объект.Штрихкод;
			СтрокаТаблицы.Номенклатура  = Номенклатура;
		КонецЕсли;
		
		Результат.ЗагруженоСтрок = Результат.ЗагруженоСтрок + 1;
		
	КонецЦикла;
	
	СопоставитьНоменклатуруПоСвязкам77(Контрагент);
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьОстатки(Контрагент, ДанныеЗагрузки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = ОбменДаннымиСКонтрагентамиКлиентСервер.РезультатЗагрузкиДанных();
	Результат.ВсегоСтрок = ДанныеЗагрузки.Количество();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Код КАК Код,
	|	НоменклатураКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагентов.Владелец = &Владелец";
	
	ТаблицаСправочника = Запрос.Выполнить().Выгрузить();
	ТаблицаСправочника.Индексы.Добавить("Код");
	
	ДокументОбъект = Документы.ИмпортДанныхКонтрагентов.СоздатьДокумент();
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ДокументОбъект.Контрагент = Контрагент;
	
	НомерСтроки = 0;
	Для Каждого СтруктураДанных Из ДанныеЗагрузки Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Если Не СтруктураДанных.Свойство("КодТовара") Или (Не СтруктураДанных.Свойство("НачальныйОстаток") И Не СтруктураДанных.Свойство("КонечныйОстаток")) Тогда
			ТекстОшибки = НСтр("ru='Для загрузки остатков должно быть обязательно заполнено поле ""Код"" и начальный или конечный остаток'");
			ДобавитьСтрокуСОшибкой(Результат, НомерСтроки, ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтруктураДанных.КодТовара) = Тип("Число") Тогда
			КодТовара = Формат(СтруктураДанных.КодТовара, "ЧГ=0");
		Иначе
			КодТовара = СокрЛП(СтруктураДанных.КодТовара);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КодТовара) Тогда
			ТекстОшибки = НСтр("ru='Не заполнен код товара'");
			ДобавитьСтрокуСОшибкой(Результат, НомерСтроки, ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаСправочника.Найти(КодТовара, "Код");
		Если СтрокаТаблицы = Неопределено Тогда
			ТекстОшибки = НСтр("ru='Не найдена номенклатура контрагента с кодом %1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, СтруктураДанных.КодТовара);
			ДобавитьСтрокуСОшибкой(Результат, НомерСтроки, ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ = ДокументОбъект.Остатки.Добавить();
		СтрокаТЧ.НоменклатураКонтрагента = СтрокаТаблицы.Ссылка;
		
		Если СтруктураДанных.Свойство("НачальныйОстаток") Тогда
			СтрокаТЧ.НачальныйОстаток = СтруктураДанных.НачальныйОстаток;
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("КонечныйОстаток") Тогда
			СтрокаТЧ.КонечныйОстаток = СтруктураДанных.КонечныйОстаток;
		КонецЕсли;
		
		Результат.ЗагруженоСтрок = Результат.ЗагруженоСтрок + 1;
		
	КонецЦикла;
	
	Если ДокументОбъект.Остатки.Количество() > 0 Тогда
		ДокументОбъект.Записать();
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		Результат.ДокументСсылка = ДокументОбъект.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьЗакупки(Контрагент, ДанныеЗагрузки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = ОбменДаннымиСКонтрагентамиКлиентСервер.РезультатЗагрузкиДанных();
	Результат.ВсегоСтрок = ДанныеЗагрузки.Количество();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Код КАК Код,
	|	НоменклатураКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагентов.Владелец = &Владелец";
	
	ТаблицаСправочника = Запрос.Выполнить().Выгрузить();
	ТаблицаСправочника.Индексы.Добавить("Код");
	
	ТаблицаПоставщиков = ТаблицаПоставщиковДляПоиска();
	
	ДокументОбъект = Документы.ИмпортДанныхКонтрагентов.СоздатьДокумент();
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ДокументОбъект.Контрагент = Контрагент;
	
	НомерСтроки = 0;
	Для Каждого СтруктураДанных Из ДанныеЗагрузки Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Если Не СтруктураДанных.Свойство("КодТовара") Или Не СтруктураДанных.Свойство("Количество")
			Или (Не СтруктураДанных.Свойство("ИНН") И Не СтруктураДанных.Свойство("НаименованиеПоставщика"))Тогда
			ТекстОшибки = НСтр("ru='Для загрузки закупок должны быть обязательно указаны ""Код"", ""Количество"" и ИНН или наименование поставщика'");
			ДобавитьСтрокуСОшибкой(Результат, НомерСтроки, ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтруктураДанных.КодТовара) = Тип("Число") Тогда
			КодТовара = Формат(СтруктураДанных.КодТовара, "ЧГ=0");
		Иначе
			КодТовара = СокрЛП(СтруктураДанных.КодТовара);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КодТовара) Тогда
			ТекстОшибки = НСтр("ru='Не заполнен код товара'");
			ДобавитьСтрокуСОшибкой(Результат, НомерСтроки, ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтруктураДанных.Количество) Тогда
			ТекстОшибки = НСтр("ru='Не заполнено количество'");
			ДобавитьСтрокуСОшибкой(Результат, НомерСтроки, ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаСправочника.Найти(КодТовара, "Код");
		Если СтрокаТаблицы = Неопределено Тогда
			ТекстОшибки = НСтр("ru='Не найдена номенклатура контрагента с кодом %1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, СтруктураДанных.КодТовара);
			ДобавитьСтрокуСОшибкой(Результат, НомерСтроки, ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыПоставщиков = Неопределено;
		
		Если СтруктураДанных.Свойство("ИНН") И ЗначениеЗаполнено(СтруктураДанных.ИНН) Тогда
			СтрокаТаблицыПоставщиков = ТаблицаПоставщиков.Найти(СокрЛП(СтруктураДанных.ИНН), "ИНН");
		КонецЕсли;
		
		Если СтрокаТаблицыПоставщиков = Неопределено
			И СтруктураДанных.Свойство("НаименованиеПоставщика") И ЗначениеЗаполнено(СтруктураДанных.НаименованиеПоставщика) Тогда
			СтрокаТаблицыПоставщиков = ТаблицаПоставщиков.Найти(ВРег(СтрЗаменить(СтруктураДанных.НаименованиеПоставщика, " ", "")), "НаименованиеПоиск");
		КонецЕсли;
		
		Если СтрокаТаблицыПоставщиков = Неопределено Тогда
			Объект = Справочники.ПоставщикиКонтрагентов.СоздатьЭлемент();
			Объект.Владелец = Контрагент;
			Если СтруктураДанных.Свойство("ИНН") И ЗначениеЗаполнено(СтруктураДанных.ИНН) Тогда
				Объект.ИНН = СтруктураДанных.ИНН;
			КонецЕсли;
			Если СтруктураДанных.Свойство("НаименованиеПоставщика") И ЗначениеЗаполнено(СтруктураДанных.НаименованиеПоставщика) Тогда
				Объект.Наименование = СтруктураДанных.НаименованиеПоставщика;
			Иначе
				Объект.Наименование = НСтр("ru='Неизвестный поставщик (%1)'");
				Объект.Наименование = СтрШаблон(Объект.Наименование, Объект.ИНН);
			КонецЕсли;
			Объект.Записать();
			
			СтрокаТаблицыПоставщиков = ТаблицаПоставщиков.Добавить();
			СтрокаТаблицыПоставщиков.ИНН = Объект.ИНН;
			СтрокаТаблицыПоставщиков.Наименование = Объект.Наименование;
			СтрокаТаблицыПоставщиков.НаименованиеПоиск = ВРег(СтрЗаменить(СтрокаТаблицыПоставщиков.Наименование, " ", ""));
			СтрокаТаблицыПоставщиков.Ссылка = Объект.Ссылка;
		КонецЕсли;
		
		СтрокаТЧ = ДокументОбъект.Закупки.Добавить();
		СтрокаТЧ.НоменклатураКонтрагента = СтрокаТаблицы.Ссылка;
		СтрокаТЧ.ПоставщикКонтрагента = СтрокаТаблицыПоставщиков.Ссылка;
		СтрокаТЧ.Количество = СтруктураДанных.Количество;
		
		Если СтруктураДанных.Свойство("Дата") Тогда
			СтрокаТЧ.Дата = СтруктураДанных.Дата;
		КонецЕсли;
		
		Если СтруктураДанных.Свойство("ЦенаЗакупки") Тогда
			СтрокаТЧ.Цена = СтруктураДанных.ЦенаЗакупки;
		КонецЕсли;
		
		СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
		
		Результат.ЗагруженоСтрок = Результат.ЗагруженоСтрок + 1;
		
	КонецЦикла;
	
	Если ДокументОбъект.Закупки.Количество() > 0 Тогда
		ДокументОбъект.Записать();
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		Результат.ДокументСсылка = ДокументОбъект.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьПродажи(Контрагент, ДанныеЗагрузки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = ОбменДаннымиСКонтрагентамиКлиентСервер.РезультатЗагрузкиДанных();
	Результат.ВсегоСтрок = ДанныеЗагрузки.Количество();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Код КАК Код,
	|	НоменклатураКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагентов.Владелец = &Владелец";
	
	ТаблицаСправочника = Запрос.Выполнить().Выгрузить();
	ТаблицаСправочника.Индексы.Добавить("Код");
	
	ДокументОбъект = Документы.ИмпортДанныхКонтрагентов.СоздатьДокумент();
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ДокументОбъект.Контрагент = Контрагент;
	
	НомерСтроки = 0;
	Для Каждого СтруктураДанных Из ДанныеЗагрузки Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Если Не СтруктураДанных.Свойство("КодТовара") Или Не СтруктураДанных.Свойство("Количество") Тогда
			ТекстОшибки = НСтр("ru='Для загрузки продаж должны быть обязательно указаны ""Код"" и ""Количество""'");
			ДобавитьСтрокуСОшибкой(Результат, НомерСтроки, ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтруктураДанных.КодТовара) = Тип("Число") Тогда
			КодТовара = Формат(СтруктураДанных.КодТовара, "ЧГ=0");
		Иначе
			КодТовара = СокрЛП(СтруктураДанных.КодТовара);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КодТовара) Тогда
			ТекстОшибки = НСтр("ru='Не заполнен код товара'");
			ДобавитьСтрокуСОшибкой(Результат, НомерСтроки, ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		НачальныйОстаток = 0;
		КонечныйОстаток = 0;
		
		Если СтруктураДанных.Свойство("НачальныйОстаток") И ЗначениеЗаполнено(СтруктураДанных.НачальныйОстаток) Тогда
			НачальныйОстаток = СтруктураДанных.НачальныйОстаток;
		КонецЕсли;
		Если СтруктураДанных.Свойство("КонечныйОстаток") И ЗначениеЗаполнено(СтруктураДанных.КонечныйОстаток) Тогда
			КонечныйОстаток = СтруктураДанных.КонечныйОстаток;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтруктураДанных.Количество) И НачальныйОстаток = 0 И КонечныйОстаток = 0 Тогда
			ТекстОшибки = НСтр("ru='Не заполнено количество'");
			ДобавитьСтрокуСОшибкой(Результат, НомерСтроки, ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаСправочника.Найти(КодТовара, "Код");
		Если СтрокаТаблицы = Неопределено Тогда
			ТекстОшибки = НСтр("ru='Не найдена номенклатура контрагента с кодом %1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, СтруктураДанных.КодТовара);
			ДобавитьСтрокуСОшибкой(Результат, НомерСтроки, ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанных.Количество) Тогда
			СтрокаТЧ = ДокументОбъект.Продажи.Добавить();
			СтрокаТЧ.НоменклатураКонтрагента = СтрокаТаблицы.Ссылка;
			СтрокаТЧ.Количество = СтруктураДанных.Количество;
			
			Если СтруктураДанных.Свойство("Дата") Тогда
				СтрокаТЧ.Дата = СтруктураДанных.Дата;
			КонецЕсли;
			
			Если СтруктураДанных.Свойство("ЦенаЗакупки") Тогда
				СтрокаТЧ.ЦенаЗакупки = СтруктураДанных.ЦенаЗакупки;
			КонецЕсли;
			
			Если СтруктураДанных.Свойство("ЦенаПродажи") Тогда
				СтрокаТЧ.ЦенаПродажи = СтруктураДанных.ЦенаПродажи;
			КонецЕсли;
			
			СтрокаТЧ.СуммаЗакупки = СтрокаТЧ.Количество * СтрокаТЧ.ЦенаЗакупки;
			СтрокаТЧ.СуммаПродажи = СтрокаТЧ.Количество * СтрокаТЧ.ЦенаПродажи;
		КонецЕсли;
		
		Если НачальныйОстаток <> 0 Или КонечныйОстаток <> 0 Тогда
			СтрокаТЧ = ДокументОбъект.Остатки.Добавить();
			СтрокаТЧ.НоменклатураКонтрагента = СтрокаТаблицы.Ссылка;
			
			Если НачальныйОстаток <> 0 Тогда
				СтрокаТЧ.НачальныйОстаток = СтруктураДанных.НачальныйОстаток;
			КонецЕсли;
			
			Если КонечныйОстаток <> 0 Тогда
				СтрокаТЧ.КонечныйОстаток = СтруктураДанных.КонечныйОстаток;
			КонецЕсли;
		КонецЕсли;
		
		Результат.ЗагруженоСтрок = Результат.ЗагруженоСтрок + 1;
		
	КонецЦикла;
	
	Если ДокументОбъект.Продажи.Количество() > 0 Тогда
		ДокументОбъект.Записать();
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		Результат.ДокументСсылка = ДокументОбъект.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаПоставщиковДляПоиска() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоставщикиКонтрагентов.Ссылка       КАК Ссылка,
	|	ПоставщикиКонтрагентов.ИНН          КАК ИНН,
	|	ПоставщикиКонтрагентов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ПоставщикиКонтрагентов КАК ПоставщикиКонтрагентов
	|ГДЕ
	|	НЕ ПоставщикиКонтрагентов.ПометкаУдаления
	|	И (ПоставщикиКонтрагентов.ИНН <> """"
	|			ИЛИ ПоставщикиКонтрагентов.Наименование <> """")";
	
	ТаблицаПоставщиков = Запрос.Выполнить().Выгрузить();
	ТаблицаПоставщиков.Колонки.Добавить("ИННПоиск");
	ТаблицаПоставщиков.Колонки.Добавить("НаименованиеПоиск");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоставщиков Цикл
		СтрокаТаблицы.ИННПоиск = СокрЛП(СтрокаТаблицы.ИНН);
		СтрокаТаблицы.НаименованиеПоиск = ВРег(СтрЗаменить(СтрокаТаблицы.Наименование, " ", ""));
	КонецЦикла;
	
	Возврат ТаблицаПоставщиков;
	
КонецФункции

Функция ДанныеНоменклатурыИзменены(ДанныеСправочника, ЗагружаемыеДанные, ТаблицаКодовПоставщиков, ИдентификаторыПоставщиков)
	
	Если СокрЛП(ДанныеСправочника.Наименование) <> СокрЛП(ЗагружаемыеДанные.НаименованиеТовара) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗагружаемыеДанные.Свойство("НаименованиеПроизводителя")
		И ЗначениеЗаполнено(ЗагружаемыеДанные.НаименованиеПроизводителя)
		И СокрЛП(ДанныеСправочника.Производитель) <> СокрЛП(ЗагружаемыеДанные.НаименованиеПроизводителя) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗагружаемыеДанные.Свойство("Штрихкод")
		И ЗначениеЗаполнено(ЗагружаемыеДанные.Штрихкод)
		И СокрЛП(ДанныеСправочника.Штрихкод) <> СокрЛП(ЗагружаемыеДанные.Штрихкод) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ЗагружаемыеДанные Цикл
		Если СтрНачинаетсяС(КлючЗначение.Ключ, "Поставщик") Тогда
			Если Не ЕстьДанныеПоставщика(ИдентификаторыПоставщиков[КлючЗначение.Ключ], КлючЗначение.Значение, ТаблицаКодовПоставщиков, ДанныеСправочника.Ссылка) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьДанныеПоставщика(Поставщик, КодПоставщика, ТаблицаКодовПоставщиков, НоменклатураКонтрагента)
	
	Если ТипЗнч(КодПоставщика) = Тип("Число") Тогда
		КодПоставщикаСтрока = Формат(КодПоставщика, "ЧГ=0");
	Иначе
		КодПоставщикаСтрока = СокрЛП(КодПоставщика);
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Ссылка",    НоменклатураКонтрагента);
	ПараметрыОтбора.Вставить("Код",       КодПоставщикаСтрока);
	ПараметрыОтбора.Вставить("Поставщик", Поставщик);
	
	Возврат ТаблицаКодовПоставщиков.НайтиСтроки(ПараметрыОтбора).Количество() <> 0;
	
КонецФункции

Функция СопоставитьНоменклатуруКонтрагента(НоменклатураКонтрагентаОбъект)
	
	Номенклатура = Неопределено;
	
	Если ЗначениеЗаполнено(НоменклатураКонтрагентаОбъект.Штрихкод) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Штрихкод", НоменклатураКонтрагентаОбъект.Штрихкод);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаводскиеШК.Владелец КАК Номенклатура
		|ИЗ
		|	Справочник.ЗаводскиеШК КАК ЗаводскиеШК
		|ГДЕ
		|	НЕ ЗаводскиеШК.ПометкаУдаления
		|	И ЗаводскиеШК.Наименование = &Штрихкод
		|	И НЕ ЗаводскиеШК.Владелец.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Номенклатура = Выборка.Номенклатура;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		КодыПоставщиков = НоменклатураКонтрагентаОбъект.КодыПоставщиков.Выгрузить();
		Если КодыПоставщиков.Количество() > 0 Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("КодыПоставщиков", КодыПоставщиков);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КодыПоставщиков.Код КАК Код,
			|	КодыПоставщиков.Поставщик КАК Поставщик
			|ПОМЕСТИТЬ КодыПоставщиков
			|ИЗ
			|	&КодыПоставщиков КАК КодыПоставщиков
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СоответствиеНоменклатурыКонтрагентов.Номенклатура КАК Номенклатура
			|ИЗ
			|	КодыПоставщиков КАК КодыНоменклатурыПоставщиков
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыКонтрагентов КАК СоответствиеНоменклатурыКонтрагентов
			|			ПО НоменклатураКонтрагентов.Ссылка = СоответствиеНоменклатурыКонтрагентов.НоменклатураКонтрагента
			|		ПО КодыНоменклатурыПоставщиков.Код = НоменклатураКонтрагентов.Код
			|			И КодыНоменклатурыПоставщиков.Поставщик = НоменклатураКонтрагентов.Владелец
			|ГДЕ
			|	НЕ НоменклатураКонтрагентов.ПометкаУдаления";
			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				
				Номенклатура = Выборка.Номенклатура;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Наименование", НоменклатураКонтрагентаОбъект.Наименование);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ПометкаУдаления
		|	И (Номенклатура.Наименование = &Наименование
		|			ИЛИ Номенклатура.ПолноеНаименование = &Наименование
		|			ИЛИ Номенклатура.КраткоеНаименование = &Наименование)";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Номенклатура = Выборка.Номенклатура;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Наименование", НоменклатураКонтрагентаОбъект.Наименование);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствиеНоменклатурыКонтрагентов.Номенклатура КАК Номенклатура
		|ИЗ
		|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыКонтрагентов КАК СоответствиеНоменклатурыКонтрагентов
		|		ПО НоменклатураКонтрагентов.Ссылка = СоответствиеНоменклатурыКонтрагентов.НоменклатураКонтрагента
		|ГДЕ
		|	НоменклатураКонтрагентов.Наименование = &Наименование
		|	И НЕ НоменклатураКонтрагентов.ПометкаУдаления
		|	И НЕ СоответствиеНоменклатурыКонтрагентов.Номенклатура.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Номенклатура = Выборка.Номенклатура;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Запись = РегистрыСведений.СоответствиеНоменклатурыКонтрагентов.СоздатьМенеджерЗаписи();
		Запись.НоменклатураКонтрагента = НоменклатураКонтрагентаОбъект.Ссылка;
		Запись.Номенклатура = Номенклатура;
		Запись.Записать();
	КонецЕсли;
	
	Возврат Номенклатура;
	
КонецФункции

Процедура СопоставитьНоменклатуруПоСвязкам77(Контрагент)
	
	Соединение = РаботаСSQL.ПодключениеКСерверуSQLПоНастройке(Справочники.НастройкиПодключения.БазаCourierDS);
	Если Соединение = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ТекстSQL = "select id, code_1c from ea5..suppliers";
	
	ТаблицаSQL = РаботаСSQL.ВыполнитьЗапросSQL(ТекстSQL, Соединение,, Истина);
	
	Если ТаблицаSQL = Неопределено Или ТаблицаSQL.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗапроса = Новый ТаблицаЗначений;
	ТаблицаЗапроса.Колонки.Добавить("id", Новый ОписаниеТипов("Число"));
	ТаблицаЗапроса.Колонки.Добавить("code_1c", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(9)));
	
	Для Каждого СтрокаSQL Из ТаблицаSQL Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаSQL);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗапроса", ТаблицаЗапроса);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапроса.id,
	|	ТаблицаЗапроса.code_1c
	|ПОМЕСТИТЬ КодыПоставщиков
	|ИЗ
	|	&ТаблицаЗапроса КАК ТаблицаЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	КодыПоставщиков.id КАК id
	|ИЗ
	|	КодыПоставщиков КАК КодыПоставщиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО КодыПоставщиков.code_1c = Контрагенты.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	id";
	
	ТаблицаИдентификаторов = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Ссылка
	|ПОМЕСТИТЬ НесопоставленнаяНоменклатура
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыКонтрагентов КАК СоответствиеНоменклатурыКонтрагентов
	|		ПО НоменклатураКонтрагентов.Ссылка = СоответствиеНоменклатурыКонтрагентов.НоменклатураКонтрагента
	|ГДЕ
	|	НЕ НоменклатураКонтрагентов.ПометкаУдаления
	|	И СоответствиеНоменклатурыКонтрагентов.Номенклатура ЕСТЬ NULL
	|	И НоменклатураКонтрагентов.Владелец = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКонтрагентовКодыПоставщиков.Поставщик КАК Поставщик,
	|	НоменклатураКонтрагентовКодыПоставщиков.Код КАК КодПоставщика,
	|	НесопоставленнаяНоменклатура.Ссылка
	|ИЗ
	|	НесопоставленнаяНоменклатура КАК НесопоставленнаяНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов.КодыПоставщиков КАК НоменклатураКонтрагентовКодыПоставщиков
	|		ПО НесопоставленнаяНоменклатура.Ссылка = НоменклатураКонтрагентовКодыПоставщиков.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НесопоставленнаяНоменклатура.Ссылка.Владелец,
	|	НесопоставленнаяНоменклатура.Ссылка.Код,
	|	НесопоставленнаяНоменклатура.Ссылка
	|ИЗ
	|	НесопоставленнаяНоменклатура КАК НесопоставленнаяНоменклатура
	|ИТОГИ ПО
	|	Поставщик";
	
	ВыборкаПоставщик = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоставщик.Следующий() Цикл
		
		СтрокаТаблицы = ТаблицаИдентификаторов.Найти(ВыборкаПоставщик.Поставщик);
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаСвязок = ТаблицаСвязок77(Соединение, СтрокаТаблицы.id);
		Если ТаблицаСвязок = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаПоставщик.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицыСвязок = ТаблицаСвязок.Найти(Выборка.КодПоставщика, "КодПоставщика");
			Если СтрокаТаблицыСвязок = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Запись = РегистрыСведений.СоответствиеНоменклатурыКонтрагентов.СоздатьМенеджерЗаписи();
			Запись.НоменклатураКонтрагента = Выборка.Ссылка;
			Запись.Номенклатура = СтрокаТаблицыСвязок.Номенклатура;
			Запись.Записать();
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаСвязок77(Соединение, id)
	
	ТекстSQL = "
	|select code_EA5, code_post
	|from ea5..supplier_code (nolock)
	|where supplier_id=" + Формат(id, "ЧГ=0");
	
	ТаблицаSQL = РаботаСSQL.ВыполнитьЗапросSQL(ТекстSQL, Соединение,, Истина);
	
	Если ТаблицаSQL = Неопределено Или ТаблицаSQL.Количество() = 0 тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаЗапроса = Новый ТаблицаЗначений;
	ТаблицаЗапроса.Колонки.Добавить("code_EA5", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(9)));
	ТаблицаЗапроса.Колонки.Добавить("code_post", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20)));
	
	Для Каждого СтрокаSQL Из ТаблицаSQL Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		СтрокаТаблицы.code_EA5 = Формат(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаSQL.code_EA5), "ЧГ=0");
		СтрокаТаблицы.code_post = СтрокаSQL.code_post;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗапроса", ТаблицаЗапроса);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапроса.code_EA5,
	|	ТаблицаЗапроса.code_post
	|ПОМЕСТИТЬ СвязкиСНоменклатурой
	|ИЗ
	|	&ТаблицаЗапроса КАК ТаблицаЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязкиСНоменклатурой.code_post КАК КодПоставщика,
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	СвязкиСНоменклатурой КАК СвязкиСНоменклатурой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО СвязкиСНоменклатурой.code_EA5 = Номенклатура.Код";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДобавитьСтрокуСОшибкой(Результат, НомерСтроки, ТекстОшибки)
	
	СтрокаСОшибкой = Новый Структура;
	СтрокаСОшибкой.Вставить("НомерСтроки", НомерСтроки);
	СтрокаСОшибкой.Вставить("ТекстОшибки", ТекстОшибки);
	
	Результат.СтрокиСОшибками.Добавить(СтрокаСОшибкой);
	
КонецПроцедуры

#КонецОбласти
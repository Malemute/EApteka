
// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина".
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  Отказ          - булево, признак отказа (необязательный).
//
Процедура СообщитьОбОшибке(ТекстСообщения, Отказ = Ложь) Экспорт
	
	Отказ = Истина;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Выполняет процесс обмена данными отдельно для каждой строки настройки обмена.
//
// Параметры:
//  Отказ                     - Булево - флаг отказа; поднимается в случае возникновения ошибки при выполнении сценария.
//  НастройкаВыполненияОбмена - СправочникСсылка.СценарииОбменовДанными - элемент справочника,
//                              по значениям реквизитов которого будет выполнен обмен данными.
//  НомерСтроки               - Число - Номер строки по которой будет выполнен обмен данными.
//                              Если не указан, то обмен данными будет выполнен для всех строк.
// 
Процедура ВыполнитьОбменДаннымиПоСценариюОбменаДанными(Отказ, НастройкаВыполненияОбмена, НомерСтроки = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбменДаннымиПовтИсп.ТекущаяБазаЯвляетсяКопией() = Истина Тогда
		СтрокаСообщения = НСтр( "ru = 'Текущая база является копией. Выполнение сценариев обмена в копиях запрещено! (Удостоверьтесь в правильности ввода эталонной строки сеодинения в справочнике ""Информационные базы"" в элементе ""Текущая база"". Текущая строка соединения -  %1 ).'" );
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( СтрокаСообщения, СтрокаСоединенияИнформационнойБазы() );
		ВызватьИсключение СтрокаСообщения;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НастройкиВыполненияОбменаНастройкиОбмена.Ссылка КАК НастройкаВыполненияОбмена,
	|	НастройкиВыполненияОбменаНастройкиОбмена.НомерСтроки КАК НомерСтроки,
	|	НастройкиВыполненияОбменаНастройкиОбмена.ВыполняемоеДействие КАК ВыполняемоеДействие,
	|	НастройкиВыполненияОбменаНастройкиОбмена.ВидТранспортаОбмена КАК ВидТранспортаОбмена,
	|	НастройкиВыполненияОбменаНастройкиОбмена.УзелИнформационнойБазы КАК УзелИнформационнойБазы
	|ИЗ
	|	Справочник.СценарииОбменовДанными.НастройкиОбмена КАК НастройкиВыполненияОбменаНастройкиОбмена
	|ГДЕ
	|	НастройкиВыполненияОбменаНастройкиОбмена.Ссылка = &НастройкаВыполненияОбмена
	|	[УсловиеПоНомеруСтроки]
	|
	|УПОРЯДОЧИТЬ ПО
	|	НастройкиВыполненияОбменаНастройкиОбмена.НомерСтроки";
	
	УсловиеПоНомеруСтроки = ?(НомерСтроки = Неопределено, "", "И НастройкиВыполненияОбменаНастройкиОбмена.НомерСтроки = &НомерСтроки");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[УсловиеПоНомеруСтроки]", УсловиеПоНомеруСтроки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НастройкаВыполненияОбмена", НастройкаВыполненияОбмена);
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВыполняемоеДействие = ПредопределенноеЗначение( "Перечисление.ДействияПриОбмене.ЗагрузкаДанных" ) Тогда
		
			Если ЗначениеЗаполнено( Выборка.ВидТранспортаОбмена ) Тогда
				ПолучитьСообщенияОбменаДляЗагрузкиВУзел( Выборка.УзелИнформационнойБазы, Выборка.ВидТранспортаОбмена );
			КонецЕсли;
			
			ВыполнитьЗагрузкуСообщенияОбменаДляУзла( Выборка.УзелИнформационнойБазы );
			
		ИначеЕсли Выборка.ВыполняемоеДействие = ПредопределенноеЗначение( "Перечисление.ДействияПриОбмене.ВыгрузкаДанных" ) Тогда
			
			ВыполнитьФормированиеСообщенияОбменаДляУзла( Выборка.УзелИнформационнойБазы );
			
			Если ЗначениеЗаполнено( Выборка.ВидТранспортаОбмена ) Тогда
				ОправитьСообщенияОбменаДляВыгрузкиВУзел( Выборка.УзелИнформационнойБазы, Выборка.ВидТранспортаОбмена );
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Точка входа для выполнения обмена данными по сценарию обмена регламентным заданием.
//
// Параметры:
//  КодСценарияОбмена - Строка - код элемента справочника "Сценарии обменов данными", для которого будет выполнен обмен
//                               данными.
// 
Процедура ВыполнитьОбменДаннымиПоРегламентномуЗаданию(КодСценарияОбмена) Экспорт
	
	Если Не ЗначениеЗаполнено(КодСценарияОбмена) Тогда
		ВызватьИсключение НСтр("ru = 'Не задан сценарий обмена данными.'");
	КонецЕсли;
	
	Если ОбменДаннымиПовтИсп.ТекущаяБазаЯвляетсяКопией() = Истина Тогда
		СтрокаСообщения = НСтр( "ru = 'Текущая база является копией. Выполнение регламентного обмена в копиях запрещено! (Удостоверьтесь в правильности ввода эталонной строки сеодинения в справочнике ""Информационные базы"" в элементе ""Текущая база"". Текущая строка соединения -  %1 ).'" );
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( СтрокаСообщения, СтрокаСоединенияИнформационнойБазы() );
		ВызватьИсключение СтрокаСообщения;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СценарииОбменовДанными.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СценарииОбменовДанными КАК СценарииОбменовДанными
	|ГДЕ
	|		 СценарииОбменовДанными.Код = &Код
	|	И НЕ СценарииОбменовДанными.ПометкаУдаления
	|";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Код", КодСценарияОбмена);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		// Выполняем обмен по сценарию.
		ВыполнитьОбменДаннымиПоСценариюОбменаДанными(Ложь, Выборка.Ссылка);
	Иначе
		СтрокаСообщения = НСтр("ru = 'Сценарий обмена данными с кодом %1 не найден.'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, КодСценарияОбмена);
		ВызватьИсключение СтрокаСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Функция - Сформировать имя файла сообщения обмена для узла "отправка"
//    Формирует имя файла по шаблону Mess_КодУзлаОтправителя_КодУзлаПолучеталя
//
// Параметры:
//  УзелИнформационнойБазы	 - ПланыОбменаСсылка - узел, по которому формируется наименование файла
// 
// Возвращаемое значение:
//   - Строка - сформированное имя файла 
//
Функция СформироватьИмяФайлаСообщенияОбменаДляУзла_Отправка( УзелИнформационнойБазы ) Экспорт
	
	СтруктураСОписаниемУзла = ПолучитьСтруктуруСОписаниемУзлаПоСсылке( УзелИнформационнойБазы );
	
	Возврат "Mess_" + СокрЛП( СтруктураСОписаниемУзла.КодЭтогоУзла ) + "_" + СокрЛП( СтруктураСОписаниемУзла.КодУзла );
	
КонецФункции

// Функция - Сформировать имя файла сообщения обмена для узла "получение"
//    Формирует имя файла по шаблону Mess_КодУзлаОтправителя_КодУзлаПолучеталя
//
// Параметры:
//  УзелИнформационнойБазы	 - ПланыОбменаСсылка - узел, по которому формируется наименование файла
// 
// Возвращаемое значение:
//   - Строка - сформированное имя файла 
//
Функция СформироватьИмяФайлаСообщенияОбменаДляУзла_Получение( УзелИнформационнойБазы ) Экспорт
	
	СтруктураСОписаниемУзла = ПолучитьСтруктуруСОписаниемУзлаПоСсылке( УзелИнформационнойБазы );
	
	Возврат "Mess_" + СокрЛП( СтруктураСОписаниемУзла.КодУзла ) + "_" + СокрЛП( СтруктураСОписаниемУзла.КодЭтогоУзла );
	
КонецФункции

// Процедура - Получить сообщения обмена для узла транспорт файл
//     Выполняет получение сообщений обмена для узла по настройкам по транспорту "Файл"
//
// Параметры:
//  УзелИнформационнойБазы	 - ПланыОбменаСсылка - ссылка узла, для которого необходимо получить сообщения
//
Процедура ПолучитьСообщенияОбменаДляУзла_ТранспортФайл( УзелИнформационнойБазы ) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	// проверим настройки транспорта
	Если РегистрыСведений.НастройкиТранспортаОбмена.НастроенныеВидыТранспорта( УзелИнформационнойБазы ).Найти( ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.FILE" ) ) = Неопределено Тогда
		ВызватьИсключение "Для узла <" + УзелИнформационнойБазы + "> не заполнены настройки транспорта " + ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.FILE" );
	КонецЕсли;
	
	СтруктураНастроекТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспорта( УзелИнформационнойБазы, ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.FILE" ) ); 
	
	// проверим наличие каталога
	КаталогСообщений = Новый Файл( СтруктураНастроекТранспорта.FILEКаталогОбменаИнформацией );
	Если Не КаталогСообщений.Существует() ИЛИ Не КаталогСообщений.ЭтоКаталог() Тогда
		ВызватьИсключение "Для узла <" + УзелИнформационнойБазы + "> неверно задан каталог получения сообщений обмена.";
	КонецЕсли;
	
	// подготовим переменные
	ПолноеИмяРегистраПолученныхСообщений = Метаданные.РегистрыСведений.ПолученныеСообщенияОбменовДанными.ПолноеИмя();
	
	СтруктураНовойЗаписи = ОбщегоНазначения.СформироватьСтруктуруЗаписиРегистра( ПолноеИмяРегистраПолученныхСообщений );
	СтруктураНовойЗаписи.УзелИнформационнойБазы = УзелИнформационнойБазы;
	СтруктураНовойЗаписи.ВнеОчередиСообщений = Ложь;
	СтруктураНовойЗаписи.ВидТранспортаОбмена = ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.FILE" );
	
	СтруктураОтбора = Новый Структура;
	НаборЗаписей = РегистрыСведений.ПолученныеСообщенияОбменовДанными.СоздатьНаборЗаписей();
	Для Каждого Отбор Из НаборЗаписей.Отбор Цикл
		СтруктураОтбора.Вставить( Отбор.Имя );
	КонецЦикла;
	ЗаполнитьЗначенияСвойств( СтруктураОтбора, СтруктураНовойЗаписи );
	
	// сформируем массив шаблонов поиска файлов
	ИмяФайлаСообщений_Начало = СформироватьИмяФайлаСообщенияОбменаДляУзла_Получение( УзелИнформационнойБазы );
	
	МассивШаблоновПоиска = Новый Массив;
	МассивШаблоновПоиска.Добавить( ИмяФайлаСообщений_Начало + "*.xml" );
	МассивШаблоновПоиска.Добавить( ИмяФайлаСообщений_Начало + "*.zip" );
	
	Для Каждого ШаблонПоиска Из МассивШаблоновПоиска Цикл
		
		// найдем и загрузим файлы сообщений
		МассивФайлов = НайтиФайлы( КаталогСообщений.ПолноеИмя, ШаблонПоиска, Ложь );
		
		Для Каждого ФайлСообщения Из МассивФайлов Цикл
			
			СтруктураНовойЗаписи.ДатаПолучения = ТекущаяДата();
			СтруктураНовойЗаписи.ХранилищеСообщения = Новый ХранилищеЗначения( Новый ДвоичныеДанные( ФайлСообщения.ПолноеИмя ), Новый СжатиеДанных(9) );
			СтруктураНовойЗаписи.ИмяФайлаСообщения = ФайлСообщения.Имя;
			СтруктураНовойЗаписи.СообщенияРезультата = Строка( ТекущаяДата() ) + " - Получено из каталога <" + ФайлСообщения.Путь + ">" + Символы.ПС;
			
			// запись необходимо добавить не затирая существующие
			// потому будем проверять наличие записей с отсечкой по времени
			Пока Истина Цикл
				
				СтруктураОтбора.Период = ТекущаяДата();
				Если Не ОбщегоНазначения.РегистрСодержитЗаписи( СтруктураОтбора, ПолноеИмяРегистраПолученныхСообщений ) Тогда
					Прервать;
				КонецЕсли;
				
				// если записи есть, то подождем следующей секунды
				Пока СтруктураОтбора.Период >= ТекущаяДата() Цикл
					;
				КонецЦикла;
				
			КонецЦикла;
			
			// сохраним сообщение в регистр
			СтруктураНовойЗаписи.Период = СтруктураОтбора.Период;
			РегистрыСведений.ПолученныеСообщенияОбменовДанными.ОбновитьДобавитьЗапись( СтруктураНовойЗаписи );
			
			// удалим файл
			Попытка
				УдалитьФайлы( ФайлСообщения.ПолноеИмя );
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Получить сообщения обмена для узла транспорт веб-сервис
//     Выполняет получение сообщений обмена для узла по настройкам по транспорту "WS"
//
// Параметры:
//  УзелИнформационнойБазы	 - ПланыОбменаСсылка - ссылка узла, для которого необходимо получить сообщения
//
Процедура ПолучитьСообщенияОбменаДляУзла_ТранспортВебСервис( УзелИнформационнойБазы ) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	// проверим настройки транспорта
	Если РегистрыСведений.НастройкиТранспортаОбмена.НастроенныеВидыТранспорта( УзелИнформационнойБазы ).Найти( ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.WS" ) ) = Неопределено Тогда
		ВызватьИсключение "Для узла <" + УзелИнформационнойБазы + "> не заполнены настройки транспорта " + ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.WS" );
	КонецЕсли;
	
	СтруктураНастроекТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспорта( УзелИнформационнойБазы, ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.WS" ) );
	СтруктураСОписаниемУзла = ПолучитьСтруктуруСОписаниемУзлаПоСсылке( УзелИнформационнойБазы );
	
	// инициализируем соединение
	ВебПрокси = WSСсылки.ExchangeFromUniversalXML.СоздатьWSПрокси( "http://www.1c.ru/ExchangeFromUniversalXML", "ExchangeFromUniversalXML", "ExchangeFromUniversalXMLSoap", , 20, , СтруктураНастроекТранспорта.WSURLВебСервиса, Ложь );
	Если СтруктураНастроекТранспорта.WSЗапомнитьПароль = Истина И Не ПустаяСтрока( СтруктураНастроекТранспорта.WSИмяПользователя ) Тогда
		ВебПрокси.Пользователь = СтруктураНастроекТранспорта.WSИмяПользователя;
		ВебПрокси.Пароль = СтруктураНастроекТранспорта.WSПароль;
	КонецЕсли;
	ВебПрокси.ТочкаПодключения.Интерфейс.Операции.Получить( "GetNextMessage" );
	
	// подготовим переменные
	ПолноеИмяРегистраПолученныхСообщений = Метаданные.РегистрыСведений.ПолученныеСообщенияОбменовДанными.ПолноеИмя();
	
	СтруктураНовойЗаписи = ОбщегоНазначения.СформироватьСтруктуруЗаписиРегистра( ПолноеИмяРегистраПолученныхСообщений );
	СтруктураНовойЗаписи.УзелИнформационнойБазы = УзелИнформационнойБазы;
	СтруктураНовойЗаписи.ВидТранспортаОбмена = ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.WS" );
	СтруктураНовойЗаписи.Результат = ПредопределенноеЗначение( "Перечисление.РезультатыВыполненияОбмена.Выполнено" );
	
	СтруктураОтбора = Новый Структура;
	НаборЗаписей = РегистрыСведений.ПолученныеСообщенияОбменовДанными.СоздатьНаборЗаписей();
	Для Каждого Отбор Из НаборЗаписей.Отбор Цикл
		СтруктураОтбора.Вставить( Отбор.Имя );
	КонецЦикла;
	
	// выполним получение всех сообщений по очереди
	Пока Истина Цикл
		
		СтруктураРезультата = ОбщегоНазначения.Десериализовать( ВебПрокси.GetNextMessage( СтруктураСОписаниемУзла.ИмяПланаОбмена, СтруктураСОписаниемУзла.КодЭтогоУзла ) );
		
		Если СтруктураРезультата.БылиОшибки <> Ложь Тогда
			ВызватьИсключение СтруктураРезультата.ТекстОписанияОшибки;
		ИначеЕсли ТипЗнч( СтруктураРезультата.СтруктураСообщения ) <> Тип( "Структура" ) Тогда
			Прервать; // нет сообщений для получения
		КонецЕсли;
		
		СтруктураНовойЗаписи.ВнеОчередиСообщений = СтруктураРезультата.СтруктураСообщения.ВнеОчередиСообщений;
		СтруктураНовойЗаписи.НомерСообщения = СтруктураРезультата.СтруктураСообщения.НомерСообщения;
		СтруктураНовойЗаписи.ОбновитьНомерВУзлеПослеЗагрузки = СтруктураРезультата.СтруктураСообщения.ОбновитьНомерВУзлеПослеЗагрузки;
		СтруктураНовойЗаписи.НомерПоследнегоСообщенияПринятогоУзлом = СтруктураРезультата.СтруктураСообщения.НомерПоследнегоСообщенияПринятогоУзлом;
		СтруктураНовойЗаписи.ИмяФайлаСообщения = СтруктураРезультата.СтруктураСообщения.ИмяФайлаСообщения;
		СтруктураНовойЗаписи.ХранилищеСообщения = СтруктураРезультата.СтруктураСообщения.ХранилищеСообщения;
		
		СтруктураНовойЗаписи.ДатаПолучения = ТекущаяДата();
		СтруктураНовойЗаписи.СообщенияРезультата = Строка( ТекущаяДата() ) + " - получена через веб-интерфейс по адресу " + СтруктураНастроекТранспорта.WSURLВебСервиса;
		
		// запись необходимо добавить не затирая существующие
		// потому будем проверять наличие записей с отсечкой по времени
		ЗаполнитьЗначенияСвойств( СтруктураОтбора, СтруктураНовойЗаписи );
		
		Пока Истина Цикл
			
			СтруктураОтбора.Период = ТекущаяДата();
			Если Не ОбщегоНазначения.РегистрСодержитЗаписи( СтруктураОтбора, ПолноеИмяРегистраПолученныхСообщений ) Тогда
				Прервать;
			КонецЕсли;
			
			// если записи есть, то подождем следующей секунды
			Пока СтруктураОтбора.Период >= ТекущаяДата() Цикл
				;
			КонецЦикла;
			
		КонецЦикла;
		
		// сохраним сообщение в регистр
		СтруктураНовойЗаписи.Период = СтруктураОтбора.Период;
		РегистрыСведений.ПолученныеСообщенияОбменовДанными.ОбновитьДобавитьЗапись( СтруктураНовойЗаписи );
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Отправить сообщения обмена для узла транспорт файл
//     Выполняет отправку сообщений обмена для узла по настройкам по транспорту "Файл"
//
// Параметры:
//  УзелИнформационнойБазы	 - ПланыОбменаСсылка - ссылка узла, для которого необходимо выполнить отправку сообщений
//
Процедура ОтправитьСообщенияОбменаДляУзла_ТранспортФайл( УзелИнформационнойБазы ) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	// проверим настройки транспорта
	ЕстьКритическаяОшибка = Ложь;
	СообщениеКритическойОшибки = "";
	
	Если РегистрыСведений.НастройкиТранспортаОбмена.НастроенныеВидыТранспорта( УзелИнформационнойБазы ).Найти( ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.FILE" ) ) = Неопределено Тогда
		ЕстьКритическаяОшибка = Истина;
		СообщениеКритическойОшибки = "Для узла <" + УзелИнформационнойБазы + "> не заполнены настройки транспорта " + ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.FILE" );
	Иначе
		
		СтруктураНастроекТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспорта( УзелИнформационнойБазы, ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.FILE" ) ); 
		
		// проверим наличие каталога
		КаталогСообщений = Новый Файл( СтруктураНастроекТранспорта.FILEКаталогОбменаИнформацией );
		Если Не КаталогСообщений.Существует() ИЛИ Не КаталогСообщений.ЭтоКаталог() Тогда
			ЕстьКритическаяОшибка = Истина;
			СообщениеКритическойОшибки = "Для узла <" + УзелИнформационнойБазы + "> неверно задан каталог выгрузки сообщений обмена.";
		КонецЕсли;
		
	КонецЕсли;
	
	// прочитаем все сообщения из регистра и сохраним их в каталог
	Пока Истина Цикл
		
		НачатьТранзакцию();
		
		СтруктураЗаписиСообщения = РегистрыСведений.СформированныеСообщенияОбменовДанными.ПолучитьСледующееСообщениеДляВыгрузки( УзелИнформационнойБазы );
		
		Если СтруктураЗаписиСообщения <> Неопределено Тогда
			
			Если ЕстьКритическаяОшибка = Истина Тогда
				
				СтруктураЗаписиСообщения.Результат = ПредопределенноеЗначение( "Перечисление.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения" );
				СтруктураЗаписиСообщения.СообщенияРезультата = Строка( СтруктураЗаписиСообщения.СообщенияРезультата ) + Символы.ПС + СообщениеКритическойОшибки;
				
			Иначе
				
				Попытка
					
					ИмяФайлаВыгрузки = КаталогСообщений.ПолноеИмя + "\" + СтруктураЗаписиСообщения.ИмяФайлаСообщения;
					СтруктураЗаписиСообщения.ХранилищеСообщения.Получить().Записать( ИмяФайлаВыгрузки );
					
					СтруктураЗаписиСообщения.Результат = ПредопределенноеЗначение( "Перечисление.РезультатыВыполненияОбмена.Выполнено" );
					СтруктураЗаписиСообщения.СообщенияРезультата = Строка( СтруктураЗаписиСообщения.СообщенияРезультата ) + Символы.ПС + "Сообщение выгружено в файл <" + ИмяФайлаВыгрузки + ">";
					
				Исключение
					СтруктураЗаписиСообщения.Результат = ПредопределенноеЗначение( "Перечисление.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения" );
					СтруктураЗаписиСообщения.СообщенияРезультата = Строка( СтруктураЗаписиСообщения.СообщенияРезультата ) + Символы.ПС + "Ошибка записи сообщения в файл по причине: " + ОписаниеОшибки();
				КонецПопытки;
				
			КонецЕсли;
			
			СтруктураЗаписиСообщения.ВидТранспортаОбмена = ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.FILE" );
			
			ОтметитьСообщениеДляВыгрузкиКакВыгруженное( СтруктураЗаписиСообщения ); 
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		Если СтруктураЗаписиСообщения = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Отправить сообщения обмена для узла транспорт веб-сервис
//     Выполняет отправку сообщений обмена для узла по настройкам по транспорту "WS"
//
// Параметры:
//  УзелИнформационнойБазы	 - ПланыОбменаСсылка - ссылка узла, для которого необходимо выполнить отправку сообщений
//
Процедура ОтправитьСообщенияОбменаДляУзла_ТранспортВебСервис( УзелИнформационнойБазы ) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	// проверим настройки транспорта
	ЕстьКритическаяОшибка = Ложь;
	СообщениеКритическойОшибки = "";
	
	Если РегистрыСведений.НастройкиТранспортаОбмена.НастроенныеВидыТранспорта( УзелИнформационнойБазы ).Найти( ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.WS" ) ) = Неопределено Тогда
		ЕстьКритическаяОшибка = Истина;
		СообщениеКритическойОшибки = "Для узла <" + УзелИнформационнойБазы + "> не заполнены настройки транспорта " + ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.WS" );
	Иначе
		
		СтруктураНастроекТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспорта( УзелИнформационнойБазы, ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.WS" ) ); 
		
		// проверим подключение
		Попытка
			
			ВебПрокси = WSСсылки.ExchangeFromUniversalXML.СоздатьWSПрокси( "http://www.1c.ru/ExchangeFromUniversalXML", "ExchangeFromUniversalXML", "ExchangeFromUniversalXMLSoap", , 600, , СтруктураНастроекТранспорта.WSURLВебСервиса, Ложь );
			Если СтруктураНастроекТранспорта.WSЗапомнитьПароль = Истина И Не ПустаяСтрока( СтруктураНастроекТранспорта.WSИмяПользователя ) Тогда
				ВебПрокси.Пользователь = СтруктураНастроекТранспорта.WSИмяПользователя;
				ВебПрокси.Пароль = СтруктураНастроекТранспорта.WSПароль;
			КонецЕсли;
			ВебПрокси.ТочкаПодключения.Интерфейс.Операции.Получить( "PutMessage" );
			
		Исключение
			ЕстьКритическаяОшибка = Истина;
			СообщениеКритическойОшибки = "Ошибка при попытке подкдлючения к веб-сервису по причине: " + ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;
	
	СтруктураСОписаниемУзла = ПолучитьСтруктуруСОписаниемУзлаПоСсылке( УзелИнформационнойБазы );
	СтруктураСообщенияДляОтправки = Новый Структура( "ВнеОчередиСообщений, НомерСообщения, ОбновитьНомерВУзлеПослеЗагрузки, НомерПоследнегоСообщенияПринятогоУзлом, ИмяФайлаСообщения, ХранилищеСообщения" );
	
	// прочитаем все сообщения и выполним их отправку
	Пока Истина Цикл
		
		СтруктураЗаписиСообщения = РегистрыСведений.СформированныеСообщенияОбменовДанными.ПолучитьСледующееСообщениеДляВыгрузки( УзелИнформационнойБазы );
		
		Если СтруктураЗаписиСообщения = Неопределено Тогда
			Прервать; // нет сообщения для отправки
		КонецЕсли;
		
		Если ЕстьКритическаяОшибка = Истина Тогда
			СтруктураЗаписиСообщения.Результат = ПредопределенноеЗначение( "Перечисление.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения" );
			СтруктураЗаписиСообщения.СообщенияРезультата = Строка( СтруктураЗаписиСообщения.СообщенияРезультата ) + Символы.ПС + СообщениеКритическойОшибки;
		Иначе
			
			ЗаполнитьЗначенияСвойств( СтруктураСообщенияДляОтправки, СтруктураЗаписиСообщения );
			
			Попытка
				
				СтруктураРезультата = ОбщегоНазначения.Десериализовать( ВебПрокси.PutMessage( СтруктураСОписаниемУзла.ИмяПланаОбмена, СтруктураСОписаниемУзла.КодЭтогоУзла, ОбщегоНазначения.Сериализовать( СтруктураСообщенияДляОтправки ) ) );
				
				Если СтруктураРезультата.БылиОшибки <> Ложь Тогда
					ВызватьИсключение СтруктураРезультата.ТекстОписанияОшибки;
				КонецЕсли;
				
				СтруктураЗаписиСообщения.Результат = ПредопределенноеЗначение( "Перечисление.РезультатыВыполненияОбмена.Выполнено" );
				СтруктураЗаписиСообщения.СообщенияРезультата = Строка( СтруктураЗаписиСообщения.СообщенияРезультата ) + Символы.ПС + Строка( ТекущаяДата() ) + " - выгружено через веб-сервис по адресу " + СтруктураНастроекТранспорта.WSURLВебСервиса;
				
			Исключение
				СтруктураЗаписиСообщения.Результат = ПредопределенноеЗначение( "Перечисление.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения" );
				СтруктураЗаписиСообщения.СообщенияРезультата = Строка( СтруктураЗаписиСообщения.СообщенияРезультата ) + Символы.ПС + "Исключительная ситуация при выгрузке через веб-сервис по причине: " + ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
		СтруктураЗаписиСообщения.ВидТранспортаОбмена = ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.WS" );
			
		ОтметитьСообщениеДляВыгрузкиКакВыгруженное( СтруктураЗаписиСообщения ); 
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Получить сообщения обмена для загрузки в узел
//      Получает сообщения обмена для узла в соответствии с настройками транспорта узла и помещает их в регистр для последующей загрузки
//
// Параметры:
//  УзелИнформационнойБазы	 - ПланыОбменаСсылка - ссылка узла, для которого необходимо получить сообщения обмена
//  ВидТранспортаОбмена		 - ПеречислениеСсылка.ВидыТранспортаСообщенийОбмена - настройка транспорта при помощи которого необходимо получить сообщения обмена
//
Процедура ПолучитьСообщенияОбменаДляЗагрузкиВУзел( УзелИнформационнойБазы, ВидТранспортаОбмена ) Экспорт
	
	Если ВидТранспортаОбмена = ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.FILE" ) Тогда
		
		ПолучитьСообщенияОбменаДляУзла_ТранспортФайл( УзелИнформационнойБазы );
		
	ИначеЕсли ВидТранспортаОбмена = ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.WS" ) Тогда
		
		ПолучитьСообщенияОбменаДляУзла_ТранспортВебСервис( УзелИнформационнойБазы );
		
	Иначе
		
		ВызватьИсключение "Вид транспорта обмена " + ВидТранспортаОбмена + " не поддерживается.";
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Выполнить загрузку сообщения обмена для узла
//     Выполняет загрузку очередного сообщения обмена для узла
//
// Параметры:
//  УзелИнформационнойБазы	 - ПланыОбменаСсылка - ссылка узла, для которого выполняется загрузка
//  Отказ					 - Булево - если Истина, то в процессе загрузки были ошибки и загрузка не выполнена
//  ИнформацияОбмена         - Строка - строка, в которой накапливаются информационные сообщения обмена
//
Процедура ВыполнитьЗагрузкуСообщенияОбменаДляУзла( УзелИнформационнойБазы ) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	СтруктураНастроекТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспорта( УзелИнформационнойБазы, ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.FILE" ) );
	ПарольАрхива = СтруктураНастроекТранспорта.ПарольАрхиваСообщенияОбмена;
	
	// цикл обходит сообщения, предназначенные для загрузки
	Пока Истина Цикл
		
		СтруктураИменВременныхФайлов = Новый Структура;
		СтруктураЗаписиСообщения = РегистрыСведений.ПолученныеСообщенияОбменовДанными.ПолучитьСледующееСообщениеДляЗагрузки( УзелИнформационнойБазы );
		
		Если СтруктураЗаписиСообщения = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		СтруктураЗаписиСообщения.Загружено = Истина;
		СтруктураЗаписиСообщения.ДатаНачалаЗагрузки = ТекущаяДата();
		
		Попытка
			
			Если СтруктураЗаписиСообщения.НомерСообщения > 0 И СтруктураЗаписиСообщения.ОбновитьНомерВУзлеПослеЗагрузки = Истина
				И УзелИнформационнойБазы.НомерПринятого >= СтруктураЗаписиСообщения.НомерСообщения Тогда
				
				СтруктураЗаписиСообщения.Результат = ПредопределенноеЗначение( "Перечисление.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято" );
				
			Иначе
				
				// сохраним во временный файл сообщение
				СтруктураИменВременныхФайлов.Вставить( "ИмяФайлаЗагрузки", ПолучитьИмяВременногоФайла( СтруктураЗаписиСообщения.ИмяФайлаСообщения ) );
				СтруктураЗаписиСообщения.ХранилищеСообщения.Получить().Записать( СтруктураИменВременныхФайлов.ИмяФайлаЗагрузки );
				
				// инициализируем обработку УниверсальныйОбменДаннымиXML 
				ОбработкаУниверсальногоОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
				ОбработкаУниверсальногоОбмена.РежимОбмена = "Загрузка";
				ОбработкаУниверсальногоОбмена.ИмяФайлаОбмена = СтруктураИменВременныхФайлов.ИмяФайлаЗагрузки;
				ОбработкаУниверсальногоОбмена.ПарольДляРаспаковкиФайлаОбмена = ПарольАрхива;
				ОбработкаУниверсальногоОбмена.ЗагружатьДанныеВРежимеОбмена = Истина;
				ОбработкаУниверсальногоОбмена.ЗаписыватьРегистрыНаборамиЗаписей = Истина;
				
				СтруктураИменВременныхФайлов.Вставить( "ИмяФайлаПротокола", ПолучитьИмяВременногоФайла( "txt" ) );
				ОбработкаУниверсальногоОбмена.ИмяФайлаПротоколаОбмена = СтруктураИменВременныхФайлов.ИмяФайлаПротокола;
				ОбработкаУниверсальногоОбмена.ИмяФайлаПротоколаОбменаЗагрузка = СтруктураИменВременныхФайлов.ИмяФайлаПротокола;
				
				// выполним загрузку
				ОбработкаУниверсальногоОбмена.ВыполнитьЗагрузку();
				
				// проверим параметры обновления узла
				// они могут быть непосредственно в регисре или в параметрах загруженного сообщения
				НомерСообщения = СтруктураЗаписиСообщения.НомерСообщения;
				ОбновитьНомерВУзлеПослеЗагрузки = СтруктураЗаписиСообщения.ОбновитьНомерВУзлеПослеЗагрузки;
				НомерПоследнегоСообщенияПринятогоУзлом = СтруктураЗаписиСообщения.НомерПоследнегоСообщенияПринятогоУзлом;
				
				Если ТипЗнч( ОбработкаУниверсальногоОбмена.Параметры ) = Тип( "Структура" ) И ОбработкаУниверсальногоОбмена.Параметры.Свойство( "__СформированоПодсистемойExchangeFromUniversalXML__" ) И ОбработкаУниверсальногоОбмена.Параметры.__СформированоПодсистемойExchangeFromUniversalXML__ = Истина Тогда
					
					Если НомерСообщения = 0 И ОбновитьНомерВУзлеПослеЗагрузки = Ложь Тогда
						НомерСообщения = ОбработкаУниверсальногоОбмена.Параметры.НомерТекущегоСообщения;
						ОбновитьНомерВУзлеПослеЗагрузки = Истина;
					КонецЕсли;
					
					Если НомерПоследнегоСообщенияПринятогоУзлом = 0 Тогда
						НомерПоследнегоСообщенияПринятогоУзлом = ОбработкаУниверсальногоОбмена.Параметры.НомерПринятогоСообщения;
					КонецЕсли;
					
					СтруктураЗаписиСообщения.НомерСообщения = НомерСообщения;
					СтруктураЗаписиСообщения.ОбновитьНомерВУзлеПослеЗагрузки = ОбновитьНомерВУзлеПослеЗагрузки;
					СтруктураЗаписиСообщения.НомерПоследнегоСообщенияПринятогоУзлом = НомерПоследнегоСообщенияПринятогоУзлом;
					
				КонецЕсли;
				
				// зафиксируем изменения в узле
				НачатьТранзакцию();
				
				УзелИнформационнойБазыОбъект = УзелИнформационнойБазы.ПолучитьОбъект();
				
				Если НомерСообщения > 0 И ОбновитьНомерВУзлеПослеЗагрузки = Истина Тогда
					УзелИнформационнойБазыОбъект.НомерПринятого = НомерСообщения;
				КонецЕсли;
				
				Если НомерПоследнегоСообщенияПринятогоУзлом > 0 Тогда
					ПланыОбмена.УдалитьРегистрациюИзменений( УзелИнформационнойБазы, НомерПоследнегоСообщенияПринятогоУзлом );
				КонецЕсли;
				
				УзелИнформационнойБазыОбъект.Записать();
				
				ЗафиксироватьТранзакцию();
				
				// прочитаем протокол загрузки
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				Попытка
					ТекстовыйДокумент.Прочитать( СтруктураИменВременныхФайлов.ИмяФайлаПротокола );
					СтруктураЗаписиСообщения.СообщенияРезультата = Строка( СтруктураЗаписиСообщения.СообщенияРезультата ) + Символы.ПС + "Протокол загрузки:" + Символы.ПС + ТекстовыйДокумент.ПолучитьТекст();
				Исключение
				КонецПопытки;
				ТекстовыйДокумент = Неопределено;
				
				Если ОбработкаУниверсальногоОбмена.ФлагОшибки = Истина Тогда
					СтруктураЗаписиСообщения.Результат = ПредопределенноеЗначение( "Перечисление.РезультатыВыполненияОбмена.Ошибка" );
				Иначе
					СтруктураЗаписиСообщения.Результат = ПредопределенноеЗначение( "Перечисление.РезультатыВыполненияОбмена.Выполнено" );
				КонецЕсли;
			
			КонецЕсли;
				
		Исключение
			
			СтруктураЗаписиСообщения.Результат = ПредопределенноеЗначение( "Перечисление.РезультатыВыполненияОбмена.Ошибка" );
			СтруктураЗаписиСообщения.СообщенияРезультата = Строка( СтруктураЗаписиСообщения.СообщенияРезультата ) + Символы.ПС + "Исключительная ситуация при загрузке по причине: " + ОписаниеОшибки();
			
		КонецПопытки;
		
		// удалим временные файлы
		Для Каждого КлючИЗначение Из СтруктураИменВременныхФайлов Цикл
			
			Попытка
				УдалитьФайлы( КлючИЗначение.Значение );
			Исключение
			КонецПопытки;
			
		КонецЦикла;
				
		СтруктураЗаписиСообщения.ДатаОкончанияЗагрузки = ТекущаяДата();
		
		РегистрыСведений.ПолученныеСообщенияОбменовДанными.ОбновитьДобавитьЗапись( СтруктураЗаписиСообщения );
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Выполнить формирование сообщения обмена для узла
//     Выполняет формирование сообщения обмена для узла
//
// Параметры:
//  УзелИнформационнойБазы	 - ПланыОбменаСсылка - ссылка узла, для которого выполняется формирование
//  Отказ					 - Булево - если Истина, то в процессе формирования были ошибки и формирование не выполнено
//  ИнформацияОбмена         - Строка - строка, в которой накапливаются информационные сообщения обмена
//
Процедура ВыполнитьФормированиеСообщенияОбменаДляУзла( УзелИнформационнойБазы ) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	СтруктураНастроекТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспорта( УзелИнформационнойБазы, ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.FILE" ) );
	ПарольАрхива = СтруктураНастроекТранспорта.ПарольАрхиваСообщенияОбмена;
	
	СтруктураИменВременныхФайлов = Новый Структура;
	
	СтруктураЗаписиСообщения = ОбщегоНазначения.СформироватьСтруктуруЗаписиРегистра( Метаданные.РегистрыСведений.СформированныеСообщенияОбменовДанными.ПолноеИмя() );
	СтруктураЗаписиСообщения.УзелИнформационнойБазы = УзелИнформационнойБазы;
	СтруктураЗаписиСообщения.ВнеОчередиСообщений = Ложь;
	
	Попытка
		
		// получим текущие правила обмена для узла и сораним их в файл
		ПравилаОбменаУзла = РегистрыСведений.ПравилаОбменаДаннымиУзлов.ПолучитьПравилаОбменаУзла( УзелИнформационнойБазы );
		Если ПравилаОбменаУзла = Неопределено Тогда
			ВызватьИсключение "Для узла <" + УзелИнформационнойБазы + "> не заданы правила обмена данными.";
		КонецЕсли;		

		СтруктураИменВременныхФайлов.Вставить( "ИмяФайлаПравил", ПолучитьИмяВременногоФайла( "xml" ) );
		ПравилаОбменаУзла.Хранилище.Получить().Записать( СтруктураИменВременныхФайлов.ИмяФайлаПравил );
		
		// начнем формирование
		СтруктураЗаписиСообщения.ДатаНачалаФормирования = ТекущаяДата();
		СтруктураЗаписиСообщения.НомерПоследнегоСообщенияПринятогоУзлом = УзелИнформационнойБазы.НомерПринятого;
		СтруктураЗаписиСообщения.ДатаОкончанияФормирования = ТекущаяДата();
		
		// для начала инциализируем обработку
		ОбработкаУниверсальногоОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
		ОбработкаУниверсальногоОбмена.РежимОбмена = "Выгрузка";
		ОбработкаУниверсальногоОбмена.ИмяФайлаПравилОбмена = СтруктураИменВременныхФайлов.ИмяФайлаПравил;
		
		ОбработкаУниверсальногоОбмена.ЗагрузитьПравилаОбмена();
		
		ДополнитьСтрокиПравилВыгрузкиИнформациейОбУзле( ОбработкаУниверсальногоОбмена.ТаблицаПравилВыгрузки.Строки, УзелИнформационнойБазы );
		//ОбщегоНазначения.УстановитьЗначениеКолонкиВСтрокахДереваЗначений( , УзелИнформационнойБазы, "СсылкаНаУзелОбмена", Истина );
		
		ОбработкаУниверсальногоОбмена.ИнициализироватьПервоначальныеЗначенияПараметров();
		СтруктураСОписаниеУзла = ПолучитьСтруктуруСОписаниемУзлаПоСсылке( УзелИнформационнойБазы );
		ДополнитьТаблицуПараметровОбработкиУниверсальногоОбменаИнформациейОбУзле( ОбработкаУниверсальногоОбмена.ТаблицаНастройкиПараметров, СтруктураСОписаниеУзла );
		
		ПрефиксИмениФайлаВыгрузки = СформироватьИмяФайлаСообщенияОбменаДляУзла_Отправка( УзелИнформационнойБазы );
		СтруктураИменВременныхФайлов.Вставить( "ИмяФайлаВыгрузки", КаталогВременныхФайлов() + ПрефиксИмениФайлаВыгрузки + "_" + Формат( ТекущаяДата(), "ДФ=ггггММддЧЧммсс" ) + ".xml" );
		ОбработкаУниверсальногоОбмена.ИмяФайлаОбмена = СтруктураИменВременныхФайлов.ИмяФайлаВыгрузки;
		
		СтруктураИменВременныхФайлов.Вставить( "ИмяФайлаПротоколаОбмена", ПолучитьИмяВременногоФайла( "txt" ) );
		ОбработкаУниверсальногоОбмена.ИмяФайлаПротоколаОбмена = СтруктураИменВременныхФайлов.ИмяФайлаПротоколаОбмена;
		
		// выполним выгрузку по правилам
		ОбработкаУниверсальногоОбмена.ВыполнитьВыгрузку();
			
		// прочитаем файл с данными в структуру сообщения
		Если СтруктураНастроекТранспорта.FILEСжиматьФайлИсходящегоСообщения = Истина Тогда
			
			СтруктураИменВременныхФайлов.Вставить( "ИмяФайлаАрхива", ПолучитьИмяВременногоФайла( "zip" ) );
			
			ЗаписьАрхив = Новый ЗаписьZipФайла( СтруктураИменВременныхФайлов.ИмяФайлаАрхива, ПарольАрхива );
			ЗаписьАрхив.Добавить( СтруктураИменВременныхФайлов.ИмяФайлаВыгрузки ); 
			ЗаписьАрхив.Записать();
			
			СтруктураЗаписиСообщения.ИмяФайлаСообщения = ПрефиксИмениФайлаВыгрузки + ".zip";
			СтруктураЗаписиСообщения.ХранилищеСообщения = Новый ХранилищеЗначения( Новый ДвоичныеДанные( СтруктураИменВременныхФайлов.ИмяФайлаАрхива ), Новый СжатиеДанных(0) );
			
		Иначе
			СтруктураЗаписиСообщения.ИмяФайлаСообщения = ПрефиксИмениФайлаВыгрузки + ".xml";
			СтруктураЗаписиСообщения.ХранилищеСообщения = Новый ХранилищеЗначения( Новый ДвоичныеДанные( СтруктураИменВременныхФайлов.ИмяФайлаВыгрузки ), Новый СжатиеДанных(9) );
		КонецЕсли;
		
		// прочитаем протокол обмена
		Попытка
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать( СтруктураИменВременныхФайлов.ИмяФайлаПротоколаОбмена );
			СтруктураЗаписиСообщения.СообщенияРезультата = ТекстовыйДокумент.ПолучитьТекст();
		Исключение
		КонецПопытки;
		
		// закончим заполнение структуры сообщения
		СтруктураЗаписиСообщения.ДатаОкончанияФормирования = ТекущаяДата();
		СтруктураЗаписиСообщения.НомерСообщения = СтруктураСОписаниеУзла.НомерОтправленного + 1;
		СтруктураЗаписиСообщения.ОбновитьНомерВУзлеПослеЗагрузки = Истина;
		СтруктураЗаписиСообщения.НомерПоследнегоСообщенияПринятогоУзлом = СтруктураСОписаниеУзла.НомерПринятого;
		
		// обновим номер отправленного в узле
		УзелИнформационнойБазыОбъект = УзелИнформационнойБазы.ПолучитьОбъект();
		Если УзелИнформационнойБазыОбъект.НомерОтправленного < СтруктураЗаписиСообщения.НомерСообщения Тогда
			УзелИнформационнойБазыОбъект.НомерОтправленного = СтруктураЗаписиСообщения.НомерСообщения;
			УзелИнформационнойБазыОбъект.Записать();
		КонецЕсли;
		
		Если ОбработкаУниверсальногоОбмена.ФлагОшибки = Истина Тогда
			СтруктураЗаписиСообщения.Результат = ПредопределенноеЗначение( "Перечисление.РезультатыВыполненияОбмена.Ошибка" );
			СтруктураЗаписиСообщения.Выгружено = Истина; // устанавливаем в Истина, т.к. сообщения собственно нет и выгружать нечего
		Иначе
			СтруктураЗаписиСообщения.Результат = ПредопределенноеЗначение( "Перечисление.РезультатыВыполненияОбмена.Выполнено" );
		КонецЕсли;
		
	Исключение
		
		СтруктураЗаписиСообщения.Результат = ПредопределенноеЗначение( "Перечисление.РезультатыВыполненияОбмена.Ошибка" );
		СтруктураЗаписиСообщения.СообщенияРезультата = Строка( СтруктураЗаписиСообщения.СообщенияРезультата ) + Символы.ПС + "Исключительная ситуация при формировании сообщения обмена данными по причине: " + ОписаниеОшибки();
		СтруктураЗаписиСообщения.Выгружено = Истина; // устанавливаем в Истина, т.к. сообщения собственно нет и выгружать нечего
		
	КонецПопытки;
		
	// удалим временные файлы
	Для Каждого КлючИЗначение Из СтруктураИменВременныхФайлов Цикл
		
		Попытка
			УдалитьФайлы( КлючИЗначение.Значение );
		Исключение
		КонецПопытки;
		
	КонецЦикла;
		
	СтруктураЗаписиСообщения.Период = ТекущаяДата();
	
	РегистрыСведений.СформированныеСообщенияОбменовДанными.ОбновитьДобавитьЗапись( СтруктураЗаписиСообщения );
	
КонецПроцедуры

Процедура ДополнитьТаблицуПараметровОбработкиУниверсальногоОбменаИнформациейОбУзле( ТаблицаПараметров, СтруктураСОписаниемУзла )
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить( "ИмяПланаОбмена", СтруктураСОписаниемУзла.ИмяПланаОбмена );
	СтруктураПараметров.Вставить( "КодУзлаОтправителя", СтруктураСОписаниемУзла.КодЭтогоУзла );
	СтруктураПараметров.Вставить( "КодУзлаПолучателя", СтруктураСОписаниемУзла.КодУзла );
	СтруктураПараметров.Вставить( "НомерТекущегоСообщения", СтруктураСОписаниемУзла.НомерОтправленного + 1 );
	СтруктураПараметров.Вставить( "НомерПринятогоСообщения", СтруктураСОписаниемУзла.НомерПринятого );
	СтруктураПараметров.Вставить( "__СформированоПодсистемойExchangeFromUniversalXML__", Истина );
	
	Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
		
		СтрокаПараметра = ТаблицаПараметров.Найти( КлючИЗначение.Ключ, "Имя" );
		Если СтрокаПараметра = Неопределено Тогда
			СтрокаПараметра = ТаблицаПараметров.Добавить();
			СтрокаПараметра.Имя = КлючИЗначение.Ключ;
			СтрокаПараметра.Наименование = КлючИЗначение.Ключ;
		КонецЕсли;
		
		СтрокаПараметра.Значение = КлючИЗначение.Значение;
		СтрокаПараметра.ПередаватьПараметрПриВыгрузке = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСтрокиПравилВыгрузкиИнформациейОбУзле( СтрокиПравилВыгрузки, УзелИнформационнойБазы )
	
	Для Каждого СтрокаПравилВыгрузки Из СтрокиПравилВыгрузки Цикл
		
		Если СтрокаПравилВыгрузки.ЭтоГруппа = Истина Тогда
			ДополнитьСтрокиПравилВыгрузкиИнформациейОбУзле( СтрокаПравилВыгрузки.Строки, УзелИнформационнойБазы );
		Иначе
			СтрокаПравилВыгрузки.СсылкаНаУзелОбмена = УзелИнформационнойБазы;
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

// Процедура - Оправить сообщения обмена для выгрузки в узел
//     Отправляет сообщения обмена в соответсвии с настройками транспорта узла
//
// Параметры:
//  УзелИнформационнойБазы	 - ПланыОбменаСсылка - ссылка узла, для которого необходимо отправить сообщения обмена
//  ВидТранспортаОбмена		 - ПеречислениеСсылка.ВидыТранспортаСообщенийОбмена - настройка транспорта при помощи которого необходимо отправить сообщения обмена
//
Процедура ОправитьСообщенияОбменаДляВыгрузкиВУзел( УзелИнформационнойБазы, ВидТранспортаОбмена ) Экспорт
	
	Если ВидТранспортаОбмена = ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.FILE" ) Тогда
		
		ОтправитьСообщенияОбменаДляУзла_ТранспортФайл( УзелИнформационнойБазы );
		
	ИначеЕсли ВидТранспортаОбмена = ПредопределенноеЗначение( "Перечисление.ВидыТранспортаСообщенийОбмена.WS" ) Тогда
		
		ОтправитьСообщенияОбменаДляУзла_ТранспортВебСервис( УзелИнформационнойБазы );
		
	Иначе
		
		ВызватьИсключение "Вид транспорта обмена " + ВидТранспортаОбмена + " не поддерживается.";
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - Получить следующее сообщение для выгрузки и отметить как выгруженное
//    Получает следующее сообщение обмена, предназначенное для выгрузки в узел
//
// Параметры:
//  УзелИнформационнойБазы	 - ПланыОбменаСсылка - ссылка узла, для которого ищется сообщение обмена
// 
// Возвращаемое значение:
//   - Структура, Неопределено - Структура с сообщением обмена или Неопределено, если сообщений к выгрузке нет
//
Функция ПолучитьСледующееСообщениеДляВыгрузки( УзелИнформационнойБазы ) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	Возврат РегистрыСведений.СформированныеСообщенияОбменовДанными.ПолучитьСледующееСообщениеДляВыгрузки( УзелИнформационнойБазы );
	
КонецФункции

// Процедура - Отметить сообщение для выгрузки как выгруженное
//     Обновляет запись в регистре сообщений к выгрузке о результате выгрузки
//
// Параметры:
//  СтруктураСообщения	 - Структура - структура с сообщением обмена для выгрузки
//
Процедура ОтметитьСообщениеДляВыгрузкиКакВыгруженное( СтруктураСообщения ) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	СтруктураСообщения.Вставить( "Выгружено", Истина );
	СтруктураСообщения.Вставить( "ДатаВыгрузки", ТекущаяДата() );
	
	РегистрыСведений.СформированныеСообщенияОбменовДанными.ОбновитьДобавитьЗапись( СтруктураСообщения );
	
КонецПроцедуры

// Добавляет одну запись в регистр сведений по переданным значениям структуры.
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо создать набор записей и заполнить этот
//                                набор.
//  ИмяРегистра     - Строка - имя регистра сведений, в который необходимо добавить запись.
// 
Процедура ДобавитьЗаписьВРегистрСведений(СтруктураЗаписи, Знач ИмяРегистра, Загрузка = Ложь) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений( СтруктураЗаписи, ИмяРегистра );
	
	// Добавляем только одну запись в новый набор записей.
	НоваяЗапись = НаборЗаписей.Добавить();
	
	// Заполняем значения свойств записи из переданной структуры.
	ЗаполнитьЗначенияСвойств( НоваяЗапись, СтруктураЗаписи );
	
	НаборЗаписей.ОбменДанными.Загрузка = Загрузка;
	
	// записываем набор записей
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Обновляет запись в регистр сведений по переданным значениям структуры.
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо создать менеджер записи и обновить запись.
//  ИмяРегистра     - Строка - имя регистра сведений, в котором необходимо обновить запись.
// 
Процедура ОбновитьЗаписьВРегистрСведений(СтруктураЗаписи, Знач ИмяРегистра) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// Создаем менеджер записи регистра.
	МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	
	// Устанавливаем отбор по измерениям регистра.
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		
		// Если задано значение в структуре, то отбор устанавливаем.
		Если СтруктураЗаписи.Свойство(Измерение.Имя) Тогда
			
			МенеджерЗаписи[Измерение.Имя] = СтруктураЗаписи[Измерение.Имя];
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Считываем запись из базы данных.
	МенеджерЗаписи.Прочитать();
	
	// Заполняем значения свойств записи из переданной структуры.
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураЗаписи);
	
	// записываем менеджер записи
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Удаляет набор записей в регистре по переданным значениям структуры.
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо удалить набор записей.
//  ИмяРегистра     - Строка - имя регистра сведений, в котором необходимо удалить набор записей.
// 
Процедура УдалитьНаборЗаписейВРегистреСведений(СтруктураЗаписи, ИмяРегистра, Загрузка = Ложь) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра);
	
	НаборЗаписей.ОбменДанными.Загрузка = Загрузка;
	
	// записываем набор записей
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Создает набор записей регистра сведений по переданным значениям структуры. Добавляет одну запись в набор.
//
// Параметры:
//  СтруктураЗаписи - Структура - структура по значениям которой необходимо создать набор записей и заполнить этот
//                                набор.
//  ИмяРегистра     - Строка - имя регистра сведений.
// 
Функция СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра)
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ ИмяРегистра ];
	
	// Создаем набор записей регистра.
	НаборЗаписей = РегистрыСведений[ ИмяРегистра ].СоздатьНаборЗаписей();
	
	// Устанавливаем отбор набора записей.
	Для Каждого Отбор Из НаборЗаписей.Отбор Цикл
		
		// Если задано значение в структуре, то отбор устанавливаем.
		Если СтруктураЗаписи.Свойство( Отбор.Имя ) Тогда
			Отбор.Установить( СтруктураЗаписи[ Отбор.Имя ] );
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборЗаписей;
	
КонецФункции

// Функция - Получить ссылку узла по имени плана обмена и коду
//
// Параметры:
//  ИмяПланаОбмена	 - Строка - имя плана обмена
//  КодУзла			 - Строка - код узла плана обмена
// 
// Возвращаемое значение:
//   - ПланыОбменаСсылка, Неопределено - Неопределено, если узел не удалось найти
//
Функция ПолучитьСсылкуУзлаПоИмениПланаОбменаИКоду( ИмяПланаОбмена, КодУзла ) Экспорт
	
	МетаданныеПланаОбмена = Метаданные.ПланыОбмена.Найти( ИмяПланаОбмена );
	
	Если МетаданныеПланаОбмена = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	табПланОбмена.Ссылка КАК Ссылка,
	|	табПланОбмена.Код КАК Код
	|ИЗ
	|	&ПолноеИмяПланаОбмена КАК табПланОбмена
	|ГДЕ
	|	табПланОбмена.Код ПОДОБНО &КодУзла";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "КодУзла", "%" + КодУзла + "%" );
	Запрос.Текст = СтрЗаменить( ТекстЗапроса, "&ПолноеИмяПланаОбмена", МетаданныеПланаОбмена.ПолноеИмя() );
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВРег( СокрЛП( Выборка.Код ) ) = ВРег( СокрЛП( КодУзла ) ) Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Функция - Получить структуру с описанием узла по ссылке
//
// Параметры:
//  УзелИнформационнойБазы	 - ПланОбменаСсылка
// 
// Возвращаемое значение:
//   - Структура - структура со следующими ключами - ИмяПланаОбмена, КодУзла, КодЭтогоУзла, НомерПринятого, НомерОтправленного
//
Функция ПолучитьСтруктуруСОписаниемУзлаПоСсылке( УзелИнформационнойБазы ) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	СтруктураСОписаниемУзла = Новый Структура( "ИмяПланаОбмена, КодУзла, КодЭтогоУзла, НомерПринятого, НомерОтправленного" );
	
	СтруктураСОписаниемУзла.ИмяПланаОбмена = УзелИнформационнойБазы.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "Узел", УзелИнформационнойБазы );
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК ЭтотУзел,
	|	табПланаОбмена.Код КАК Код,
	|	табПланаОбмена.НомерПринятого КАК НомерПринятого,
	|	табПланаОбмена.НомерОтправленного КАК НомерОтправленного
	|ИЗ
	|	ПланОбмена.[ИмяПланаОбмена] КАК табПланаОбмена
	|ГДЕ
	|	табПланаОбмена.Ссылка = &Узел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	ОбменМеждуЦентральнойИСкладской.Код,
	|	ОбменМеждуЦентральнойИСкладской.НомерПринятого,
	|	ОбменМеждуЦентральнойИСкладской.НомерОтправленного
	|ИЗ
	|	ПланОбмена.[ИмяПланаОбмена] КАК ОбменМеждуЦентральнойИСкладской
	|ГДЕ
	|	ОбменМеждуЦентральнойИСкладской.ЭтотУзел = ИСТИНА";
	
	Запрос.Текст = СтрЗаменить( ТекстЗапроса, "[ИмяПланаОбмена]", СтруктураСОписаниемУзла.ИмяПланаОбмена );
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтотУзел = Истина Тогда
			СтруктураСОписаниемУзла.КодЭтогоУзла = Выборка.Код;
		Иначе
			СтруктураСОписаниемУзла.КодУзла = Выборка.Код;
			СтруктураСОписаниемУзла.НомерПринятого = Выборка.НомерПринятого;
			СтруктураСОписаниемУзла.НомерОтправленного = Выборка.НомерОтправленного;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураСОписаниемУзла;
	
КонецФункции

// Точка входа для выполнения удаления старых сообещний обмена данными
// Параметры удаления определяются сожержимым регистра сведений ПараметрыУдаленияСтарыхСообщенийОбмена
Процедура УдалениеСтарыхСообщенийОбмена() Экспорт

	УстановитьПривилегированныйРежим( Истина );
	
	// для начала проверим наличие настроек по умолчанию
	НаборЗаписей = РегистрыСведений.ПараметрыУдаленияСтарыхСообщенийОбмена.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УзелИнформационнойБазы.Установить( Неопределено );
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Запись = НаборЗаписей.Добавить();
		
		Запись.УзелИнформационнойБазы = Неопределено;
		Запись.ХранитьДнейНеБолее = 365;
		Запись.ХранитьШтукНеБолее = 500000;
		
		НаборЗаписей.Записать( Истина );
		
	КонецЕсли;
	
	// выполним выборку настроек удаления старых сообщений
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыУдаленияСтарыхСообщенийОбмена.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	ПараметрыУдаленияСтарыхСообщенийОбмена.ХранитьДнейНеБолее КАК ХранитьДнейНеБолее,
	|	ПараметрыУдаленияСтарыхСообщенийОбмена.ХранитьШтукНеБолее КАК ХранитьШтукНеБолее
	|ПОМЕСТИТЬ табРегистра
	|ИЗ
	|	РегистрСведений.ПараметрыУдаленияСтарыхСообщенийОбмена КАК ПараметрыУдаленияСтарыхСообщенийОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	табРегистра.УзелИнформационнойБазы КАК УзелИнформационнойБазы
	|ПОМЕСТИТЬ табУзловСНастройками
	|ИЗ
	|	табРегистра КАК табРегистра
	|ГДЕ
	|	табРегистра.УзелИнформационнойБазы <> НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	УзелИнформационнойБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	табРегистра.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	табРегистра.ХранитьДнейНеБолее КАК ХранитьДнейНеБолее,
	|	табРегистра.ХранитьШтукНеБолее КАК ХранитьШтукНеБолее
	|ИЗ
	|	табРегистра КАК табРегистра
	|ГДЕ
	|	(табРегистра.ХранитьДнейНеБолее > 0
	|			ИЛИ табРегистра.ХранитьШтукНеБолее > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ табРегистра";
	
	ВыборкаНастроекУдалния = Запрос.Выполнить().Выбрать();
	
	СтруктураНаборовЗаписей = Новый Структура;
	СтруктураНаборовЗаписей.Вставить( "Полученные", РегистрыСведений.ПолученныеСообщенияОбменовДанными.СоздатьНаборЗаписей() );
	СтруктураНаборовЗаписей.Вставить( "Сформированные", РегистрыСведений.СформированныеСообщенияОбменовДанными.СоздатьНаборЗаписей() );
	
	ИсходныйТекстЗапроса =
	"ВЫБРАТЬ
	|	МИНИМУМ(табДопустимыхПериодов.Период) КАК МинимальныйДопустимыйПериод
	|ПОМЕСТИТЬ табМинимальногоПериодаДляПолученных
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ПолученныеСообщенияОбменовДанными.Период КАК Период
	|	ИЗ
	|		РегистрСведений.ПолученныеСообщенияОбменовДанными КАК ПолученныеСообщенияОбменовДанными
	|	ГДЕ
	|		ПолученныеСообщенияОбменовДанными.Период >= &ДатаОтсечения
	|		И ПолученныеСообщенияОбменовДанными.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		Период УБЫВ) КАК табДопустимыхПериодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(табДопустимыхПериодов.Период) КАК МинимальныйДопустимыйПериод
	|ПОМЕСТИТЬ табМинимальногоПериодаДляСформированных
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		СформированныеСообщенияОбменовДанными.Период КАК Период
	|	ИЗ
	|		РегистрСведений.СформированныеСообщенияОбменовДанными КАК СформированныеСообщенияОбменовДанными
	|	ГДЕ
	|		СформированныеСообщенияОбменовДанными.Период >= &ДатаОтсечения
	|		И СформированныеСообщенияОбменовДанными.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		Период УБЫВ) КАК табДопустимыхПериодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Полученные"" КАК ВидСообщений,
	|	ПолученныеСообщенияОбменовДанными.Период КАК Период,
	|	ПолученныеСообщенияОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	ПолученныеСообщенияОбменовДанными.ВнеОчередиСообщений КАК ВнеОчередиСообщений
	|ИЗ
	|	РегистрСведений.ПолученныеСообщенияОбменовДанными КАК ПолученныеСообщенияОбменовДанными
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ табМинимальногоПериодаДляПолученных КАК табМинимальногоПериодаДляПолученных
	|		ПО ПолученныеСообщенияОбменовДанными.Период < табМинимальногоПериодаДляПолученных.МинимальныйДопустимыйПериод
	|ГДЕ
	|	ПолученныеСообщенияОбменовДанными.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Сформированные"",
	|	СформированныеСообщенияОбменовДанными.Период,
	|	СформированныеСообщенияОбменовДанными.УзелИнформационнойБазы,
	|	СформированныеСообщенияОбменовДанными.ВнеОчередиСообщений
	|ИЗ
	|	РегистрСведений.СформированныеСообщенияОбменовДанными КАК СформированныеСообщенияОбменовДанными
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ табМинимальногоПериодаДляСформированных КАК табМинимальногоПериодаДляСформированных
	|		ПО СформированныеСообщенияОбменовДанными.Период < табМинимальногоПериодаДляСформированных.МинимальныйДопустимыйПериод
	|ГДЕ
	|	СформированныеСообщенияОбменовДанными.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ табМинимальногоПериодаДляПолученных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ табМинимальногоПериодаДляСформированных";
	
	Пока ВыборкаНастроекУдалния.Следующий() Цикл
		
		ТекстЗапроса = ИсходныйТекстЗапроса;
		
		// установим отбор по узлу
		Если ВыборкаНастроекУдалния.УзелИнформационнойБазы = Неопределено Тогда
			ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "= &УзелИнформационнойБазы", "НЕ В (ВЫБРАТЬ табУзловСНастройками.УзелИнформационнойБазы ИЗ табУзловСНастройками КАК табУзловСНастройками)" );
		Иначе
			Запрос.УстановитьПараметр( "УзелИнформационнойБазы", ВыборкаНастроекУдалния.УзелИнформационнойБазы );
		КонецЕсли;
		
		// установим отбор по количеству записей
		Если ВыборкаНастроекУдалния.ХранитьШтукНеБолее = 0 Тогда
			ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "ПЕРВЫЕ 1", "" );
		Иначе
			ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + Формат( ВыборкаНастроекУдалния.ХранитьШтукНеБолее, "ЧГ=" ) );
		КонецЕсли;
		
		// установим отбор по количеству дней
		Если ВыборкаНастроекУдалния.ХранитьДнейНеБолее = 0 Тогда
			Запрос.УстановитьПараметр( "ДатаОтсечения", Дата( "00010101" ) );
		Иначе
			Запрос.УстановитьПараметр( "ДатаОтсечения", НачалоДня( ТекущаяДата() ) - (24*60*60*ВыборкаНастроекУдалния.ХранитьДнейНеБолее) );
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
		// получим записи для удаления и удалим их
		ВыборкаЗаписейДляУдаления = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЗаписейДляУдаления.Следующий() Цикл
			
			НаборЗаписей = СтруктураНаборовЗаписей[ ВыборкаЗаписейДляУдаления.ВидСообщений ];
			
			Для Каждого Отбор Из НаборЗаписей.Отбор Цикл
				Отбор.Установить( ВыборкаЗаписейДляУдаления[ Отбор.Имя ] );
			КонецЦикла;
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать( Истина );
			
		КонецЦикла;
		
	КонецЦикла;
		
	Запрос.МенеджерВременныхТаблиц.Закрыть();	
	
КонецПроцедуры

// Функция - Получить соответствие уникальному идентификатору информационной базы
//      Ищет ссылку, соответсвующую переданному УИД информационной базы по регистру СоответствиеИдентификаторовОбъектовИнформационныхБаз
//
// Параметры:
//  ИнформационнаяБаза		 - СправочникСсылка.ИнформационныеБазы - информационная база
//  ИдентификаторТипа		 - Строка, СправочникСсылка.ОписателиТиповИнформационныхБаз, Неопределено - идентификатор типа
//  УникальныйИдентификатор	 - Строка
//
// Возвращаемое значение:
//   - ЛюбаяСсылка, Неопределено - ссылка, соответствующая УИД или Неопределено, если соответствие не найдено
//
Функция ПолучитьСоответствиеУникальномуИдентификаторуИнформационнойБазы( ИнформационнаяБаза, ИдентификаторТипа, УникальныйИдентификатор ) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	Если ТипЗнч( ИдентификаторТипа ) = Тип( "Строка" ) И Не ПустаяСтрока( ИдентификаторТипа ) Тогда
		ОписательТипа = ОбменДаннымиПовтИсп.ПолучитьСсылкуОписателяТипаПоИдентификатору( ИнформационнаяБаза, ИдентификаторТипа );
	ИначеЕсли ТипЗнч( ИдентификаторТипа ) = Тип( "СправочникСсылка.ОписателиТиповИнформационныхБаз" ) Тогда
		ОписательТипа = ИдентификаторТипа;
	Иначе
		ОписательТипа = ПредопределенноеЗначение( "Справочник.ОписателиТиповИнформационныхБаз.ПустаяСсылка" );
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "ИнформационнаяБаза", ИнформационнаяБаза );
	Запрос.УстановитьПараметр( "ОписательТипа", ОписательТипа );
	Запрос.УстановитьПараметр( "УникальныйИдентификатор", УникальныйИдентификатор );
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеИдентификаторовОбъектовИнформационныхБаз.СсылкаТекущейБазы КАК СсылкаТекущейБазы
	|ИЗ
	|	РегистрСведений.СоответствиеИдентификаторовОбъектовИнформационныхБаз КАК СоответствиеИдентификаторовОбъектовИнформационныхБаз
	|ГДЕ
	|	СоответствиеИдентификаторовОбъектовИнформационныхБаз.ИнформационнаяБаза = &ИнформационнаяБаза
	|	И СоответствиеИдентификаторовОбъектовИнформационныхБаз.ОписательТипа = &ОписательТипа
	|	И СоответствиеИдентификаторовОбъектовИнформационныхБаз.УникальныйИдентификатор = &УникальныйИдентификатор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СсылкаТекущейБазы;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция - Получить таблицу уникальных идентификаторов информационной базы соответствующих ссылке
//    Пулачает таблицу уникальных идентификаторов информационной базы, соответствующих ссылке в текущей базе (по регистру СоответствиеИдентификаторовОбъектовИнформационныхБаз)
//
// Параметры:
//  ИнформационнаяБаза		 - СправочникСсылка.ИнформационныеБазы - информационная база
//  ИдентификаторТипа		 - Строка, СправочникСсылка.ОписателиТиповИнформационныхБаз, Неопределено - идентификатор типа, если Неопределено, то ищутся уникальные идентификаторы для всех возможных типов
//  СсылкаТекущейБазы		 - ЛюбаяСсылка - ссылка текущей базы, для которой ищется соответствие
//  АдресХранилищаРезультата - Строка - используется для возврата значения адреса временного хранилища, куда сохраняется полученная таблица
// 
// Возвращаемое значение:
//   - Число - количество строк в полученной талице
//
Функция ПолучитьТаблицуУникальныхИдентификаторовИнформационнойБазыСоответствующихСсылке( ИнформационнаяБаза, ИдентификаторТипа, СсылкаТекущейБазы, АдресХранилищаРезультата ) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	Если ТипЗнч( ИдентификаторТипа ) = Тип( "Строка" ) И Не ПустаяСтрока( ИдентификаторТипа ) Тогда
		ОписательТипа = ОбменДаннымиПовтИсп.ПолучитьСсылкуОписателяТипаПоИдентификатору( ИнформационнаяБаза, ИдентификаторТипа );
	ИначеЕсли ТипЗнч( ИдентификаторТипа ) = Тип( "СправочникСсылка.ОписателиТиповИнформационныхБаз" ) Тогда
		ОписательТипа = ИдентификаторТипа;
	Иначе
		ОписательТипа = Неопределено;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	табСоответствий.ОписательТипа КАК ОписательТипа,
	|	табСоответствий.ОписательТипа.ИдентификаторТипа КАК ИдентификаторТипа,
	|	табСоответствий.УникальныйИдентификатор КАК УникальныйИдентификатор
	|ИЗ
	|	РегистрСведений.СоответствиеИдентификаторовОбъектовИнформационныхБаз КАК табСоответствий
	|ГДЕ
	|	табСоответствий.ИнформационнаяБаза = &ИнформационнаяБаза
	|	И табСоответствий.СсылкаТекущейБазы = &СсылкаТекущейБазы
	|	И табСоответствий.ОписательТипа = &ОписательТипа";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "ИнформационнаяБаза", ИнформационнаяБаза );
	Запрос.УстановитьПараметр( "СсылкаТекущейБазы", СсылкаТекущейБазы );
	
	Если ОписательТипа = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "И табСоответствий.ОписательТипа = &ОписательТипа", "" );
	Иначе
		Запрос.УстановитьПараметр( "ОписательТипа", ОписательТипа );
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаУникальныхИдентификаторов = Запрос.Выполнить().Выгрузить();
	
	Если ТипЗнч( АдресХранилищаРезультата ) = Тип( "Строка" ) И Не ПустаяСтрока( АдресХранилищаРезультата ) Тогда
		АдресХранилищаРезультата = ПоместитьВоВременноеХранилище( ТаблицаУникальныхИдентификаторов, АдресХранилищаРезультата );
	Иначе
		АдресХранилищаРезультата = ПоместитьВоВременноеХранилище( ТаблицаУникальныхИдентификаторов );
	КонецЕсли;
	
	Возврат ТаблицаУникальныхИдентификаторов.Количество();
	
КонецФункции

// Процедура - Сохранить соответствие уникальному идентификатору информационной базы
//     Сохраняет соответствие уникальному идентификатору иформационной базы в регистре СоответствиеИдентификаторовОбъектовИнформационныхБаз
//
// Параметры:
//  ИнформационнаяБаза		 - СправочникСсылка.ИнформационныеБазы - информационная база
//  ИдентификаторТипа		 - Строка, СправочникСсылка.ОписателиТиповИнформационныхБаз, Неопределено - идентификатор типа, если Неопределено, то соответствие сохраняется без описателя типа
//  УникальныйИдентификатор	 - Строка - уникальный идентификатор информационной базы
//  СсылкаТекущейБазы		 - ЛюбаяСсылка - ссылка текущей базы, соответствующая уникальному идентификатору
//
Процедура СохранитьСоответствиеУникальномуИдентификаторуИнформационнойБазы( ИнформационнаяБаза, ИдентификаторТипа, УникальныйИдентификатор, СсылкаТекущейБазы ) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	Если ТипЗнч( ИдентификаторТипа ) = Тип( "Строка" ) И Не ПустаяСтрока( ИдентификаторТипа ) Тогда
		ОписательТипа = ОбменДаннымиПовтИсп.ПолучитьСсылкуОписателяТипаПоИдентификатору( ИнформационнаяБаза, ИдентификаторТипа );
	ИначеЕсли ТипЗнч( ИдентификаторТипа ) = Тип( "СправочникСсылка.ОписателиТиповИнформационныхБаз" ) Тогда
		ОписательТипа = ИдентификаторТипа;
	Иначе
		ОписательТипа = ПредопределенноеЗначение( "Справочник.ОписателиТиповИнформационныхБаз.ПустаяСсылка" );
	КонецЕсли;
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить( "ИнформационнаяБаза", ИнформационнаяБаза );
	СтруктураЗаписи.Вставить( "ОписательТипа", ОписательТипа );
	СтруктураЗаписи.Вставить( "УникальныйИдентификатор", УникальныйИдентификатор );
	СтруктураЗаписи.Вставить( "СсылкаТекущейБазы", СсылкаТекущейБазы );
	
	ДобавитьЗаписьВРегистрСведений( СтруктураЗаписи, "СоответствиеИдентификаторовОбъектовИнформационныхБаз" );
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции для обработки действий пользователя в процессе редактирования
// многострочного текста, например комментария в документах.

// Открывает форму редактирования произвольного многострочного текста.
//
// Параметры:
//  ОповещениеОЗакрытии     - ОписаниеОповещения - содержит описание процедуры, которая будет вызвана 
//                            после закрытия формы ввода текста с теми же параметрами, что и для метода
//                            ПоказатьВводСтроки.
//  МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать;
//  Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы.
//
// Пример:
//
//   Оповещение = Новый ОписаниеОповещения("КомментарийЗавершениеВвода", ЭтотОбъект);
//   ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Элемент.ТекстРедактирования);
//
//   &НаКлиенте
//   Процедура КомментарийЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
//      Если ВведенныйТекст = Неопределено Тогда
//		   Возврат;
//   	КонецЕсли;	
//	
//	   Объект.МногострочныйКомментарий = ВведенныйТекст;
//	   Модифицированность = Истина;
//   КонецПроцедуры
//
Процедура ПоказатьФормуРедактированияМногострочногоТекста(Знач ОповещениеОЗакрытии, 
	Знач МногострочныйТекст, Знач Заголовок = Неопределено) Экспорт
	
	Если Заголовок = Неопределено Тогда
		ПоказатьВводСтроки(ОповещениеОЗакрытии, МногострочныйТекст,,, Истина);
	Иначе
		ПоказатьВводСтроки(ОповещениеОЗакрытии, МногострочныйТекст, Заголовок,, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму редактирования многострочного комментария.
//
// Параметры:
//  МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать.
//  ФормаВладелец 			- УправляемаяФорма - форма, в поле которой выполняется ввод комментария.
//  ИмяРеквизита            - Строка - имя реквизита формы, в который будет помещен введенный пользователем
//                                     комментарий.
//  Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы.
//                                     По умолчанию: "Комментарий".
//
// Пример использования:
//
//	 ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
//
Процедура ПоказатьФормуРедактированияКомментария(Знач МногострочныйТекст, Знач ФормаВладелец, Знач ИмяРеквизита, 
	Знач Заголовок = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ФормаВладелец,ИмяРеквизита", ФормаВладелец, ИмяРеквизита);
	Оповещение = Новый ОписаниеОповещения("КомментарийЗавершениеВвода", ЭтотОбъект, ДополнительныеПараметры);
	ЗаголовокФормы = ?(Заголовок <> Неопределено, Заголовок, НСтр("ru='Комментарий'"));
	ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, МногострочныйТекст, ЗаголовокФормы);
	
КонецПроцедуры

Процедура КомментарийЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	РеквизитФормы = ДополнительныеПараметры.ФормаВладелец;
	
	ПутьКРеквизитуФормы = СтрРазделить(ДополнительныеПараметры.ИмяРеквизита, ".");
	// Если реквизит вида "Объект.Комментарий" и т.п.
	Если ПутьКРеквизитуФормы.Количество() > 1 Тогда
		Для Индекс = 0 По ПутьКРеквизитуФормы.Количество() - 2 Цикл 
			РеквизитФормы = РеквизитФормы[ПутьКРеквизитуФормы[Индекс]];
		КонецЦикла;
	КонецЕсли;	
	
	РеквизитФормы[ПутьКРеквизитуФормы[ПутьКРеквизитуФормы.Количество() - 1]] = ВведенныйТекст;
	ДополнительныеПараметры.ФормаВладелец.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещенияОЗакрытии, ТекстПредложения = "", 
	ВозможноПродолжениеБезУстановки = Истина) Экспорт
	
	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ПоказатьВопросОбУстановкеРасширенияРаботыСФайламиЗавершение",
		ЭтотОбъект, ОписаниеОповещенияОЗакрытии);
	
	// В тонком и толстом клиентах расширение подключено всегда.
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, "ПодключениеНеТребуется");
	
КонецПроцедуры

Процедура ПоказатьВопросОбУстановкеРасширенияРаботыСФайламиЗавершение(Действие, ОповещениеОЗакрытии) Экспорт
	
	РасширениеПодключено = (Действие = "РасширениеПодключено" Или Действие = "ПодключениеНеТребуется");
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗакрытии, РасширениеПодключено);
	
КонецПроцедуры

// Открывает форму ФормаРМКУправляемаяИнформацииОбОшибке в модальном режиме из РМК (управляемый режим).




//
Функция ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации, 
												ОбработчикОповещения = Неопределено,
												ВладелецФормы = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокИнформации", ПараметрыИнформации.ЗаголовокИнформации);
	
	Если ПараметрыИнформации.Свойство("ТекстИнформации") Тогда
		ПараметрыФормы.Вставить("ТекстИнформации", ПараметрыИнформации.ТекстИнформации);
	КонецЕсли;
	
	Если ПараметрыИнформации.Свойство("ТипОтвета") И ЗначениеЗаполнено(ПараметрыИнформации.ТипОтвета) Тогда
		ПараметрыФормы.Вставить("ТипОтвета", ПараметрыИнформации.ТипОтвета);
	КонецЕсли;
	
	Если ПараметрыИнформации.Свойство("ОтветПоУмолчанию") И ЗначениеЗаполнено(ПараметрыИнформации.ОтветПоУмолчанию) Тогда
		ПараметрыФормы.Вставить("ОтветПоУмолчанию", ПараметрыИнформации.ОтветПоУмолчанию);
	КонецЕсли;
	
	Если ПараметрыИнформации.Свойство("ПоказатьПодсказку") И ПараметрыИнформации.ПоказатьПодсказку Тогда
		ПараметрыФормы.Вставить("Подсказка", ПараметрыИнформации.Подсказка);
	КонецЕсли;
	
	Если ВладелецФормы = Неопределено Тогда
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("ОбщаяФорма.ФормаРМКУправляемаяИнформацииОбОшибке", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
	Иначе
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("ОбщаяФорма.ФормаРМКУправляемаяИнформацииОбОшибке", ПараметрыФормы, ВладелецФормы,,,, ОбработчикОповещения, Режим); 
	КонецЕсли;
	
КонецФункции

// Процедура открывает форму ФормаРМКУправляемаяИнформацииОбОшибке с текстом информации.
//
Процедура ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, 
											 ТекстИнформации = Неопределено, 
											 ОбработчикОповещения = Неопределено, 
											 ВладелецФормы = Неопределено,
											 Подсказка = Неопределено) Экспорт
	
	ПараметрыИнформации = ОбщегоНазначенияКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	ПараметрыИнформации.ЗаголовокИнформации = ЗаголовокИнформации;
	Если ТекстИнформации = Неопределено Тогда
		ПараметрыИнформации.ТекстИнформации = Символы.Таб;
	Иначе
		ПараметрыИнформации.ТекстИнформации = ТекстИнформации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подсказка) Тогда
		ПараметрыИнформации.ПоказатьПодсказку = Истина;
		ПараметрыИнформации.Подсказка = Подсказка;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации, ОбработчикОповещения, ВладелецФормы);
	
КонецПроцедуры

// Открывает форму ФормаРМКУправляемаяИнформацииОбОшибке с текстом вопроса.
//
Функция ВывестиВопросДляРМКУправляемой(ЗаголовокИнформации, 
									   ТекстИнформации = Неопределено, 
									   ОтветПоУмолчанию = "Нет", 
									   ОбработчикОповещения = Неопределено,
									   ВладелецФормы = Неопределено) Экспорт

	ПараметрыИнформации = ОбщегоНазначенияКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	ПараметрыИнформации.ЗаголовокИнформации = ЗаголовокИнформации;
	Если ТекстИнформации = Неопределено Тогда
		ПараметрыИнформации.ТекстИнформации = Символы.Таб;
	Иначе
		ПараметрыИнформации.ТекстИнформации = ТекстИнформации;



	КонецЕсли;
	ПараметрыИнформации.ТипОтвета           = "Вопрос";
	ПараметрыИнформации.ОтветПоУмолчанию    = ОтветПоУмолчанию;
	
	ОбщегоНазначенияКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации, ОбработчикОповещения, ВладелецФормы);
	
КонецФункции

#Область ДобавленныеПроцедурыДляКалендаря

// Функция получает цвет стиля по имени элемента стиля.
//
// Параметры:
//  ИмяЦветаСтиля - Строка - имя элемента стиля.
//
// Возвращаемое значение:
//  Цвет - цвет стиля.
//
Функция ЦветСтиля(ИмяЦветаСтиля) Экспорт
	
	Возврат ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля(ИмяЦветаСтиля);
	
КонецФункции

// Функция получает шрифт стиля по имени элемента стиля.
//
// Параметры:
//  ИмяШрифтаСтиля - Строка - имя элемента стиля.
//
// Возвращаемое значение:
//  Шрифт - шрифт стиля.
//
Функция ШрифтСтиля(ИмяШрифтаСтиля) Экспорт
	
	Возврат ОбщегоНазначенияКлиентПовтИсп.ШрифтСтиля(ИмяШрифтаСтиля);
	
КонецФункции

// Возвращает ссылку на общий модуль по имени.
//
// Параметры:
//  Имя - Строка - имя общего модуля, например:
//                 "ОбщегоНазначения",
//                 "ОбщегоНазначенияКлиент".
//
// Возвращаемое значение:
//  ОбщийМодуль - общий модуль.
//
Функция ОбщийМодуль(Имя) Экспорт
	
	Модуль = Вычислить(Имя);
	
#Если НЕ ВебКлиент Тогда
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
	КонецЕсли;
#КонецЕсли
	
	Возврат Модуль;
	
КонецФункции

#КонецОбласти

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 
Функция ПостроитьПуть(СтекИмен) Экспорт

	Путь = "";
	Для Каждого Имя Из СтекИмен Цикл
		Путь = Путь + ?(Путь = "", "", "|") + Имя;
	КонецЦикла;
	Возврат Путь;

КонецФункции
Функция ПривестиКТипу(текКолонка, текЗначение) Экспорт

	Если Строка(текКолонка.ТипЗначения) = "Строка" Тогда
		текЗначение = СокрЛП(текЗначение);

	ИначеЕсли Строка(текКолонка.ТипЗначения) = "Число" Тогда
		текЗначение = ?(текЗначение = "", 0, Число(текЗначение));

	ИначеЕсли Строка(текКолонка.ТипЗначения) = "Дата" И ТипЗнч(текЗначение) <> Тип("Дата") Тогда
		Если ПустаяСтрока(текЗначение) Тогда
			текЗначение = ТекущаяДата();
		Иначе
			Если СтрНайти(текЗначение, ".") > 0 Тогда
				ДатаМассив = РазложитьСтрокуВМассивПодстрок(текЗначение, ".");
			ИначеЕсли СтрНайти(текЗначение, "-") > 0 Тогда
				ДатаМассив = РазложитьСтрокуВМассивПодстрок(текЗначение, "-");
			Иначе
				ДатаМассив = РазложитьСтрокуВМассивПодстрок(текЗначение, ",");
			КонецЕсли; 
			
			Если СтрДлина(ДатаМассив[0]) = 4 Тогда
				// Формат даты ГГГГ.ММ.ДД
				текЗначение = Дата(ДатаМассив[0], ДатаМассив[1], ДатаМассив[2]);
			Иначе
				// Формат даты ДД.ММ.ГГГГ
				текЗначение = Дата(ДатаМассив[2], ДатаМассив[1], ДатаМассив[0]);
			КонецЕсли; 
		КонецЕсли;

	ИначеЕсли Строка(текКолонка.ТипЗначения) = "Булево" Тогда
		текЗначение = ?(текЗначение = "0", Ложь, Истина);
	КонецЕсли; 

	Возврат текЗначение;

КонецФункции
Функция ПодключитьсяКFTPСерверу(стрПараметры) Экспорт

    Соединение = Новый FTPСоединение(
		стрПараметры.АдресFTP,			// адрес ftp сервера
        21,								// порт сервера
        стрПараметры.ИмяПользователя,	// имя пользователя
        стрПараметры.Пароль,			// пароль пользователя
        Неопределено,					// прокси не используется
        Истина,							// пассивный режим работы
        0,								// таймаут (0 - без ограничений)
        Неопределено // незащищенное соединение
    );

    Возврат Соединение;

КонецФункции


Процедура ЗагрузитьПрайсыПоставщиков() Экспорт
	
	ДанныеЗагрузки = Новый Структура;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Поставщики.Поставщик,
		|	Поставщики.Договор,
		|	Поставщики.АдресFTP,
		|	Поставщики.Логин,
		|	Поставщики.Пароль,
		|	НастройкиПрайсовПоставщиков.Папка,
		|	НастройкиПрайсовПоставщиков.Маска,
		|	НастройкиПрайсовПоставщиков.Кодировка,
		|	НастройкиПрайсовПоставщиков.Формат,
		|	НастройкиПрайсовПоставщиков.Разделитель,
		|	НастройкиПрайсовПоставщиков.have_field_names,
		|	НастройкиПрайсовПоставщиков.Код,
		|	НастройкиПрайсовПоставщиков.Название,
		|	НастройкиПрайсовПоставщиков.КолВУпаковке,
		|	НастройкиПрайсовПоставщиков.ФормаВыпуска,
		|	НастройкиПрайсовПоставщиков.Производитель,
		|	НастройкиПрайсовПоставщиков.Цена,
		|	НастройкиПрайсовПоставщиков.ЦенаРег,
		|	НастройкиПрайсовПоставщиков.Остаток,
		|	НастройкиПрайсовПоставщиков.СтавкаНДС,
		|	НастройкиПрайсовПоставщиков.СтавкаНСП,
		|	НастройкиПрайсовПоставщиков.СрокГодности,
		|	НастройкиПрайсовПоставщиков.КодЕГК,
		|	НастройкиПрайсовПоставщиков.Баркод,
		|	НастройкиПрайсовПоставщиков.СтранаПроизводитель,
		|	НастройкиПрайсовПоставщиков.ЖВЛ,
		|	НастройкиПрайсовПоставщиков.Дата,
		|	НастройкиПрайсовПоставщиков.НачальнаяСтрока,
		|	НастройкиПрайсовПоставщиков.ИзПочты,
		|	НастройкиПрайсовПоставщиков.НеУстанавливатьМинКол
		|ИЗ
		|	РегистрСведений.Поставщики КАК Поставщики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПрайсовПоставщиков КАК НастройкиПрайсовПоставщиков
		|		ПО Поставщики.Поставщик = НастройкиПрайсовПоставщиков.Поставщик
		|			И Поставщики.Договор = НастройкиПрайсовПоставщиков.Договор
		|ГДЕ
		|	Поставщики.Активно = ИСТИНА";

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	структНастройки = Новый Структура;
	табЗагруженныйПрайс = Новый ТаблицаЗначений;
	табЗагруженныйПрайс.Колонки.Добавить("Коробочный", Новый ОписаниеТипов("Число"));
	табЗагруженныйПрайс.Колонки.Добавить("Баркод", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(20));
	табЗагруженныйПрайс.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	табЗагруженныйПрайс.Колонки.Добавить("ЖВЛ", Новый ОписаниеТипов("Булево"));
	табЗагруженныйПрайс.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(50));
	табЗагруженныйПрайс.Колонки.Добавить("КодЕГК", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(50));
	табЗагруженныйПрайс.Колонки.Добавить("Название", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(250));
	табЗагруженныйПрайс.Колонки.Добавить("КолВУпаковке", Новый ОписаниеТипов("Число"));
	табЗагруженныйПрайс.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Число"));
	табЗагруженныйПрайс.Колонки.Добавить("Производитель", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(250));
	табЗагруженныйПрайс.Колонки.Добавить("СрокГодности", Новый ОписаниеТипов("Дата"));
	табЗагруженныйПрайс.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("Число"));
	табЗагруженныйПрайс.Колонки.Добавить("СтавкаНСП", Новый ОписаниеТипов("Число"));
	табЗагруженныйПрайс.Колонки.Добавить("СтранаПроизводитель", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(250));
	табЗагруженныйПрайс.Колонки.Добавить("ФормаВыпуска", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(250));
	табЗагруженныйПрайс.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	табЗагруженныйПрайс.Колонки.Добавить("ЦенаРег", Новый ОписаниеТипов("Число"));
	табЗагруженныйПрайс.Колонки.Добавить("РежимХранения", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(50));
	табЗагруженныйПрайс.Колонки.Добавить("Холод", Новый ОписаниеТипов("Булево"));

	АктивныеНастройки = РезультатЗапроса.Выбрать();
	Пока АктивныеНастройки.Следующий() Цикл

		Если ПустаяСтрока(АктивныеНастройки.Логин) Тогда
			Продолжить;
		КонецЕсли; 

		структНастройки.Очистить();
		табЗагруженныйПрайс.Очистить();

		Для каждого текКолонка Из РезультатЗапроса.Колонки Цикл

			текЗначение = АктивныеНастройки[текКолонка.Имя];
			Если ЗначениеЗаполнено(текЗначение) Тогда
				структНастройки.Вставить(текКолонка.Имя, ?(ТипЗнч(текЗначение) = Тип("Строка"), СокрЛП(текЗначение), текЗначение));
			Иначе
				структНастройки.Вставить(текКолонка.Имя, ?(ТипЗнч(текЗначение) = Тип("Число"), 0, Неопределено));
			КонецЕсли;

		КонецЦикла; 

		ЗагрузитьПоставщика(структНастройки, табЗагруженныйПрайс);

	КонецЦикла; 

КонецПроцедуры
Процедура ЗагрузитьПоставщика(Настройка, табЗагруженныйПрайс)

	КаталогАрхив = "C:\Поставщики";
	Если НайтиФайлы("C:\", "Поставщики").Количество() = 0 Тогда
		СоздатьКаталог(КаталогАрхив);
	КонецЕсли;

	Если НайтиФайлы(КаталогАрхив, СокрЛП(Настройка.Папка)).Количество() = 0 Тогда
		СоздатьКаталог(КаталогАрхив + "\" + СокрЛП(Настройка.Папка));
	КонецЕсли;
	КаталогАрхив = КаталогАрхив + "\" + СокрЛП(Настройка.Папка);
	
	Если НайтиФайлы(КаталогАрхив, "Прайсы").Количество() = 0 Тогда
		СоздатьКаталог(КаталогАрхив + "\Прайсы");
	КонецЕсли;
	КаталогАрхив = КаталогАрхив + "\Прайсы";

	ВременныйКаталог = КаталогВременныхФайлов() + СокрЛП(Настройка.Папка);
	Если НайтиФайлы(КаталогВременныхФайлов(), СокрЛП(Настройка.Папка)).Количество() = 0 Тогда
		СоздатьКаталог(ВременныйКаталог);
	КонецЕсли;
	
	ПолучитьФайлыС_FTP(Настройка, ВременныйКаталог, "price");
	ЗагружаемыеФайлы = НайтиФайлы(ВременныйКаталог, Настройка.Маска);
	Если ЗагружаемыеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Для Индекс = 0 По ЗагружаемыеФайлы.ВГраница() Цикл

		текФайл = ЗагружаемыеФайлы[Индекс];
		Если ВРег(Настройка.Формат) = "DBF" Тогда
			ЗагрузитьПрайс_DBF(текФайл, Настройка, табЗагруженныйПрайс);

		ИначеЕсли ВРег(Настройка.Формат) = "TXT" Тогда
			ЗагрузитьПрайс_TXT(текФайл, Настройка, табЗагруженныйПрайс);

		ИначеЕсли СтрНайти(ВРег(Настройка.Формат), "ZIP") Тогда
			Если ВРег(Настройка.Формат) = "ZIPPROTEK" Тогда
				ЗагрузитьПрайс_ZipProtek(текФайл, Настройка, табЗагруженныйПрайс);
			Иначе
				// Хз чей это прайс
				Продолжить;
			КонецЕсли; 

		Иначе
			Продолжить;
		КонецЕсли;

		МногоПрайсов = Ложь;
		Если СтрНайти(текФайл.ИмяБезРасширения, "_puls") Тогда
			МногоПрайсов = Истина;
		КонецЕсли;

		ПоместитьПрайсВРегистрСведений(Настройка, табЗагруженныйПрайс, текФайл.Имя, МногоПрайсов);
		КопироватьФайл(текФайл.ПолноеИмя, КаталогАрхив + "\" + текФайл.Имя);
	КонецЦикла; 

	УдалитьФайлы(ВременныйКаталог);

КонецПроцедуры
Процедура ПолучитьФайлыС_FTP(Настройка, ВременныйКаталог, Каталог)

	СтруктураПодключения = Новый Структура;
	СтруктураПодключения.Вставить("АдресFTP", СокрЛП(Настройка.АдресFTP));
	СтруктураПодключения.Вставить("ИмяПользователя", Настройка.Логин);
	СтруктураПодключения.Вставить("Пароль", Настройка.Пароль);
	Соединение = ПодключитьсяКFTPСерверу(СтруктураПодключения);
	Соединение.УстановитьТекущийКаталог("/" + Каталог + "/");

	стрПрефикс = СтрЗаменить(Формат(ТекущаяДата(), "ДЛФ=DT"), ":", ".");
	стрКаталог = "/" + Каталог;

	_Маска = СокрЛП(Настройка.Маска);
	Если СокрЛП(Настройка.Формат) = "ZipProtek" Тогда
		_Маска = "*.zip";
	КонецЕсли;

    НайденныеФайлы = Соединение.НайтиФайлы(стрКаталог, "*" + НРег(Прав(_Маска, 4)));
	Если НайденныеФайлы.Количество() = 0 Тогда
		НайденныеФайлы = Соединение.НайтиФайлы(стрКаталог, "*" + ВРег(Прав(_Маска, 4)));
	КонецЕсли;

	Для Каждого Файл Из НайденныеФайлы Цикл
		НовоеИмяФайла = стрПрефикс + "_" + Файл.Имя;
		Соединение.Получить(
			Файл.ПолноеИмя, // что качаем
			ВременныйКаталог + "\" + НовоеИмяФайла // куда качаем
		);
		Соединение.Удалить(Файл.ПолноеИмя);

		Если Каталог = "price" Тогда

			НаборЗаписей = РегистрыСведений.ЛогЗагрузкиПрайсовПоставщиков.СоздатьМенеджерЗаписи();
			НаборЗаписей.Поставщик = Настройка.Поставщик;
			НаборЗаписей.Договор = Настройка.Договор;
			НаборЗаписей.Файл = НовоеИмяФайла;
			НаборЗаписей.Загружен = Ложь;
			НаборЗаписей.ДатаОперации = ТекущаяДата();
			НаборЗаписей.Записать();

		КонецЕсли;

	КонецЦикла;
	Соединение = "";

КонецПроцедуры

Процедура ЗагрузитьПрайс_DBF(текФайл, Настройка, табЗагруженныйПрайс)

	ИмяКоротко = "";
	Если СтрДлина(текФайл.ИмяБезРасширения) <= 6 Тогда
		ИмяКоротко = "t_" + СокрЛП(текФайл.ИмяБезРасширения) + "." + Настройка.Формат;
	Иначе
		ИмяКоротко = "t_" + Лев(СокрЛП(текФайл.ИмяБезРасширения), 6) + "." + Настройка.Формат;
	КонецЕсли;

	ВременныйФайл = КаталогВременныхФайлов() + ИмяКоротко;
	КопироватьФайл(текФайл.ПолноеИмя, ВременныйФайл);

	ФайлДБФ = Новый XBase;
	//ФайлДБФ.Кодировка = КодировкаXBase.ANSI;
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	ФайлДБФ.ОткрытьФайл(ВременныйФайл, , Истина);
	Если ФайлДБФ.КоличествоЗаписей() = 0 Тогда
		ФайлДБФ.ЗакрытьФайл();
		Возврат;
	КонецЕсли;

	Коробочный = 0;
	Если СтрНайти(текФайл.ИмяБезРасширения, "_puls2") Тогда
		Коробочный = 1;
	КонецЕсли;

	ФайлДБФ.Первая();
	Если Настройка.НачальнаяСтрока > 0 Тогда
		Если ФайлДБФ.КоличествоЗаписей() <= Настройка.НачальнаяСтрока Тогда
			ФайлДБФ.Перейти(Настройка.НачальнаяСтрока)
		КонецЕсли; 
	КонецЕсли;

	Пока Не ФайлДБФ.ВКонце() Цикл

		СтрокаПрайса = табЗагруженныйПрайс.Добавить();
		СтрокаПрайса.Коробочный = Коробочный;

		Для каждого текКолонка Из табЗагруженныйПрайс.Колонки Цикл

			НаименованиеКолонки = Неопределено;
			Настройка.Свойство(текКолонка.Имя, НаименованиеКолонки);
			Если НЕ НаименованиеКолонки = Неопределено Тогда
				Если ФайлДБФ.Поля.Найти(НаименованиеКолонки) = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				текЗначение = ФайлДБФ[НаименованиеКолонки];
				Если текКолонка.Имя = "Код" Тогда
					Попытка
						текЗначение = Формат(текЗначение, "ЧГ=");
					Исключение
					КонецПопытки; 
				КонецЕсли;

				Если Строка(текКолонка.ТипЗначения) = "Строка" Тогда
					текЗначение = СокрЛП(текЗначение);
				КонецЕсли; 
				СтрокаПрайса[текКолонка.Имя] = текЗначение;

			КонецЕсли; 

		КонецЦикла; 
	    ФайлДБФ.Следующая(); // переходим к следующей записи
	КонецЦикла;    
	
	ФайлДБФ.ЗакрытьФайл();
	УдалитьФайлы(ВременныйФайл);

КонецПроцедуры
Процедура ЗагрузитьПрайс_TXT(текФайл, Настройка, табЗагруженныйПрайс);

	Если ПустаяСтрока(Настройка.Разделитель) Тогда
		Возврат;
	КонецЕсли;

	ИмяКоротко = "";
	Если СтрДлина(текФайл.ИмяБезРасширения) <= 6 Тогда
		ИмяКоротко = "t_" + СокрЛП(текФайл.ИмяБезРасширения) + "." + Настройка.Формат;
	Иначе
		ИмяКоротко = "t_" + Лев(СокрЛП(текФайл.ИмяБезРасширения), 6) + "." + Настройка.Формат;
	КонецЕсли;

	ВременныйФайл = КаталогВременныхФайлов() + ИмяКоротко;
	КопироватьФайл(текФайл.ПолноеИмя, ВременныйФайл);

	ТекстовыйФайл  = Новый ТекстовыйДокумент;
 	ТекстовыйФайл.Прочитать(
		ВременныйФайл,
		?(ПустаяСтрока(Настройка.Кодировка), КодировкаТекста.UTF8, СокрЛП(Настройка.Кодировка)));

	Для Индекс = (1 + Настройка.НачальнаяСтрока) По ТекстовыйФайл.КоличествоСтрок() Цикл

		СтрокаМассив = РазложитьСтрокуВМассивПодстрок(ТекстовыйФайл.ПолучитьСтроку(Индекс), Настройка.Разделитель);
		Если СтрокаМассив.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаПрайса = табЗагруженныйПрайс.Добавить();
		СтрокаПрайса.Коробочный = 0;
		Для каждого текКолонка Из табЗагруженныйПрайс.Колонки Цикл

			ИндексПоля = Неопределено;
			Настройка.Свойство(текКолонка.Имя, ИндексПоля);
			Если НЕ ИндексПоля = Неопределено Тогда
				ИндексПоля = Число(ИндексПоля);
				Если СтрокаМассив.ВГраница() < ИндексПоля Тогда
					Продолжить;
				КонецЕсли;

				текЗначение = СокрЛП(СтрокаМассив[ИндексПоля]);
				Если Строка(текКолонка.ТипЗначения) = "Число" Тогда
					текЗначение = ?(текЗначение = "", 0, Число(текЗначение));

				ИначеЕсли Строка(текКолонка.ТипЗначения) = "Дата" Тогда
					Если ПустаяСтрока(текЗначение) Тогда
						текЗначение = ТекущаяДата();
					Иначе
						ДатаМассив = РазложитьСтрокуВМассивПодстрок(текЗначение, ".");
						Если СтрДлина(ДатаМассив[0]) = 4 Тогда
							// Формат даты ГГГГ.ММ.ДД
							текЗначение = Дата(ДатаМассив[0], ДатаМассив[1], ДатаМассив[2]);
						Иначе
							// Формат даты ДД.ММ.ГГГГ
							текЗначение = Дата(ДатаМассив[2], ДатаМассив[1], ДатаМассив[0]);
						КонецЕсли; 
					КонецЕсли;

				ИначеЕсли Строка(текКолонка.ТипЗначения) = "Булево" Тогда
					текЗначение = ?(текЗначение = "0", Ложь, Истина);
				КонецЕсли; 
				СтрокаПрайса[текКолонка.Имя] = текЗначение;

			КонецЕсли; 

		КонецЦикла; 

	КонецЦикла;
	
	УдалитьФайлы(ВременныйФайл);

КонецПроцедуры

Процедура ЗагрузитьПрайс_ZipProtek(текФайл, Настройка, табЗагруженныйПрайс);

	ИмяКоротко = "";
	Если СтрДлина(текФайл.ИмяБезРасширения) <= 6 Тогда
		ИмяКоротко = "t_" + СокрЛП(текФайл.ИмяБезРасширения) + ".zip";
	Иначе
		ИмяКоротко = "t_" + Лев(СокрЛП(текФайл.ИмяБезРасширения), 6) + ".zip";
	КонецЕсли;

	стрДата = Формат(ТекущаяДата(), "ДЛФ=DT");
	ZipКаталог = КаталогВременныхФайлов() + "ZipProtek " + СтрЗаменить(стрДата, ":", ".");
	СоздатьКаталог(ZipКаталог);
	
	табКаталог_Protek = Новый ТаблицаЗначений;
	табКаталог_Protek.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(20));
	табКаталог_Protek.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(250));
	табКаталог_Protek.Колонки.Добавить("Изготовитель", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(250));
	табКаталог_Protek.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("Число"));
	табКаталог_Protek.Колонки.Добавить("ЗначенияСвойств", Новый ОписаниеТипов("Структура"));
	табКаталог_Protek.Колонки.Добавить("ЖВЛ", Новый ОписаниеТипов("Булево"));
	табКаталог_Protek.Колонки.Добавить("ДатаПрайса", Новый ОписаниеТипов("Дата"));
	табКаталог_Protek.Колонки.Добавить("РежимХранения", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(20));
	табКаталог_Protek.Колонки.Добавить("Холод", Новый ОписаниеТипов("Булево"));
	
	табКаталог_Protek.Колонки.Добавить("ЦенаРег", Новый ОписаниеТипов("Число"));
	табКаталог_Protek.Колонки.Добавить("SPACK", Новый ОписаниеТипов("Число"));
	табКаталог_Protek.Колонки.Добавить("SHEAF_QTY", Новый ОписаниеТипов("Число"));
	
	
	
	
	ВременныйФайл = ZipКаталог + "\" + ИмяКоротко;
	КопироватьФайл(текФайл.ПолноеИмя, ВременныйФайл);

	Архив = Новый ЧтениеZipФайла(ВременныйФайл);
	Для Каждого Элемент Из Архив.Элементы Цикл

		ФайлКаталог = Ложь;
		Если СтрНайти(Элемент.ИмяБезРасширения, "catalogue") = 1 Тогда
			ФайлКаталог = Истина;
		Иначе
			Если СтрНайти(Элемент.ИмяБезРасширения, "offer") = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

	    Архив.Извлечь(
	        Элемент, // элемент для извлечения
	        ZipКаталог,
	        РежимВосстановленияПутейФайловZIP.Восстанавливать,
	        "" // пароль
	    );

		Если ФайлКаталог Тогда
			Прочитать_XML_Каталог_ZipProtek(ZipКаталог + "\" + Элемент.ПолноеИмя, Настройка, табКаталог_Protek);
			Продолжить;
		КонецЕсли;

		Прочитать_XML_ZipProtek(ZipКаталог + "\" + Элемент.ПолноеИмя, Настройка, табЗагруженныйПрайс);
	КонецЦикла;

	// Дополним данные товара 
	ПолучитьСводнуюТаблицу(табКаталог_Protek, табЗагруженныйПрайс);
	
//	Для каждого СтрокаПрайса Из табЗагруженныйПрайс Цикл
//		Строки = табКаталог_Protek.НайтиСтроки(Новый Структура("Ид", СтрокаПрайса.Код));
//		Для каждого строкаКаталога из Строки цикл
//			СтрокаПрайса.РежимХранения = строкаКаталога.РежимХранения;
//			СтрокаПрайса.Дата = строкаКаталога.ДатаПрайса;
//			СтрокаПрайса.Холод = строкаКаталога.Холод;
//			СтрокаПрайса.СтавкаНДС = строкаКаталога.СтавкаНДС;
//			СтрокаПрайса.ЖВЛ = строкаКаталога.ЖВЛ;

//			КолВУпаковке = 0;
//			Если СтрокаПрайса.Коробочный = 1 Тогда
//				Если СтрокаКаталога.ЗначенияСвойств.Свойство("SPACK") Тогда
//					КолВУпаковке = Число(СтрокаКаталога.ЗначенияСвойств.SPACK);
//				КонецЕсли; 
//			Иначе
//				Если СтрокаКаталога.ЗначенияСвойств.Свойство("SHEAF_QTY") Тогда
//					КолВУпаковке = Число(СтрокаКаталога.ЗначенияСвойств.SHEAF_QTY);
//				КонецЕсли; 
//			КонецЕсли;
//			Если КолВУпаковке > 0 Тогда
//				СтрокаПрайса.КолВУпаковке = КолВУпаковке;
//			КонецЕсли;
//			
//			Если СтрокаКаталога.ЗначенияСвойств.Свойство("REG_GOS_PRICE") Тогда
//				СтрокаПрайса.ЦенаРег = Число(СтрокаКаталога.ЗначенияСвойств.REG_GOS_PRICE);
//				СтрокаПрайса.ЖВЛ = Истина;
//			КонецЕсли;

//			
////SPACK - задает cnt_pack если перебирается файл 2009
////SHEAF_QTY - задает cnt_pack если перебирается файл 1020
////REG_GOS_PRICE - задает zhvls и price_reg
////ZakMedCtg.1357 - задает vat как 0
////ZakMedCtg.16 и ZakMedCtg.1358 - задают zhvls как 1 и vat как 10
////ZakMedCtg.1226 - задает storage_conditions как +(2-8)C и cold как 1
////ZakMedCtg.1228 - задает storage_conditions как +(18-20)C

//		КонецЦикла;
//	КонецЦикла; 

	УдалитьФайлы(ZipКаталог);

КонецПроцедуры
Процедура ПолучитьСводнуюТаблицу(табКаталог_Protek, табЗагруженныйПрайс)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("табКаталог", табКаталог_Protek);
	Запрос.УстановитьПараметр("табЗагруженныйПрайс", табЗагруженныйПрайс);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПОДСТРОКА(табКаталог.Ид, 1, 20) КАК Код,
		|	ПОДСТРОКА(табКаталог.Наименование, 1, 250) КАК Наименование,
		|	ПОДСТРОКА(табКаталог.Изготовитель, 1, 250) КАК Изготовитель,
		|	табКаталог.ЖВЛ КАК ЖВЛ,
		|	табКаталог.СтавкаНДС КАК СтавкаНДС,
		|	табКаталог.ДатаПрайса КАК ДатаПрайса,
		|	ПОДСТРОКА(табКаталог.РежимХранения, 1, 20) КАК РежимХранения,
		|	табКаталог.Холод КАК Холод,
		|	табКаталог.ЦенаРег КАК ЦенаРег,
		|	табКаталог.SPACK КАК SPACK,
		|	табКаталог.SHEAF_QTY КАК SHEAF_QTY
		|ПОМЕСТИТЬ ВТ_табКаталог
		|ИЗ
		|	&табКаталог КАК табКаталог
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПОДСТРОКА(табЗагруженныйПрайс.Код, 1, 20) КАК Код,
		|	ПОДСТРОКА(табЗагруженныйПрайс.Название, 1, 250) КАК Название,
		|	табЗагруженныйПрайс.Коробочный,
		|	табЗагруженныйПрайс.Цена,
		|	табЗагруженныйПрайс.Остаток,
		|	табЗагруженныйПрайс.СтавкаНДС,
		|	табЗагруженныйПрайс.СрокГодности,
		|	ПОДСТРОКА(табЗагруженныйПрайс.КодЕГК, 1, 50) КАК КодЕГК,
		|	ПОДСТРОКА(табЗагруженныйПрайс.Баркод, 1, 20) КАК Баркод,
		|	ПОДСТРОКА(табЗагруженныйПрайс.ФормаВыпуска, 1, 250) КАК ФормаВыпуска,
		|	табЗагруженныйПрайс.ЖВЛ,
		|	табЗагруженныйПрайс.Дата,
		|	табЗагруженныйПрайс.ЦенаРег,
		|	табЗагруженныйПрайс.КолВУпаковке,
		|	ПОДСТРОКА(табЗагруженныйПрайс.Производитель, 1, 250) КАК Производитель,
		|	ПОДСТРОКА(табЗагруженныйПрайс.СтранаПроизводитель, 1, 250) КАК СтранаПроизводитель,
		|	табЗагруженныйПрайс.СтавкаНСП,
		|	табЗагруженныйПрайс.РежимХранения,
		|	табЗагруженныйПрайс.Холод
		|ПОМЕСТИТЬ ВТ_ЗагруженныйПрайс
		|ИЗ
		|	&табЗагруженныйПрайс КАК табЗагруженныйПрайс
		|ГДЕ
		|	табЗагруженныйПрайс.Цена > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗагруженныйПрайс.Код,
		|	ВТ_ЗагруженныйПрайс.Название,
		|	ВТ_ЗагруженныйПрайс.Коробочный,
		|	ВТ_ЗагруженныйПрайс.Цена,
		|	ВТ_ЗагруженныйПрайс.Остаток,
		|	ВТ_ЗагруженныйПрайс.СрокГодности,
		|	ВТ_ЗагруженныйПрайс.КодЕГК,
		|	ВТ_ЗагруженныйПрайс.Баркод,
		|	ВТ_ЗагруженныйПрайс.ФормаВыпуска,
		|	ВТ_ЗагруженныйПрайс.Производитель,
		|	ВТ_ЗагруженныйПрайс.СтранаПроизводитель,
		|	ВТ_ЗагруженныйПрайс.СтавкаНСП,
		|	ВТ_табКаталог.РежимХранения,
		|	ВТ_табКаталог.ДатаПрайса КАК Дата,
		|	ВТ_табКаталог.Холод,
		|	ВТ_табКаталог.СтавкаНДС,
		|	ВТ_табКаталог.ЖВЛ,
		|	ВТ_табКаталог.ЦенаРег КАК ЦенаРег,
		|	ВЫБОР
		|		КОГДА ВТ_ЗагруженныйПрайс.Коробочный = 1
		|			ТОГДА ВТ_табКаталог.SPACK
		|		ИНАЧЕ ВТ_табКаталог.SHEAF_QTY
		|	КОНЕЦ КАК КолВУпаковке
		|ИЗ
		|	ВТ_ЗагруженныйПрайс КАК ВТ_ЗагруженныйПрайс
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_табКаталог КАК ВТ_табКаталог
		|		ПО ВТ_ЗагруженныйПрайс.Код = ВТ_табКаталог.Код";

	табЗагруженныйПрайс = Запрос.Выполнить().Выгрузить().Скопировать();

КонецПроцедуры
Процедура Прочитать_XML_Каталог_ZipProtek(ПутьКФайлу, Настройка, табКаталог_Protek)

	СтекИмен = Новый СписокЗначений;
	Парсер = Новый ЧтениеXML;
    Парсер.ОткрытьФайл(ПутьКФайлу);
	ДатаПрайса = ТекущаяДата();

	Пока Парсер.Прочитать() Цикл
		Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если Парсер.Имя = "КоммерческаяИнформация" Тогда
				стрДатаПрайса = Парсер.ЗначениеАтрибута("ДатаФормирования");
				// "2017-12-04T09:05:42"
				стрГод	= Число(Лев(стрДатаПрайса, 4));
				стрМес	= Число(Сред(стрДатаПрайса, 6, 2));
				стрДень	= Число(Сред(стрДатаПрайса, 9, 2));
				стрЧас	= Число(Сред(стрДатаПрайса, 12, 2));
				стрМин	= Число(Сред(стрДатаПрайса, 15, 2));
				стрСек	= Число(Сред(стрДатаПрайса, 18, 2));
				ДатаПрайса = Дата(стрГод, стрМес, стрДень, стрЧас, стрМин, стрСек);

			ИначеЕсли Парсер.Имя = "Каталог" Тогда

				Пока Парсер.Прочитать() Цикл
					Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда

						Если Парсер.Имя <> "Товары" Тогда
							Продолжить;
						КонецЕсли;

						Пока Парсер.Прочитать() Цикл
							Если Парсер.Имя = "Товар" И Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
								СтрокаКаталога = табКаталог_Protek.Добавить();
								СтрокаКаталога.СтавкаНДС = 18;
								СтрокаКаталога.ДатаПрайса = ДатаПрайса;
								СтрокаКаталога.ЦенаРег = 0;
								СтрокаКаталога.SPACK = 1;
								СтрокаКаталога.SHEAF_QTY = 1;
								
								Прочитать_XML_Узел_Каталога(Парсер, СтрокаКаталога);
								
								Если СтрокаКаталога.ЗначенияСвойств.Свойство("SPACK") Тогда
									Попытка
										СтрокаКаталога.SPACK = Число(СтрокаКаталога.ЗначенияСвойств.SPACK);
									Исключение
									КонецПопытки; 
								КонецЕсли; 
								Если СтрокаКаталога.ЗначенияСвойств.Свойство("SHEAF_QTY") Тогда
									Попытка
										СтрокаКаталога.SHEAF_QTY = Число(СтрокаКаталога.ЗначенияСвойств.SHEAF_QTY);
									Исключение
									КонецПопытки; 
								КонецЕсли; 
								Если СтрокаКаталога.ЗначенияСвойств.Свойство("REG_GOS_PRICE") Тогда
									Попытка
										СтрокаКаталога.ЦенаРег = Число(СтрокаКаталога.ЗначенияСвойств.REG_GOS_PRICE);
									Исключение
									КонецПопытки; 
//									СтрокаПрайса.ЖВЛ = Истина;
								КонецЕсли;

							КонецЕсли;
						КонецЦикла;
					КонецЕсли; 
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
    КонецЦикла;

    Парсер.Закрыть();

КонецПроцедуры
Процедура Прочитать_XML_Узел_Каталога(Парсер, СтрокаКаталога)

	ИмяТекущегоУзла = Парсер.Имя;
	Пока Парсер.Прочитать() Цикл

		Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента И Парсер.Имя = "Группы" Тогда
			// Группы свойств товара
			Пока Парсер.Прочитать() Цикл
				Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Продолжить;
				ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.Текст Тогда
					Если Парсер.ИмеетЗначение Тогда
						текЗначение = СокрЛП(Парсер.Значение);
						Если текЗначение = "ZakMedCtg.1357" Тогда
							СтрокаКаталога.СтавкаНДС = 0;
						ИначеЕсли текЗначение = "ZakMedCtg.1358" Тогда
							СтрокаКаталога.СтавкаНДС = 10;
						ИначеЕсли текЗначение = "ZakMedCtg.1359" Тогда
							СтрокаКаталога.СтавкаНДС = 18;
						ИначеЕсли текЗначение = "ZakMedCtg.16" Тогда
							СтрокаКаталога.ЖВЛ = Истина;
						ИначеЕсли текЗначение = "ZakMedCtg.1226" Тогда
							СтрокаКаталога.РежимХранения = "+(2-8)C";
							СтрокаКаталога.Холод = Истина;
						ИначеЕсли текЗначение = "ZakMedCtg.1226" Тогда
							СтрокаКаталога.РежимХранения = "+(12-15)C";
							СтрокаКаталога.Холод = Истина;
						ИначеЕсли текЗначение = "ZakMedCtg.1228" Тогда
							СтрокаКаталога.РежимХранения = "+(18-20)C";
							СтрокаКаталога.Холод = Ложь;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента И Парсер.Имя = "Группы" Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента И Парсер.Имя = "ЗначенияСвойств" Тогда

			СтрЗначенияСвойств = Новый Структура;
			// Значения свойств товара
			Пока Парсер.Прочитать() Цикл
				Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента И Парсер.Имя = "ЗначенияСвойства" Тогда
					Прочитать_XML_ЗначенияСвойства_Каталога(Парсер, СтрЗначенияСвойств);
				ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента И Парсер.Имя = "ЗначенияСвойств" Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			СтрокаКаталога.ЗначенияСвойств = СтрЗначенияСвойств;

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Прочитать_XML_Узел_Каталога(Парсер, СтрокаКаталога)

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат;

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.Текст Тогда
			Если Парсер.ИмеетЗначение Тогда
				Если СтрНайти("Ид Наименование Изготовитель", ИмяТекущегоУзла) <> 0 Тогда
					СтрокаКаталога[ИмяТекущегоУзла] = Парсер.Значение;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
Процедура Прочитать_XML_ЗначенияСвойства_Каталога(Парсер, СтрЗначенияСвойств)

	ИмяТекущегоУзла = Парсер.Имя;
	Пока Парсер.Прочитать() Цикл

		Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Прочитать_XML_ЗначенияСвойства_Каталога(Парсер, СтрЗначенияСвойств);

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.Текст Тогда
			Если Парсер.ИмеетЗначение Тогда
				текЗначение = Парсер.Значение;
				Если ИмяТекущегоУзла = "Ид" Тогда
					ЗначениеПоИД = ПолучитьЗначениеИД(Парсер);
					СтрЗначенияСвойств.Вставить(текЗначение, ЗначениеПоИД);
				КонецЕсли; 
			КонецЕсли;

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
Функция ПолучитьЗначениеИД(Парсер);

	ИмяТекущегоУзла = Парсер.Имя;
	Пока Парсер.Прочитать() Цикл

		Если Парсер.ТипУзла = ТипУзлаXML.Текст Тогда
			Если Парсер.ИмеетЗначение Тогда
				Возврат Парсер.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецФункции 

Процедура Прочитать_XML_ZipProtek(ПутьКФайлу, Настройка, табЗагруженныйПрайс)

	СтекИмен = Новый СписокЗначений;
	Парсер = Новый ЧтениеXML;
    Парсер.ОткрытьФайл(ПутьКФайлу);
	Коробочный = 0;

	Пока Парсер.Прочитать() Цикл
		Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда

			Если Парсер.Имя = "Ид" Тогда
				Если ПолучитьЗначение_XML_Узла(Парсер) = "2009" Тогда
					Коробочный = 1;
				КонецЕсли;
				Продолжить;
			КонецЕсли;

			Если Парсер.Имя <> "Предложения" Тогда
				Продолжить;
			КонецЕсли;

			Пока Парсер.Прочитать() Цикл
				Если Парсер.Имя = "Предложение" Тогда
					СтрокаПрайса = табЗагруженныйПрайс.Добавить();
					СтрокаПрайса.Коробочный = Коробочный;
					СтрокаПрайса.КолВУпаковке = 1;
					Прочитать_XML_Узел(Парсер, Настройка, табЗагруженныйПрайс, СтекИмен, СтрокаПрайса);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
    КонецЦикла;

    Парсер.Закрыть();

КонецПроцедуры
Процедура Прочитать_XML_Узел(Парсер, Настройка, табЗагруженныйПрайс, СтекИмен, СтрокаПрайса)

	Пока Парсер.Прочитать() Цикл

		Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда

			Если Парсер.Имя = "ЗначенияСвойств" Тогда
				Прочитать_XML_Узел_ЗначенияСвойств(Парсер, Настройка, табЗагруженныйПрайс, СтрокаПрайса);
				Продолжить;
			КонецЕсли;

	        СтекИмен.Добавить(Парсер.Имя);
			Прочитать_XML_Узел(Парсер, Настройка, табЗагруженныйПрайс, СтекИмен, СтрокаПрайса)

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.Текст Тогда
			Если Парсер.ИмеетЗначение Тогда

				текЗначение = Парсер.Значение;
		        ПолныйПуть = ПостроитьПуть(СтекИмен);

				Для каждого текКолонка Из табЗагруженныйПрайс.Колонки Цикл

					НаименованиеКолонки = Неопределено;
					Настройка.Свойство(текКолонка.Имя, НаименованиеКолонки);
					Если НЕ НаименованиеКолонки = Неопределено Тогда
						Если НаименованиеКолонки <> ПолныйПуть Тогда
							Продолжить;
						КонецЕсли;
						СтрокаПрайса[текКолонка.Имя] = ПривестиКТипу(текКолонка, текЗначение);
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	 		Если СтекИмен.Количество() > 0 Тогда
				СтекИмен.Удалить(СтекИмен.Количество() - 1);
			КонецЕсли;
			Возврат;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
Процедура Прочитать_XML_Узел_ЗначенияСвойств(Парсер, Настройка, табЗагруженныйПрайс, СтрокаПрайса)

	Пока Парсер.Прочитать() Цикл
		Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента И Парсер.Имя = "ЗначенияСвойства" Тогда
			Прочитать_XML_ЗначенияСвойства_Прайса(Парсер, Настройка, табЗагруженныйПрайс, СтрокаПрайса);
		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента И Парсер.Имя = "ЗначенияСвойств" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
Процедура Прочитать_XML_ЗначенияСвойства_Прайса(Парсер, Настройка, табЗагруженныйПрайс, СтрокаПрайса)

	ИмяТекущегоУзла = Парсер.Имя;
	Пока Парсер.Прочитать() Цикл

		Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Прочитать_XML_ЗначенияСвойства_Прайса(Парсер, Настройка, табЗагруженныйПрайс, СтрокаПрайса);

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.Текст Тогда
			Если Парсер.ИмеетЗначение Тогда

				Если ИмяТекущегоУзла = "Ид" Тогда
					текЗначение = "ЗначенияСвойств|" + СокрЛП(Парсер.Значение);
					Для каждого текКолонка Из табЗагруженныйПрайс.Колонки Цикл

						НаименованиеКолонки = Неопределено;
						Настройка.Свойство(текКолонка.Имя, НаименованиеКолонки);
						Если НЕ НаименованиеКолонки = Неопределено Тогда
							Если НаименованиеКолонки <> текЗначение Тогда
								Продолжить;
							КонецЕсли;
							ЗначениеПоИД = ПолучитьЗначениеИД(Парсер);
							СтрокаПрайса[текКолонка.Имя] = ПривестиКТипу(текКолонка, ЗначениеПоИД);
							Прервать;
						КонецЕсли; 
					КонецЦикла; 

				КонецЕсли; 
			КонецЕсли;

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПоместитьПрайсВРегистрСведений(Настройка, табЗагруженныйПрайс, ЗагружаемыйФайл, МногоПрайсов)

	Если табЗагруженныйПрайс.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Рассчитаем дату ожидаемой поставки товара поставщика
	УстановитьОжидаемуюДатыПоставки(Новый Структура("Поставщик, Договор", Настройка.Поставщик, Настройка.Договор));

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("табЗагруженныйПрайс", табЗагруженныйПрайс);
	Запрос.УстановитьПараметр("Поставщик", Настройка.Поставщик);
	Запрос.УстановитьПараметр("Договор", Настройка.Договор);
	Запрос.УстановитьПараметр("ДатаЗаписи", ТекущаяДата());
	Запрос.УстановитьПараметр("delivery_date", ДобавитьМесяц(ТекущаяДата(), 1));
	Запрос.УстановитьПараметр("ТипПрайса", табЗагруженныйПрайс[0].Коробочный);

	Запрос.Текст =
		"ВЫБРАТЬ
		|	&Поставщик КАК Поставщик,
		|	&Договор КАК Договор,
		|	ПОДСТРОКА(табЗагруженныйПрайс.Код, 1, 50) КАК КодПоставщика,
		|	ПОДСТРОКА(табЗагруженныйПрайс.Название, 1, 250) КАК Наименование,
		|	табЗагруженныйПрайс.Коробочный КАК ТипПрайса,
		|	табЗагруженныйПрайс.Цена КАК price,
		|	табЗагруженныйПрайс.Остаток КАК cnt,
		|	табЗагруженныйПрайс.СтавкаНДС КАК СтавкаНДС,
		|	табЗагруженныйПрайс.СрокГодности КАК expiration,
		|	ПОДСТРОКА(табЗагруженныйПрайс.КодЕГК, 1, 50) КАК КодЕГК,
		|	ПОДСТРОКА(табЗагруженныйПрайс.Баркод, 1, 20) КАК ШК,
		|	ПОДСТРОКА(табЗагруженныйПрайс.ФормаВыпуска, 1, 250) КАК ФормаВыпуска,
		|	табЗагруженныйПрайс.ЖВЛ,
		|	табЗагруженныйПрайс.Дата КАК ДатаПрайса,
		|	табЗагруженныйПрайс.ЦенаРег КАК ЦенаРег,
		|	ВЫБОР
		|		КОГДА табЗагруженныйПрайс.КолВУпаковке = 0
		|			ТОГДА 1
		|		ИНАЧЕ табЗагруженныйПрайс.КолВУпаковке
		|	КОНЕЦ КАК cnt_pack,
		|	ПОДСТРОКА(табЗагруженныйПрайс.Производитель, 1, 250) КАК Производитель,
		|	ПОДСТРОКА(табЗагруженныйПрайс.СтранаПроизводитель, 1, 250) КАК СтранаПроизводитель,
		|	табЗагруженныйПрайс.СтавкаНСП КАК СтавкаНСП,
		|	&ДатаЗаписи КАК ДатаЗаписи
		|ПОМЕСТИТЬ ВТ_ТемпЗагруженныйПрайс
		|ИЗ
		|	&табЗагруженныйПрайс КАК табЗагруженныйПрайс
		|ГДЕ
		|	табЗагруженныйПрайс.Цена > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	pc1.Поставщик,
		|	pc1.Договор,
		|	pc1.МаксЦена КАК Цена_1,
		|	МИНИМУМ(ЕСТЬNULL(pc2.МаксЦена, 999999999)) - 0.01 КАК Цена_2,
		|	pc1.Коэффициент
		|ПОМЕСТИТЬ ВТ_ПроцКорПрайса
		|ИЗ
		|	РегистрСведений.ПроцентКоррекцииПрайса КАК pc1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентКоррекцииПрайса КАК pc2
		|		ПО pc1.Поставщик = pc2.Поставщик
		|			И pc1.Договор = pc2.Договор
		|			И pc1.МаксЦена < pc2.МаксЦена
		|ГДЕ
		|	pc1.Поставщик = &Поставщик
		|	И pc1.Договор = &Договор
		|
		|СГРУППИРОВАТЬ ПО
		|	pc1.Поставщик,
		|	pc1.Договор,
		|	pc1.МаксЦена,
		|	pc1.Коэффициент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТемпЗагруженныйПрайс.Поставщик,
		|	ВТ_ТемпЗагруженныйПрайс.Договор,
		|	ВТ_ТемпЗагруженныйПрайс.КодПоставщика,
		|	ВТ_ТемпЗагруженныйПрайс.Наименование,
		|	ВТ_ТемпЗагруженныйПрайс.ТипПрайса,
		|	ВТ_ТемпЗагруженныйПрайс.price,
		|	ВТ_ТемпЗагруженныйПрайс.price * ЕСТЬNULL(ВТ_ПроцКорПрайса.Коэффициент, 1) КАК price_corr,
		|	ВТ_ТемпЗагруженныйПрайс.cnt,
		|	ВТ_ТемпЗагруженныйПрайс.СтавкаНДС,
		|	ВТ_ТемпЗагруженныйПрайс.expiration,
		|	ВТ_ТемпЗагруженныйПрайс.КодЕГК,
		|	ВТ_ТемпЗагруженныйПрайс.ШК,
		|	ВТ_ТемпЗагруженныйПрайс.ФормаВыпуска,
		|	ВТ_ТемпЗагруженныйПрайс.ЖВЛ,
		|	ВТ_ТемпЗагруженныйПрайс.ДатаПрайса,
		|	ВТ_ТемпЗагруженныйПрайс.ЦенаРег,
		|	ВТ_ТемпЗагруженныйПрайс.cnt_pack,
		|	ВТ_ТемпЗагруженныйПрайс.Производитель,
		|	ВТ_ТемпЗагруженныйПрайс.СтранаПроизводитель,
		|	ВТ_ТемпЗагруженныйПрайс.СтавкаНСП,
		|	ВТ_ТемпЗагруженныйПрайс.ДатаЗаписи
		|ПОМЕСТИТЬ ВТ_ЗагруженныйПрайс
		|ИЗ
		|	ВТ_ТемпЗагруженныйПрайс КАК ВТ_ТемпЗагруженныйПрайс
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПроцКорПрайса КАК ВТ_ПроцКорПрайса
		|		ПО ВТ_ТемпЗагруженныйПрайс.Поставщик = ВТ_ПроцКорПрайса.Поставщик
		|			И ВТ_ТемпЗагруженныйПрайс.Договор = ВТ_ПроцКорПрайса.Договор
		|			И (ВТ_ТемпЗагруженныйПрайс.price МЕЖДУ ВТ_ПроцКорПрайса.Цена_1 И ВТ_ПроцКорПрайса.Цена_2)
		|;";
	
		Если МногоПрайсов Тогда
			
			Запрос.Текст = Запрос.Текст + "
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	supplier_price.Поставщик,
				|	supplier_price.Договор,
				|	supplier_price.КодПоставщика,
				|	supplier_price.Товар,
				|	supplier_price.ТипПрайса,
				|	supplier_price.price_corr,
				|	supplier_price.price,
				|	supplier_price.cnt,
				|	supplier_price.expiration,
				|	supplier_price.Наименование,
				|	supplier_price.Производитель,
				|	supplier_price.cnt_pack,
				|	supplier_price.delivery_date
				|ПОМЕСТИТЬ ВТ_ПрайсДругогоТипа
				|ИЗ
				|	РегистрСведений.supplier_price КАК supplier_price
				|ГДЕ
				|	supplier_price.Поставщик = &Поставщик
				|	И supplier_price.Договор = &Договор
				|	И supplier_price.ТипПрайса <> &ТипПрайса
				|;";
			
		
		КонецЕсли; 
		Запрос.Текст = Запрос.Текст + "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТоварыПоставщика.Товар,
		|	ТоварыПоставщика.КодТовараПоставщика,
		|	ТоварыПоставщика.Наименование
		|ПОМЕСТИТЬ ВТ_ТоварыПоставщика
		|ИЗ
		|	РегистрСведений.ТоварыПоставщика КАК ТоварыПоставщика
		|ГДЕ
		|	ТоварыПоставщика.Поставщик = &Поставщик
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТоварыПоставщика.КодТовараПоставщика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МестаХраненияПоДоговору.Поставщик,
		|	МестаХраненияПоДоговору.Договор,
		|	МестаХраненияПоДоговору.ТипПрайса,
		|	МИНИМУМ(МестаХраненияПоДоговору.ДатаОжидаемойПоставки) КАК ДатаОжидаемойПоставки
		|ПОМЕСТИТЬ ВТ_ДатыДоставки
		|ИЗ
		|	РегистрСведений.МестаХраненияПоДоговору КАК МестаХраненияПоДоговору
		|ГДЕ
		|	МестаХраненияПоДоговору.Поставщик = &Поставщик
		|	И МестаХраненияПоДоговору.Договор = &Договор
		|	И МестаХраненияПоДоговору.Активный = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	МестаХраненияПоДоговору.Поставщик,
		|	МестаХраненияПоДоговору.Договор,
		|	МестаХраненияПоДоговору.ТипПрайса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ТоварыПоставщика.Товар,
		|	ВТ_ЗагруженныйПрайс.Поставщик,
		|	ВТ_ЗагруженныйПрайс.Договор,
		|	ВТ_ЗагруженныйПрайс.ТипПрайса,
		|	ВТ_ЗагруженныйПрайс.КодПоставщика,
		|	ВТ_ЗагруженныйПрайс.Наименование,
		|	ВТ_ЗагруженныйПрайс.Производитель,
		|	ВТ_ЗагруженныйПрайс.price_corr,
		|	ВТ_ЗагруженныйПрайс.cnt_pack,
		|	ЕСТЬNULL(ВТ_ДатыДоставки.ДатаОжидаемойПоставки, &delivery_date) КАК delivery_date,
		|	ВТ_ЗагруженныйПрайс.expiration,
		|	ВТ_ЗагруженныйПрайс.cnt,
		|	ВТ_ЗагруженныйПрайс.price,
		|	ВТ_ЗагруженныйПрайс.ШК,
		|	ВТ_ЗагруженныйПрайс.ДатаПрайса,
		|	ВТ_ЗагруженныйПрайс.ЖВЛ,
		|	ВТ_ЗагруженныйПрайс.КодЕГК,
		|	ВТ_ЗагруженныйПрайс.СтавкаНДС,
		|	ВТ_ЗагруженныйПрайс.СтавкаНСП,
		|	ВТ_ЗагруженныйПрайс.СтранаПроизводитель,
		|	ВТ_ЗагруженныйПрайс.ФормаВыпуска,
		|	ВТ_ЗагруженныйПрайс.ЦенаРег,
		|	ВТ_ЗагруженныйПрайс.ДатаЗаписи
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	ВТ_ЗагруженныйПрайс КАК ВТ_ЗагруженныйПрайс
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТоварыПоставщика КАК ВТ_ТоварыПоставщика
		|		ПО ВТ_ЗагруженныйПрайс.КодПоставщика = ВТ_ТоварыПоставщика.КодТовараПоставщика
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДатыДоставки КАК ВТ_ДатыДоставки
		|		ПО ВТ_ЗагруженныйПрайс.Поставщик = ВТ_ДатыДоставки.Поставщик
		|			И ВТ_ЗагруженныйПрайс.Договор = ВТ_ДатыДоставки.Договор
		|			И ВТ_ЗагруженныйПрайс.ТипПрайса = ВТ_ДатыДоставки.ТипПрайса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Данные.Поставщик,
		|	ВТ_Данные.Договор,
		|	ВТ_Данные.КодПоставщика,
		|	ВТ_Данные.Наименование,
		|	ВТ_Данные.Товар,
		|	ВТ_Данные.ТипПрайса,
		|	ВТ_Данные.price КАК Цена,
		|	ВТ_Данные.cnt КАК Остаток,
		|	ВТ_Данные.СтавкаНДС,
		|	ВТ_Данные.expiration КАК СрокГодности,
		|	ВТ_Данные.КодЕГК КАК ЕГК,
		|	ВТ_Данные.ШК,
		|	ВТ_Данные.ФормаВыпуска,
		|	ВТ_Данные.ЖВЛ,
		|	ВТ_Данные.ДатаПрайса,
		|	ВТ_Данные.ЦенаРег,
		|	ВТ_Данные.cnt_pack КАК КолВУпаковке,
		|	ВТ_Данные.Производитель,
		|	ВТ_Данные.СтранаПроизводитель КАК Страна,
		|	ВТ_Данные.ДатаЗаписи
		|ПОМЕСТИТЬ ВТ_ПрайсЛистПоставщика
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Поставщик КАК Поставщик,
		|	ВложенныйЗапрос.КодТовараПоставщика,
		|	ВложенныйЗапрос.Наименование,
		|	ВТ_ТоварыПоставщика.Товар
		|ПОМЕСТИТЬ ВТ_НовыеТоварыПоставщика
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыПоставщика.КодТовараПоставщика КАК КодТовараПоставщика,
		|		ТоварыПоставщика.Наименование КАК Наименование
		|	ИЗ
		|		ВТ_ТоварыПоставщика КАК ТоварыПоставщика
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВТ_Данные.КодПоставщика,
		|		ВТ_Данные.Наименование
		|	ИЗ
		|		ВТ_Данные КАК ВТ_Данные) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТоварыПоставщика КАК ВТ_ТоварыПоставщика
		|		ПО (ВТ_ТоварыПоставщика.КодТовараПоставщика = ВложенныйЗапрос.КодТовараПоставщика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Данные.Товар,
		|	ВТ_Данные.Поставщик,
		|	ВТ_Данные.Договор,
		|	ВТ_Данные.ТипПрайса,
		|	ВТ_Данные.КодПоставщика,
		|	ВТ_Данные.Наименование,
		|	ВТ_Данные.Производитель,
		|	ВТ_Данные.price_corr,
		|	ВТ_Данные.cnt_pack,
		|	ВТ_Данные.delivery_date,
		|	ВТ_Данные.expiration,
		|	ВТ_Данные.cnt,
		|	ВТ_Данные.price
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|";
		Если МногоПрайсов Тогда
			
			Запрос.Текст = Запрос.Текст + "
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ВТ_ПрайсДругогоТипа.Товар,
				|	ВТ_ПрайсДругогоТипа.Поставщик,
				|	ВТ_ПрайсДругогоТипа.Договор,
				|	ВТ_ПрайсДругогоТипа.ТипПрайса,
				|	ВТ_ПрайсДругогоТипа.КодПоставщика,
				|	ВТ_ПрайсДругогоТипа.Наименование,
				|	ВТ_ПрайсДругогоТипа.Производитель,
				|	ВТ_ПрайсДругогоТипа.price_corr,
				|	ВТ_ПрайсДругогоТипа.cnt_pack,
				|	ВТ_ПрайсДругогоТипа.delivery_date,
				|	ВТ_ПрайсДругогоТипа.expiration,
				|	ВТ_ПрайсДругогоТипа.cnt,
				|	ВТ_ПрайсДругогоТипа.price
				|ИЗ
				|	ВТ_ПрайсДругогоТипа КАК ВТ_ПрайсДругогоТипа";
		КонецЕсли; 

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда

		НаборЗаписей = РегистрыСведений.supplier_price.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Поставщик.Установить(Настройка.Поставщик);
		НаборЗаписей.Отбор.Договор.Установить(Настройка.Договор);
		НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
		НаборЗаписей.Записать();
		НаборЗаписей = "";

	КонецЕсли;

	// Обновим товары поставщика
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_НовыеТоварыПоставщика.Поставщик,
		|	ВТ_НовыеТоварыПоставщика.КодТовараПоставщика,
		|	ВТ_НовыеТоварыПоставщика.Наименование,
		|	ВТ_НовыеТоварыПоставщика.Товар
		|ИЗ
		|	ВТ_НовыеТоварыПоставщика КАК ВТ_НовыеТоварыПоставщика";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда

		НаборЗаписей = РегистрыСведений.ТоварыПоставщика.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Поставщик.Установить(Настройка.Поставщик);
		НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
		НаборЗаписей.Записать();
		НаборЗаписей = "";

	КонецЕсли;

	// Заполним прайс поставщика
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВТ_ПрайсЛистПоставщика.Поставщик,
		|	ВТ_ПрайсЛистПоставщика.Договор,
		|	ВТ_ПрайсЛистПоставщика.КодПоставщика,
		|	ВТ_ПрайсЛистПоставщика.Наименование,
		|	ВТ_ПрайсЛистПоставщика.Товар,
		|	ВТ_ПрайсЛистПоставщика.ТипПрайса,
		|	ВТ_ПрайсЛистПоставщика.Цена,
		|	ВТ_ПрайсЛистПоставщика.Остаток,
		|	ВТ_ПрайсЛистПоставщика.СтавкаНДС,
		|	ВТ_ПрайсЛистПоставщика.СрокГодности,
		|	ВТ_ПрайсЛистПоставщика.ЕГК,
		|	ВТ_ПрайсЛистПоставщика.ШК,
		|	ВТ_ПрайсЛистПоставщика.ФормаВыпуска,
		|	ВТ_ПрайсЛистПоставщика.ЖВЛ,
		|	ВТ_ПрайсЛистПоставщика.ДатаПрайса,
		|	ВТ_ПрайсЛистПоставщика.ЦенаРег,
		|	ВТ_ПрайсЛистПоставщика.КолВУпаковке,
		|	ВТ_ПрайсЛистПоставщика.Производитель,
		|	ВТ_ПрайсЛистПоставщика.Страна,
		|	ВТ_ПрайсЛистПоставщика.ДатаЗаписи
		|ИЗ
		|	ВТ_ПрайсЛистПоставщика КАК ВТ_ПрайсЛистПоставщика";
	РезультатЗапроса = Запрос.Выполнить();
	НаборЗаписей = РегистрыСведений.ПрайсЛистПоставщика.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Поставщик.Установить(Настройка.Поставщик);
	НаборЗаписей.Отбор.Договор.Установить(Настройка.Договор);
	НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
	НаборЗаписей.Записать();
	НаборЗаписей = "";

	// Наследим загрузкой
	НаборЗаписей = РегистрыСведений.ЛогЗагрузкиПрайсовПоставщиков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Поставщик.Установить(Настройка.Поставщик);
	НаборЗаписей.Отбор.Договор.Установить(Настройка.Договор);
	НаборЗаписей.Отбор.Файл.Установить(ЗагружаемыйФайл);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей[0].Загружен = Истина;
		НаборЗаписей[0].ДатаОперации = ТекущаяДата();
	КонецЕсли;
	НаборЗаписей.Записать();
	НаборЗаписей = "";

КонецПроцедуры



// *** *** *** Выгрузка заказов *** *** *** *** 
Процедура ВыгрузитьЗаказыПоставщикам() Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику,
		|	ЗаказПоставщику.Клиент КАК Поставщик,
		|	ЗаказПоставщику.Договор,
		|	Поставщики.АдресFTP,
		|	Поставщики.Логин,
		|	Поставщики.Пароль
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Поставщики КАК Поставщики
		|		ПО ЗаказПоставщику.Клиент = Поставщики.Поставщик
		|		И ЗаказПоставщику.Договор = Поставщики.Договор
		|ГДЕ
		|	ЗаказПоставщику.Статус = ЛОЖЬ
		|	И ЗаказПоставщику.Проведен = ИСТИНА
		|ИНДЕКСИРОВАТЬ ПО
		|	Поставщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиВыгрузкиЗаказовПоставщикам.Поставщик,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Папка,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Маска,
		|	НастройкиВыгрузкиЗаказовПоставщикам.НомерВыгрузки,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Формат,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Разделитель,
		|	НастройкиВыгрузкиЗаказовПоставщикам.have_field_names,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Кодировка,
		|	НастройкиВыгрузкиЗаказовПоставщикам.НомерЗаказа,
		|	НастройкиВыгрузкиЗаказовПоставщикам.ДатаЗаказа,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Код,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Название,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Количество,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Цена,
		|	НастройкиВыгрузкиЗаказовПоставщикам.НазваниеГрузополучателя,
		|	НастройкиВыгрузкиЗаказовПоставщикам.КодГрузополучателя,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Дата,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Клиент,
		|	НастройкиВыгрузкиЗаказовПоставщикам.POZ,
		|	НастройкиВыгрузкиЗаказовПоставщикам.PAYID,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Комметарий,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Отказ,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Коробочный
		|ПОМЕСТИТЬ ВТ_Настройки
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВТ_Данные.Поставщик КАК Поставщик
		|	ИЗ
		|		ВТ_Данные КАК ВТ_Данные) КАК ВТ_Поставщик
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВыгрузкиЗаказовПоставщикам КАК НастройкиВыгрузкиЗаказовПоставщикам
		|			ПО ВТ_Поставщик.Поставщик = НастройкиВыгрузкиЗаказовПоставщикам.Поставщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Данные.Поставщик,
		|	ВТ_Данные.АдресFTP,
		|	ВТ_Данные.Логин,
		|	ВТ_Данные.Пароль
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные";
	ТабДанных = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаДанных Из ТабДанных Цикл

		Если ПустаяСтрока(СтрокаДанных.Логин) Тогда
			Продолжить;
		КонецЕсли; 

		слкПоставщик = СтрокаДанных.Поставщик;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВТ_Настройки.Поставщик,
		|	ВТ_Настройки.Папка,
		|	ВТ_Настройки.Маска,
		|	ВТ_Настройки.НомерВыгрузки,
		|	ВТ_Настройки.Формат,
		|	ВТ_Настройки.Разделитель,
		|	ВТ_Настройки.have_field_names,
		|	ВТ_Настройки.Кодировка,
		|	ВТ_Настройки.НомерЗаказа,
		|	ВТ_Настройки.ДатаЗаказа,
		|	ВТ_Настройки.Код,
		|	ВТ_Настройки.Название,
		|	ВТ_Настройки.Количество,
		|	ВТ_Настройки.Цена,
		|	ВТ_Настройки.НазваниеГрузополучателя,
		|	ВТ_Настройки.КодГрузополучателя,
		|	ВТ_Настройки.Дата,
		|	ВТ_Настройки.Клиент,
		|	ВТ_Настройки.POZ,
		|	ВТ_Настройки.PAYID,
		|	ВТ_Настройки.Комметарий,
		|	ВТ_Настройки.Отказ,
		|	ВТ_Настройки.Коробочный
		|ИЗ
		|	ВТ_Настройки КАК ВТ_Настройки
		|ГДЕ
		|	ВТ_Настройки.Поставщик = &Поставщик";
		Запрос.УстановитьПараметр("Поставщик", слкПоставщик);
		табНастроекПоставщика = Запрос.Выполнить().Выгрузить();
		Если табНастроекПоставщика.Количество() = 0 Тогда
			// Нет настроек
			Продолжить;
		КонецЕсли;

		// Установим соединение
		СтруктураПодключения = Новый Структура;
		СтруктураПодключения.Вставить("ИмяПользователя", СтрокаДанных.Логин);
		СтруктураПодключения.Вставить("Пароль", СтрокаДанных.Пароль);
		СтруктураПодключения.Вставить("АдресFTP", СтрокаДанных.АдресFTP);
		Соединение = ПодключитьсяКFTPСерверу(СтруктураПодключения);
		Соединение.УстановитьТекущийКаталог("/order");

		ВыгрузитьЗаказыПоставщика(Соединение, табНастроекПоставщика.Колонки, табНастроекПоставщика[0], Запрос);
		Соединение = "";

	КонецЦикла; 

	ЗагрузитьОтказыПоставщиков();

КонецПроцедуры
Процедура ВыгрузитьЗаказыПоставщика(Соединение, КолонкиНастроек, текНастройка, Запрос)

	Если СокрЛП(НРег(текНастройка.Формат)) = "dbf" Тогда
		ВыгрузитьЗаказ_DBF(Соединение, КолонкиНастроек, текНастройка, Запрос);
	
	ИначеЕсли СокрЛП(НРег(текНастройка.Формат)) = "txt" Тогда
		ВыгрузитьЗаказ_TXT(Соединение, КолонкиНастроек, текНастройка, Запрос);
	
	ИначеЕсли СокрЛП(НРег(текНастройка.Формат)) = "zipprotek" Тогда	
		ВыгрузитьЗаказ_XmlProtek(Соединение, КолонкиНастроек, текНастройка, Запрос);

	Иначе
		Возврат;
	КонецЕсли; 

КонецПроцедуры
Функция СоздатьФайл_DBF(КолонкиНастроек, текНастройка, ИмяФайла, ПоляТаблицы, ПутьКНовомуDBF, ИмяФайлаDBF)

// Типы ещё бывают:
    // N - число
    // S - строка
    // D - дата
    // L - булево
    // F - число
	МаскаНомера = СокрЛП(текНастройка.Маска);
	
	ФайлВыгрузки = Новый XBase;
//	ФайлВыгрузки.Кодировка = КодировкаXBase.ANSI;
	ФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
	ПоляТаблицы.Очистить();

	Для каждого текКолонка Из КолонкиНастроек Цикл

		Если СтрНайти("НомерЗаказа ДатаЗаказа Код Название Количество Цена КодГрузополучателя Дата Клиент POZ PAYID Комметарий Отказ Коробочный", текКолонка.Имя) = 0 Тогда
			Продолжить;
		КонецЕсли; 

		текЗначение = текНастройка[текКолонка.Имя];
		Если НЕ ЗначениеЗаполнено(текЗначение) Тогда
			Продолжить;
		КонецЕсли; 

		ДатаМассив = РазложитьСтрокуВМассивПодстрок(текЗначение, ",");

		ТипКолонки = "";
		Длина = "";

		ИмяКолонки = ДатаМассив[0];
		ПоляТаблицы.Вставить(текКолонка.Имя, ИмяКолонки);
		
		Если ДатаМассив.Количество() > 1 Тогда
			ТипКолонки = ДатаМассив[1];
		КонецЕсли; 

		Если ДатаМассив.Количество() > 2 Тогда
			Длина = Число(ДатаМассив[2]);
		КонецЕсли;

		ФайлВыгрузки.Поля.Добавить(
		    ИмяКолонки, // имя колонки
		    ТипКолонки, // тип
		    ?(Длина = "", "", Длина), // длина
		);
	КонецЦикла;

//	ИмяФайлаDBF = Формат(ИмяФайла, "ЧЦ=8; ЧВН=; ЧГ=") + ".dbf";
	ИмяФайлаDBF = СтрЗаменить(МаскаНомера, "{number}", Формат(ИмяФайла, "ЧЦ=8; ЧВН=; ЧГ="));
	ПутьКНовомуDBF = КаталогВременныхФайлов() + ИмяФайлаDBF;
	ФайлВыгрузки.СоздатьФайл(ПутьКНовомуDBF, );

	Возврат ФайлВыгрузки;

КонецФункции // ()
Процедура ВыгрузитьЗаказ_DBF(Соединение, КолонкиНастроек, текНастройка, ОсновнойЗапрос)

	НомерВыгрузки = Макс(1, текНастройка.НомерВыгрузки);
	ОсновнойЗапрос.УстановитьПараметр("Поставщик", текНастройка.Поставщик);
	ОсновнойЗапрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Данные.ЗаказПоставщику,
	|	ВТ_Данные.Договор
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|ГДЕ
	|	ВТ_Данные.Поставщик = &Поставщик";

	ПоляТаблицы = Новый Соответствие;
	РезультатЗапроса = ОсновнойЗапрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл

		текДокумент = РезультатЗапроса.ЗаказПоставщику;
		текДоговор = РезультатЗапроса.Договор;

		ПолноеИмяФайла = "";
		ИмяФайла = "";
		ФайлВыгрузки = СоздатьФайл_DBF(КолонкиНастроек, текНастройка, НомерВыгрузки, ПоляТаблицы, ПолноеИмяФайла, ИмяФайла);

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", текДокумент);
		Запрос.УстановитьПараметр("КодГрузополучателя", текДоговор.КодПолучателя);
		Запрос.УстановитьПараметр("НазваниеГрузополучателя", текДоговор.СкладОприходования.АдресХранения.Адрес);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Запрос.УстановитьПараметр("НомерЗаказа", НомерВыгрузки);

		Запрос.Текст = 
			"ВЫБРАТЬ
			|	&НомерЗаказа КАК НомерЗаказа,
			|	ЗаказПоставщикуТовары.Ссылка.Дата КАК ДатаЗаказа,
			|	ЗаказПоставщикуТовары.КодТовараПоставщика КАК Код,
			|	ЕСТЬNULL(ТоварыПоставщика.Наименование, ЗаказПоставщикуТовары.Товар.Наименование) КАК Название,
			|	ЗаказПоставщикуТовары.Количество,
			|	ЗаказПоставщикуТовары.Цена,
			|	ЗаказПоставщикуТовары.КоличествоОтказ КАК Отказ,
			|	ЗаказПоставщикуТовары.Ссылка.Комментарий,
			|	&КодГрузополучателя КАК КодГрузополучателя,
			|	&НазваниеГрузополучателя КАК НазваниеГрузополучателя,
			|	&ТекущаяДата КАК Дата,
			|	0 КАК PAYID,
			|	"""" КАК POZ
			|ИЗ
			|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыПоставщика КАК ТоварыПоставщика
			|		ПО ЗаказПоставщикуТовары.Товар = ТоварыПоставщика.Товар
			|			И ЗаказПоставщикуТовары.КодТовараПоставщика = ТоварыПоставщика.КодТовараПоставщика
			|			И ЗаказПоставщикуТовары.Ссылка.Клиент = ТоварыПоставщика.Поставщик
			|ГДЕ
			|	ЗаказПоставщикуТовары.Ссылка = &Ссылка";

		ТабТоваров = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаДокумента Из ТабТоваров Цикл

			ФайлВыгрузки.Добавить();
			Для каждого ТекКолонка Из ТабТоваров.Колонки Цикл
				ИмяПоля = ПоляТаблицы.Получить(ТекКолонка.Имя);
				Если ИмяПоля <> Неопределено Тогда
					Если ТипЗнч(СтрокаДокумента[ТекКолонка.Имя]) = Тип("Строка") Тогда
						ФайлВыгрузки[ИмяПоля] = СокрЛП(СтрокаДокумента[ТекКолонка.Имя]);
					Иначе
						ФайлВыгрузки[ИмяПоля] = СтрокаДокумента[ТекКолонка.Имя];
					КонецЕсли; 
				КонецЕсли;
			КонецЦикла;
			ФайлВыгрузки.Записать();

		КонецЦикла; 

		_Флаг = Истина;
		Попытка

			ФайлВыгрузки.Записать();
			ФайлВыгрузки.ЗакрытьФайл();
			Соединение.Записать(ПолноеИмяФайла, ИмяФайла);

		Исключение
			_Флаг = НЕ _Флаг;
		КонецПопытки;
		
		Если _Флаг Тогда

			обДокумент = текДокумент.ПолучитьОбъект();
			обДокумент.НомерДокПоставщика = Формат(НомерВыгрузки, "ЧГ=");
			обДокумент.ИмяФайла = ИмяФайла;
			обДокумент.Статус = Истина;
			Попытка
				обДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			КонецПопытки;

			УдалитьФайлы(ПолноеИмяФайла);
			НомерВыгрузки = НомерВыгрузки + 1;

		КонецЕсли; 

	КонецЦикла; 

	Если НомерВыгрузки <> текНастройка.НомерВыгрузки Тогда

		НаборЗаписей = РегистрыСведений.НастройкиВыгрузкиЗаказовПоставщикам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Поставщик.Установить(текНастройка.Поставщик);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей[0].НомерВыгрузки = НомерВыгрузки;
		КонецЕсли;
		НаборЗаписей.Записать();
		НаборЗаписей = "";

	КонецЕсли; 

КонецПроцедуры
Процедура ВыгрузитьЗаказ_TXT(Соединение, КолонкиНастроек, текНастройка, ОсновнойЗапрос)

	НомерВыгрузки = Макс(1, текНастройка.НомерВыгрузки);
	МаскаНомера = СокрЛП(текНастройка.Маска);
	Разделитель = СокрЛП(текНастройка.Разделитель);

	ПоляТаблицы = Новый Соответствие;
	Для каждого текКолонка Из КолонкиНастроек Цикл

		Если СтрНайти("НомерЗаказа ДатаЗаказа Код Название Количество Цена КодГрузополучателя Дата Клиент POZ PAYID Комметарий Отказ Коробочный", текКолонка.Имя) = 0 Тогда
			Продолжить;
		КонецЕсли; 

		текЗначение = текНастройка[текКолонка.Имя];
		Если НЕ ЗначениеЗаполнено(текЗначение) Тогда
			Продолжить;
		КонецЕсли; 

		ПоляТаблицы.Вставить(текКолонка.Имя, Число(текЗначение));

	КонецЦикла;

	ТабСтрока = Новый ТаблицаЗначений;
	ТабСтрока.Колонки.Добавить("Номер");
	ТабСтрока.Колонки.Добавить("Значение");

	ОсновнойЗапрос.УстановитьПараметр("Поставщик", текНастройка.Поставщик);
	ОсновнойЗапрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Данные.ЗаказПоставщику,
	|	ВТ_Данные.Договор
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|ГДЕ
	|	ВТ_Данные.Поставщик = &Поставщик";

	РезультатЗапроса = ОсновнойЗапрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл

		текДокумент = РезультатЗапроса.ЗаказПоставщику;
		текДоговор = РезультатЗапроса.Договор;

		ИмяФайла = СтрЗаменить(МаскаНомера, "{number}", Формат(НомерВыгрузки, "ЧГ="));
		ПолноеИмяФайла = КаталогВременныхФайлов() + ИмяФайла;
		
		ФайлВыгрузки = Новый ТекстовыйДокумент;
//ANSI (ANSI)
//OEM (OEM)
//UTF16 (UTF16)
//UTF8 (UTF8)
//Системная (System)
		ФайлВыгрузки.Записать(ПолноеИмяФайла, КодировкаТекста.UTF8);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", текДокумент);
		Запрос.УстановитьПараметр("КодГрузополучателя", текДоговор.КодПолучателя);
		Запрос.УстановитьПараметр("НазваниеГрузополучателя", текДоговор.СкладОприходования.АдресХранения.Адрес);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Запрос.УстановитьПараметр("НомерЗаказа", НомерВыгрузки);

		Запрос.Текст = 
			"ВЫБРАТЬ
			|	&НомерЗаказа КАК НомерЗаказа,
			|	ЗаказПоставщикуТовары.Ссылка.Дата КАК ДатаЗаказа,
			|	ЗаказПоставщикуТовары.КодТовараПоставщика КАК Код,
			|	ЕСТЬNULL(ТоварыПоставщика.Наименование, ЗаказПоставщикуТовары.Товар.Наименование) КАК Название,
			|	ЗаказПоставщикуТовары.Количество,
			|	ЗаказПоставщикуТовары.Цена,
			|	ЗаказПоставщикуТовары.КоличествоОтказ КАК Отказ,
			|	ЗаказПоставщикуТовары.Ссылка.Комментарий,
			|	&КодГрузополучателя КАК КодГрузополучателя,
			|	&НазваниеГрузополучателя КАК НазваниеГрузополучателя,
			|	&ТекущаяДата КАК Дата,
			|	0 КАК PAYID,
			|	"""" КАК POZ
			|ИЗ
			|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыПоставщика КАК ТоварыПоставщика
			|		ПО ЗаказПоставщикуТовары.Товар = ТоварыПоставщика.Товар
			|			И ЗаказПоставщикуТовары.КодТовараПоставщика = ТоварыПоставщика.КодТовараПоставщика
			|			И ЗаказПоставщикуТовары.Ссылка.Клиент = ТоварыПоставщика.Поставщик
			|ГДЕ
			|	ЗаказПоставщикуТовары.Ссылка = &Ссылка";

		ТабТоваров = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаДокумента Из ТабТоваров Цикл

			Для каждого ТекКолонка Из ТабТоваров.Колонки Цикл
				ИмяПоля = ПоляТаблицы.Получить(ТекКолонка.Имя);
				Если ИмяПоля <> Неопределено Тогда
					
					Если ТипЗнч(СтрокаДокумента[ТекКолонка.Имя]) = Тип("Строка") Тогда
						текЗначение = СокрЛП(СтрокаДокумента[ТекКолонка.Имя]);
					ИначеЕсли ТипЗнч(СтрокаДокумента[ТекКолонка.Имя]) = Тип("Число") Тогда
						текЗначение = Формат(СтрокаДокумента[ТекКолонка.Имя], "ЧГ=");
					ИначеЕсли ТипЗнч(СтрокаДокумента[ТекКолонка.Имя]) = Тип("Дата") Тогда
						текЗначение = Формат(СтрокаДокумента[ТекКолонка.Имя], "ЧГ=; ДФ=dd.MM.yyyy");
					Иначе
						текЗначение = Строка(ТекКолонка.Имя);
					КонецЕсли;

					СтрокаТЧ = ТабСтрока.Добавить();
					СтрокаТЧ.Номер = ИмяПоля;
					СтрокаТЧ.Значение = текЗначение;

				КонецЕсли;
			КонецЦикла;

			строкаФайла = "";
			ТабСтрока.Сортировать("Номер");
			Для каждого текСтрока Из ТабСтрока Цикл
				строкаФайла = строкаФайла + текСтрока.Значение + Разделитель;
			КонецЦикла;
			ФайлВыгрузки.ДобавитьСтроку(Лев(строкаФайла, (СтрДлина(строкаФайла) - 1)));
			ТабСтрока.Очистить();

		КонецЦикла; 

		_Флаг = Истина;
		Попытка

			ФайлВыгрузки.Записать(ПолноеИмяФайла, КодировкаТекста.UTF8);
			Соединение.Записать(ПолноеИмяФайла, ИмяФайла);

		Исключение
			_Флаг = НЕ _Флаг;
		КонецПопытки;
		
		Если _Флаг Тогда

			обДокумент = текДокумент.ПолучитьОбъект();
			обДокумент.НомерДокПоставщика = Формат(НомерВыгрузки, "ЧГ=");
			обДокумент.ИмяФайла = ИмяФайла;
			обДокумент.Статус = Истина;
			Попытка
				обДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			КонецПопытки;

			УдалитьФайлы(ПолноеИмяФайла);
			НомерВыгрузки = НомерВыгрузки + 1;

		КонецЕсли; 

	КонецЦикла; 

	Если НомерВыгрузки <> текНастройка.НомерВыгрузки Тогда

		НаборЗаписей = РегистрыСведений.НастройкиВыгрузкиЗаказовПоставщикам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Поставщик.Установить(текНастройка.Поставщик);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей[0].НомерВыгрузки = НомерВыгрузки;
		КонецЕсли;
		НаборЗаписей.Записать();
		НаборЗаписей = "";

	КонецЕсли; 

КонецПроцедуры
Процедура ДобавитьЭлемент(ФайлВыгрузки, ИмяЭлемента, ЗначениеЭлемента)
	
	ФайлВыгрузки.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	ФайлВыгрузки.ЗаписатьТекст(ЗначениеЭлемента);
    ФайлВыгрузки.ЗаписатьКонецЭлемента();

КонецПроцедуры
Процедура ВыгрузитьЗаказ_XmlProtek(Соединение, КолонкиНастроек, текНастройка, ОсновнойЗапрос)

	НомерВыгрузки = Макс(1, текНастройка.НомерВыгрузки);
	МаскаНомера = СокрЛП(текНастройка.Маска);

	ТабСтрока = Новый ТаблицаЗначений;
	ТабСтрока.Колонки.Добавить("Номер");
	ТабСтрока.Колонки.Добавить("Значение");

	ОсновнойЗапрос.УстановитьПараметр("Поставщик", текНастройка.Поставщик);
	ОсновнойЗапрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Данные.ЗаказПоставщику,
	|	ВТ_Данные.Договор
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|ГДЕ
	|	ВТ_Данные.Поставщик = &Поставщик";

	РезультатЗапроса = ОсновнойЗапрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл

		текДокумент = РезультатЗапроса.ЗаказПоставщику;
		текДоговор = РезультатЗапроса.Договор;

		ИмяФайла = СтрЗаменить(МаскаНомера, "{number}", Формат(НомерВыгрузки, "ЧГ="));
		ПолноеИмяФайла = КаталогВременныхФайлов() + ИмяФайла;

		ФайлВыгрузки = Новый ЗаписьXML;
		ФайлВыгрузки.ОткрытьФайл(ПолноеИмяФайла, Новый ПараметрыЗаписиXML("windows-1251",,Ложь,Ложь));
		ФайлВыгрузки.ЗаписатьОбъявлениеXML();
		
		ФайлВыгрузки.ЗаписатьНачалоЭлемента("КоммерческаяИнформация");

		ФайлВыгрузки.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ФайлВыгрузки.ЗаписатьАтрибут("noNamespaceSchemaLocation", "http://www.w3.org/2001/XMLSchema-instance", "CommerceML.xsd");
		ФайлВыгрузки.ЗаписатьАтрибут("ВерсияСхемы", "2.021");
		ФайлВыгрузки.ЗаписатьАтрибут("ДатаФормирования", Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "Т" + Формат(ТекущаяДата(), "ДЛФ=T"));
		
			ФайлВыгрузки.ЗаписатьНачалоЭлемента("Документ");
			ДобавитьЭлемент(ФайлВыгрузки, "Ид", Формат(НомерВыгрузки, "ЧГ="));
			ДобавитьЭлемент(ФайлВыгрузки, "Номер", Формат(текДокумент.Номер, "ЧГ="));
			ДобавитьЭлемент(ФайлВыгрузки, "Дата", Формат(текДокумент.Дата, "ДФ=yyyy-MM-dd"));
			ДобавитьЭлемент(ФайлВыгрузки, "ХозОперация", "Заказ товара");
			ДобавитьЭлемент(ФайлВыгрузки, "Роль", "Покупатель");
			ДобавитьЭлемент(ФайлВыгрузки, "Валюта", "RUR");
			ДобавитьЭлемент(ФайлВыгрузки, "Курс", "1.00");
			ДобавитьЭлемент(ФайлВыгрузки, "Сумма", "-0");

			ФайлВыгрузки.ЗаписатьНачалоЭлемента("Контрагенты");
				ФайлВыгрузки.ЗаписатьНачалоЭлемента("Контрагент");
					ДобавитьЭлемент(ФайлВыгрузки, "Ид", "-0");
					ДобавитьЭлемент(ФайлВыгрузки, "ОфициальноеНаименование", "");
					ДобавитьЭлемент(ФайлВыгрузки, "Роль", "Плательщик");
				ФайлВыгрузки.ЗаписатьКонецЭлемента(); // Контрагент
				ФайлВыгрузки.ЗаписатьНачалоЭлемента("Контрагент");
					ДобавитьЭлемент(ФайлВыгрузки, "Ид", текДоговор.КодПолучателя);
					ДобавитьЭлемент(ФайлВыгрузки, "ОфициальноеНаименование", "");
					ДобавитьЭлемент(ФайлВыгрузки, "Роль", "Получатель");
				ФайлВыгрузки.ЗаписатьКонецЭлемента(); // Контрагент
				ФайлВыгрузки.ЗаписатьНачалоЭлемента("Контрагент");
					ДобавитьЭлемент(ФайлВыгрузки, "Ид", "-0");
					ДобавитьЭлемент(ФайлВыгрузки, "ОфициальноеНаименование", "");
					ДобавитьЭлемент(ФайлВыгрузки, "Роль", "Покупатель");
				ФайлВыгрузки.ЗаписатьКонецЭлемента(); // Контрагент
			ФайлВыгрузки.ЗаписатьКонецЭлемента(); // Контрагенты
			ДобавитьЭлемент(ФайлВыгрузки, "Время", "00:00:00");
			ДобавитьЭлемент(ФайлВыгрузки, "СрокПлатежа", "-9999-12-31");
//			ДобавитьЭлемент(ФайлВыгрузки, "Комментарий", ?(текДокумент.ДеньНочь = 0, "День", "Ночь"));
			
			ФайлВыгрузки.ЗаписатьНачалоЭлемента("Товары");

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", текДокумент);
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗаказПоставщикуТовары.КодТовараПоставщика КАК Код,
				|	ЗаказПоставщикуТовары.Количество
				|ИЗ
				|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
				|ГДЕ
				|	ЗаказПоставщикуТовары.Ссылка = &Ссылка";

			РезультатТовары = Запрос.Выполнить().Выбрать();
			Пока РезультатТовары.Следующий() Цикл
			
				ФайлВыгрузки.ЗаписатьНачалоЭлемента("Товар");
					ДобавитьЭлемент(ФайлВыгрузки, "Ид", СокрЛП(РезультатТовары.Код));
					ДобавитьЭлемент(ФайлВыгрузки, "Наименование", "");
					ДобавитьЭлемент(ФайлВыгрузки, "БазоваяЕдиница", "");
					ДобавитьЭлемент(ФайлВыгрузки, "ЗначенияСвойств", "");
					ДобавитьЭлемент(ФайлВыгрузки, "ИдКаталога", "");
					ДобавитьЭлемент(ФайлВыгрузки, "ЦенаЗаЕдиницу", "-0");
					ДобавитьЭлемент(ФайлВыгрузки, "Количество", Формат(РезультатТовары.Количество, "ЧГ="));
					ДобавитьЭлемент(ФайлВыгрузки, "Сумма", "-0");
				ФайлВыгрузки.ЗаписатьКонецЭлемента(); // Товар

			КонецЦикла; 
			ФайлВыгрузки.ЗаписатьКонецЭлемента(); // Товары

			ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗначенияРеквизитов");
			ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
			ДобавитьЭлемент(ФайлВыгрузки, "Наименование", "MAX2PAY");
			ДобавитьЭлемент(ФайлВыгрузки, "Значение", "30");
			ФайлВыгрузки.ЗаписатьКонецЭлемента(); // ЗначениеРеквизита

			ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
			ДобавитьЭлемент(ФайлВыгрузки, "Наименование", "DELIVERY");
			ДобавитьЭлемент(ФайлВыгрузки, "Значение", "1");
			ФайлВыгрузки.ЗаписатьКонецЭлемента(); // ЗначениеРеквизита

			ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
			ДобавитьЭлемент(ФайлВыгрузки, "Наименование", "SUMRUBPRIC");
			ДобавитьЭлемент(ФайлВыгрузки, "Значение", Формат(текДокумент.Товары.Итог("Сумма"), "ЧГ="));
			ФайлВыгрузки.ЗаписатьКонецЭлемента(); // ЗначениеРеквизита

			ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
			ДобавитьЭлемент(ФайлВыгрузки, "Наименование", "PRICE_NAME");
			ДобавитьЭлемент(ФайлВыгрузки, "Значение", "Москва");
			ФайлВыгрузки.ЗаписатьКонецЭлемента(); // ЗначениеРеквизита

			ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
			ДобавитьЭлемент(ФайлВыгрузки, "Наименование", "ZAKTYPE");
			ДобавитьЭлемент(ФайлВыгрузки, "Значение", "1");
			ФайлВыгрузки.ЗаписатьКонецЭлемента(); // ЗначениеРеквизита

			ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
			ДобавитьЭлемент(ФайлВыгрузки, "Наименование", "ZAK_USTR");
			ДобавитьЭлемент(ФайлВыгрузки, "Значение", "from_smacs");
			ФайлВыгрузки.ЗаписатьКонецЭлемента(); // ЗначениеРеквизита

			ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
			ДобавитьЭлемент(ФайлВыгрузки, "Наименование", "ZAK_UINT");
			ДобавитьЭлемент(ФайлВыгрузки, "Значение", Формат(НомерВыгрузки, "ЧГ="));
			ФайлВыгрузки.ЗаписатьКонецЭлемента(); // ЗначениеРеквизита

			ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
			ДобавитьЭлемент(ФайлВыгрузки, "Наименование", "S_START");
			ДобавитьЭлемент(ФайлВыгрузки, "Значение", Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "Т" + Формат(ТекущаяДата(), "ДЛФ=T"));
			ФайлВыгрузки.ЗаписатьКонецЭлемента(); // ЗначениеРеквизита
			
			ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
			ДобавитьЭлемент(ФайлВыгрузки, "Наименование", "S_FINISH");
			ДобавитьЭлемент(ФайлВыгрузки, "Значение", Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "Т" + Формат(ТекущаяДата(), "ДЛФ=T"));
			ФайлВыгрузки.ЗаписатьКонецЭлемента(); // ЗначениеРеквизита

			ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
			ДобавитьЭлемент(ФайлВыгрузки, "Наименование", "PRICE_IDX");
			ДобавитьЭлемент(ФайлВыгрузки, "Значение", ?(текДокумент.КодПрайсаПоставщика, "2009", "1020"));
			ФайлВыгрузки.ЗаписатьКонецЭлемента(); // ЗначениеРеквизита

			ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
			ДобавитьЭлемент(ФайлВыгрузки, "Наименование", "ZAKTYPE_STR");
			ДобавитьЭлемент(ФайлВыгрузки, "Значение", "ПОСТАВКА");
			ФайлВыгрузки.ЗаписатьКонецЭлемента(); // ЗначениеРеквизита

			ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
			ДобавитьЭлемент(ФайлВыгрузки, "Наименование", "PAYER");
			ДобавитьЭлемент(ФайлВыгрузки, "Значение", "-0");
			ФайлВыгрузки.ЗаписатьКонецЭлемента(); // ЗначениеРеквизита

			ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
			ДобавитьЭлемент(ФайлВыгрузки, "Наименование", "RECIPIENT");
			ДобавитьЭлемент(ФайлВыгрузки, "Значение", СокрЛП(текДоговор.КодПолучателя));
			ФайлВыгрузки.ЗаписатьКонецЭлемента(); // ЗначениеРеквизита

			ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
			ДобавитьЭлемент(ФайлВыгрузки, "Наименование", "BUYER");
			ДобавитьЭлемент(ФайлВыгрузки, "Значение", "-0");
			ФайлВыгрузки.ЗаписатьКонецЭлемента(); // ЗначениеРеквизита
		ФайлВыгрузки.ЗаписатьКонецЭлемента(); // ЗначенияРеквизитов

		ФайлВыгрузки.ЗаписатьКонецЭлемента(); // Документ
		ФайлВыгрузки.ЗаписатьКонецЭлемента(); // КоммерческаяИнформация
    	ФайлВыгрузки.Закрыть();

		Соединение.Записать(ПолноеИмяФайла, ИмяФайла);
		обДокумент = текДокумент.ПолучитьОбъект();
		обДокумент.НомерДокПоставщика = Формат(НомерВыгрузки, "ЧГ=");
		обДокумент.ИмяФайла = ИмяФайла;
		обДокумент.Статус = Истина;
		Попытка
			обДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;

		УдалитьФайлы(ПолноеИмяФайла);
		НомерВыгрузки = НомерВыгрузки + 1;

	КонецЦикла; 

	Если НомерВыгрузки <> текНастройка.НомерВыгрузки Тогда

		НаборЗаписей = РегистрыСведений.НастройкиВыгрузкиЗаказовПоставщикам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Поставщик.Установить(текНастройка.Поставщик);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей[0].НомерВыгрузки = НомерВыгрузки;
		КонецЕсли;
		НаборЗаписей.Записать();
		НаборЗаписей = "";

	КонецЕсли; 

КонецПроцедуры



// *** *** *** Загрузка отказов *** *** *** *** 
Процедура ЗагрузитьОтказыПоставщиков() Экспорт
	
	ДанныеЗагрузки = Новый Структура;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиВыгрузкиЗаказовПоставщикам.Поставщик,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Папка,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Маска,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Формат,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Разделитель,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Кодировка,
		|	НастройкиВыгрузкиЗаказовПоставщикам.НомерЗаказа,
		|	НастройкиВыгрузкиЗаказовПоставщикам.ДатаЗаказа,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Код,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Количество,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Отказ,
		|	Поставщики.АдресFTP,
		|	Поставщики.Логин,
		|	Поставщики.Пароль
		|ИЗ
		|	РегистрСведений.Поставщики КАК Поставщики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВыгрузкиЗаказовПоставщикам КАК НастройкиВыгрузкиЗаказовПоставщикам
		|		ПО Поставщики.Поставщик = НастройкиВыгрузкиЗаказовПоставщикам.Поставщик
		|ГДЕ
		|	Поставщики.Активно = ИСТИНА";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	структНастройки = Новый Структура;
	табЗагруженныйОтказ = Новый ТаблицаЗначений;
	табЗагруженныйОтказ.Колонки.Добавить("НомерЗаказа", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(20));
	табЗагруженныйОтказ.Колонки.Добавить("ДатаЗаказа", Новый ОписаниеТипов("Дата"));
	табЗагруженныйОтказ.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(20));
	табЗагруженныйОтказ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	табЗагруженныйОтказ.Колонки.Добавить("Отказ", Новый ОписаниеТипов("Число"));

	АктивныеНастройки = РезультатЗапроса.Выбрать();
	Пока АктивныеНастройки.Следующий() Цикл

		Если ПустаяСтрока(АктивныеНастройки.Логин) Тогда
			Продолжить;
		КонецЕсли; 

		структНастройки.Очистить();
		табЗагруженныйОтказ.Очистить();

		Для каждого текКолонка Из РезультатЗапроса.Колонки Цикл

			текЗначение = АктивныеНастройки[текКолонка.Имя];
			Если ЗначениеЗаполнено(текЗначение) Тогда
				структНастройки.Вставить(текКолонка.Имя, ?(ТипЗнч(текЗначение) = Тип("Строка"), СокрЛП(текЗначение), текЗначение));
			Иначе
				структНастройки.Вставить(текКолонка.Имя, ?(ТипЗнч(текЗначение) = Тип("Число"), 0, Неопределено));
			КонецЕсли;

		КонецЦикла; 

		ЗагрузитьОтказыПоставщика(структНастройки, табЗагруженныйОтказ);

	КонецЦикла; 

КонецПроцедуры
Процедура ЗагрузитьОтказыПоставщика(Настройка, табЗагруженныйОтказ)

	КаталогАрхив = "C:\Поставщики";
	Если НайтиФайлы("C:\", "Поставщики").Количество() = 0 Тогда
		СоздатьКаталог(КаталогАрхив);
	КонецЕсли;

	Если НайтиФайлы(КаталогАрхив, СокрЛП(Настройка.Папка)).Количество() = 0 Тогда
		СоздатьКаталог(КаталогАрхив + "\" + СокрЛП(Настройка.Папка));
	КонецЕсли;
	КаталогАрхив = КаталогАрхив + "\" + СокрЛП(Настройка.Папка);
	
	Если НайтиФайлы(КаталогАрхив, "Отказы").Количество() = 0 Тогда
		СоздатьКаталог(КаталогАрхив + "\Отказы");
	КонецЕсли;
	КаталогАрхив = КаталогАрхив + "\Отказы";

	ВременныйКаталог = КаталогВременныхФайлов() + СокрЛП(Настройка.Папка);
	Если НайтиФайлы(КаталогВременныхФайлов(), СокрЛП(Настройка.Папка)).Количество() = 0 Тогда
		СоздатьКаталог(ВременныйКаталог);
	КонецЕсли;
	ПолучитьФайлыС_FTP(Настройка, ВременныйКаталог, "otkaz");

	_Маска = СокрЛП(Настройка.Маска);
	Если СокрЛП(Настройка.Формат) = "ZipProtek" Тогда
		_Маска = "*.zip";
	КонецЕсли;

	ЗагружаемыеФайлы = НайтиФайлы(ВременныйКаталог, "*" + Прав(_Маска, 4));
	Если ЗагружаемыеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Для Индекс = 0 По ЗагружаемыеФайлы.ВГраница() Цикл

		текФайл = ЗагружаемыеФайлы[Индекс];
		Если ВРег(Настройка.Формат) = "DBF" Тогда
			ЗагрузитьОтказ_DBF(текФайл, Настройка, табЗагруженныйОтказ);

		ИначеЕсли ВРег(Настройка.Формат) = "TXT" Тогда
			ЗагрузитьОтказ_TXT(текФайл, Настройка, табЗагруженныйОтказ);

		ИначеЕсли СтрНайти(ВРег(Настройка.Формат), "ZIP") Тогда
			Если ВРег(Настройка.Формат) = "ZIPPROTEK" Тогда
				ЗагрузитьОтказ_ZipProtek(текФайл, Настройка, табЗагруженныйОтказ);
			Иначе
				// Хз чей это прайс
				Продолжить;
			КонецЕсли; 

		Иначе
			Продолжить;
		КонецЕсли;

		ОбработатьЗаказПоставщику(Настройка.Поставщик, табЗагруженныйОтказ);
		КопироватьФайл(текФайл.ПолноеИмя, КаталогАрхив + "\" + текФайл.Имя);
	КонецЦикла; 

	УдалитьФайлы(ВременныйКаталог);

КонецПроцедуры
Процедура ЗагрузитьОтказ_DBF(текФайл, Настройка, табЗагруженныйОтказ)

	ИмяКоротко = "";
	Если СтрДлина(текФайл.ИмяБезРасширения) <= 6 Тогда
		ИмяКоротко = "t_" + СокрЛП(текФайл.ИмяБезРасширения) + "." + Настройка.Формат;
	Иначе
		ИмяКоротко = "t_" + Лев(СокрЛП(текФайл.ИмяБезРасширения), 6) + "." + Настройка.Формат;
	КонецЕсли;

	ВременныйФайл = КаталогВременныхФайлов() + ИмяКоротко;
	КопироватьФайл(текФайл.ПолноеИмя, ВременныйФайл);

	ФайлДБФ = Новый XBase;
	//ФайлДБФ.Кодировка = КодировкаXBase.ANSI;
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	ФайлДБФ.ОткрытьФайл(ВременныйФайл, , Истина);
	Если ФайлДБФ.КоличествоЗаписей() = 0 Тогда
		ФайлДБФ.ЗакрытьФайл();
		Возврат;
	КонецЕсли;

	ФайлДБФ.Первая();
	Пока Не ФайлДБФ.ВКонце() Цикл

		СтрокаПрайса = табЗагруженныйОтказ.Добавить();
		Для каждого текКолонка Из табЗагруженныйОтказ.Колонки Цикл

			НаименованиеКолонки = Неопределено;
			Настройка.Свойство(текКолонка.Имя, НаименованиеКолонки);
			Если НЕ НаименованиеКолонки = Неопределено Тогда

				НаименованиеКолонки = ВыделитьИмяКолонки(НаименованиеКолонки);
				Если ФайлДБФ.Поля.Найти(НаименованиеКолонки) = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				текЗначение = ФайлДБФ[НаименованиеКолонки];
				Если Строка(текКолонка.ТипЗначения) = "Строка" Тогда
					текЗначение = СокрЛП(?(ТипЗнч(текЗначение) = Тип("Число"), Формат(текЗначение, "ЧГ="), текЗначение));
				КонецЕсли;
				СтрокаПрайса[текКолонка.Имя] = текЗначение;

			КонецЕсли; 

		КонецЦикла; 
	    ФайлДБФ.Следующая(); // переходим к следующей записи
	КонецЦикла;    
	
	ФайлДБФ.ЗакрытьФайл();
	УдалитьФайлы(ВременныйФайл);

КонецПроцедуры
Процедура ЗагрузитьОтказ_TXT(текФайл, Настройка, табЗагруженныйОтказ)

	ИмяКоротко = "";
	Если СтрДлина(текФайл.ИмяБезРасширения) <= 6 Тогда
		ИмяКоротко = "t_" + СокрЛП(текФайл.ИмяБезРасширения) + "." + Настройка.Формат;
	Иначе
		ИмяКоротко = "t_" + Лев(СокрЛП(текФайл.ИмяБезРасширения), 6) + "." + Настройка.Формат;
	КонецЕсли;

	ВременныйФайл = КаталогВременныхФайлов() + ИмяКоротко;
	КопироватьФайл(текФайл.ПолноеИмя, ВременныйФайл);

	ТекстовыйФайл  = Новый ТекстовыйДокумент;
 	ТекстовыйФайл.Прочитать(
		ВременныйФайл,
		?(ПустаяСтрока(Настройка.Кодировка), КодировкаТекста.UTF8, СокрЛП(Настройка.Кодировка)));

	Для Индекс = 1 По ТекстовыйФайл.КоличествоСтрок() Цикл

		СтрокаМассив = РазложитьСтрокуВМассивПодстрок(ТекстовыйФайл.ПолучитьСтроку(Индекс), Настройка.Разделитель);
		Если СтрокаМассив.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаПрайса = табЗагруженныйОтказ.Добавить();
		СтрокаПрайса.Код = СтрокаМассив[0];
		СтрокаПрайса.Количество = СтрокаМассив[2];
		СтрокаПрайса.Отказ = СтрокаМассив[3];
		СтрокаПрайса.ДатаЗаказа = НачалоДня(ТекущаяДата() - 86400);
		СтрокаПрайса.НомерЗаказа = СтрокаМассив[6];

		//Для каждого текКолонка Из табЗагруженныйОтказ.Колонки Цикл
		//	ИндексПоля = Неопределено;
		//	Настройка.Свойство(текКолонка.Имя, ИндексПоля);
		//	Если НЕ ИндексПоля = Неопределено Тогда
		//		ИндексПоля = Число(ИндексПоля);
		//		Если СтрокаМассив.ВГраница() < ИндексПоля Тогда
		//			Продолжить;
		//		КонецЕсли;

		//		текЗначение = СокрЛП(СтрокаМассив[ИндексПоля]);
		//		Если Строка(текКолонка.ТипЗначения) = "Число" Тогда
		//			текЗначение = ?(текЗначение = "", 0, Число(текЗначение));

		//		ИначеЕсли Строка(текКолонка.ТипЗначения) = "Дата" Тогда
		//			Если ПустаяСтрока(текЗначение) Тогда
		//				текЗначение = ТекущаяДата();
		//			Иначе
		//				ДатаМассив = РазложитьСтрокуВМассивПодстрок(текЗначение, ".");
		//				Если СтрДлина(ДатаМассив[0]) = 4 Тогда
		//					// Формат даты ГГГГ.ММ.ДД
		//					текЗначение = Дата(ДатаМассив[0], ДатаМассив[1], ДатаМассив[2]);
		//				Иначе
		//					// Формат даты ДД.ММ.ГГГГ
		//					текЗначение = Дата(ДатаМассив[2], ДатаМассив[1], ДатаМассив[0]);
		//				КонецЕсли; 
		//			КонецЕсли;

		//		ИначеЕсли Строка(текКолонка.ТипЗначения) = "Булево" Тогда
		//			текЗначение = ?(текЗначение = "0", Ложь, Истина);
		//		КонецЕсли; 
		//		СтрокаПрайса[текКолонка.Имя] = текЗначение;

		//	КонецЕсли; 

		//КонецЦикла; 

	КонецЦикла;
	
	УдалитьФайлы(ВременныйФайл);

КонецПроцедуры
Процедура ЗагрузитьОтказ_ZipProtek(текФайл, Настройка, табЗагруженныйОтказ)

	ИмяКоротко = "";
	Если СтрДлина(текФайл.ИмяБезРасширения) <= 6 Тогда
		ИмяКоротко = "t_" + СокрЛП(текФайл.ИмяБезРасширения) + ".zip";
	Иначе
		ИмяКоротко = "t_" + Лев(СокрЛП(текФайл.ИмяБезРасширения), 6) + ".zip";
	КонецЕсли;

	стрДата = Формат(ТекущаяДата(), "ДЛФ=DT");
	ZipКаталог = КаталогВременныхФайлов() + "ZipProtek " + СтрЗаменить(стрДата, ":", ".");
	СоздатьКаталог(ZipКаталог);

	ВременныйФайл = ZipКаталог + "\" + ИмяКоротко;
	КопироватьФайл(текФайл.ПолноеИмя, ВременныйФайл);

	Архив = Новый ЧтениеZipФайла(ВременныйФайл);
	Для Каждого Элемент Из Архив.Элементы Цикл

		Если СтрНайти(Элемент.ИмяБезРасширения, "faulty") = 0 Тогда
			Продолжить;
		КонецЕсли;

	    Архив.Извлечь(
	        Элемент, // элемент для извлечения
	        ZipКаталог,
	        РежимВосстановленияПутейФайловZIP.Восстанавливать,
	        "" // пароль
	    );

		Прочитать_Отказ_XML_ZipProtek(ZipКаталог + "\" + Элемент.ПолноеИмя, Настройка, табЗагруженныйОтказ);

	КонецЦикла;

	УдалитьФайлы(ZipКаталог);

КонецПроцедуры
Процедура Прочитать_Отказ_XML_ZipProtek(ПутьКФайлу, Настройка, табЗагруженныйОтказ)

	Парсер = Новый ЧтениеXML;
    Парсер.ОткрытьФайл(ПутьКФайлу);
	НомерЗаказа = "";
	ДатаЗаказа = "";

	Пока Парсер.Прочитать() Цикл
		Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если СтрНайти("Ид, Дата, Товары", Парсер.Имя) = 0 Тогда
				Продолжить;
			КонецЕсли; 

			Если Парсер.Имя = "Ид" Тогда
				НомерЗаказа = ПолучитьЗначение_XML_Узла(Парсер);
				Продолжить;
			КонецЕсли;

			Если Парсер.Имя = "Дата" Тогда
				ДатаЗаказа = ПолучитьЗначение_XML_Узла(Парсер);
				ДатаМассив = РазложитьСтрокуВМассивПодстрок(ДатаЗаказа, "-");
				ДатаЗаказа = Дата(ДатаМассив[0], ДатаМассив[1], ДатаМассив[2]);
				Продолжить;
			КонецЕсли;

			Если Парсер.Имя <> "Товары" Тогда
				Продолжить;
			КонецЕсли;

			Пока Парсер.Прочитать() Цикл
				Если Парсер.Имя = "Товар" Тогда
					СтрокаПрайса = табЗагруженныйОтказ.Добавить();
					СтрокаПрайса.НомерЗаказа = НомерЗаказа;
					СтрокаПрайса.ДатаЗаказа = ДатаЗаказа;
					Прочитать_Отказ_XML_Узел(Парсер, Настройка, табЗагруженныйОтказ, СтрокаПрайса);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
    КонецЦикла;

    Парсер.Закрыть();

КонецПроцедуры
Процедура Прочитать_Отказ_XML_Узел(Парсер, Настройка, табЗагруженныйОтказ, СтрокаПрайса)

	Пока Парсер.Прочитать() Цикл

		Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда

			Если СтрНайти("Ид, Количество", Парсер.Имя) = 0 Тогда

				текИмя = Парсер.Имя;
				Пока Парсер.Прочитать() Цикл
					Если Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента И текИмя = Парсер.Имя Тогда
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
				Продолжить;
			КонецЕсли; 

			Если Парсер.Имя = "Ид" Тогда
				СтрокаПрайса.Код = ПолучитьЗначение_XML_Узла(Парсер);
				Продолжить;
			КонецЕсли;

			Если Парсер.Имя = "Количество" Тогда
				СтрокаПрайса.Отказ = Число(ПолучитьЗначение_XML_Узла(Парсер));
				Продолжить;
			КонецЕсли;

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента И Парсер.Имя = "Товар" Тогда
			Возврат;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры
Функция ПолучитьЗначение_XML_Узла(Парсер)

	стрЗначение = "";
	Пока Парсер.Прочитать() Цикл

		Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат стрЗначение;

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.Текст Тогда
			Если Парсер.ИмеетЗначение Тогда
				стрЗначение = Парсер.Значение;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;

КонецФункции



Функция ВыделитьИмяКолонки(НаименованиеКолонки)

	Если ПустаяСтрока(НаименованиеКолонки) Тогда
		Возврат "-";
	КонецЕсли;

	ДатаМассив = РазложитьСтрокуВМассивПодстрок(НаименованиеКолонки, ",");
	Возврат ДатаМассив[0];

КонецФункции
Функция НайтиЗаказПоставщика(слкПоставщик, НомерЗаказаПоставщика, ДатаПериода)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Дата >= &Дата
		|	И ЗаказПоставщику.Клиент = &Клиент
		|	И ЗаказПоставщику.НомерДокПоставщика = &НомерДокПоставщика";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ДатаПериода));
	Запрос.УстановитьПараметр("Клиент", слкПоставщик);
	Запрос.УстановитьПараметр("НомерДокПоставщика", НомерЗаказаПоставщика);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		Возврат РезультатЗапроса.Ссылка;
	КонецЦикла;

	Возврат Документы.ЗаказПоставщику.ПустаяСсылка();

КонецФункции
Процедура ОбработатьЗаказПоставщику(слкПоставщик, табЗагруженныйОтказ)

	Если табЗагруженныйОтказ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если табЗагруженныйОтказ.Итог("Отказ") = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ОтборНЗ = Новый Структура();
	Отбор = Новый Структура();
	
	табНомераЗаказов = табЗагруженныйОтказ.Скопировать();
	табНомераЗаказов.Свернуть("НомерЗаказа, ДатаЗаказа", );
	Для каждого текНомерЗаказа Из табНомераЗаказов Цикл

		НомерЗаказаПоставщика = текНомерЗаказа.НомерЗаказа;
		ДатаЗаказа = текНомерЗаказа.ДатаЗаказа;
		
		ОтборНЗ.Вставить("НомерЗаказа", НомерЗаказаПоставщика);
		СтрокиТЧ = табЗагруженныйОтказ.НайтиСтроки(ОтборНЗ);
		
		Если НЕ ПустаяСтрока(НомерЗаказаПоставщика) Тогда
			
			слкДокумент = НайтиЗаказПоставщика(слкПоставщик, НомерЗаказаПоставщика, ДатаЗаказа);
			Если слкДокумент.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			обДокумент = слкДокумент.ПолучитьОбъект();
			табТовары = обДокумент.Товары.Выгрузить();
			Для каждого СтрокаТЧ Из СтрокиТЧ Цикл
				
				Если СтрокаТЧ.Отказ = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Отбор.Вставить("КодТовараПоставщика", СтрокаТЧ.Код);
				Строки = табТовары.НайтиСтроки(Отбор);
				Для каждого СтрокаДок Из Строки Цикл
					СтрокаДок.КоличествоОтказ = Мин(СтрокаДок.Количество, (СтрокаДок.КоличествоОтказ + СтрокаТЧ.Отказ));
					СтрокаДок.Сумма = СтрокаДок.Цена * (СтрокаДок.Количество - СтрокаДок.КоличествоОтказ);
				КонецЦикла;
				Отбор.Очистить();
				
			КонецЦикла;

			обДокумент.Товары.Загрузить(табТовары);
			обДокумент.СуммаДокумента = обДокумент.Товары.Итог("Сумма");
			Отбор = "";
			слкДокумент = "";

			Попытка
				обДокумент.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				обДокумент = "";
				Продолжить;
			КонецПопытки;

			Попытка
				обДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			КонецПопытки;

			обДокумент = "";

		Иначе
			
			// Номера заказа нет (Катрен), ищем документы заказы поставщику с товаром, проставляем отказы
			ТабТоваров = Новый ТаблицаЗначений;
			ТабТоваров.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(50));
			ТабТоваров.Колонки.Добавить("Отказ", Новый ОписаниеТипов("Число"));
			Для каждого СтрокаТЧ Из СтрокиТЧ Цикл
				Если СтрокаТЧ.Отказ = 0 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТоваров = ТабТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТоваров, СтрокаТЧ);
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("КодыТоваров", ТабТоваров);
			Запрос.УстановитьПараметр("Поставщик", слкПоставщик);
			Запрос.УстановитьПараметр("НачДата", ДатаЗаказа);
			Запрос.УстановитьПараметр("КонДата", ТекущаяДата());

			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КодыТоваров.Код КАК КодТовараПоставщика,
			|	КодыТоваров.Отказ КАК Отказ
			|ПОМЕСТИТЬ ВТ_КодыТоваров
			|ИЗ
			|	&КодыТоваров КАК КодыТоваров
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_КодыТоваров.Отказ,
			|	Номенклатура.Ссылка КАК Товар
			|ПОМЕСТИТЬ ВТ_ОтказТовара
			|ИЗ
			|	ВТ_КодыТоваров КАК ВТ_КодыТоваров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыПоставщика КАК ТоварыПоставщика
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|			ПО ТоварыПоставщика.Товар = Номенклатура.Ссылка
			|		ПО (ВТ_КодыТоваров.КодТовараПоставщика ПОДОБНО ТоварыПоставщика.КодТовараПоставщика)
			|ГДЕ
			|	ТоварыПоставщика.Поставщик = &Поставщик
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Товар
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ОтказТовара.Товар КАК Товар,
			|	ВТ_ОтказТовара.Отказ КАК Отказ,
			|	ДефектураОбороты.Регистратор
			|ИЗ
			|	ВТ_ОтказТовара КАК ВТ_ОтказТовара
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Дефектура.Обороты(
			|				&НачДата,
			|				&КонДата,
			|				Регистратор,
			|				Товар В
			|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|							ВТ_ОтказТовара.Товар
			|						ИЗ
			|							ВТ_ОтказТовара КАК ВТ_ОтказТовара)
			|					И Поставщик = &Поставщик) КАК ДефектураОбороты
			|		ПО ВТ_ОтказТовара.Товар = ДефектураОбороты.Товар
			|ГДЕ
			|	ДефектураОбороты.Поставщик = &Поставщик
			|	И ТИПЗНАЧЕНИЯ(ДефектураОбороты.Регистратор) = ТИП(Документ.ЗаказПоставщику)
			|ИТОГИ
			|	СУММА(Отказ)
			|ПО
			|	Товар";

			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаТовар = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаТовар.Следующий() Цикл
				
				текТовар = ВыборкаТовар.Товар;
				КолОтказ = ВыборкаТовар.Отказ;

				ВыборкаДетальныеЗаписи = ВыборкаТовар.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					обДокумент = ВыборкаДетальныеЗаписи.Регистратор.ПолучитьОбъект();
					Для каждого СтрТовар Из обДокумент.Товары Цикл
						Если (СтрТовар.Товар = текТовар) И (СтрТовар.Количество > СтрТовар.КоличествоОтказ) Тогда

							Отказать = Мин((СтрТовар.Количество - СтрТовар.КоличествоОтказ), КолОтказ);
							СтрТовар.КоличествоОтказ = СтрТовар.КоличествоОтказ + Отказать;
							СтрТовар.Сумма = Макс(0, (СтрТовар.Количество - СтрТовар.КоличествоОтказ)) * СтрТовар.Цена;
							КолОтказ = КолОтказ - Отказать;
							
							Если КолОтказ = 0 Тогда
								// все распределили на документ
								Прервать;
							КонецЕсли;
						КонецЕсли; 
					КонецЦикла;
					
					обДокумент.СуммаДокумента = обДокумент.Товары.Итог("Сумма");
					Попытка
						обДокумент.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						обДокумент = "";
						Продолжить;
					КонецПопытки; 

					Попытка
						обДокумент.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
					КонецПопытки; 

					обДокумент = "";
					Если КолОтказ = 0 Тогда
						Прервать;
					КонецЕсли;

				КонецЦикла;
			КонецЦикла;

		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры


// *** *** ***  Расчет и установка даты ожидаемого поступления товара поставщиков *** *** ***
Функция ПолучитьВидДня(выбДата)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.ВидДня
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата = &Дата
		|	И ДанныеПроизводственногоКалендаря.Год = &Год";

	Запрос.УстановитьПараметр("Год", Год(выбДата));
	Запрос.УстановитьПараметр("Дата", выбДата);

	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.ВидДня;
	КонецЕсли; 

	Возврат Неопределено;

КонецФункции
Процедура УстановитьОжидаемуюДатыПоставки(стрПараметры) Экспорт

	ТекущаяДата = ТекущаяДата();
	ТекущийДеньНедели = Перечисления.ДниНедели[ДеньНедели(ТекущаяДата)-1];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДеньНедели", ТекущийДеньНедели);
	Запрос.УстановитьПараметр("Договор", стрПараметры.Договор);
	Запрос.УстановитьПараметр("Поставщик", стрПараметры.Поставщик);

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МестаХраненияПоДоговору.Фирма КАК Фирма,
		|	МестаХраненияПоДоговору.Поставщик КАК Поставщик,
		|	МестаХраненияПоДоговору.Договор КАК Договор,
		|	МестаХраненияПоДоговору.МестоХранения КАК МестоХранения,
		|	МестаХраненияПоДоговору.ТипПрайса КАК ТипПрайса,
		|	МестаХраненияПоДоговору.ТипПоставки КАК ТипПоставки,
		|	МестаХраненияПоДоговору.КлючСвязи КАК КлючСвязи,
		|	МестаХраненияПоДоговору.ДатаОжидаемойПоставки
		|ПОМЕСТИТЬ ВТ_МестаХранения
		|ИЗ
		|	РегистрСведений.МестаХраненияПоДоговору КАК МестаХраненияПоДоговору
		|ГДЕ
		|	МестаХраненияПоДоговору.Активный = ИСТИНА
		|	И МестаХраненияПоДоговору.Поставщик = &Поставщик
		|	И МестаХраненияПоДоговору.Договор = &Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_МестаХранения.Фирма КАК Фирма,
		|	ВТ_МестаХранения.Поставщик КАК Поставщик,
		|	ВТ_МестаХранения.Договор КАК Договор,
		|	ВТ_МестаХранения.МестоХранения КАК МестоХранения,
		|	ВТ_МестаХранения.ТипПрайса КАК ТипПрайса,
		|	УсловияПоставкиТовараПоставщиком.ДеньНедели КАК ДеньНедели,
		|	ВТ_МестаХранения.ТипПоставки КАК ТипПоставки,
		|	ВТ_МестаХранения.КлючСвязи КАК КлючСвязи,
		|	УсловияПоставкиТовараПоставщиком.ДнейНаПоставку КАК ДнейНаПоставку,
		|	УсловияПоставкиТовараПоставщиком.ТипДней КАК ТипДней,
		|	УсловияПоставкиТовараПоставщиком.ВремяОкончанияПринятияЗаказа КАК ВремяОкончанияПринятияЗаказа,
		|	ВЫБОР
		|		КОГДА УсловияПоставкиТовараПоставщиком.ДеньНедели = &ДеньНедели
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПолеГруппировки,
		|	ВТ_МестаХранения.ДатаОжидаемойПоставки
		|ПОМЕСТИТЬ ВТ_ВсеУсловияПоставки
		|ИЗ
		|	ВТ_МестаХранения КАК ВТ_МестаХранения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияПоставкиТовараПоставщиком КАК УсловияПоставкиТовараПоставщиком
		|		ПО ВТ_МестаХранения.КлючСвязи = УсловияПоставкиТовараПоставщиком.КлючСвязи
		|ГДЕ
		|	(УсловияПоставкиТовараПоставщиком.ДеньНедели = &ДеньНедели
		|			ИЛИ УсловияПоставкиТовараПоставщиком.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеУсловияПоставки.Фирма,
		|	ВТ_ВсеУсловияПоставки.Поставщик,
		|	ВТ_ВсеУсловияПоставки.Договор,
		|	ВТ_ВсеУсловияПоставки.МестоХранения,
		|	ВТ_ВсеУсловияПоставки.ТипПрайса,
		|	ВТ_ВсеУсловияПоставки.ДеньНедели,
		|	ВТ_ВсеУсловияПоставки.ТипПоставки,
		|	ВТ_ВсеУсловияПоставки.КлючСвязи,
		|	ВТ_ВсеУсловияПоставки.ДнейНаПоставку,
		|	ВТ_ВсеУсловияПоставки.ТипДней,
		|	ВТ_ВсеУсловияПоставки.ВремяОкончанияПринятияЗаказа,
		|	ВТ_ВсеУсловияПоставки.ДатаОжидаемойПоставки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_ВсеУсловияПоставки.КлючСвязи КАК КлючСвязи,
		|		МИНИМУМ(ВТ_ВсеУсловияПоставки.ПолеГруппировки) КАК ПолеГруппировки
		|	ИЗ
		|		ВТ_ВсеУсловияПоставки КАК ВТ_ВсеУсловияПоставки
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_ВсеУсловияПоставки.КлючСвязи) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВсеУсловияПоставки КАК ВТ_ВсеУсловияПоставки
		|		ПО ВложенныйЗапрос.КлючСвязи = ВТ_ВсеУсловияПоставки.КлючСвязи
		|			И ВложенныйЗапрос.ПолеГруппировки = ВТ_ВсеУсловияПоставки.ПолеГруппировки";

	ТекущееВремя = ТекущаяДата - НачалоДня(ТекущаяДата);
	ТекущаяДата = НачалоДня(ТекущаяДата);
	РезультатЗапроса_ТД = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЧ Из РезультатЗапроса_ТД Цикл

		ВремяОкончания = Час(СтрокаТЧ.ВремяОкончанияПринятияЗаказа)*3600 + Минута(СтрокаТЧ.ВремяОкончанияПринятияЗаказа)*60 + Секунда(СтрокаТЧ.ВремяОкончанияПринятияЗаказа);
		ДнейДельта = ?(ТекущееВремя < ВремяОкончания, 0, 1);

		ДнейНаПоставку = СтрокаТЧ.ДнейНаПоставку + ДнейДельта;
		Если ДнейНаПоставку = 0 Тогда
			СтрокаТЧ.ДатаОжидаемойПоставки = ТекущаяДата;
		Иначе

			Если СтрокаТЧ.ТипДней = Перечисления.ТипДня.Календарный Тогда
				СтрокаТЧ.ДатаОжидаемойПоставки = ТекущаяДата + ДнейНаПоставку * 86400;
			Иначе
				ТемпДата = КонецДня(ТекущаяДата) + 1;
				Пока Истина Цикл

					ВидДня = ПолучитьВидДня(ТемпДата);
					Если ВидДня = Неопределено Тогда
						// Не заполнен календарь, ставим прошедший день, 
						СтрокаТЧ.ДатаОжидаемойПоставки = ТекущаяДата - 1;
						Прервать;

					ИначеЕсли ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда

						СтрокаТЧ.ДатаОжидаемойПоставки = ТемпДата;
						ДнейНаПоставку = ДнейНаПоставку - 1;

					КонецЕсли;

					ТемпДата = КонецДня(ТемпДата) + 1;

					Если ДнейНаПоставку = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; 

	Запрос.УстановитьПараметр("УсловияПоставки", РезультатЗапроса_ТД);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УсловияПоставки.Фирма,
	|	УсловияПоставки.Поставщик,
	|	УсловияПоставки.Договор,
	|	УсловияПоставки.МестоХранения,
	|	УсловияПоставки.ТипПоставки,
	|	УсловияПоставки.ДатаОжидаемойПоставки
	|ПОМЕСТИТЬ ВТ_УсловияПоставки
	|ИЗ
	|	&УсловияПоставки КАК УсловияПоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_УсловияПоставки.Фирма,
	|	ВТ_УсловияПоставки.Поставщик,
	|	ВТ_УсловияПоставки.Договор,
	|	ВТ_УсловияПоставки.МестоХранения,
	|	ВТ_УсловияПоставки.ТипПоставки,
	|	ВложенныйЗапрос.ДатаОжидаемойПоставки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_УсловияПоставки.Фирма КАК Фирма,
	|		ВТ_УсловияПоставки.Поставщик КАК Поставщик,
	|		ВТ_УсловияПоставки.Договор КАК Договор,
	|		ВТ_УсловияПоставки.МестоХранения КАК МестоХранения,
	|		ВТ_УсловияПоставки.ТипПоставки КАК ТипПоставки,
	|		МИНИМУМ(ВТ_УсловияПоставки.ДатаОжидаемойПоставки) КАК ДатаОжидаемойПоставки
	|	ИЗ
	|		ВТ_УсловияПоставки КАК ВТ_УсловияПоставки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_УсловияПоставки.Фирма,
	|		ВТ_УсловияПоставки.Поставщик,
	|		ВТ_УсловияПоставки.Договор,
	|		ВТ_УсловияПоставки.МестоХранения,
	|		ВТ_УсловияПоставки.ТипПоставки) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УсловияПоставки КАК ВТ_УсловияПоставки
	|		ПО ВложенныйЗапрос.Поставщик = ВТ_УсловияПоставки.Поставщик
	|			И ВложенныйЗапрос.Фирма = ВТ_УсловияПоставки.Фирма
	|			И ВложенныйЗапрос.Договор = ВТ_УсловияПоставки.Договор
	|			И ВложенныйЗапрос.МестоХранения = ВТ_УсловияПоставки.МестоХранения
	|			И ВложенныйЗапрос.ТипПоставки = ВТ_УсловияПоставки.ТипПоставки";

	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл

		НаборЗаписей = РегистрыСведений.МестаХраненияПоДоговору.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Фирма.Установить(РезультатЗапроса.Фирма);
		НаборЗаписей.Отбор.Поставщик.Установить(РезультатЗапроса.Поставщик);
		НаборЗаписей.Отбор.Договор.Установить(РезультатЗапроса.Договор);
		НаборЗаписей.Отбор.МестоХранения.Установить(РезультатЗапроса.МестоХранения);
		НаборЗаписей.Отбор.ТипПоставки.Установить(РезультатЗапроса.ТипПоставки);

		НаборЗаписей.Прочитать();
		ВсегоЗаписей = НаборЗаписей.Количество();
		Если НаборЗаписей.Количество() > 0 Тогда
			Для i = 0 По ВсегоЗаписей - 1 Цикл
				НаборЗаписей[i].ДатаОжидаемойПоставки = РезультатЗапроса.ДатаОжидаемойПоставки;
			КонецЦикла; 
		КонецЕсли;
		НаборЗаписей.Записать();
		НаборЗаписей = "";

	КонецЦикла; 

КонецПроцедуры
Процедура РассчитатьДатыОжидаемогоПоступления() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Поставщики.Поставщик,
		|	Поставщики.Договор
		|ИЗ
		|	РегистрСведений.Поставщики КАК Поставщики
		|ГДЕ
		|	Поставщики.Активно = ИСТИНА";

	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		УстановитьОжидаемуюДатыПоставки(Новый Структура("Поставщик, Договор", РезультатЗапроса.Поставщик, РезультатЗапроса.Договор));
	КонецЦикла;

КонецПроцедуры


// *** *** *** Заполнение регистра ЕжедневныйТоварныйОстаток
Процедура ЗаполнитьТоварныйОстатокНаСервере(фПериод) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачПериод", фПериод.ДатаНачала);
	Запрос.УстановитьПараметр("КонПериод", КонецДня(фПериод.ДатаОкончания));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
		|ПОМЕСТИТЬ ВТ_Календарь
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачПериод И &КонПериод
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиТовараОстаткиИОбороты.Период КАК Дата,
		|	ОстаткиТовараОстаткиИОбороты.Отдел КАК Отдел,
		|	ОстаткиТовараОстаткиИОбороты.Товар КАК Товар,
		|	ОстаткиТовараОстаткиИОбороты.ОстатокКонечныйОстаток КАК Остаток
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	РегистрНакопления.ОстаткиТовара.ОстаткиИОбороты(&НачПериод, &КонПериод, День, ДвиженияИГраницыПериода, ) КАК ОстаткиТовараОстаткиИОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Дата,
		|	Отдел,
		|	Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Календарь.Дата,
		|	МАКСИМУМ(ВТ_Остатки.Дата) КАК МахДата,
		|	ВТ_Остатки.Отдел,
		|	ВТ_Остатки.Товар
		|ПОМЕСТИТЬ ВТ_ОстаткиВПериоде
		|ИЗ
		|	ВТ_Календарь КАК ВТ_Календарь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
		|		ПО ВТ_Календарь.Дата >= ВТ_Остатки.Дата
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Остатки.Отдел,
		|	ВТ_Остатки.Товар,
		|	ВТ_Календарь.Дата
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВТ_Остатки.Отдел,
		|	ВТ_Остатки.Товар,
		|	МахДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиВПериоде.Дата,
		|	ВТ_ОстаткиВПериоде.Отдел,
		|	ВТ_ОстаткиВПериоде.Товар,
		|	ВТ_Остатки.Остаток
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	ВТ_ОстаткиВПериоде КАК ВТ_ОстаткиВПериоде
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
		|		ПО (ВТ_Остатки.Отдел = ВТ_ОстаткиВПериоде.Отдел)
		|			И (ВТ_Остатки.Товар = ВТ_ОстаткиВПериоде.Товар)
		|			И (ВТ_Остатки.Дата = ВТ_ОстаткиВПериоде.МахДата)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Данные.Дата КАК Дата
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		

	ТаблицаДат = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЧ Из ТаблицаДат Цикл
	
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВТ_Данные.Дата,
		               |	ВТ_Данные.Отдел,
		               |	ВТ_Данные.Товар,
		               |	ВТ_Данные.Остаток
		               |ИЗ
		               |	ВТ_Данные КАК ВТ_Данные
		               |ГДЕ
		               |	ВТ_Данные.Дата = &Дата";
		Запрос.УстановитьПараметр("Дата", СтрокаТЧ.Дата);

		НаборЗаписей = РегистрыСведений.ЕжедневныйТоварныйОстаток.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дата.Установить(СтрокаТЧ.Дата);
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		НаборЗаписей.Записать();
		НаборЗаписей = "";

	КонецЦикла; 
	
КонецПроцедуры
Процедура РеглЗаполнитьТоварныйОстаток() Экспорт

	ДатаОкончания = НачалоДня(НачалоДня(ТекущаяДата())-1);
	ДатаНачала = ДатаОкончания - 5 * 60*60*24;
	
	фПериод = Новый Структура;
	фПериод.Вставить("ДатаОкончания", ДатаОкончания);
	фПериод.Вставить("ДатаНачала", ДатаНачала);

	ЗаполнитьТоварныйОстатокНаСервере(фПериод);
	
КонецПроцедуры

Процедура ЗаполнитьТоварыВТоварахПоставщика(слкПоставщик) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Поставщики.supplier_id
		|ИЗ
		|	РегистрСведений.Поставщики КАК Поставщики
		|ГДЕ
		|	Поставщики.Поставщик = &Поставщик";
	
	supplier_id = 0;
	Запрос.УстановитьПараметр("Поставщик", слкПоставщик);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		supplier_id = ВыборкаДетальныеЗаписи.supplier_id;
	КонецЦикла;

	Если supplier_id = 0 Тогда
		Возврат;
	КонецЕсли; 

	ТекстSQLЗапроса = "
	|SET NOCOUNT ON
	|select distinct
	|	code_post as КодТовараПоставщика,
	|	LTRIM(RTRIM(name)) as Наименование,
	|	cast(code_EA5 as CHAR(9)) as Код_1С,
	|	LTRIM(RTRIM(producer)) as Производитель
	|from ea5.dbo.supplier_code (nolock)
	|where supplier_id = " + Строка(supplier_id) + "
	|	and name != ''";
	
	Типизированная_Таблица = Новый ТаблицаЗначений;
	Типизированная_Таблица.Колонки.Добавить("КодТовараПоставщика", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	Типизированная_Таблица.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250, ДопустимаяДлина.Переменная)));
	Типизированная_Таблица.Колонки.Добавить("Код_1С", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(9, ДопустимаяДлина.Переменная)));
	Типизированная_Таблица.Колонки.Добавить("Производитель", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250, ДопустимаяДлина.Переменная)));
	ТабСинхронизации = РаботаСSQL.ВыполнитьЗапросSQL(ТекстSQLЗапроса, , Справочники.НастройкиПодключения.БазаCourierDS, Истина, , , , Типизированная_Таблица);
	Если ТабСинхронизации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 

	Запрос.УстановитьПараметр("ТабСинхронизации", ТабСинхронизации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабСинхронизации.КодТовараПоставщика КАК КодТовараПоставщика,
	|	ТабСинхронизации.Наименование КАК Наименование,
	|	ТабСинхронизации.Код_1С КАК Код_1С,
	|	ТабСинхронизации.Производитель КАК Производитель
	|ПОМЕСТИТЬ ВТ_ТабСинхронизации
	|ИЗ
	|	&ТабСинхронизации КАК ТабСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Поставщик КАК Поставщик,
	|	ВТ_ТабСинхронизации.КодТовараПоставщика,
	|	ВТ_ТабСинхронизации.Наименование,
	|	Номенклатура.Ссылка КАК Товар,
	|	ВТ_ТабСинхронизации.Производитель
	|ИЗ
	|	ВТ_ТабСинхронизации КАК ВТ_ТабСинхронизации
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ВТ_ТабСинхронизации.Код_1С = Номенклатура.Код";
	РезультатЗапроса = Запрос.Выполнить();

	НаборЗаписей = РегистрыСведений.ТоварыПоставщика.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Поставщик.Установить(слкПоставщик);
	НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
	НаборЗаписей.Записать();
	НаборЗаписей = "";

КонецПроцедуры
Процедура РеглЗаполнитьТоварыПоставщика() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Поставщики.Поставщик КАК Поставщик
		|ИЗ
		|	РегистрСведений.Поставщики КАК Поставщики
		|ГДЕ
		|	Поставщики.Активно = ИСТИНА";
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьТоварыВТоварахПоставщика(ВыборкаДетальныеЗаписи.Поставщик);
	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузкаМатрицыСкладов() Экспорт
	
	ТаблицаТипизированнаяБэкМаржа = Новый ТаблицаЗначений;
	ТаблицаТипизированнаяБэкМаржа.Колонки.Добавить("code",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(10)));
	ТаблицаТипизированнаяБэкМаржа.Колонки.Добавить("BM",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,2)));
	ТаблицаТипизированнаяБэкМаржа.Колонки.Добавить("dBegin",Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты));
	
	SQLЗапрос_bm = 
	"set nocount on
	|SELECT TOP 1000 [code]
	|      ,[bm]*100 AS BM
	|      ,[dBegin]
	|  FROM [ea5].[dbo].[bm]
	|WHERE GETDATE() BETWEEN [dBegin] AND [dEnd]";
	
	SQLЗапрос_t_rr = 
	"Set nocount on
	|SELECT [id]
	|      ,[id_rr]
	|      ,[name_rr]
	|      ,[active] as _active
	|      ,[sklad]
	|      ,[rr_code]
	|      ,[id_rr_main]
	|      ,[is_price]
	|FROM [CourierDS].[dbo].[t_rr]";
	
	SQLЗапрос_t_rr_sklad =
	"Set nocount on
	|SELECT [id_rr]
	|      ,[id_sklad]
	|      ,[is_own]
	|      ,[tc]
	|      ,[code_asna]
	|      ,[isSite]
	|      ,[isPharm]
	|      ,[isRobot]
	|      ,[phone]
	|      ,[isVPharm]
	|      ,[vtc]
	|      ,[isWork]
	|FROM [CourierDS].[dbo].[t_rr_sklad]";
	
	SQLЗапрос_t_tc =
	"Set nocount on  
	|SELECT [id]
	|      ,[id_tc]
	|      ,[name_tc]
	|      ,[id_sklad]
	|      ,[name_full]
	|      ,[default_phone]
	|      ,[sms_sender_name]
	|FROM [CourierDS].[dbo].[t_tc]";
	
	SQLЗапрос_t_ucs =
	"Set nocount on  
	|SELECT [kkm]
	|      ,[TCPIP]
	|      ,[TCPPort]
	|      ,[TerminalID]
	|      ,[TerminalDriverID]
	|FROM [CourierDS].[dbo].[t_ucs]";
	
	SQLЗапрос_astro_card_rules = 
	"Set nocount on  
	|SELECT [id]
	|      ,[from]   as _From
	|      ,[to]
	|      ,[rule_id]
	|      ,[description]
	|      ,[discount]
	|      ,[sku]
	|      ,[card_type]
	|      ,[territory]
	|      ,[version]
	|      ,[export_date]
	|      ,[project]
	|FROM [ea5].[dbo].[astro_card_rules]";
	
	SQLЗапрос_astro_card_types =
	"Set nocount on  
	|SELECT [id]
	|      ,[description]
	|      ,[from] as _From
	|      ,[to]
	|      ,[code]
	|      ,[territory]
	|      ,[version]
	|      ,[export_date]
	|      ,[project]
	|FROM [ea5].[dbo].[astro_card_types]";
	
	SQLЗапрос_astro_card_block =
	"Set nocount on 
	|SELECT [id]
	|      ,[card_number]
	|      ,[stop_date]
	|      ,[reactivation_date]
	|      ,[export_datetime]
	|      ,[project]
	|FROM [ea5].[dbo].[astro_card_block]";
	
	SQLЗапрос_v_gvls_rr = 
	"Set nocount on
	|SELECT [id]
	|      ,[id_rr]
	|      ,[min_price]
	|      ,[max_price]
	|      ,[perc]
	|      ,[perc_opt]
	|      ,[perc_obl]
	|      ,[perc_obl_opt]
	|      ,[max_k]
	|  FROM [CourierDS].[dbo].[v_gvls_rr]";
	
	
	SQLЗапрос_v_nac_def = 
	"Set nocount on
	|SELECT [id_tc]
	|      ,[price_min]
	|      ,[price_max]
	|      ,[nac]
	|      ,[id_reg]
	|  FROM [CourierDS].[dbo].[v_nac_def]";
	
	
	SQLЗапрос_t_defect_series = 
	"Set nocount on
	|SELECT CAST([code] as varchar(20)) as code 
	|      ,[name]
	|      ,[series]
	|	   ,CAST([code_egk] as varchar(20)) as code_egk 
	|	   ,CAST([id_defect] as varchar(20)) as id_defect
	|FROM [CourierDS].[dbo].[t_defect_series]
	|WHERE code <> ''
	|GROUP BY  
	|	CAST([code] as varchar(20))
	|   ,[name]
	|   ,[series]
	|	,CAST([code_egk] as varchar(20))
	|	,CAST([id_defect] as varchar(20))";
	
	SQLЗапрос_tmp_defect_e = 
	"Set nocount on
	|SELECT CAST([drug_id] as varchar(20)) as drug_id
	|      ,[drugtxt]
	|      ,[letterdate] as Период
	|      ,[letternr]
	|      ,[mnfnm]
	|      ,[specnm]
	|      ,[seriesnr]
	|      ,[countryr]
	|  FROM [ea5].[dbo].[tmp_defect_e]";
	
	
	Соединение = РаботаСSQL.ПодключениеКСерверуSQLПоНастройке(справочники.НастройкиПодключения.БазаCourierDS);
	
	Если Соединение = неопределено тогда
		Возврат;
	КонецЕсли;
	
	Таблица_t_rr = РаботаСSQL.ВыполнитьЗапросSQL(SQLЗапрос_t_rr,Соединение,,Истина);
	
	Таблица_t_rr_sklad = РаботаСSQL.ВыполнитьЗапросSQL(SQLЗапрос_t_rr_sklad,Соединение,,Истина);
	
	Таблица_t_tc = РаботаСSQL.ВыполнитьЗапросSQL(SQLЗапрос_t_tc,Соединение,,Истина);
	
	Таблица_t_ucs = РаботаСSQL.ВыполнитьЗапросSQL(SQLЗапрос_t_ucs,Соединение,,Истина);
	
	Таблица_astro_card_rules = РаботаСSQL.ВыполнитьЗапросSQL(SQLЗапрос_astro_card_rules,Соединение,,Истина);
	
	Таблица_astro_card_types = РаботаСSQL.ВыполнитьЗапросSQL(SQLЗапрос_astro_card_types,Соединение,,Истина);
	
	Таблица_astro_card_block = РаботаСSQL.ВыполнитьЗапросSQL(SQLЗапрос_astro_card_block,Соединение,,Истина);
	
	Таблица_v_gvls_rr = РаботаСSQL.ВыполнитьЗапросSQL(SQLЗапрос_v_gvls_rr,Соединение,,Истина);
	
	Таблица_v_nac_def = РаботаСSQL.ВыполнитьЗапросSQL(SQLЗапрос_v_nac_def,Соединение,,Истина);
	
	Таблица_t_defect_series = РаботаСSQL.ВыполнитьЗапросSQL(SQLЗапрос_t_defect_series,Соединение,,Истина);
	
	Таблица_tmp_defect_e = РаботаСSQL.ВыполнитьЗапросSQL(SQLЗапрос_tmp_defect_e,Соединение,,Истина);
	
	Таблица_bm = РаботаСSQL.ВыполнитьЗапросSQL(SQLЗапрос_bm,Соединение,,Истина,,,,ТаблицаТипизированнаяБэкМаржа);
	
	Соединение.Close();
	
	Если Таблица_t_rr <> неопределено  тогда
		НЗ = РегистрыСведений.t_rr.СоздатьНаборЗаписей();
		Для каждого строка из Таблица_t_rr цикл
			ЗаписьНЗ = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНЗ,Строка);
			ЗаписьНЗ.ДатаЗагрузки = ТекущаяДата();		
		КонецЦикла;
		Попытка НЗ.Записать(); исключение Сообщить(ОписаниеОшибки()); КонецПопытки;
	КонецЕсли;
	
	Если Таблица_t_rr_sklad <> неопределено  тогда
		НЗ = РегистрыСведений.t_rr_sklad.СоздатьНаборЗаписей();
		Для каждого строка из Таблица_t_rr_sklad цикл
			ЗаписьНЗ = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНЗ,Строка);
			ЗаписьНЗ.ДатаЗагрузки = ТекущаяДата();		
		КонецЦикла;
		Попытка НЗ.Записать(); исключение Сообщить(ОписаниеОшибки()); КонецПопытки;
	КонецЕсли;
	
	
	Если Таблица_t_tc <> неопределено  тогда
		НЗ = РегистрыСведений.t_tc.СоздатьНаборЗаписей();
		Для каждого строка из Таблица_t_tc цикл
			ЗаписьНЗ = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНЗ,Строка);
			ЗаписьНЗ.ДатаЗагрузки = ТекущаяДата();		
		КонецЦикла;
		Попытка НЗ.Записать(); исключение Сообщить(ОписаниеОшибки()); КонецПопытки;
	КонецЕсли;
	
	Если Таблица_t_ucs <> неопределено  тогда
		НЗ = РегистрыСведений.t_ucs.СоздатьНаборЗаписей();
		Для каждого строка из Таблица_t_ucs цикл
			ЗаписьНЗ = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНЗ,Строка);
			ЗаписьНЗ.ДатаЗагрузки = ТекущаяДата();		
		КонецЦикла;
		Попытка НЗ.Записать(); исключение Сообщить(ОписаниеОшибки()); КонецПопытки;
	КонецЕсли;   	
	
	Если Таблица_astro_card_rules <> неопределено  тогда
		НЗ = РегистрыСведений.astro_card_rules.СоздатьНаборЗаписей();
		Для каждого строка из Таблица_astro_card_rules цикл
			СкидочнаяПрограмма = справочники.СкидочныеПрограммыПоКарте.НайтиПоРеквизиту("Идентификатор_char50",строка.project);
			Если ЗначениеЗаполнено(СкидочнаяПрограмма) тогда
				ЗаписьНЗ = НЗ.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНЗ,Строка);
				ЗаписьНЗ.to = КонецДня(ЗаписьНЗ.to); 
				ЗаписьНЗ.sku = Формат(Строка.sku,"ЧГ=");
				ЗаписьНЗ.project = СкидочнаяПрограмма;
			КонецЕсли;
		КонецЦикла;
		Попытка НЗ.Записать(); исключение Сообщить(ОписаниеОшибки()); КонецПопытки;
	КонецЕсли;
	
	
	Если Таблица_astro_card_types <> неопределено  тогда
		НЗ = РегистрыСведений.astro_card_types.СоздатьНаборЗаписей();
		Для каждого строка из Таблица_astro_card_types цикл
			СкидочнаяПрограмма = справочники.СкидочныеПрограммыПоКарте.НайтиПоРеквизиту("Идентификатор_char50",строка.project);
			Если ЗначениеЗаполнено(СкидочнаяПрограмма) тогда
				ЗаписьНЗ = НЗ.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНЗ,Строка);
				ЗаписьНЗ.project = СкидочнаяПрограмма;
			КонецЕсли;
		КонецЦикла;
		Попытка НЗ.Записать(); исключение Сообщить(ОписаниеОшибки()); КонецПопытки;
	КонецЕсли;
	
	
	Если Таблица_astro_card_block <> неопределено  тогда
		НЗ = РегистрыСведений.astro_card_block.СоздатьНаборЗаписей();
		Для каждого строка из Таблица_astro_card_block цикл
			СкидочнаяПрограмма = справочники.СкидочныеПрограммыПоКарте.НайтиПоРеквизиту("Идентификатор_char50",строка.project);
			Если ЗначениеЗаполнено(СкидочнаяПрограмма) тогда
				ЗаписьНЗ = НЗ.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНЗ,Строка);
				ЗаписьНЗ.project = СкидочнаяПрограмма;				
			КонецЕсли;
		КонецЦикла;
		Попытка НЗ.Записать(); исключение Сообщить(ОписаниеОшибки()); КонецПопытки;
	КонецЕсли;
	
	Если Таблица_v_gvls_rr <> неопределено  тогда
		НЗ = РегистрыСведений.v_gvls_rr.СоздатьНаборЗаписей();
		Для каждого строка из Таблица_v_gvls_rr цикл
			ЗаписьНЗ = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНЗ,Строка);			
		КонецЦикла;
		Попытка НЗ.Записать(); исключение Сообщить(ОписаниеОшибки()); КонецПопытки;
	КонецЕсли;
	
	Если Таблица_v_nac_def <> неопределено  тогда
		НЗ = РегистрыСведений.v_nac_def.СоздатьНаборЗаписей();
		Для каждого строка из Таблица_v_nac_def цикл
			ЗаписьНЗ = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНЗ,Строка);
		КонецЦикла;
		Попытка НЗ.Записать(); исключение Сообщить(ОписаниеОшибки()); КонецПопытки;
	КонецЕсли;
	
	Если Таблица_t_defect_series <> неопределено  тогда
		НЗ = РегистрыСведений.t_defect_series.СоздатьНаборЗаписей();
		Для каждого строка из Таблица_t_defect_series цикл
			ЗаписьНЗ = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНЗ,Строка);
		КонецЦикла;
		Попытка НЗ.Записать(); исключение Сообщить(ОписаниеОшибки()); КонецПопытки;
	КонецЕсли;
	
	Если Таблица_tmp_defect_e <> неопределено  тогда
		массив_letternr = Новый Массив;
		массив_mnfnm = Новый Массив;
		массив_specnm = Новый Массив;
		массив_countryr = Новый Массив;
		Таблица_tmp_defect_e_ДляНЗ = Таблица_tmp_defect_e.Скопировать(,"Период,drug_id,seriesnr");
		Таблица_tmp_defect_e_ДляНЗ.Свернуть("Период,drug_id,seriesnr");
		НЗ = РегистрыСведений.tmp_defect_e.СоздатьНаборЗаписей();
		Для каждого строка из Таблица_tmp_defect_e_ДляНЗ цикл
			ЗаписьНЗ = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНЗ,Строка);
			СтрокиТаблицыДляОбъединения = Таблица_tmp_defect_e.НайтиСтроки(Новый Структура("Период,drug_id,seriesnr",строка.Период,строка.drug_id,строка.seriesnr));
			Для каждого СтрокаДляОбъединения из СтрокиТаблицыДляОбъединения цикл
				Если массив_countryr.Найти(СокрЛП(СтрокаДляОбъединения.countryr)) = Неопределено Тогда 
					массив_countryr.Добавить(СокрЛП(СтрокаДляОбъединения.countryr));
					ЗаписьНЗ.countryr = ЗаписьНЗ.countryr+";"+СокрЛП(СтрокаДляОбъединения.countryr);
				КонецЕсли;
				Если массив_specnm.Найти(СокрЛП(СтрокаДляОбъединения.specnm)) = Неопределено Тогда 
					массив_specnm.Добавить(СокрЛП(СтрокаДляОбъединения.specnm));
					ЗаписьНЗ.specnm = ЗаписьНЗ.specnm+";"+СокрЛП(СтрокаДляОбъединения.specnm);
				КонецЕсли;
				Если массив_mnfnm.Найти(СокрЛП(СтрокаДляОбъединения.mnfnm)) = Неопределено Тогда 
					массив_mnfnm.Добавить(СокрЛП(СтрокаДляОбъединения.mnfnm));
					ЗаписьНЗ.mnfnm = ЗаписьНЗ.mnfnm+";"+СокрЛП(СтрокаДляОбъединения.mnfnm);
				КонецЕсли;
				Если массив_letternr.Найти(СокрЛП(СтрокаДляОбъединения.letternr)) = Неопределено Тогда 
					массив_letternr.Добавить(СокрЛП(СтрокаДляОбъединения.letternr));
					ЗаписьНЗ.letternr = ЗаписьНЗ.letternr+";"+СокрЛП(СтрокаДляОбъединения.letternr);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Попытка НЗ.Записать(); исключение Сообщить(ОписаниеОшибки()); КонецПопытки;
	КонецЕсли;
	
	Если Таблица_bm <> Неопределено тогда
		Запрос = новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	tab.code,
		|	tab.bm,
		|	tab.dbegin КАК Период
		|ПОМЕСТИТЬ tab
		|ИЗ
		|	&tab КАК tab
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	tab.bm КАК Процент,
		|	tab.Период,
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	tab КАК tab
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО tab.code = Номенклатура.Код";
		Запрос.УстановитьПараметр("tab",Таблица_bm);
		Выборка = Запрос.Выполнить().Выбрать();
		НЗ = РегистрыСведений.БэкМаржа.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() цикл
			ЗаписьНЗ = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНЗ,Выборка);
		КонецЦикла;
		Попытка НЗ.Записать(); исключение Сообщить(ОписаниеОшибки()); КонецПопытки;		
	КонецЕсли;	
	
	ТипЦены = ОбменАлгоритмы77.ПолучитьОписаниеТаблицыВБазе77("Перечисление","ТипЦены");
	Если ЗначениеЗаполнено(ТипЦены) тогда
		Для каждого строка из ТипЦены.Реквизиты цикл
			Попытка
				Об = Справочники.ТипЦены[Строка.ИмяРеквизита].ПолучитьОбъект();
				Об.ID_77 = Строка.ЗначениеПеречисленияSQL;
				Об.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	РегионРаботы = ОбменАлгоритмы77.ПолучитьОписаниеТаблицыВБазе77("Перечисление","РегионРаботы");
	Если ЗначениеЗаполнено(РегионРаботы) тогда
		Для каждого строка из РегионРаботы.Реквизиты цикл
			Попытка
				Об = Справочники.РегионРаботы[Строка.ИмяРеквизита].ПолучитьОбъект();
				Об.ID_77 = Строка.ЗначениеПеречисленияSQL;
				Об.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузкаСправочников() Экспорт
	
	Лог = Справочники.Логи.СоздатьЛог(Перечисления.ВидыЛогов.РегламентноеЗадание,ТекущаяДата(),"Загрузка справочников");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СинхронизируемыеСправочники.Объект
	|ИЗ
	|	РегистрСведений.СинхронизируемыеСправочники КАК СинхронизируемыеСправочники
	|ГДЕ
	|	СинхронизируемыеСправочники.Включить";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		Попытка
			Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Начало загрузки " + Выборка.Объект.Наименование);
			Результат = ОбменАлгоритмы77.ВыполнитьСверкуПоМетаданному(Выборка.Объект,,,Ложь,,Истина);
			Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Завершение загрузки " + Выборка.Объект.Наименование+Символы.ПС+"Загруженно "+ Результат.Количество());
		Исключение
			Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Ошибка загрузки " + Выборка.Объект.Наименование + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	БылиОшибки = Ложь;
	Попытка
		Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Начало загрузки НДС");
		ЗагрузитьНДС();
	Исключение
		БылиОшибки = Истина;
		Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Ошибка загрузки НДС" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"",не БылиОшибки);
	
	
КОнецПроцедуры

Процедура ЗагрузкаСправочниковЧасто() Экспорт
	
	Лог = Справочники.Логи.СоздатьЛог(Перечисления.ВидыЛогов.РегламентноеЗадание,ТекущаяДата(),"Загрузка справочников часто");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СинхронизируемыеСправочники.Объект
	|ИЗ
	|	РегистрСведений.СинхронизируемыеСправочники КАК СинхронизируемыеСправочники
	|ГДЕ
	|	СинхронизируемыеСправочники.ВключитьЧасто";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		Попытка
			Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Начало загрузки " + Выборка.Объект.Наименование);
			Результат = ОбменАлгоритмы77.ВыполнитьСверкуПоМетаданному(Выборка.Объект,,,Ложь,,Истина);
			Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Завершение загрузки " + Выборка.Объект.Наименование+Символы.ПС+"Загруженно "+ Результат.Количество());
		Исключение
			Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Ошибка загрузки " + Выборка.Объект.Наименование + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	БылиОшибки = Ложь;
	Попытка
		Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Начало загрузки НДС");
		ЗагрузитьНДС();
	Исключение
		БылиОшибки = Истина;
		Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Ошибка загрузки НДС" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"",не БылиОшибки);
	
	
КОнецПроцедуры

Процедура ЗагрузкаЦенПрайсЛиста() Экспорт
	
	Лог = Справочники.Логи.СоздатьЛог(Перечисления.ВидыЛогов.РегламентноеЗадание,ТекущаяДата(),"Загрузка прайс листа");
	БылиОшибки = Ложь;
	Попытка
		Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Начало загрузки прайс листа");
		ОбменАлгоритмы77.ЗагрузитьЦеныПрайсЛиста();
		Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Завершение загрузки прайс листа");
	Исключение
		БылиОшибки = Истина;
		Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Ошибка загрузки прайс листа" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Начало переоценки цен партии");
		ПереоценкаСроковогоТовара();
		Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Завершение переоценки цен партии");
	Исключение
		БылиОшибки = Истина;
		Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Ошибка переоценки цен партии" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"",не БылиОшибки);
	
КонецПроцедуры

Процедура ЗагрузкаМаршрутовИЗаказов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АдресХранения.ID_77 КАК ID_77
	|ИЗ
	|	Справочник.АдресХранения КАК АдресХранения
	|ГДЕ
	|	АдресХранения.ЗагружатьСамовывозы
	|
	|СГРУППИРОВАТЬ ПО
	|	АдресХранения.ID_77";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Условие = "";
	Пока Выборка.Следующий() цикл
		Условие = Условие + "'" + Выборка.ID_77+"',";
	КонецЦикла;
	Условие = Лев(Условие,СтрДлина(Условие) - 1);
	
	ТекстЗапроса = 
	"Set nocount on
	|SELECT 
	|      skl.SP4141 AS AH_id, ah.descr, ts.id tochsam
	|INTO #Apteki
	|FROM [CourierDS].[dbo].[t_rr_sklad] rr (nolock)
	|INNER JOIN nagat..sc69 skl (nolock) ON rr.[id_sklad] = skl.id
	|INNER JOIN nagat..SC4123 ah (NOLOCK) ON ah.id = skl.SP4141 
	|INNER JOIN nagat..SC3908 ts (NOLOCK) ON ts.SP4145 = ah.id
	|WHERE rr.is_own = 1 AND rr.isPharm = 1
	|AND skl.SP4141 IN ("+Условие+") 
	|
	|SELECT 
	|marTch.iddoc Marshrut, zak.iddoc Zakaz
	|FROM nagat..DH926 mar (nolock) 
	|INNER JOIN nagat..DT926 marTch (NOLOCK) ON marTch.iddoc = mar.iddoc and mar.SP929 = '   2KA   ' 
	|INNER JOIN nagat.._1SJOURN j (NOLOCK) ON RIGHT(marTch.SP2231,9) = j.iddoc and j.IDDOCDEF = 888 
	|INNER JOIN nagat..DH888 zak (nolock) ON RIGHT(marTch.SP2231,9) = zak.iddoc
	|inner join #Apteki apt ON zak.SP3929 = apt.tochsam 
	|
	|DROP TABLE #Apteki";
	ТаблицаЗаказов = РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапроса,,Справочники.НастройкиПодключения.БазаCourierDS,Истина);
	
	ТаблицаМаршрутов = ТаблицаЗаказов.Скопировать(,"Marshrut");
	ТаблицаМаршрутов.Свернуть("Marshrut");
	МассивМаршрутов = ТаблицаМаршрутов.ВыгрузитьКолонку("Marshrut");
	МассивЗаказов = ТаблицаЗаказов.ВыгрузитьКолонку("Zakaz");
	
	ОписаниеОбъекта77 = ОбменАлгоритмы77.ПолучитьОписаниеТаблицыВБазе77("Документ","Заказ");
	ТаблицаЗаказов = ОбменАлгоритмы77.ВыполнитьСверкуПоМетаданному(ОписаниеОбъекта77,1000,,,МассивЗаказов,Истина);
	
	МассивIDПартий = Новый Массив;
	Для каждого строка из ТаблицаЗаказов цикл
		СтатусыДокументов.УстановитьСтатусСборкиЗаказа(строка.Ссылка,Перечисления.ОснованияУстановкиСтатусаДокумента.ЗагрузкаДанныхИз77,Справочники.СтатусыОбработкиЗаказа.Доставляется);
		СтатусыДокументов.УстановитьСтатусАктуальностиЗаказа(строка.Ссылка,Перечисления.ОснованияУстановкиСтатусаДокумента.ЗагрузкаДанныхИз77,Справочники.СтатусыАктуальностиЗаказов.Актуален);
		Если не ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Ссылка,"ТипКомплектацииЗаказа")) тогда
			ОбъектЗаказ = строка.Ссылка.ПолучитьОбъект();
			ОбъектЗаказ.ТипКомплектацииЗаказа = Перечисления.ТипКомплектацииЗаказа.СборкаНаСкладеВПакеты_РаскладкаПакетовВАптеке;
			ОбъектЗаказ.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Для каждого строкаЗаказа из Строка.Ссылка.Товар цикл
			МассивIDПартий.Добавить(строкаЗаказа.Партия.ID_77);	
		КонецЦикла;
	КонецЦикла;	
	
	МассивСвязанныхОбъектовЦП = Новый Массив;
	МассивСвязанныхОбъектовЦП.Добавить(ОбменАлгоритмы77.ПолучитьОписаниеТаблицыВБазе77("Справочник","ЦеныПартии"));
	
	ОписаниеОбъекта77Партия = ОбменАлгоритмы77.ПолучитьОписаниеТаблицыВБазе77("Справочник","Партии");
	
	ТаблицаПартий = ОбменАлгоритмы77.ВыполнитьСверкуПоМетаданному(ОписаниеОбъекта77Партия,1000,МассивСвязанныхОбъектовЦП,,МассивIDПартий,Истина);
	МассивПартий = ТаблицаПартий.ВыгрузитьКолонку("Ссылка");
	МассивСсылокЗаказов = ТаблицаЗаказов.Скопировать(Новый структура("Загружать",Истина)).ВыгрузитьКолонку("Ссылка");
	
	НастройкаПодключения = справочники.НастройкиПодключенийКВебСервисам.Склад;
	Прокси = ОбщийМодульВебСервисы.ПодключитьсяКВебСервису(НастройкаПодключения);
	ТаблицаМестЗаказов = Прокси.GetOrderPlaces(ЗначениеВСтрокуВнутр(ТаблицаЗаказов.ВыгрузитьКолонку("ID_77")));
	
	ТаблицаМестЗаказов = ЗначениеИзСтрокиВнутр(ТаблицаМестЗаказов);
	
	МассивУИДНаклеек = ТаблицаМестЗаказов.ВыгрузитьКолонку("УИД");
	МассивШКНаклеек = ТаблицаМестЗаказов.ВыгрузитьКолонку("Наименование");
	МассивСкладов = ТаблицаМестЗаказов.ВыгрузитьКолонку("СкладID_77");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаклейкиМестЗаказа.Ссылка,
	|	НаклейкиМестЗаказа.УИД,
	|	НаклейкиМестЗаказа.Наименование
	|ИЗ
	|	Справочник.НаклейкиМестЗаказа КАК НаклейкиМестЗаказа
	|ГДЕ
	|	(НаклейкиМестЗаказа.УИД В (&МассивУИД)
	|				И НаклейкиМестЗаказа.УИД <> """"
	|			ИЛИ НаклейкиМестЗаказа.Наименование В (&МассивШК)
	|				И НаклейкиМестЗаказа.УИД = """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестаХранения.Ссылка,
	|	МестаХранения.ID_77
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|ГДЕ
	|	МестаХранения.ID_77 В(&ID_77)";
	Запрос.УстановитьПараметр("МассивУИД",МассивУИДНаклеек);
	Запрос.УстановитьПараметр("МассивШК",МассивШКНаклеек);
	Запрос.УстановитьПараметр("ID_77",МассивСкладов);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаМестЗаказовЗагр = МассивРезультатов[0].Выгрузить();
	ТаблицаСкладов = МассивРезультатов[1].Выгрузить();
	
	Для каждого строка из ТаблицаМестЗаказов цикл
		СтрокаЗаказа = ТаблицаЗаказов.Найти(Строка.ЗаказID_77,"ID_77");
		Если СтрокаЗаказа = Неопределено тогда
			Продолжить;
		КонецЕсли;
		СтрокаСклада = ТаблицаСкладов.Найти(Строка.СкладID_77,"ID_77");
		Если СтрокаСклада = Неопределено тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.УИД) тогда
			СтрокаМестаЗаказа = ТаблицаМестЗаказовЗагр.Найти(Строка.УИД,"УИД");
		Иначе
			СтрокаМестаЗаказа = ТаблицаМестЗаказовЗагр.Найти(Строка.Наименование,"Наименование");
		КонецЕсли;
		Если СтрокаМестаЗаказа <> Неопределено тогда
			МестоЗаказа = СтрокаМестаЗаказа.Ссылка.ПолучитьОбъект();
		Иначе
			МестоЗаказа = Справочники.НаклейкиМестЗаказа.СоздатьЭлемент();
		КонецЕсли;
		МестоЗаказа.Код = Формат(Строка.Код,"ЧГ=");
		МестоЗаказа.Наименование = Строка.Наименование;
		МестоЗаказа.Холод = Строка.Холод;
		МестоЗаказа.Документ = СтрокаЗаказа.Ссылка;
		МестоЗаказа.НомерМеста = Строка.НомерМеста;
		МестоЗаказа.Склад = СтрокаСклада.Ссылка;
		МестоЗаказа.УИД = Строка.УИД;
		МестоЗаказа.Записать();		
	КонецЦикла;   
	
	ОписаниеОбъекта77 = ОбменАлгоритмы77.ПолучитьОписаниеТаблицыВБазе77("Документ","Маршрут");	
	МаршрутТаблица = ОбменАлгоритмы77.ВыполнитьСверкуПоМетаданному(ОписаниеОбъекта77,10,,,МассивМаршрутов,Истина,Истина);
	Для каждого строка из МаршрутТаблица цикл
		Маршрут = Строка.Ссылка.ПолучитьОбъект();
		Маршрут.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьНДС() Экспорт
	
	ЗапросНДСТекст = 
	"set nocount on
	|SELECT OBJID nom, MAX(DATE) MaxPeriod
	|INTO #MaxPeriod
	|FROM [Nagat].[dbo].[_1SCONST]  (nolock)
	|WHERE DATE < GETDATE() AND ID = 331
	|GROUP BY 
	|OBJID
	|  
	|SELECT con.OBJID nomID, NDS.SP85 stavka
	|FROM Nagat.._1SCONST con (nolock)  
	|INNER JOIN #MaxPeriod MP ON MP.nom = con.OBJID and mp.MaxPeriod = con.Date AND con.ID = 331
	|inner JOIN Nagat..SC87 NDS (nolock) ON NDS.ID = con.Value
	|
	|Drop Table #MaxPeriod";
	
	ТаблицаНДСSQL = Новый ТаблицаЗначений;
	ТаблицаНДСSQL.Колонки.Добавить("nomID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9,ДопустимаяДлина.Фиксированная)));
	ТаблицаНДСSQL.Колонки.Добавить("stavka",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2)));
	ВыборкаНДСSQL = РаботаСSQL.ВыполнитьЗапросSQL(ЗапросНДСТекст,,Справочники.НастройкиПодключения.БазаCourierDS,Ложь);
	Пока НЕ ВыборкаНДСSQL.EOF() цикл
		СтрокаНДС = ТаблицаНДСSQL.Добавить();
		СтрокаНДС.nomID = ВыборкаНДСSQL.Fields("nomID").Value;
		СтрокаНДС.stavka = ВыборкаНДСSQL.Fields("stavka").Value;	
		ВыборкаНДСSQL.MoveNext();	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСSQL.nomID КАК Номенклатура_ID77,
	|	НДСSQL.stavka КАК СтавкаНДС
	|ПОМЕСТИТЬ СтавкиНДСИЗSQL
	|ИЗ
	|	&НДСSQL КАК НДСSQL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.ID_77,
	|	ЕСТЬNULL(СтавкиНДСПоНоменклатуреСрезПоследних.СтавкаНДС.Ставка, -1) КАК НДСТекущий
	|ПОМЕСТИТЬ НДСАптека
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСПоНоменклатуре.СрезПоследних(&ТекущаяДата, ) КАК СтавкиНДСПоНоменклатуреСрезПоследних
	|		ПО (СтавкиНДСПоНоменклатуреСрезПоследних.Товар = Номенклатура.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСАптека.Ссылка КАК Номенклатура,
	|	СтавкиНДСИЗSQL.СтавкаНДС,
	|	СтавкиНДС.Ссылка КАК СтавкаНДССсылка
	|ИЗ
	|	НДСАптека КАК НДСАптека
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтавкиНДСИЗSQL КАК СтавкиНДСИЗSQL
	|		ПО НДСАптека.ID_77 = СтавкиНДСИЗSQL.Номенклатура_ID77
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
	|		ПО (СтавкиНДС.Ставка = СтавкиНДСИЗSQL.СтавкаНДС)
	|ГДЕ
	|	НДСАптека.НДСТекущий <> СтавкиНДСИЗSQL.СтавкаНДС";
	Запрос.УстановитьПараметр("НДСSQL",ТаблицаНДСSQL);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		МенеджерЗаписиНДС = РегистрыСведений.СтавкиНДСПоНоменклатуре.СоздатьМенеджерЗаписи();
		МенеджерЗаписиНДС.Период = НачалоДня(ТекущаяДата());
		МенеджерЗаписиНДС.Товар = Выборка.Номенклатура; 
		МенеджерЗаписиНДС.СтавкаНДС = Выборка.СтавкаНДССсылка;
		МенеджерЗаписиНДС.Записать();
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ЗагрузкаМаршрутовИЗаказовРегламентное() Экспорт
	Если ПланыОбмена.ГлавныйУзел() = Неопределено тогда
		ЗагрузкаМаршрутовИЗаказов();
	КонецЕсли;
КонецПроцедуры

Процедура ОтложеннаяОтправкаСМС() Экспорт
	Соединение = РаботаСSQL.ПодключениеКСерверуSQLПоНастройке(Справочники.НастройкиПодключения.БазаCourierDS);
	Если Соединение = неопределено тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтправкаСМС.Регистратор
	|ИЗ
	|	РегистрСведений.ОтправкаСМС КАК ОтправкаСМС
	|ГДЕ
	|	НЕ ОтправкаСМС.Выгружен";
	Выборка = Запрос.Выполнить().Выбрать();
	НаборЗаписей = РегистрыСведений.ОтправкаСМС.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
		НаборЗаписей.Отбор.Регистратор.Использование = Истина;
		НаборЗаписей.Прочитать();
		Для каждого строка из НаборЗаписей цикл
			Если не Строка.Выгружен тогда
				ТекстЗапросаSQL = 
				"declare @d datetime, @cnt int 
				|select @d=getdate()          
				|	insert t_sms(created, phone, sms, dt_approved, approved, id_t_tc, iddoc, type) 
				|	values ('"+Строка.created+"','"+Строка.phone+"','"+Строка.sms+"',@d,'auto',"+строка.id_t_tc+",'"+строка.iddoc+"',"+строка.type+")
				|";
				Результат = РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапросаSQL,Соединение,справочники.НастройкиПодключения.БазаCourierDS);
				Если Результат <> неопределено тогда
					Строка.Выгружен = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузкаПриходныхНакладных() Экспорт
	
	Лог = Справочники.Логи.СоздатьЛог(Перечисления.ВидыЛогов.РегламентноеЗадание,ТекущаяДата(),"Загрузка приходных накладных");
	БылиОшибки = Ложь;
	ОбработкаПоЗагрузке = Обработки.ЗагрузкаПриходов.Создать();
	ОбработкаПоЗагрузке.ДатаОкончания = КонецДня(ТекущаяДата());
	ОбработкаПоЗагрузке.ДатаНачала = ОбработкаПоЗагрузке.ДатаОкончания - 5*24*3600;	
	Попытка
		Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Начало заполнения списка приходных накладных");
		ОбработкаПоЗагрузке.ЗаполнитьТаблицуНакладные();
		Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Завершение заполнения списка приходных накладных");
		
		Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Начало загрузки приходных накладных");
		ОбработкаПоЗагрузке.ЗагрузитьДокументы();
		Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Завершение загрузки приходных накладных");		
	Исключение
		БылиОшибки = Истина;
		Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"Ошибка загрузки приходных накладных" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,"",не БылиОшибки);
	
КонецПроцедуры

Процедура ЗагрузитьПриходыИз77() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХранения.ID_77
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|ГДЕ
	|	МестаХранения.Владелец.ЗагружатьПриходыПоСкладуИз77";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаМестХранения = Результат.Выгрузить();
	
	Условие = РаботаСSQL.СформироватьУсловияДляIN(ТаблицаМестХранения.ВыгрузитьКолонку("ID_77"));
	
	Соединение = РаботаСSQL.ПодключениеКСерверуSQLПоНастройке(Справочники.НастройкиПодключения.БазаCourierDS);
	Если Соединение = Неопределено тогда
		возврат;
	КонецЕсли;
	
	ТекстSQL = 
	"SELECT [prih].[IDDOC]     
	|FROM [Nagat].[dbo].[DH386] prih
	|INNER JOIN [Nagat].[dbo]._1SJOURN j ON prih.IDDOC = j.IDDOC AND j.ISMARK = 0
	|WHERE SP387 IN "+Условие+"";
	
	ТаблицаИД = РаботаСSQL.ВыполнитьЗапросSQL(ТекстSQL,Соединение,,Истина);
	
	Если ТаблицаИД = Неопределено или ТаблицаИД.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	МассивИД = ТаблицаИД.ВыгрузитьКолонку("IDDOC");
	
	Объект77 = ОбменАлгоритмы77.ПолучитьОписаниеТаблицыВБазе77("Документ","Приходная");
	
	ТаблицаИД = ОбменАлгоритмы77.ВыполнитьСверкуПоМетаданному(Объект77,,,,МассивИД,Истина);
	
	Если ТаблицаИД.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	МассивИД = ТаблицаИД.ВыгрузитьКолонку("ID_77");
	
	Условие = РаботаСSQL.СформироватьУсловияДляIN(МассивИД);
	
	
	ТекстSQL = 
	"UPDATE [Nagat].[dbo].[_1SJOURN]
	| SET [ISMARK] = 1
	|WHERE IDDOC IN "+Условие+" AND [IDDOCDEF] = 386";
	
	РаботаСSQL.ВыполнитьЗапросSQL(ТекстSQL,Соединение,,Ложь);
	
КонецПроцедуры

Процедура ВыгрузкаИЗагрузкаСтатусовЗаказов() Экспорт
	
	Лог = Справочники.Логи.СоздатьЛог(Перечисления.ВидыЛогов.РегламентноеЗадание,ТекущаяДата(),"Выгрузка и загрузка статусов заказов");
	
	Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,Формат(ТекущаяДата(),"")+символы.ПС+"Начало обработки заказов по которым не хватило",Ложь);
	
	ОбновитьСтатусыЗаказовНеХватило();
	
	Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,Формат(ТекущаяДата(),"")+символы.ПС+"Завершение обработки заказов по которым не хватило",Ложь);
	
	Соединение = РаботаСSQL.ПодключениеКСерверуSQLПоНастройке(справочники.НастройкиПодключения.БазаCourierDS);
	
	Запрос = новый запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыСИзменившемсяСатусом.Заказ,
	|	ЗаказыСИзменившемсяСатусом.Заказ.ID_77 КАК ID_77,
	|	ЗаказыСИзменившемсяСатусом.Заказ.СтатусыОбработкиЗаказа КАК СтатусыОбработкиЗаказа,
	|	ЗаказыСИзменившемсяСатусом.Заказ.СтатусыОбработкиЗаказа.ID_77 КАК СтатусыОбработкиЗаказаID_77,
	|	ЗаказыСИзменившемсяСатусом.Заказ.СтатусыОбработкиЗаказа.Код КАК СтатусыОбработкиЗаказаКод,
	|	ЗаказыСИзменившемсяСатусом.Заказ.ККМ КАК ККМ,
	|	ЗаказыСИзменившемсяСатусом.Заказ.ККМ.ID_77 КАК ККМID_77,
	|	ЗаказыСИзменившемсяСатусом.Заказ.Пробит КАК Пробит,
	|	ЗаказыСИзменившемсяСатусом.Заказ.Номер КАК Номер,
	|	НАЧАЛОПЕРИОДА(ЗаказыСИзменившемсяСатусом.Заказ.Дата, ДЕНЬ) КАК Дата,
	|	ЕСТЬNULL(Чеки.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОплаты,
	|	ЕСТЬNULL(Чеки.Кассир.Наименование, ""Администратор"") КАК Автор,
	|	ЗаказыСИзменившемсяСатусом.Заказ.ТочкаСамовывоза.АдресХранения.ОсновнойСклад.Код КАК КодСклада
	|ИЗ
	|	РегистрСведений.ЗаказыСИзменившемсяСатусом КАК ЗаказыСИзменившемсяСатусом
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Чеки КАК Чеки
	|		ПО ЗаказыСИзменившемсяСатусом.Заказ = Чеки.ДокументОснование
	|			И (Чеки.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыСИзменившемсяСатусом.Заказ,
	|	ЗаказыСИзменившемсяСатусом.Заказ.ID_77,
	|	ЗаказыСИзменившемсяСатусом.Заказ.СтатусыОбработкиЗаказа,
	|	ЗаказыСИзменившемсяСатусом.Заказ.СтатусыОбработкиЗаказа.ID_77,
	|	ЗаказыСИзменившемсяСатусом.Заказ.СтатусыОбработкиЗаказа.Код,
	|	ЗаказыСИзменившемсяСатусом.Заказ.ККМ,
	|	ЗаказыСИзменившемсяСатусом.Заказ.ККМ.ID_77,
	|	ЗаказыСИзменившемсяСатусом.Заказ.Пробит,
	|	ЗаказыСИзменившемсяСатусом.Заказ.Номер,
	|	ЕСТЬNULL(Чеки.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(Чеки.Кассир.Наименование, ""Администратор""),
	|	ЗаказыСИзменившемсяСатусом.Заказ.ТочкаСамовывоза.АдресХранения.ОсновнойСклад.Код,
	|	НАЧАЛОПЕРИОДА(ЗаказыСИзменившемсяСатусом.Заказ.Дата, ДЕНЬ)";
	Результат = Запрос.Выполнить();
	ЕстьОшибки = Ложь;
	Если не Результат.Пустой() тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() цикл
			СтатусЗаказаОбновленУспешно = Истина;
			НомерЗаказаДляЗапроса = сокрЛП(Выборка.Номер);
			Если 8-СтрДлина(НомерЗаказаДляЗапроса) Тогда 
				Для ит = 1 по 8 -СтрДлина(НомерЗаказаДляЗапроса) цикл
					НомерЗаказаДляЗапроса = " " + НомерЗаказаДляЗапроса;
				КонецЦикла;				
			КонецЕсли;
			
			ТекстЗапроса1 = 
			"IF not EXISTS(SELECT * From [CourierDS].[dbo].[t_status_zak_log] Where [docno] = '"+НомерЗаказаДляЗапроса+"' AND ([status] = ' 16' OR [status] ='"+?(СтрДлина(Выборка.СтатусыОбработкиЗаказаКод)= 1,"  "," ")+Выборка.СтатусыОбработкиЗаказаКод+"') and [d_doc] = '"+Формат(Выборка.Дата,"ДФ='ггггММдд'")+"')
			|	INSERT INTO [CourierDS].[dbo].[t_status_zak_log]
			|			   ([docno]
			|			   ,[d_doc]
			|			   ,[status]
			|			   ,[user_code]
			|			   ,[curr_time]
			|			   ,[code_sklad])
			|		 VALUES
			|			   ('"+НомерЗаказаДляЗапроса+"'
			|			   ,'"+Формат(Выборка.Дата,"ДФ='ггггММдд'")+"'
			|			   ,'"+?(СтрДлина(выборка.СтатусыОбработкиЗаказаКод) = 1,"  "+выборка.СтатусыОбработкиЗаказаКод," "+выборка.СтатусыОбработкиЗаказаКод)+"'
			|			   ,'"+Выборка.Автор+"'
			|			   ,getdate()
			|			   ,"+Выборка.КодСклада+")";
			Если Выборка.СтатусыОбработкиЗаказаКод = Справочники.СтатусыОбработкиЗаказа.Отменен или Выборка.СтатусыОбработкиЗаказаКод = Справочники.СтатусыОбработкиЗаказа.ЗаказВТочкеСамовывоза
				или Выборка.СтатусыОбработкиЗаказаКод = Справочники.СтатусыОбработкиЗаказа.ОжидаетОбработкиМРК тогда
				ТекстЗапроса = 
				"UPDATE [Nagat].[dbo].[DH888]
				|   SET [SP2967] = '"+Выборка.СтатусыОбработкиЗаказаID_77+"' --Статус обр заказа
				| WHERE [IDDOC] = '"+Выборка.ID_77+"'";
			ИначеЕсли  Выборка.СтатусыОбработкиЗаказаКод = Справочники.СтатусыОбработкиЗаказа.Собран тогда
				ТекстЗапроса = 
				"UPDATE [Nagat].[dbo].[DH888]
				|   SET [SP2967] = '"+Выборка.СтатусыОбработкиЗаказаID_77+"' --Статус обр заказа
				|	,[SP893] = 1 --Собран
				| WHERE [IDDOC] = '"+Выборка.ID_77+"'";
			ИначеЕсли  Выборка.СтатусыОбработкиЗаказаКод = Справочники.СтатусыОбработкиЗаказа.Пробит тогда
				ТекстЗапроса = 
				"UPDATE [Nagat].[dbo].[DH888]
				|   SET [SP2967] = '"+Выборка.СтатусыОбработкиЗаказаID_77+"' --Статус обр заказа
				|	,[SP891] = 1 -- Пробит
				|   ,[SP1600] = '"+Формат(Выборка.ДатаОплаты,"ДФ='гггг.ММ.дд ЧЧ:мм:сс'")+"'
				|   ,[SP896] = '"+Выборка.ККМID_77+"'
				| WHERE [IDDOC] = '"+Выборка.ID_77+"'";
			Иначе
				Сообщить("Неизвестный статус");
				ЕстьОшибки = Истина;
				Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,Формат(ТекущаяДата(),""));
				Продолжить;
			КонецЕсли;
			Сообщить("Статус заказа " + Выборка.Номер + " " + Формат(Выборка.Дата,"ДФ=dd.MM.yyyy")+ " передан в 7.7");
			Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,Формат(ТекущаяДата(),""));
			Ошибка = "";
			РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапроса,Соединение,,,Ошибка);
			РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапроса1,Соединение,,,Ошибка);
			Если ЗначениеЗаполнено(Ошибка) тогда 
				Сообщить(Ошибка);
				СтатусЗаказаОбновленУспешно = Ложь;
				Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,Формат(ТекущаяДата(),""));
			КонецЕсли;
			Если СтатусЗаказаОбновленУспешно тогда
				НЗ = РегистрыСведений.ЗаказыСИзменившемсяСатусом.СоздатьНаборЗаписей();
				НЗ.Отбор.Заказ.Значение = Выборка.Заказ;
				НЗ.Отбор.Заказ.Использование = Истина;
				НЗ.Очистить();
				НЗ.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заказ.ID_77,
	|	Заказ.Ссылка,
	|	Заказ.СтатусыОбработкиЗаказа.ID_77
	|ПОМЕСТИТЬ втЗак
	|ИЗ
	|	Документ.Заказ КАК Заказ
	|ГДЕ
	|	Заказ.Проведен
	|	И НЕ Заказ.Пробит
	|	И НЕ Заказ.СтатусыОбработкиЗаказа В (&СтатусыОбработкиЗаказа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗак.ID_77,
	|	втЗак.Ссылка,
	|	втЗак.СтатусыОбработкиЗаказаID_77
	|ИЗ
	|	втЗак КАК втЗак
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказыСИзменившемсяСатусом КАК ЗаказыСИзменившемсяСатусом
	|		ПО втЗак.Ссылка = ЗаказыСИзменившемсяСатусом.Заказ
	|ГДЕ
	|	ЗаказыСИзменившемсяСатусом.Заказ ЕСТЬ NULL ";
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Справочники.СтатусыОбработкиЗаказа.ПолныйВозврат);
	МассивСтатусов.Добавить(Справочники.СтатусыОбработкиЗаказа.Отменен);
	МассивСтатусов.Добавить(Справочники.СтатусыОбработкиЗаказа.Пробит);
	Запрос.УстановитьПараметр("СтатусыОбработкиЗаказа",МассивСтатусов);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат;
	КонецЕсли;
	ЗаказыТаблица = Результат.Выгрузить();
	МассивIDЗаказов = ЗаказыТаблица.ВыгрузитьКолонку("ID_77");
	МассивУсловий = РаботаСSQL.СформироватьУсловияДляIN(МассивIDЗаказов,1000);
	Для каждого условие из МассивУсловий цикл
		ТекстЗапроса = 
		"SET NOCOUNT ON
		|SELECT TOP 10000 [IDDOC]
		|      ,[SP2967]
		|  FROM [Nagat].[dbo].[DH888]
		|WHERE [IDDOC] IN "+условие;
		Ошибка = "";
		ТабРез = РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапроса,Соединение,,Истина,Ошибка);
		Если ЗначениеЗаполнено(Ошибка) тогда
			Сообщить(Ошибка);
			Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,Формат(ТекущаяДата(),""));
			Продолжить;
		КонецЕсли;
		Для каждого строка из ТабРез цикл
			СтрокаТЗ = ЗаказыТаблица.Найти(Строка.IDDOC,"ID_77");
			СтатусЗаказаИз77 = Справочники.СтатусыОбработкиЗаказа.НайтиПоРеквизиту("ID_77",Строка.SP2967);
			Если СтрокаТЗ = неопределено или строкаТЗ.Ссылка = документы.Заказ.ПустаяСсылка() 
				или строкаТЗ.Ссылка.СтатусыОбработкиЗаказа = СтатусЗаказаИз77 тогда
				Продолжить;
			КонецЕсли;
			ТекущийСтатус = строкаТЗ.Ссылка.СтатусыОбработкиЗаказа.Ссылка;
			Если ТекущийСтатус = Справочники.СтатусыОбработкиЗаказа.НайтиПоКоду(4) тогда
				МассивIDМРК = Новый Массив;
				МассивIDМРК.Добавить(строкаТЗ.Ссылка);
				ОбменАлгоритмы77.ЗагрузкаДанныеПоМетаданным("Документ","Заказ",,МассивIDМРК,,,,,,Истина);			
			КонецЕсли;
			Заказ = строкаТЗ.Ссылка.ПолучитьОбъект();
			Если ТекущийСтатус = Справочники.СтатусыОбработкиЗаказа.НайтиПоКоду(4) тогда
				Если СтатусЗаказаИз77 <> Справочники.СтатусыОбработкиЗаказа.НайтиПоКоду(16) тогда
					Заказ.ДополнительныеСвойства.Вставить("ОтправитьСМС");
				КонецЕсли;
				Заказ.Собран = Истина;
			КонецЕсли;
			Заказ.СтатусыОбработкиЗаказа = СтатусЗаказаИз77;
			Попытка
				Заказ.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,Формат(ТекущаяДата(),""));
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	Попытка
		ОбновитьСрокиХраненияЗаказов();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,Формат(ТекущаяДата(),""),НЕ ЕстьОшибки);
КонецПроцедуры

Процедура ОбновитьСрокиХраненияЗаказов() Экспорт
	ТаблицаСроков = Новый ТаблицаЗначений;
	ТаблицаСроков.Колонки.Добавить("docno",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9)));
	ТаблицаСроков.Колонки.Добавить("d_doc",Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты()));
	ТаблицаСроков.Колонки.Добавить("d_end",Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты()));
	ТекстSQL = 
	"SELECT [docno]
	|      ,[d_doc]
	|      ,[d_end]
	|  FROM [CourierDS].[dbo].[t_self_delivery]
	|WHERE [Changed] = 1";
	
	ТаблицаСроков = РаботаСSQL.ВыполнитьЗапросSQL(ТекстSQL,,Справочники.НастройкиПодключения.БазаCourierDS,Истина,,,,ТаблицаСроков);
	Если ТаблицаСроков.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСроков.docno КАК docno,
	|	ТаблицаСроков.d_doc КАК d_doc,
	|	ТаблицаСроков.d_end
	|ПОМЕСТИТЬ втСрокиХранения
	|ИЗ
	|	&ТаблицаСроков КАК ТаблицаСроков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	docno,
	|	d_doc
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказ.Ссылка,
	|	втСрокиХранения.d_end КАК СрокХранения
	|ИЗ
	|	втСрокиХранения КАК втСрокиХранения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заказ КАК Заказ
	|		ПО (Заказ.Номер = втСрокиХранения.docno)
	|			И (втСрокиХранения.d_doc = НАЧАЛОПЕРИОДА(Заказ.Дата, ДЕНЬ))
	|ГДЕ
	|	Заказ.СрокХранения <> втСрокиХранения.d_end";
	Запрос.УстановитьПараметр("ТаблицаСроков",ТаблицаСроков);
	
	ТекстSQL = "";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Заказ = Выборка.Ссылка.ПолучитьОбъект();
		Заказ.СрокХранения = Выборка.СрокХранения;
		ТекстSQL = ТекстSQL
		+"UPDATE [CourierDS].[dbo].[t_self_delivery]
		|   SET Changed = 0
		|WHERE [docno] = "+Строка(Заказ.Номер)+"   AND [d_doc] = '"+Формат(Заказ.Дата,"ДФ=yyyy-dd-MM")+"'
		|";
		Заказ.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
	Если ЗначениеЗаполнено(ТекстSQL) тогда
		РаботаСSQL.ВыполнитьЗапросSQL(ТекстSQL,,Справочники.НастройкиПодключения.БазаCourierDS,Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереоценкаСроковогоТовара() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиТовараОстатки.Товар,
	|	ОстаткиТовараОстатки.Отдел,
	|	ПланОбменаДанными.Ссылка КАК Узел
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	РегистрНакопления.ОстаткиТовара.Остатки(
	|			,
	|			Партия.ГоденДо <= &ГоденДо
	|				И Партия.ГоденДо > &ТекущаяДата
	|				И Партия.ЗакупочнаяЦена >= 0.1) КАК ОстаткиТовараОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АдресХранения КАК АдресХранения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.ПланОбменаДанными КАК ПланОбменаДанными
	|			ПО (ПланОбменаДанными.ОсновнойУзел.АдресХранения = АдресХранения.Ссылка)
	|		ПО ОстаткиТовараОстатки.Отдел = АдресХранения.ОсновнойСклад
	|ГДЕ
	|	ОстаткиТовараОстатки.ОстатокОстаток >= 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиТовараОстатки.Партия,
	|	ОстаткиТовараОстатки.Партия.ГоденДо,
	|	ОстаткиТовараОстатки.Товар,
	|	ОстаткиТовараОстатки.Отдел,
	|	ОстаткиТовараОстатки.Партия.ЗакупочнаяЦена КАК ЗакупочнаяЦена,
	|	втНоменклатура.Узел
	|ПОМЕСТИТЬ втПартии
	|ИЗ
	|	РегистрНакопления.ОстаткиТовара.Остатки КАК ОстаткиТовараОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО ОстаткиТовараОстатки.Товар = втНоменклатура.Товар
	|			И ОстаткиТовараОстатки.Отдел = втНоменклатура.Отдел
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныПартии.Ссылка КАК ЦенаПартии,
	|	ЦеныПартии.ТипЦены,
	|	ЦеныПартии.РегионРаботы,
	|	втПартии.ПартияГоденДо КАК ГоденДо,
	|	втПартии.ЗакупочнаяЦена,
	|	втПартии.Товар,
	|	ЦеныПартии.Цена,
	|	втПартии.Узел
	|ПОМЕСТИТЬ втЦП
	|ИЗ
	|	втПартии КАК втПартии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЦеныПартии КАК ЦеныПартии
	|		ПО втПартии.Партия = ЦеныПартии.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЦП.ЦенаПартии,
	|	ЦеныПрайсЛиста.Ссылка КАК ЦеныПрайсЛист,
	|	втЦП.ГоденДо,
	|	втЦП.ЗакупочнаяЦена,
	|	втЦП.Цена,
	|	втЦП.Узел
	|ПОМЕСТИТЬ втЦПЛ
	|ИЗ
	|	втЦП КАК втЦП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЦеныПрайсЛиста КАК ЦеныПрайсЛиста
	|		ПО втЦП.ТипЦены = ЦеныПрайсЛиста.ТипЦены
	|			И втЦП.РегионРаботы = ЦеныПрайсЛиста.РегионРаботы
	|			И втЦП.Товар = ЦеныПрайсЛиста.Владелец
	|ГДЕ
	|	ЦеныПрайсЛиста.НеНазначатьЦенуРоботом <> 4
	|	И втЦП.ЗакупочнаяЦена > 0.01
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЦПЛ.ЦенаПартии КАК ЦенаПартии,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, втЦПЛ.ГоденДо, ДЕНЬ) > 60
	|				И ЦенаНоменклатурыСрезПоследних.ПроцентНаценки > 0
	|			ТОГДА втЦПЛ.ЗакупочнаяЦена * (1 + ЦенаНоменклатурыСрезПоследних.ПроцентНаценки / 100)
	|		КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, втЦПЛ.ГоденДо, ДЕНЬ) <= 30
	|			ТОГДА втЦПЛ.ЗакупочнаяЦена * 0.5
	|		КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, втЦПЛ.ГоденДо, ДЕНЬ) <= 60
	|			ТОГДА втЦПЛ.ЗакупочнаяЦена * 1.02
	|		ИНАЧЕ втЦПЛ.ЦенаПартии.Цена
	|	КОНЕЦ КАК ЦенаПартииЦена,
	|	втЦПЛ.Цена КАК Цена,
	|	втЦПЛ.Узел
	|ИЗ
	|	втЦПЛ КАК втЦПЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦенаНоменклатуры.СрезПоследних(
	|				,
	|				ЦенаПрайсЛиста В
	|					(ВЫБРАТЬ
	|						втЦПЛ.ЦеныПрайсЛист
	|					ИЗ
	|						втЦПЛ КАК втЦПЛ)) КАК ЦенаНоменклатурыСрезПоследних
	|		ПО втЦПЛ.ЦеныПрайсЛист = ЦенаНоменклатурыСрезПоследних.ЦенаПрайсЛиста
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, втЦПЛ.ГоденДо, ДЕНЬ) > 60
	|					И ЦенаНоменклатурыСрезПоследних.ПроцентНаценки > 0
	|				ТОГДА втЦПЛ.ЗакупочнаяЦена * (1 + ЦенаНоменклатурыСрезПоследних.ПроцентНаценки / 100)
	|			КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, втЦПЛ.ГоденДо, ДЕНЬ) <= 30
	|				ТОГДА втЦПЛ.ЗакупочнаяЦена * 0.5
	|			КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, втЦПЛ.ГоденДо, ДЕНЬ) <= 60
	|				ТОГДА втЦПЛ.ЗакупочнаяЦена * 1.02
	|			ИНАЧЕ втЦПЛ.ЦенаПартии.Цена
	|		КОНЕЦ <> втЦПЛ.ЦенаПартии.Цена
	|ИТОГИ
	|	МАКСИМУМ(ЦенаПартииЦена),
	|	МАКСИМУМ(Цена)
	|ПО
	|	ЦенаПартии";
	Запрос.УстановитьПараметр("ГоденДо",ТекущаяДата()+3600*24*60);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() цикл
		ЦенаНовая = Окр(Выборка.ЦенаПартииЦена,0,РежимОкругления.Окр15как20); 
		Если ЦенаНовая <> Выборка.Цена Тогда
			ОбПартии = Выборка.ЦенаПартии.ПолучитьОбъект();
			ОбПартии.Цена = ЦенаНовая;
			ОбПартии.ДатаПереоценки = НачалоДня(ТекущаяДата());
			ОбПартии.Записать();
		КонецЕсли;
		ВыборкаУзлы = Выборка.Выбрать();
		Пока ВыборкаУзлы.Следующий() цикл
			ПланыОбмена.ЗарегистрироватьИзменения(ВыборкаУзлы.Узел,ВыборкаУзлы.ЦенаПартии);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьСамовывозИзКоробки() Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АдресХранения.ID_77 КАК ID_77
	|ИЗ
	|	Справочник.АдресХранения КАК АдресХранения
	|ГДЕ
	|	АдресХранения.ЗагружатьСамовывозы
	|
	|СГРУППИРОВАТЬ ПО
	|	АдресХранения.ID_77";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Условие = "";
	Пока Выборка.Следующий() цикл
		Условие = Условие + "'" + Выборка.ID_77+"',";
	КонецЦикла;
	Условие = Лев(Условие,СтрДлина(Условие) - 1);
	
	
	ТекстЗапроса = 
	"Set nocount on
	|SELECT 
	|      skl.SP4141 AS AH_id, ah.descr, ts.id tochsam
	|INTO #Apteki
	|FROM [CourierDS].[dbo].[t_rr_sklad] rr (nolock)
	|INNER JOIN nagat..sc69 skl (nolock) ON rr.[id_sklad] = skl.id
	|INNER JOIN nagat..SC4123 ah (NOLOCK) ON ah.id = skl.SP4141 
	|INNER JOIN nagat..SC3908 ts (NOLOCK) ON ts.SP4145 = ah.id
	|WHERE rr.is_own = 1 AND rr.isPharm = 1
	|AND skl.SP4141 IN ("+Условие+") 
	|
	|SELECT 
	|marTch.iddoc Marshrut, viezd.iddoc Viezd
	|FROM nagat..DH926 mar (nolock) 
	|INNER JOIN nagat..DT926 marTch (NOLOCK) ON marTch.iddoc = mar.iddoc and mar.SP929 = '   2KA   ' 
	|INNER JOIN nagat.._1SJOURN j (NOLOCK) ON RIGHT(marTch.SP2231,9) = j.iddoc and j.IDDOCDEF = 1194 
	|INNER JOIN nagat..DH1194 viezd (nolock) ON RIGHT(marTch.SP2231,9) = viezd.iddoc 
	|
	|
	|DROP TABLE #Apteki";
	
	ТаблицаВыездов = РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапроса,,Справочники.НастройкиПодключения.БазаCourierDS,Истина);
	
	МассивВыездов = ТаблицаВыездов.ВыгрузитьКолонку("Viezd");
	
	
	
	
	НастройкаПодключения = справочники.НастройкиПодключенийКВебСервисам.Склад;
	Прокси = ОбщийМодульВебСервисы.ПодключитьсяКВебСервису(НастройкаПодключения);
	СоставВыездов = ЗначениеИзСтрокиВнутр(Прокси.GetEquipmentListForOrders(ЗначениеВСтрокуВнутр(МассивВыездов)));
	
	
	МассивЗАказов = СоставВыездов.ВыгрузитьКолонку("Заказ");
	
	МассивПартий = СоставВыездов.ВыгрузитьКолонку("Партия");
	
	МассивСтрокКУдалениюМаршруты = новый Массив;
	Для каждого строка из ТаблицаВыездов цикл
		стр = СоставВыездов.Найти(Строка.Viezd,"ID_77");
		Если стр = неопределено тогда	
			МассивСтрокКУдалениюМаршруты.Добавить(строка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого стр из МассивСтрокКУдалениюМаршруты цикл
		ТаблицаВыездов.Удалить(Стр);
	КонецЦикла;
	
	ТаблицаМаршрутов = ТаблицаВыездов.Скопировать(,"Marshrut");
	ТаблицаМаршрутов.Свернуть("Marshrut");
	МассивМаршрутов = ТаблицаМаршрутов.ВыгрузитьКолонку("Marshrut");
	
	ОписаниеОбъекта77 = ОбменАлгоритмы77.ПолучитьОписаниеТаблицыВБазе77("Документ","Заказ");
	ТаблицаЗаказов = ОбменАлгоритмы77.ВыполнитьСверкуПоМетаданному(ОписаниеОбъекта77,100,,,МассивЗаказов,Истина); 
	
	Для каждого СтрокаЗаказ из ТаблицаЗаказов цикл
		СтатусыДокументов.УстановитьСтатусСборкиЗаказа(СтрокаЗаказ.Ссылка,Перечисления.ОснованияУстановкиСтатусаДокумента.ЗагрузкаДанныхИз77,Справочники.СтатусыОбработкиЗаказа.Доставляется);
		СтатусыДокументов.УстановитьСтатусАктуальностиЗаказа(СтрокаЗаказ.Ссылка,Перечисления.ОснованияУстановкиСтатусаДокумента.ЗагрузкаДанныхИз77,Справочники.СтатусыАктуальностиЗаказов.Актуален);
		Если не ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаЗаказ.Ссылка,"ТипКомплектацииЗаказа")) тогда
			ОбъектЗаказ = СтрокаЗаказ.Ссылка.ПолучитьОбъект();
			ОбъектЗаказ.ТипКомплектацииЗаказа = Перечисления.ТипКомплектацииЗаказа.СборкаНаСкладеВКоробку_КомплектацияВАптеке;
			ОбъектЗаказ.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЦикла;
	
	МассивСвязанныхОбъектовЦП = Новый Массив;
	МассивСвязанныхОбъектовЦП.Добавить(ОбменАлгоритмы77.ПолучитьОписаниеТаблицыВБазе77("Справочник","ЦеныПартии"));
	
	ОписаниеОбъекта77Партия = ОбменАлгоритмы77.ПолучитьОписаниеТаблицыВБазе77("Справочник","Партии");
	
	ТаблицаПартий = ОбменАлгоритмы77.ВыполнитьСверкуПоМетаданному(ОписаниеОбъекта77Партия,100,МассивСвязанныхОбъектовЦП,,МассивПартий,Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	  
	"ВЫБРАТЬ
	|	ТочкиСамовывоза.АдресХранения.ОсновнойСклад как Склад,
	|	ТочкиСамовывоза.ID_77
	|ИЗ
	|	Справочник.ТочкиСамовывоза КАК ТочкиСамовывоза";
	
	ТаблицаТочкаСклад = Запрос.Выполнить().Выгрузить();
	
	
	ЗаполнитьТаблицуСоставВыездовСсылками(СоставВыездов);
	
	
	Для каждого СтрокаВыезд из СоставВыездов.Строки цикл
		Если СтрокаВыезд.Строки.Количество() > 0 тогда
			Если ЗначениеЗаполнено(СтрокаВыезд.Документ) тогда
				Выезд = СтрокаВыезд.Документ.ПолучитьОбъект();
				Выезд.Товары.Очистить();
			Иначе
				Выезд = Документы.Сборка.СоздатьДокумент();
			КонецЕсли;
			
			Выезд.ШК = СтрокаВыезд.ШК;
			Выезд.ТипСборки = перечисления.ТипСборки.СборкаЗаказовИзКоробки;
			Выезд.ID_77 = СтрокаВыезд.ID_77;
			Выезд.Номер = СтрокаВыезд.Номер;
			Выезд.Дата = СтрокаВыезд.Дата;
			Выезд.Склад = СтрокаВыезд.Аптека.ОсновнойСклад;
			Выезд.Холод = СтрокаВыезд.Холод; 
			Для каждого строка из СтрокаВыезд.Строки цикл
				СтрокаТовары = Выезд.Товары.Добавить();	
				СтрокаТовары.Документ = Строка.Заказ;
				СтрокаТовары.Товар = Строка.Товар;
				СтрокаТовары.Партия = Строка.Партия;
				СтрокаТовары.Холод = Строка.Холод;
				СтрокаТовары.Количество = Строка.Количество;
				СтрокаТовары.КоличествоСобрано = Строка.Количество;
			КонецЦикла;	
			ТаблицаТовары = Выезд.Товары.Выгрузить();
			ТаблицаТовары.Свернуть("Документ,Товар,Партия,Холод,Количество,КоличествоСобрано");
			Выезд.Товары.Загрузить(ТаблицаТовары);
			Выезд.Записать(РежимЗаписиДокумента.Проведение);		
			СтрокаВыезд.Документ = Выезд.Ссылка;
		КонецЕсли;		
	КонецЦикла;
	
	
	ОписаниеОбъекта77 = ОбменАлгоритмы77.ПолучитьОписаниеТаблицыВБазе77("Документ","Маршрут");	
	МаршрутТаблица = ОбменАлгоритмы77.ВыполнитьСверкуПоМетаданному(ОписаниеОбъекта77,10,,,МассивМаршрутов,Истина);
	Для каждого строка из МаршрутТаблица цикл
		Маршрут = Строка.Ссылка.ПолучитьОбъект();
		Маршрут.КоробкиСборки.Очистить();
		СтрокиВыездов = ТаблицаВыездов.НайтиСтроки(Новый Структура("Marshrut",Строка.ID_77));
		Для каждого СтрокаВыезда из СтрокиВыездов цикл
			СтрокиСостава = СоставВыездов.Строки.НайтиСтроки(Новый Структура("ID_77",СтрокаВыезда.Viezd));	
			Для каждого стр из СтрокиСостава цикл
				СтрКор = Маршрут.КоробкиСборки.Добавить();
				СтрКор.Коробка = Стр.Документ;
				СтрКор.АдресХранения = Стр.Аптека;
			КонецЦикла;
		КонецЦикла;
		Маршрут.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуСоставВыездовСсылками(СоставВыездов)
	
	Запрос = Новый Запрос;
	ЗАпрос.Текст = 
	"ВЫБРАТЬ
	|	СоставВыездов.ID_77,
	|	СоставВыездов.Заказ,
	|	СоставВыездов.Товар,
	|	СоставВыездов.Партия,
	|	СоставВыездов.Количество,
	|	СоставВыездов.ТочкаСамовывоза,
	|	СоставВыездов.Холод,
	|	СоставВыездов.Номер,
	|	СоставВыездов.Дата,
	|	СоставВыездов.ШК
	|ПОМЕСТИТЬ СоставВыездов
	|ИЗ
	|	&СоставВыездов КАК СоставВыездов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставВыездов.ID_77,
	|	СоставВыездов.Заказ,
	|	СоставВыездов.Товар,
	|	СоставВыездов.Партия,
	|	СоставВыездов.Количество,
	|	СоставВыездов.ТочкаСамовывоза,
	|	СоставВыездов.Холод,
	|	СоставВыездов.Номер,
	|	СоставВыездов.Дата,
	|	СоставВыездов.ШК
	|ПОМЕСТИТЬ втСоставВыездов
	|ИЗ
	|	СоставВыездов КАК СоставВыездов
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставВыездов.Номер,
	|	СоставВыездов.Дата,
	|	СоставВыездов.ШК,
	|	СоставВыездов.ТочкаСамовывоза,
	|	СоставВыездов.Количество,
	|	СоставВыездов.ID_77,
	|	СоставВыездов.Заказ,
	|	СоставВыездов.Товар,
	|	СоставВыездов.Партия,
	|	СоставВыездов.Холод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСоставВыездов.ID_77 КАК ID_77,
	|	ЗаказДок.Ссылка КАК Заказ,
	|	Номенклатура.Ссылка КАК Товар,
	|	Партии.Ссылка КАК Партия,
	|	втСоставВыездов.Количество,
	|	ТочкиСамовывоза.АдресХранения КАК Аптека,
	|	втСоставВыездов.Холод КАК Холод,
	|	ЕСТЬNULL(СборкаЗаказов.Ссылка, ЗНАЧЕНИЕ(Документ.Сборка.ПустаяСсылка)) КАК Документ,
	|	втСоставВыездов.Номер КАК Номер,
	|	втСоставВыездов.Дата КАК Дата,
	|	втСоставВыездов.ШК КАК ШК
	|ИЗ
	|	втСоставВыездов КАК втСоставВыездов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заказ КАК ЗаказДок
	|		ПО втСоставВыездов.Заказ = ЗаказДок.ID_77
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партии КАК Партии
	|		ПО втСоставВыездов.Партия = Партии.ID_77
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО втСоставВыездов.Товар = Номенклатура.ID_77
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТочкиСамовывоза КАК ТочкиСамовывоза
	|		ПО втСоставВыездов.ТочкаСамовывоза = ТочкиСамовывоза.ID_77
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Сборка КАК СборкаЗаказов
	|		ПО втСоставВыездов.ID_77 = СборкаЗаказов.ID_77
	|
	|СГРУППИРОВАТЬ ПО
	|	втСоставВыездов.ID_77,
	|	ЗаказДок.Ссылка,
	|	Номенклатура.Ссылка,
	|	Партии.Ссылка,
	|	втСоставВыездов.Количество,
	|	ТочкиСамовывоза.АдресХранения,
	|	втСоставВыездов.Холод,
	|	ЕСТЬNULL(СборкаЗаказов.Ссылка, ЗНАЧЕНИЕ(Документ.Сборка.ПустаяСсылка)),
	|	втСоставВыездов.Номер,
	|	втСоставВыездов.Дата,
	|	втСоставВыездов.ШК
	|ИТОГИ
	|	МАКСИМУМ(Аптека),
	|	МАКСИМУМ(Холод),
	|	МАКСИМУМ(Документ),
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(ШК)
	|ПО
	|	ID_77";
	
	Запрос.УстановитьПараметр("СоставВыездов",СоставВыездов);
	
	СоставВыездов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецПроцедуры

Процедура ВыгрузитьПеремещенияВ77() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Перемещение.Ссылка
	|ПОМЕСТИТЬ втПерем
	|ИЗ
	|	Документ.Перемещение КАК Перемещение
	|ГДЕ
	|	Перемещение.ВводЗавершен
	|	И Перемещение.Поставщик.АдресХранения.ID_77 <> &МарьинаРощаАХ
	|	И Перемещение.Получатель.АдресХранения.ID_77 = &МарьинаРощаАХ
	|	И (Перемещение.СборкаНаТСД
	|				И Перемещение.СборкаЗавершена
	|			ИЛИ НЕ Перемещение.СборкаНаТСД)
	|	И Перемещение.Проведен
	|	И Перемещение.ID_77 = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеТовары.Партия
	|ИЗ
	|	Документ.Перемещение.Товары КАК ПеремещениеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПерем КАК втПерем
	|		ПО ПеремещениеТовары.Ссылка = втПерем.Ссылка
	|ГДЕ
	|	ПеремещениеТовары.Партия.ID_77 = """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТовары.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПерем.Ссылка
	|ИЗ
	|	втПерем КАК втПерем
	|
	|СГРУППИРОВАТЬ ПО
	|	втПерем.Ссылка";
	Запрос.УстановитьПараметр("МарьинаРощаАХ", "     B   ");
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаПартии = МассивРезультатов[1].Выбрать();
	Пока ВыборкаПартии.Следующий() цикл
		ОбменАлгоритмы77.ВыгрузитьПартию(ВыборкаПартии.Партия);
	КонецЦикла;
	
	ВыборкаПеремещения = МассивРезультатов[2].Выбрать();
	Пока ВыборкаПеремещения.Следующий() цикл
		ОбменАлгоритмы77.ВыгрузитьПеремещение(ВыборкаПеремещения.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура РассылкаПоШаблонамПоЭлектронойПочте() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасписаниеРассылокПоЭлектроннойПочтеСрезПоследних.Период,
	|	РасписаниеРассылокПоЭлектроннойПочтеСрезПоследних.ШаблонРассылки,
	|	РасписаниеРассылокПоЭлектроннойПочтеСрезПоследних.ЧастотаРассылки
	|ПОМЕСТИТЬ ВТРасписание
	|ИЗ
	|	РегистрСведений.РасписаниеРассылокПоЭлектроннойПочте.СрезПоследних(&ТекущаяДата, ) КАК РасписаниеРассылокПоЭлектроннойПочтеСрезПоследних
	|ГДЕ
	|	РасписаниеРассылокПоЭлектроннойПочтеСрезПоследних.ЧастотаРассылки <> ЗНАЧЕНИЕ(Перечисление.ЧастотаРассылки.Никогда)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛогРассылкиПоЭлектроннойПочтеСрезПоследних.ШаблонРассылки,
	|	ЛогРассылкиПоЭлектроннойПочтеСрезПоследних.Период
	|ПОМЕСТИТЬ втПоследняяОтправка
	|ИЗ
	|	РегистрСведений.ЛогРассылкиПоЭлектроннойПочте.СрезПоследних(
	|			&ТекущаяДата,
	|			ШаблонРассылки В
	|					(ВЫБРАТЬ
	|						ВТРасписание.ШаблонРассылки
	|					ИЗ
	|						ВТРасписание КАК ВТРасписание)
	|				И ПисьмоОтправлено) КАК ЛогРассылкиПоЭлектроннойПочтеСрезПоследних,
	|	ВТРасписание КАК ВТРасписание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасписание.ШаблонРассылки
	|ИЗ
	|	ВТРасписание КАК ВТРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПоследняяОтправка КАК втПоследняяОтправка
	|		ПО ВТРасписание.ШаблонРассылки = втПоследняяОтправка.ШаблонРассылки
	|ГДЕ
	|	втПоследняяОтправка.ШаблонРассылки ЕСТЬ NULL 
	|	И РАЗНОСТЬДАТ(ВТРасписание.Период, &ТекущаяДата, СЕКУНДА) >= 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТРасписание.ШаблонРассылки
	|ИЗ
	|	ВТРасписание КАК ВТРасписание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоследняяОтправка КАК втПоследняяОтправка
	|		ПО ВТРасписание.ШаблонРассылки = втПоследняяОтправка.ШаблонРассылки
	|ГДЕ
	|	НЕ втПоследняяОтправка.ШаблонРассылки ЕСТЬ NULL 
	|	И ВЫБОР
	|			КОГДА ВТРасписание.ЧастотаРассылки = ЗНАЧЕНИЕ(Перечисление.ЧастотаРассылки.РазВЧас)
	|				ТОГДА РАЗНОСТЬДАТ(втПоследняяОтправка.Период, &ТекущаяДата, ЧАС) >= 1
	|			КОГДА ВТРасписание.ЧастотаРассылки = ЗНАЧЕНИЕ(Перечисление.ЧастотаРассылки.РазВДень)
	|				ТОГДА РАЗНОСТЬДАТ(втПоследняяОтправка.Период, &ТекущаяДата, ДЕНЬ) >= 1
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		ОбщийМодульРассылка.ОтправитьПисьмоПоШаблону(Выборка.ШаблонРассылки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузкаИЗагрузкаСтатусовЗаказовНовый() Экспорт
	
	Лог = Справочники.Логи.СоздатьЛог(Перечисления.ВидыЛогов.РегламентноеЗадание,ТекущаяДата(),"Выгрузка и загрузка статусов заказов");
	
	ЕстьОшибки = Ложь;
	
	Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,Формат(ТекущаяДата(),"")+символы.ПС+"Начало установки статусов в документе заказ из регистра сведений",Ложь);
	УстановитьСтатусыЗаказовПоРегиструСведений(ЕстьОшибки);
	Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,Формат(ТекущаяДата(),"")+символы.ПС+"Завершение установки статусов в документе заказ из регистра сведений",Ложь);
	
	//Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,Формат(ТекущаяДата(),"")+символы.ПС+"Начало обработки заказов по которым не хватило",Ложь);		
	//ОбновитьСтатусыЗаказовНеХватило(ЕстьОшибки);
	//Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,Формат(ТекущаяДата(),"")+символы.ПС+"Завершение обработки заказов по которым не хватило",Ложь);
	
	Соединение = РаботаСSQL.ПодключениеКСерверуSQLПоНастройке(справочники.НастройкиПодключения.БазаCourierDS);
	
	ВыгрузкаСтатусовЗаказов(Соединение,Лог,ЕстьОшибки);	
	
	ЗагрузкаСтатусовЗаказов(Соединение,Лог,ЕстьОшибки);
	
	Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,Формат(ТекущаяДата(),""),НЕ ЕстьОшибки);
	
КонецПроцедуры

Процедура УстановитьСтатусыЗаказовПоРегиструСведений(ЕстьОшибки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заказ.Ссылка КАК Ссылка,
	|	Заказ.СтатусыОбработкиЗаказа
	|ПОМЕСТИТЬ втЗаказыСПромежуточнымиСтатусами
	|ИЗ
	|	Документ.Заказ КАК Заказ
	|ГДЕ
	|	Заказ.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыСборкиЗаказовСрезПоследних.Документ,
	|	СтатусыСборкиЗаказовСрезПоследних.Статус
	|ИЗ
	|	РегистрСведений.СтатусыСборкиЗаказов.СрезПоследних(
	|			,
	|			Документ В
	|				(ВЫБРАТЬ
	|					втЗаказыСПромежуточнымиСтатусами.Ссылка
	|				ИЗ
	|					втЗаказыСПромежуточнымиСтатусами КАК втЗаказыСПромежуточнымиСтатусами)) КАК СтатусыСборкиЗаказовСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗаказыСПромежуточнымиСтатусами КАК втЗаказыСПромежуточнымиСтатусами
	|		ПО СтатусыСборкиЗаказовСрезПоследних.Документ = втЗаказыСПромежуточнымиСтатусами.Ссылка
	|ГДЕ
	|	втЗаказыСПромежуточнымиСтатусами.СтатусыОбработкиЗаказа <> СтатусыСборкиЗаказовСрезПоследних.Статус";
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() цикл
		Попытка
			ЗаказОб = Выборка.Документ.ПолучитьОбъект();
			ЗаказОб.СтатусыОбработкиЗаказа = Выборка.Статус;
			ЗаказОб.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ЕстьОшибки = Истина;
			Ошибка = ОписаниеОшибки();
			Сообщить(Ошибка);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСтатусыЗаказовНеХватило(ЕстьОшибки = неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыАктуальностиЗаказовСрезПоследних.Документ
	|ПОМЕСТИТЬ втЗаказыНеХватило
	|ИЗ
	|	РегистрСведений.СтатусыАктуальностиЗаказов.СрезПоследних КАК СтатусыАктуальностиЗаказовСрезПоследних
	|ГДЕ
	|	СтатусыАктуальностиЗаказовСрезПоследних.СтатусАктуальности = ЗНАЧЕНИЕ(Справочник.СтатусыАктуальностиЗаказов.ОжидаетОбработкиМРК)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКСборкеОстатки.Склад КАК Склад,
	|	ТоварыКСборкеОстатки.Документ КАК Документ,
	|	ТоварыКСборкеОстатки.Товар,
	|	ТоварыКСборкеОстатки.Партия,
	|	ТоварыКСборкеОстатки.ТипСборки,
	|	ТоварыКСборкеОстатки.КоличествоНеХватилоОстаток КАК КоличествоНеХватило
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыКСборке.Остатки(
	|			,
	|			ВЫРАЗИТЬ(Документ КАК Документ.Заказ) В
	|				(ВЫБРАТЬ
	|					втЗаказыНеХватило.Документ
	|				ИЗ
	|					втЗаказыНеХватило КАК втЗаказыНеХватило)) КАК ТоварыКСборкеОстатки
	|ГДЕ
	|	ТоварыКСборкеОстатки.КоличествоНеХватилоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОстатки.Склад КАК Склад,
	|	втОстатки.Документ,
	|	втОстатки.Товар,
	|	втОстатки.Партия,
	|	втОстатки.ТипСборки,
	|	втОстатки.КоличествоНеХватило,
	|	МАКСИМУМ(ЕСТЬNULL(ЗаказТовар.Цена, 0)) КАК Цена
	|ИЗ
	|	втОстатки КАК втОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заказ.Товар КАК ЗаказТовар
	|		ПО втОстатки.Документ = ЗаказТовар.Ссылка
	|			И втОстатки.Партия = ЗаказТовар.Партия
	|
	|СГРУППИРОВАТЬ ПО
	|	втОстатки.Документ,
	|	втОстатки.Партия,
	|	втОстатки.Склад,
	|	втОстатки.ТипСборки,
	|	втОстатки.Товар,
	|	втОстатки.КоличествоНеХватило
	|ИТОГИ ПО
	|	Склад";
	
	МассивУдаляемыхИзВозвратаСтрок = Новый Массив;
	МассивСтрокДляВставки = Новый Массив;
	МассивЗаказовПоКоторымВставкаНеПрошла = Новый Массив;
	Результат = Запрос.Выполнить();
	Если не Результат.Пустой() тогда
		ВыборкаСклад = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСклад.Следующий() цикл
			ДокументВозврат = Документы.ВозвратОтПокупателя.СоздатьДокумент();
			ДокументВозврат.Дата = ТекущаяДата();
			ДокументВозврат.Отдел = ВыборкаСклад.Склад; 
			ДокументВозврат.СписаниеНеНайдено = Истина;
			Выборка = ВыборкаСклад.Выбрать();
			Пока Выборка.Следующий() цикл
				СтрокаВозвр = ДокументВозврат.НеХватило.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВозвр,Выборка);
				МассивСтрокДляВставки.Добавить(Новый Структура("ИД77_Заказа,ИД77_Товар,НеХватило,ГоденДо,ИД77_Партии,Заказа,Партия,Цена",
				Выборка.Документ.ID_77,Выборка.Товар.ID_77,Выборка.КоличествоНеХватило,Выборка.Партия.ГоденДо,Выборка.Партия.ID_77,Выборка.Документ,Выборка.Партия,Формат(Выборка.Цена,"ЧРД=.; ЧН=0; ЧГ=")));																
			КонецЦикла;
			Попытка
				ДокументВозврат.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ЕстьОшибки = Истина;
				Прервать;
			КонецПопытки;
			Для каждого СтрокаВставки из МассивСтрокДляВставки цикл
				Попытка 
					Если ОбменАлгоритмы77.ВыгрузитьТоварПодЗаказ(СтрокаВставки) = ложь тогда
						МассивЗаказовПоКоторымВставкаНеПрошла.Добавить(СтрокаВставки);
					КонецЕсли;
				Исключение
					МассивЗаказовПоКоторымВставкаНеПрошла.Добавить(СтрокаВставки);					
				КонецПопытки;
			КонецЦикла;
			Для каждого СтрокаВставкаНеПрошла из МассивЗаказовПоКоторымВставкаНеПрошла цикл
				СтрокиНеХватило = ДокументВозврат.НеХватило.НайтиСтроки(Новый Структура("Документ,Партия",СтрокаВставкаНеПрошла.Заказ,СтрокаВставкаНеПрошла.Партия));
				Для каждого строкаНеХватило из СтрокиНеХватило цикл
					МассивУдаляемыхИзВозвратаСтрок.Добавить(строкаНеХватило);
				КонецЦикла;
			КонецЦикла;
			Если МассивУдаляемыхИзВозвратаСтрок.Количество() > 0 тогда
				Для каждого строка из МассивУдаляемыхИзВозвратаСтрок цикл
					ДокументВозврат.НеХватило.Удалить(строка);
				КонецЦикла;
				ДокументВозврат.Записать(РежимЗаписиДокумента.Проведение);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

Процедура ВыгрузкаСтатусовЗаказов(Соединение,Лог,ЕстьОшибки)
	
	Запрос = новый запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыСборкиЗаказов.Документ КАК Заказ,
	|	СтатусыСборкиЗаказов.Документ.ID_77 КАК ID_77,
	|	СтатусыСборкиЗаказов.Статус КАК СтатусыОбработкиЗаказа,
	|	СтатусыСборкиЗаказов.Статус.ID_77 КАК СтатусыОбработкиЗаказаID_77,
	|	СтатусыСборкиЗаказов.Статус.Код КАК СтатусыОбработкиЗаказаКод,
	|	СтатусыСборкиЗаказов.Документ.ККМ КАК ККМ,
	|	СтатусыСборкиЗаказов.Документ.ККМ.ID_77 КАК ККМID_77,
	|	СтатусыСборкиЗаказов.Документ.Номер КАК Номер,
	|	НАЧАЛОПЕРИОДА(СтатусыСборкиЗаказов.Период, ДЕНЬ) КАК Дата,
	|	ЕСТЬNULL(Чеки.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОплаты,
	|	ЕСТЬNULL(СтатусыСборкиЗаказов.Сотрудник.Наименование, ""Администратор"") КАК Автор,
	|	СтатусыСборкиЗаказов.Документ.ТочкаСамовывоза.АдресХранения.ОсновнойСклад.Код КАК КодСклада,
	|	СтатусыСборкиЗаказов.Период,
	|	СтатусыСборкиЗаказов.ОснованиеУстановкиСтатуса,
	|	СтатусыСборкиЗаказов.Сотрудник
	|ИЗ
	|	РегистрСведений.СтатусыСборкиЗаказов КАК СтатусыСборкиЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Чеки КАК Чеки
	|		ПО СтатусыСборкиЗаказов.Документ = Чеки.ДокументОснование
	|			И (Чеки.Проведен)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыАктуальностиЗаказов.СрезПоследних КАК СтатусыАктуальностиЗаказовСрезПоследних
	|		ПО СтатусыСборкиЗаказов.Документ = СтатусыАктуальностиЗаказовСрезПоследних.Документ
	|ГДЕ
	|	НЕ СтатусыСборкиЗаказов.Выгружено
	|	И СтатусыАктуальностиЗаказовСрезПоследних.СтатусАктуальности = ЗНАЧЕНИЕ(справочник.СтатусыАктуальностиЗаказов.Актуален)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусыСборкиЗаказов.Документ,
	|	НАЧАЛОПЕРИОДА(СтатусыСборкиЗаказов.Период, ДЕНЬ),
	|	ЕСТЬNULL(Чеки.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	СтатусыСборкиЗаказов.Статус,
	|	СтатусыСборкиЗаказов.Документ.ID_77,
	|	СтатусыСборкиЗаказов.Статус.ID_77,
	|	СтатусыСборкиЗаказов.Статус.Код,
	|	СтатусыСборкиЗаказов.Документ.ККМ,
	|	СтатусыСборкиЗаказов.Документ.ККМ.ID_77,
	|	СтатусыСборкиЗаказов.Документ.Номер,
	|	СтатусыСборкиЗаказов.Документ.ТочкаСамовывоза.АдресХранения.ОсновнойСклад.Код,
	|	СтатусыСборкиЗаказов.Период,
	|	СтатусыСборкиЗаказов.ОснованиеУстановкиСтатуса,
	|	ЕСТЬNULL(СтатусыСборкиЗаказов.Сотрудник.Наименование, ""Администратор""),
	|	СтатусыСборкиЗаказов.Сотрудник";
	Результат = Запрос.Выполнить();
	ЕстьОшибки = Ложь;
	Если не Результат.Пустой() тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() цикл
			СтатусЗаказаОбновленУспешно = Истина;
			#Область dsfh
			//НомерЗаказаДляЗапроса = сокрЛП(Выборка.Номер);
			//Если 8-СтрДлина(НомерЗаказаДляЗапроса) > 0 Тогда 
			//	Для ит = 1 по 8 -СтрДлина(НомерЗаказаДляЗапроса) цикл
			//		НомерЗаказаДляЗапроса = " " + НомерЗаказаДляЗапроса;
			//	КонецЦикла;				
			//КонецЕсли;
			//
			//ТекстЗапроса1 = 
			//"IF not EXISTS(SELECT * From [CourierDS].[dbo].[t_status_zak_log] Where [docno] = '"+НомерЗаказаДляЗапроса+"' AND ([status] = ' 16' OR [status] ='"+?(СтрДлина(Выборка.СтатусыОбработкиЗаказаКод)= 1,"  "," ")+Выборка.СтатусыОбработкиЗаказаКод+"') and [d_doc] = '"+Формат(Выборка.Дата,"ДФ='ггггММдд'")+"')
			//|	INSERT INTO [CourierDS].[dbo].[t_status_zak_log]
			//|			   ([docno]
			//|			   ,[d_doc]
			//|			   ,[status]
			//|			   ,[user_code]
			//|			   ,[curr_time]
			//|			   ,[code_sklad])
			//|		 VALUES
			//|			   ('"+НомерЗаказаДляЗапроса+"'
			//|			   ,'"+Формат(Выборка.Дата,"ДФ='ггггММдд'")+"'
			//|			   ,'"+?(СтрДлина(выборка.СтатусыОбработкиЗаказаКод) = 1,"  "+выборка.СтатусыОбработкиЗаказаКод," "+выборка.СтатусыОбработкиЗаказаКод)+"'
			//|			   ,'"+Выборка.Автор+"'
			//|			   ,getdate()
			//|			   ,"+Выборка.КодСклада+")";
			//Если Выборка.СтатусыОбработкиЗаказаКод = Справочники.СтатусыОбработкиЗаказа.Отменен или Выборка.СтатусыОбработкиЗаказаКод = Справочники.СтатусыОбработкиЗаказа.ЗаказВТочкеСамовывоза
			//	или Выборка.СтатусыОбработкиЗаказаКод = Справочники.СтатусыОбработкиЗаказа.ОжидаетОбработкиМРК тогда
			//	ТекстЗапроса = 
			//	"UPDATE [Nagat].[dbo].[DH888]
			//	|   SET [SP2967] = '"+Выборка.СтатусыОбработкиЗаказаID_77+"' --Статус обр заказа
			//	| WHERE [IDDOC] = '"+Выборка.ID_77+"'";
			//ИначеЕсли  Выборка.СтатусыОбработкиЗаказаКод = Справочники.СтатусыОбработкиЗаказа.Собран тогда
			//	ТекстЗапроса = 
			//	"UPDATE [Nagat].[dbo].[DH888]
			//	|   SET [SP2967] = '"+Выборка.СтатусыОбработкиЗаказаID_77+"' --Статус обр заказа
			//	|	,[SP893] = 1 --Собран
			//	| WHERE [IDDOC] = '"+Выборка.ID_77+"'";
			//ИначеЕсли  Выборка.СтатусыОбработкиЗаказаКод = Справочники.СтатусыОбработкиЗаказа.Пробит тогда
			//	ТекстЗапроса = 
			//	"UPDATE [Nagat].[dbo].[DH888]
			//	|   SET [SP2967] = '"+Выборка.СтатусыОбработкиЗаказаID_77+"' --Статус обр заказа
			//	|	,[SP891] = 1 -- Пробит
			//	|   ,[SP1600] = '"+Формат(Выборка.ДатаОплаты,"ДФ='гггг.ММ.дд ЧЧ:мм:сс'")+"'
			//	|   ,[SP896] = '"+Выборка.ККМID_77+"'
			//	| WHERE [IDDOC] = '"+Выборка.ID_77+"'";
			//Иначе
			//	Сообщить("Неизвестный статус");
			//	ЕстьОшибки = Истина;
			//	Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,Формат(ТекущаяДата(),""));
			//	Продолжить;
			//КонецЕсли;
			#КонецОбласти
			Ошибка = ВыгрузитьСтатусЗаказаВ1С77(Выборка.Номер,Выборка.Дата,Выборка.ID_77,Выборка.СтатусыОбработкиЗаказаКод,Выборка.СтатусыОбработкиЗаказаID_77,
				Выборка.СтатусыОбработкиЗаказа,Выборка.Автор,Выборка.КодСклада,Выборка.ДатаОплаты,Выборка.ККМID_77,Соединение);
			Если ЗначениеЗаполнено(Ошибка) тогда 
				Сообщить(Ошибка);
				СтатусЗаказаОбновленУспешно = Ложь;
				Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,Формат(ТекущаяДата(),""));
				ЕстьОшибки = Истина;
			Иначе
				Сообщить("Статус заказа " + Выборка.Номер + " " + Формат(Выборка.Дата,"ДФ=dd.MM.yyyy")+ " передан в 7.7");
				Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,Формат(ТекущаяДата(),""));
			КонецЕсли;
			Если СтатусЗаказаОбновленУспешно тогда
				НачатьТранзакцию();
				Попытка					
					НЗ = РегистрыСведений.СтатусыСборкиЗаказов.СоздатьМенеджерЗаписи();
					НЗ.Период = Выборка.Период;
					НЗ.Документ = Выборка.Заказ;
					НЗ.ОснованиеУстановкиСтатуса = Выборка.ОснованиеУстановкиСтатуса;
					НЗ.Статус = Выборка.СтатусыОбработкиЗаказа;
					НЗ.Сотрудник = Выборка.Сотрудник;
					НЗ.Выгружено = Истина;
					НЗ.Записать();
					ЗакДок = Выборка.Заказ.ПолучитьОбъект();
					ЗакДок.СтатусыОбработкиЗаказа = Выборка.СтатусыОбработкиЗаказа;
					ЗакДок.Записать(РежимЗаписиДокумента.Запись);
					ЗафиксироватьТранзакцию();
				Исключение
					ЕстьОшибки = Истина;
					Сообщить(Ошибка);
					ОтменитьТранзакцию();
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗагрузкаСтатусовЗаказов(Соединение,Лог,ЕстьОшибки)
	
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заказ.ID_77,
	|	Заказ.Ссылка,
	|	Заказ.СтатусыОбработкиЗаказа.ID_77
	|ПОМЕСТИТЬ втЗак
	|ИЗ
	|	Документ.Заказ КАК Заказ
	|ГДЕ
	|	Заказ.Проведен
	|	И НЕ Заказ.Пробит
	|	И НЕ Заказ.СтатусыОбработкиЗаказа В (&СтатусыОбработкиЗаказа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗак.ID_77,
	|	втЗак.Ссылка,
	|	втЗак.СтатусыОбработкиЗаказаID_77
	|ИЗ
	|	втЗак КАК втЗак
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказыСИзменившемсяСатусом КАК ЗаказыСИзменившемсяСатусом
	|		ПО втЗак.Ссылка = ЗаказыСИзменившемсяСатусом.Заказ
	|ГДЕ
	|	ЗаказыСИзменившемсяСатусом.Заказ ЕСТЬ NULL ";
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Справочники.СтатусыОбработкиЗаказа.ПолныйВозврат);
	МассивСтатусов.Добавить(Справочники.СтатусыОбработкиЗаказа.Отменен);
	МассивСтатусов.Добавить(Справочники.СтатусыОбработкиЗаказа.Пробит);
	Запрос.УстановитьПараметр("СтатусыОбработкиЗаказа",МассивСтатусов);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат;
	КонецЕсли;
	ЗаказыТаблица = Результат.Выгрузить();
	МассивIDЗаказов = ЗаказыТаблица.ВыгрузитьКолонку("ID_77");
	МассивУсловий = РаботаСSQL.СформироватьУсловияДляIN(МассивIDЗаказов,1000);
	Для каждого Условие из МассивУсловий цикл
		ТекстЗапроса = 
		"SET NOCOUNT ON
		|SELECT TOP 10000 [IDDOC]
		|      ,[SP2967]
		|  FROM [Nagat].[dbo].[DH888]
		|WHERE [IDDOC] IN "+условие;
		Ошибка = "";
		ТабРез = РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапроса,Соединение,,Истина,Ошибка);
		Если ЗначениеЗаполнено(Ошибка) тогда
			Сообщить(Ошибка);
			Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,Формат(ТекущаяДата(),""));
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
		Для каждого строка из ТабРез цикл
			СтрокаТЗ = ЗаказыТаблица.Найти(Строка.IDDOC,"ID_77");
			СтатусЗаказаИз77 = Справочники.СтатусыОбработкиЗаказа.НайтиПоРеквизиту("ID_77",Строка.SP2967);
			Если СтрокаТЗ = неопределено или строкаТЗ.Ссылка = документы.Заказ.ПустаяСсылка() 
				или строкаТЗ.Ссылка.СтатусыОбработкиЗаказа = СтатусЗаказаИз77 тогда
				Продолжить;
			КонецЕсли;
			ТекущийСтатус = строкаТЗ.Ссылка.СтатусыОбработкиЗаказа.Ссылка;
			НачатьТранзакцию();
			Попытка
				ЗаказСсылка = строкаТЗ.Ссылка;
				Заказ = строкаТЗ.Ссылка.ПолучитьОбъект();
				Успешно = Ложь;
				Если ТекущийСтатус = Справочники.СтатусыОбработкиЗаказа.ОжидаетОбработкиМРК тогда
					Если СтатусЗаказаИз77 <> Справочники.СтатусыОбработкиЗаказа.Отменен тогда
						Если СтатусыДокументов.УстановитьСтатусСборкиЗаказа(ЗаказСсылка,Перечисления.ОснованияУстановкиСтатусаДокумента.ЗагрузкаДанныхИз77,Справочники.СтатусыОбработкиЗаказа.ЗаказВТочкеСамовывоза,,,Истина) тогда			
							Успешно = Истина;
						КонецЕсли;
					Иначе
						Если СтатусыДокументов.УстановитьСтатусАктуальностиЗаказа(ЗаказСсылка,Перечисления.ОснованияУстановкиСтатусаДокумента.ЗагрузкаДанныхИз77,Справочники.СтатусыАктуальностиЗаказов.Отменен,,,Истина) тогда
							Успешно = Истина;
						КонецЕсли;
					КонецЕсли;
					СтатусЗаказаИз77 = Справочники.СтатусыОбработкиЗаказа.ЗаказВТочкеСамовывоза;
				КонецЕсли;
				Заказ.СтатусыОбработкиЗаказа = СтатусЗаказаИз77;
				
				Заказ.Записать(РежимЗаписиДокумента.Проведение);
				Если Успешно тогда
					ЗафиксироватьТранзакцию();
				Иначе
					ОтменитьТранзакцию();
					ЕстьОшибки = Истина;
				КонецЕсли;
			Исключение
				ОтменитьТранзакцию();
				Справочники.Логи.ЗаписатьИзмененияВЛог(Лог,Формат(ТекущаяДата(),""));
				ЕстьОшибки = Истина;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	Попытка
		ОбновитьСрокиХраненияЗаказов();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция ВыгрузитьСтатусЗаказаВ1С77(НомерЗаказа,ДатаЗаказа,ID_77,СтатусыОбработкиЗаказаКод,СтатусыОбработкиЗаказаID_77,СтатусыОбработкиЗаказа,Автор,КодСклада,ДатаОплаты,ККМID_77,Соединение)
	
	НомерЗаказаДляЗапроса = сокрЛП(НомерЗаказа);
	Если 8-СтрДлина(НомерЗаказаДляЗапроса) > 0 Тогда 
		Для ит = 1 по 8 -СтрДлина(НомерЗаказаДляЗапроса) цикл
			НомерЗаказаДляЗапроса = " " + НомерЗаказаДляЗапроса;
		КонецЦикла;				
	КонецЕсли;
	СтатусОбработкиЗаказаКодДляЗапроса = ?(СтрДлина(СтатусыОбработкиЗаказаКод)= 1,"  "," ")+СтатусыОбработкиЗаказаКод;
	ДатаДляЗапроса = Формат(ДатаЗаказа,"ДФ='ггггММдд'");	
	ТекстЗапроса1 = 
	"IF not EXISTS(SELECT * From [CourierDS].[dbo].[t_status_zak_log] Where [docno] = '"+НомерЗаказаДляЗапроса
	+"' AND ([status] = ' 16' OR [status] ='"+СтатусОбработкиЗаказаКодДляЗапроса
	+"') and [d_doc] = '"+ДатаДляЗапроса+"')
	|	INSERT INTO [CourierDS].[dbo].[t_status_zak_log]
	|			   ([docno]
	|			   ,[d_doc]
	|			   ,[status]
	|			   ,[user_code]
	|			   ,[curr_time]
	|			   ,[code_sklad])
	|		 VALUES
	|			   ('"+НомерЗаказаДляЗапроса+"'
	|			   ,'"+ДатаДляЗапроса+"'
	|			   ,'"+СтатусОбработкиЗаказаКодДляЗапроса+"'
	|			   ,'"+Автор+"'
	|			   ,getdate()
	|			   ,"+КодСклада+")";
	Если СтатусыОбработкиЗаказа = Справочники.СтатусыОбработкиЗаказа.Отменен или СтатусыОбработкиЗаказа = Справочники.СтатусыОбработкиЗаказа.ЗаказВТочкеСамовывоза
		или СтатусыОбработкиЗаказа = Справочники.СтатусыОбработкиЗаказа.ОжидаетОбработкиМРК тогда
		ТекстЗапроса = 
		"UPDATE [Nagat].[dbo].[DH888]
		|   SET [SP2967] = '"+СтатусыОбработкиЗаказаID_77+"' --Статус обр заказа
		| WHERE [IDDOC] = '"+ID_77+"'";
	ИначеЕсли  СтатусыОбработкиЗаказа = Справочники.СтатусыОбработкиЗаказа.Собран тогда
		ТекстЗапроса = 
		"UPDATE [Nagat].[dbo].[DH888]
		|   SET [SP2967] = '"+СтатусыОбработкиЗаказаID_77+"' --Статус обр заказа
		|	,[SP893] = 1 --Собран
		| WHERE [IDDOC] = '"+ID_77+"'";
	ИначеЕсли  СтатусыОбработкиЗаказа = Справочники.СтатусыОбработкиЗаказа.Пробит тогда
		ТекстЗапроса = 
		"UPDATE [Nagat].[dbo].[DH888]
		|   SET [SP2967] = '"+СтатусыОбработкиЗаказаID_77+"' --Статус обр заказа
		|	,[SP891] = 1 -- Пробит
		|   ,[SP1600] = '"+Формат(ДатаОплаты,"ДФ='гггг.ММ.дд ЧЧ:мм:сс'")+"'
		|   ,[SP896] = '"+ККМID_77+"'
		| WHERE [IDDOC] = '"+ID_77+"'";
	Иначе
		Возврат "Неизвестный статус";
	КонецЕсли;
	Ошибка = "";
	РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапроса,Соединение,,,Ошибка);
	РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапроса1,Соединение,,,Ошибка);
	Возврат Ошибка;
КонецФункции
//Процедура СнятиеРезерваПоОтмененнымЗаданиямРегламентное() Экспорт
//	
//	СборкаИКомплектацияСамовывозовАлгоритмы.СнятиеРезерваПоОтмененнымЗаказам();
//	
//КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
/// Модуль содержит функции работы механизма "Связей объектов по условиям"
/// 


/////////////////////////////////////////////////////////////////////////////////
/// ОСНОВНОЙ ИНТЕРФЕЙС МЕХАНИЗМА СВЯЗЕЙ
/////////////////////////////////////////////////////////////////////////////////

// Функция - Получить таблицу объектов связанных с "объектом-источником условий"
//        Функция является основной интерфейсной функцией механизма "Связей".
//        Задачей функции является найти в БД объекты (определенного вида), связанные с объектом-источником по условиям,
//        заданным и описанным механизмом "Связей".
//
// Параметры:
//  ВидОбъектаРезультата							 - СправочникСсылка.ВидыОбъектовМ - описатель вида объектов-результата, поиск будет производиться среди объектов заданного вида
//  ОбъектИсточникУсловий							 - Ссылка или Объект - объект или ссылка на объект, который служит источником условий для поиска
//                                                                         если задана Ссылка, то условия будут определяться запросом из БД
//                                                                         если задан Объект, то условия будут определяться текущим состоянием объекта, т.е. если объект не записан, то проверка условий будет производиться по новому состоянию объекта
//  ИсключитьОбъектыРезультатаПомеченныеНаУдаление	 - Булево - если Истина, то из результата будут исключены объекты, помеченные на удаление
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица содержит ссылки на объекты-результата, для которых условия связи оказались истинными 
//                       колонки таблицы:
//                       * ПолеОбъектаРезультата - ссылка на объект-результат
//
Функция ПолучитьТаблицуОбъектовСвязанныхСОбъектомИсточникомУсловий( ВидОбъектаРезультата, ОбъектИсточникУсловий, ИсключитьОбъектыРезультатаПомеченныеНаУдаление = Ложь ) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	// получим запрос
	Запрос = ПолучитьЗапросПоискаОбъектовСвязанныхСОбъектомИсточникомУсловий( ВидОбъектаРезультата, ОбъектИсточникУсловий, ИсключитьОбъектыРезультатаПомеченныеНаУдаление );
	
	Если Запрос = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// выполним запрос и вернем его результат в виде таблицы
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция - Получить запрос поиска объектов связанных с "объектом-источником условий"
//        Функция является основной интерфейсной функцией механизма "Связей".
//        Задачей функции является формирование Запроса, результатом выполнения которого будут объекты (определенного вида), связанные с объектом-источником по условиям,
//        заданным и описанным механизмом "Связей".
//
// Параметры:
//  ВидОбъектаРезультата							 - СправочникСсылка.ВидыОбъектовМ - описатель вида объектов-результата, поиск будет производиться среди объектов заданного вида
//  ОбъектИсточникУсловий							 - Ссылка или Объект - объект или ссылка на объект, который служит источником условий для поиска
//                                                                         если задана Ссылка, то условия будут определяться запросом из БД
//                                                                         если задан Объект, то условия будут определяться текущим состоянием объекта, т.е. если объект не записан, то проверка условий будет производиться по новому состоянию объекта
//  ИсключитьОбъектыРезультатаПомеченныеНаУдаление	 - Булево - если Истина, то из результата будут исключены объекты, помеченные на удаление
// 
// Возвращаемое значение:
//   - Запрос - готовый запрос (с установленным текстом и параметрами)
//              результатом выполнения этого запроса будем выборка объектов-результата, для которых условия связи оказались истинными
//              Поля запроса:
//              * ПолеОбъектаРезультата - ссылка на объект-результат
//
Функция ПолучитьЗапросПоискаОбъектовСвязанныхСОбъектомИсточникомУсловий( ВидОбъектаРезультата, ОбъектИсточникУсловий, ИсключитьОбъектыРезультатаПомеченныеНаУдаление = Ложь ) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	// определим вид объекта для объекта-источника
	ВидОбъектаИсточникаУсловий = СвязиИОтборы_Привилегированный.ПолучитьСсылкуВидаОбъектаМПоОбъекту( ОбъектИсточникУсловий.Ссылка );
	
	Если ВидОбъектаИсточникаУсловий = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// проверим, есть ли вообще настройки связи по ВидОбъектаИсточникаУсловий
	Если Не ЕстьОписаниеСвязейМеждуИскомымОбъектомИОбъектомИсточникомУсловий( ВидОбъектаРезультата, ВидОбъектаИсточникаУсловий ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// получим таблицу успешных условий отбора для объекта-источника
	ТаблицаУспешныхУсловийОтбора = ПолучитьТаблицуУспешныхУсловийОтбораДляОбъектаИсточникаУсловий( ОбъектИсточникУсловий, ВидОбъектаИсточникаУсловий );
	
	Если ТаблицаУспешныхУсловийОтбора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// настроем запрос и вернем его в качестве результата
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаВыборкиСпискаОбъектов( ИсключитьОбъектыРезультатаПомеченныеНаУдаление, СвязиИОтборы_Привилегированный.ПолучитьПолноеИмяМетаданныхПоВидуОбъектаМ( ВидОбъектаРезультата ) );
	Запрос.УстановитьПараметр( "ВидОбъектаРезультатаСвязи", ВидОбъектаРезультата );
	Запрос.УстановитьПараметр( "ВидОбъектаИсточникаУсловийСвязи", ВидОбъектаИсточникаУсловий );
	Запрос.УстановитьПараметр( "УспешныеУсловияОтбора", ТаблицаУспешныхУсловийОтбора.ВыгрузитьКолонку( "ЭлементСправочника_УсловияОтбора" ) );
	
	Возврат Запрос;
	
КонецФункции

// Функция - Получить таблицу объектов связанных с "объектом-источником условий" с номерами строк объекта-источника
//        Функция является основной интерфейсной функцией механизма "Связей".
//        Задачей функции является найти в БД объекты (определенного вида), связанные с объектом-источником по условиям,
//        заданным и описанным механизмом "Связей".
//        Функция во всем аналогична функции ПолучитьТаблицуОбъектовСвязанныхСОбъектомИсточникомУсловий,
//        однако помимо объекта-результата функция возвращает также номер строки объекта-источника, с которой связан объект-результат
//
// Параметры:
//  ВидОбъектаРезультата							 - СправочникСсылка.ВидыОбъектовМ - описатель вида объектов-результата, поиск будет производиться среди объектов заданного вида
//  ОбъектИсточникУсловий							 - Ссылка или Объект - объект или ссылка на объект, который служит источником условий для поиска
//                                                                         если задана Ссылка, то условия будут определяться запросом из БД
//                                                                         если задан Объект, то условия будут определяться текущим состоянием объекта, т.е. если объект не записан, то проверка условий будет производиться по новому состоянию объекта
//  СтруктураТабЧастейДляНомеровСтрок				 - Структура - в ключах структуры должны содержаться имена таб. частей объекта-источника, номера строк в которых требуется получить
//  ИсключитьОбъектыРезультатаПомеченныеНаУдаление	 - Булево - если Истина, то из результата будут исключены объекты, помеченные на удаление
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица содержит ссылки на объекты-результата, для которых условия связи оказались истинными 
//                       колонки таблицы:
//                       * ПолеОбъектаРезультата - ссылка на объект-результат
//                       * ИмяТабЧасти - имя таб. части объекта-источника
//                       * НомерСтроки - номер строки в таб. части объекта-источника
//
Функция ПолучитьТаблицуОбъектовСвязанныхСОбъектомИсточникомУсловийСНомерамиСтрокОбъектаИсточника( ВидОбъектаРезультата, ОбъектИсточникУсловий, СтруктураТабЧастейДляНомеровСтрок = Неопределено, ИсключитьОбъектыРезультатаПомеченныеНаУдаление = Ложь ) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	// получим запрос
	Запрос = ПолучитьЗапросПоискаОбъектовСвязанныхСОбъектомИсточникомУсловийСНомерамиСтрокОбъектаИсточника( ВидОбъектаРезультата, ОбъектИсточникУсловий, СтруктураТабЧастейДляНомеровСтрок, ИсключитьОбъектыРезультатаПомеченныеНаУдаление );
	
	Если Запрос = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// выполним запрос и вернем его результат в виде таблицы
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция - Получить запрос поиска объектов связанных с "объектом-источником условий" с номерами строк объекта-источника
//        Функция является основной интерфейсной функцией механизма "Связей".
//        Задачей функции является формирование Запроса, результатом выполнения которого будут объекты (определенного вида), связанные с объектом-источником по условиям,
//        заданным и описанным механизмом "Связей".
//        Функция во всем аналогична функции ПолучитьЗапросПоискаОбъектовСвязанныхСОбъектомИсточникомУсловий,
//        однако помимо объекта-результата функция возвращает также номер строки объекта-источника, с которой связан объект-результат
//
// Параметры:
//  ВидОбъектаРезультата							 - СправочникСсылка.ВидыОбъектовМ - описатель вида объектов-результата, поиск будет производиться среди объектов заданного вида
//  ОбъектИсточникУсловий							 - Ссылка или Объект - объект или ссылка на объект, который служит источником условий для поиска
//                                                                         если задана Ссылка, то условия будут определяться запросом из БД
//                                                                         если задан Объект, то условия будут определяться текущим состоянием объекта, т.е. если объект не записан, то проверка условий будет производиться по новому состоянию объекта
//  СтруктураТабЧастейДляНомеровСтрок				 - Структура - в ключах структуры должны содержаться имена таб. частей объекта-источника, номера строк в которых требуется получить
//  ИсключитьОбъектыРезультатаПомеченныеНаУдаление	 - Булево - если Истина, то из результата будут исключены объекты, помеченные на удаление
// 
// Возвращаемое значение:
//   - Запрос - готовый запрос (с установленным текстом и параметрами)
//              результатом выполнения этого запроса будем выборка объектов-результата, для которых условия связи оказались истинными
//              Поля запроса:
//              * ПолеОбъектаРезультата - ссылка на объект-результат
//              * ИмяТабЧасти - имя таб. части объекта-источника
//              * НомерСтроки - номер строки в таб. части объекта-источника
//
Функция ПолучитьЗапросПоискаОбъектовСвязанныхСОбъектомИсточникомУсловийСНомерамиСтрокОбъектаИсточника( ВидОбъектаРезультата, ОбъектИсточникУсловий, СтруктураТабЧастейДляНомеровСтрок = Неопределено, ИсключитьОбъектыРезультатаПомеченныеНаУдаление = Ложь ) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	// определим вид объекта для объекта-источника
	ВидОбъектаИсточникаУсловий = СвязиИОтборы_Привилегированный.ПолучитьСсылкуВидаОбъектаМПоОбъекту( ОбъектИсточникУсловий.Ссылка );
	
	Если ВидОбъектаИсточникаУсловий = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// проверим, есть ли вообще настройки связи по ВидОбъектаИсточникаУсловий
	Если Не ЕстьОписаниеСвязейМеждуИскомымОбъектомИОбъектомИсточникомУсловий( ВидОбъектаРезультата, ВидОбъектаИсточникаУсловий ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// получим таблицу успешных условий отбора для объекта-источника
	ТаблицаУспешныхУсловийОтбора = ПолучитьТаблицуУспешныхУсловийОтбораДляОбъектаИсточникаУсловий( ОбъектИсточникУсловий, ВидОбъектаИсточникаУсловий, Истина, СтруктураТабЧастейДляНомеровСтрок );
	
	Если ТаблицаУспешныхУсловийОтбора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// настроем запрос и вернем его в качестве результата
	ТекстЗапроса = ПолучитьТекстЗапросаВыборкиСпискаОбъектовСНомерамиСтрокОбъектаИсточникаУсловий( ВидОбъектаИсточникаУсловий, СтруктураТабЧастейДляНомеровСтрок, ИсключитьОбъектыРезультатаПомеченныеНаУдаление, СвязиИОтборы_Привилегированный.ПолучитьПолноеИмяМетаданныхПоВидуОбъектаМ( ВидОбъектаРезультата ) );
	
	Если ТекстЗапроса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр( "ВидОбъектаРезультатаСвязи", ВидОбъектаРезультата );
	Запрос.УстановитьПараметр( "ВидОбъектаИсточникаУсловийСвязи", ВидОбъектаИсточникаУсловий );
	Запрос.УстановитьПараметр( "ТаблицаУспешныхУсловийОтбора", ТаблицаУспешныхУсловийОтбора );
	
	Возврат Запрос;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////
/// ДОПОЛНИТЕЛЬНЫЕ ФУНКЦИИ РАБОТЫ С МЕХАНИЗМОМ СВЯЗЕЙ
/////////////////////////////////////////////////////////////////////////////////

// Функция - Есть описание связей между искомым объектом и "объектом-источником условий"
//        Функция определяет наличие в БД описаний связи между объектами определенного вида
//
// Параметры:
//  ВидОбъектаРезультата		 - СправочникСсылка.ВидыОбъектовМ - описатель вида объектов-результата
//  ВидОбъектаИсточникаУсловий	 - СправочникСсылка.ВидыОбъектовМ - описатель вида объектов-источника
// 
// Возвращаемое значение:
//   - Булево - Истина, если в базе есть хотя бы одно описание связи между видом объекта-результата и видом объекта-источника
//
Функция ЕстьОписаниеСвязейМеждуИскомымОбъектомИОбъектомИсточникомУсловий( ВидОбъектаРезультата, ВидОбъектаИсточникаУсловий ) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "ВидОбъектаРезультатаСвязи", ВидОбъектаРезультата );
	Запрос.УстановитьПараметр( "ВидОбъектаИсточникаУсловийСвязи", ВидОбъектаИсточникаУсловий );
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОписанияСвязейОбъектовУсловияСвязи.Ссылка
	|ИЗ
	|	Справочник.ОписанияСвязейОбъектов.УсловияСвязи КАК ОписанияСвязейОбъектовУсловияСвязи
	|ГДЕ
	|	ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ВидОбъектаРезультатаСвязи = &ВидОбъектаРезультатаСвязи
	|	И ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ВидОбъектаИсточникаУсловийСвязи = &ВидОбъектаИсточникаУсловийСвязи";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция - Получить таблицу успешных условий отбора для "объекта-источника условий"
//        Функция возвращает список элементов справочника "Условия отбора" в виде таблицы,
//        в которых заданные условия являются истинными для объекта-источника.
//        Также функция может возвращать номера строк таб. частей объекта-источника, для которых условия являются истинными.
//
// Параметры:
//  ОбъектИсточникУсловий						 - Ссылка или Объект - объект или ссылка на объект, который служит источником проверяемых условий
//                                                                     если задана Ссылка, то условия будут определяться запросом из БД
//                                                                     если задан Объект, то условия будут определяться текущим состоянием объекта, т.е. если объект не записан, то проверка условий будет производиться по новому состоянию объекта
//  ВидОбъектаИсточникаУсловий	                 - СправочникСсылка.ВидыОбъектовМ, Неопределено - описатель вида объекта-источника, если не задан, то будет автоматически определен по ОбъектИсточникУсловий
//  ПолучитьНомераСтрокТабЧастейОбъектаИсточника - Булево - признак необходимости получить номера строк таб. частей объекта-источника
//  СтруктураТабЧастейДляНомеровСтрок			 - Структура, Неопределено - структура, ключи которой содержат имена таб. частей, для которых требуется получать номера строк,
//                                                                           имеет смысл только для ПолучитьНомераСтрокТабЧастейОбъектаИсточника = Истина
//                                                                           если не задана и ПолучитьНомераСтрокТабЧастейОбъектаИсточника = Истина, то будут возвращены номера строк всех таб. частей
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица, содержащая успешные Условия отбора
//                       Колонки таблицы:
//                       * ЭлементСправочника_УсловияОтбора - ссылка элемента справочника "Условия отбора"
//                       * ИмяТабЧасти - имя таб. части объекта-источника
//                       * НомерСтроки - номер строки в таб. части объекта-источника
//
Функция ПолучитьТаблицуУспешныхУсловийОтбораДляОбъектаИсточникаУсловий( ОбъектИсточникУсловий, Знач ВидОбъектаИсточникаУсловий = Неопределено, ПолучитьНомераСтрокТабЧастейОбъектаИсточника = Ложь, СтруктураТабЧастейДляНомеровСтрок = Неопределено ) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	// определим вид объекта-источника, если он не задан
	Если ВидОбъектаИсточникаУсловий = Неопределено Тогда
	
		ВидОбъектаИсточникаУсловий = СвязиИОтборы_Привилегированный.ПолучитьСсылкуВидаОбъектаМПоОбъекту( ОбъектИсточникУсловий.Ссылка );
		
		Если ВидОбъектаИсточникаУсловий = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// определим - объект-источник это ссылка или объект
	ТипСсылкиОбъектаИсточникаУсловий =  СвязиИОтборы_Привилегированный.ПолучитьТипПоВидуОбъектаМ( ВидОбъектаИсточникаУсловий );
	
	Если ТипСсылкиОбъектаИсточникаУсловий = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектИсточник_ЭтоСсылка = ( ТипЗнч( ОбъектИсточникУсловий ) = ТипСсылкиОбъектаИсточникаУсловий );
	
	// обратимся к привилегированной процедуре получения успешных условий отбора
	// проинициализировав ее параметры в зависимости от типа объета
	Если ОбъектИсточник_ЭтоСсылка Тогда
		
		Возврат СвязиИОтборы_Привилегированный.ПолучитьТаблицуУспешныхУсловийОтбораДляОбъектаИсточникаУсловий( ВидОбъектаИсточникаУсловий, ОбъектИсточникУсловий, , ПолучитьНомераСтрокТабЧастейОбъектаИсточника, СтруктураТабЧастейДляНомеровСтрок );
		
	Иначе
		
		СтруктураВнешнихИсточниковДанных = СформироватьИЗаполнитьСтруктуруВнешнихИсточниковПоОбъекту( ОбъектИсточникУсловий, ВидОбъектаИсточникаУсловий );
		
		Возврат СвязиИОтборы_Привилегированный.ПолучитьТаблицуУспешныхУсловийОтбораДляОбъектаИсточникаУсловий( ВидОбъектаИсточникаУсловий, , СтруктураВнешнихИсточниковДанных, ПолучитьНомераСтрокТабЧастейОбъектаИсточника, СтруктураТабЧастейДляНомеровСтрок );
		
	КонецЕсли;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////
/// ПРОЧИЕ/ВНУТРЕННИЕ ФУНКЦИИ РАБОТЫ С МЕХАНИЗМОМ СВЯЗЕЙ
/////////////////////////////////////////////////////////////////////////////////

// Функция - Сформировать схему компоновки данных по виду объекта-источника условий, набор данных "запрос"
//        Внутренняя функция механизма "Связей".
//        Функция формирует схему компоновки данных (СКД), настроенную для поиска успешных "Условий отбора"
//        СКД настраивается под заданный вид объекта-источника,
//        причем таким образом, что источником данных для СКД служит Запрос, а выбор объекта-источника осуществляется через отбор по полю "Ссылка"
//
// Параметры:
//  ВидОбъектаИсточникаУсловий	 	 - СправочникСсылка.ВидыОбъектовМ - описатель вида объектов-источника
//  ВключитьОтборПоПолюУсловиеОтбора - Булево - системный параметр, добавляющий в настройку СКД отбор по полям "Условий отбора"
//                                              устанавливается в Истина при использовании СКД непосредственно для поиска,
//                                              при визуализации СКД рекомендуется оставлять значение Ложь
// 
// Возвращаемое значение:
//   - СхемаКомпоновкиДанных - настроенная СКД
//
Функция СформироватьСхемуКомпоновкиДанныхПоВидуОбъектаИсточникаУсловий_НаборДанныхЗапрос( ВидОбъектаИсточникаУсловий, ВключитьОтборПоПолюУсловиеОтбора = Ложь ) Экспорт
	
	// схема, где НаборомДанных выступает запрос строиться таким образом,
	// что весь запрос к объекту делается в одном наборе данных
	// отдельными наборами присоединяются запросы из справочника дополнений
	
	// получаем структуру внешних источников данных
	// по структуре будем заполнять Поля и НаборыДанных у схемы компоновки
	СтруктураВнешнихИсточниковДанных = СвязиИОтборы_Привилегированный.СформироватьСтруктуруВнешнихИсточниковДанныхПоВидуОбъекта( ВидОбъектаИсточникаУсловий );
	
	ПолноеИмяМетаданного = Перечисления.ТипыОбъектовМ.ПолучитьКоллекциюМетаданныхПоТипуОбъектаМ( ВидОбъектаИсточникаУсловий.ТипОбъекта )[ ВидОбъектаИсточникаУсловий.Идентификатор ].ПолноеИмя();
	
	ИмяСтруктурыШапкиОбъекта = "ТаблицаШапкаОбъекта";
	ИмяСтруктурыСинонимовТЧ = "СинонимыТабличныхЧастей";
	
	СтруктураСинонимовТЧ = СтруктураВнешнихИсточниковДанных[ ИмяСтруктурыСинонимовТЧ ];
	ТаблицаШапки = СтруктураВнешнихИсточниковДанных[ ИмяСтруктурыШапкиОбъекта ];
	
	// получим базовую схему компоновки данных
	СхемаКомпоновкиДанных = Справочники.УсловияОтбора.ПолучитьМакет( "БазоваяСхемаКомпоновкиДанных" );
	
	// в базовой схеме есть НаборДанных с именем шапки объекта
	// поскольку этот НаборДанных будет добавлен с нужным типом в ходе разбора, из структуры имеющийся надо удалить
	СхемаКомпоновкиДанных.НаборыДанных.Удалить( СхемаКомпоновкиДанных.НаборыДанных[ ИмяСтруктурыШапкиОбъекта ] );
	
	// создадим НаборДанныхЗапрос для объекта
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить( Тип( "НаборДанныхЗапросСхемыКомпоновкиДанных" ) );
	
	НаборДанных.Имя = ИмяСтруктурыШапкиОбъекта;
	НаборДанных.ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Получить(0).Имя;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	// подготовим слагаемые для построения запроса
	ТекстЗапроса_ВременныеТаблицы = "";
	ТекстЗапроса_Поля = "";
	ТекстЗапроса_Соединения = "";
	
	// подготовим текст запроса временной таблицы
	ТекстЗапроса_ВрТаб = "";
	
	// теперь опишем поля шапки
	Для Каждого ОписаниеПоля Из ТаблицаШапки.Колонки Цикл
		
		// добавим поле в основной текст запроса
		Если ТекстЗапроса_Поля = "" Тогда
			ТекстЗапроса_Поля =
			"ВЫБРАТЬ
			|	";
		Иначе
			ТекстЗапроса_Поля = ТекстЗапроса_Поля + ",
			|	";
		КонецЕсли;
		
		ТекстЗапроса_Поля = ТекстЗапроса_Поля + ИмяСтруктурыШапкиОбъекта + "." + ОписаниеПоля.Имя + " КАК " + ОписаниеПоля.Имя;
		
		// добавим поле в текст запроса временной таблицы
		Если ТекстЗапроса_ВрТаб = "" Тогда
			ТекстЗапроса_ВрТаб =
			"ВЫБРАТЬ
			|	";
		Иначе
			ТекстЗапроса_ВрТаб = ТекстЗапроса_ВрТаб + ",
			|	";
		КонецЕсли;
		
		ТекстЗапроса_ВрТаб = ТекстЗапроса_ВрТаб + ОписаниеПоля.Имя + " КАК " + ОписаниеПоля.Имя;
		
		// добавим описание поля в набор данных
		ПолеНабораДанных = НаборДанных.Поля.Добавить( Тип( "ПолеНабораДанныхСхемыКомпоновкиДанных" ) );
		
		ПолеНабораДанных.Поле = ОписаниеПоля.Имя;
		ПолеНабораДанных.ПутьКДанным = ОписаниеПоля.Имя;
		ПолеНабораДанных.Заголовок = ОписаниеПоля.Заголовок;
		
	КонецЦикла;
	
	// дополним текст запроса временных таблиц
	ТекстЗапроса_ВременныеТаблицы = ТекстЗапроса_ВременныеТаблицы + ТекстЗапроса_ВрТаб + "
	|ПОМЕСТИТЬ " + ИмяСтруктурыШапкиОбъекта + "
	|ИЗ " + ПолноеИмяМетаданного + " КАК " + ИмяСтруктурыШапкиОбъекта + "
	|{ГДЕ
	|	Ссылка.* КАК Ссылка}
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	// теперь опишем поля всех ТЧ
	Для Каждого КлючИЗначение Из СтруктураСинонимовТЧ Цикл
		
		ИмяТЧ = КлючИЗначение.Ключ;
		СинонимТЧ = КлючИЗначение.Значение;
		
		// поля табличных честей для удобства отображения собираются в папки
		ПолеНабораДанных = НаборДанных.Поля.Добавить( Тип( "ПапкаПолейНабораДанныхСхемыКомпоновкиДанных" ) );
		ПолеНабораДанных.ПутьКДанным = ИмяТЧ;
		ПолеНабораДанных.Заголовок = СинонимТЧ;
		
		// подготовим текст запроса временной таблицы
		ТекстЗапроса_ВрТаб = "";
		
		// обойдем все поля ТЧ
		Для Каждого ОписаниеПоля Из СтруктураВнешнихИсточниковДанных[ ИмяТЧ ].Колонки Цикл
			
			// добавим поле в текст запроса временной таблицы
			Если ТекстЗапроса_ВрТаб = "" Тогда
				ТекстЗапроса_ВрТаб =
				"ВЫБРАТЬ
				|	";
			Иначе
				ТекстЗапроса_ВрТаб = ТекстЗапроса_ВрТаб + ",
				|	";
			КонецЕсли;
			
			ТекстЗапроса_ВрТаб = ТекстЗапроса_ВрТаб + ОписаниеПоля.Имя + " КАК " + ОписаниеПоля.Имя;
			
			// в основной запрос Ссылка попадает только из шапки, потому проверка
			Если ОписаниеПоля.Имя <> "Ссылка" Тогда
				
				// добавим поле в основней текст запроса
				ТекстЗапроса_Поля = ТекстЗапроса_Поля + ",
				|	" + ИмяТЧ + "." + ОписаниеПоля.Имя + " КАК " + ИмяТЧ + "__" + ОписаниеПоля.Имя;
				
				// добавим описание поля в набор данных
				ПолеНабораДанных = НаборДанных.Поля.Добавить( Тип( "ПолеНабораДанныхСхемыКомпоновкиДанных" ) );
				
				ПолеНабораДанных.Поле = ИмяТЧ + "__" + ОписаниеПоля.Имя;
				ПолеНабораДанных.ПутьКДанным = ИмяТЧ + "." + ИмяТЧ + "__" + ОписаниеПоля.Имя;
				ПолеНабораДанных.Заголовок = СинонимТЧ + "." + ОписаниеПоля.Заголовок;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// дополним текст запроса временных таблиц
		ТекстЗапроса_ВременныеТаблицы = ТекстЗапроса_ВременныеТаблицы + ТекстЗапроса_ВрТаб + "
		|ПОМЕСТИТЬ " + ИмяТЧ + "
		|ИЗ " + ПолноеИмяМетаданного + "." + ИмяТЧ + " КАК " + ИмяТЧ + "
		|{ГДЕ
		|	Ссылка.* КАК Ссылка}
		|
		|;
		|/////////////////////////////////////////////////////////////////////////////
		|";		
		
		// дополним текст соединения
		ТекстЗапроса_Соединения = ТекстЗапроса_Соединения +
		"	ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТЧ + " КАК " + ИмяТЧ + "
		|		ПО " + ИмяСтруктурыШапкиОбъекта + ".Ссылка = " + ИмяТЧ + ".Ссылка
		|";
		
	КонецЦикла;
	
	// после описания полей сформируем полный текст запроса для НабораДанных
	НаборДанных.Запрос = ТекстЗапроса_ВременныеТаблицы + ТекстЗапроса_Поля + "
	|ИЗ " + ИмяСтруктурыШапкиОбъекта + " КАК " + ИмяСтруктурыШапкиОбъекта + "
	|" + ТекстЗапроса_Соединения;
	
	// дополним схему наборами данных из справочника Дополнений
	
	// для начала найдем активные дополнения
	ПакетРезультатов = СвязиИОтборы_Привилегированный.ПолучитьРезультатПакетаЗапросовПоДополнениямУсловийОтбора( ВидОбъектаИсточникаУсловий );
	
	// выполним обход дополнений
	ВыборкаДополнений = ПакетРезультатов[3].Выбрать();
	ВыборкаПолей = ПакетРезультатов[4].Выбрать();
	ВыборкаНастроекСвязи = ПакетРезультатов[5].Выбрать();
	
	Пока ВыборкаДополнений.Следующий() Цикл
		
		// для каждого дополнения создадим набор данных 
		НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить( Тип( "НаборДанныхЗапросСхемыКомпоновкиДанных" ) );
		НаборДанных.ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Получить(0).Имя;
		НаборДанных.Запрос = ВыборкаДополнений.ТекстЗапроса;
		НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
		НаборДанных.Имя = ВыборкаДополнений.ИмяНабораДанных;
		
		// а также группу полей
		ПолеНабораДанных = НаборДанных.Поля.Добавить( Тип( "ПапкаПолейНабораДанныхСхемыКомпоновкиДанных" ) );
		ПолеНабораДанных.ПутьКДанным = ВыборкаДополнений.ИмяНабораДанных;
		ПолеНабораДанных.Заголовок = ВыборкаДополнений.Заголовок;
		
		// выполним обход полей дополнения
		ВыборкаПолей.Сбросить();
		
		Пока ВыборкаПолей.НайтиСледующий( ВыборкаДополнений.Ссылка, "Ссылка" ) Цикл
			
			// создадим и заполним поле
			ПолеНабораДанных = НаборДанных.Поля.Добавить( Тип( "ПолеНабораДанныхСхемыКомпоновкиДанных" ) );
			ПолеНабораДанных.Поле = ВыборкаПолей.Поле;
			ПолеНабораДанных.ПутьКДанным = ВыборкаПолей.ПутьКДанным;
			ПолеНабораДанных.Заголовок = ВыборкаПолей.Заголовок;
			
		КонецЦикла;
		
		// выполним обход настроек связи
		ВыборкаНастроекСвязи.Сбросить();
		
		Пока ВыборкаНастроекСвязи.НайтиСледующий( ВыборкаДополнений.Ссылка, "Ссылка" ) Цикл
			
			// добавим связь с НаборомДанных шапки объекта
			СвязьНаборовДанных = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
			СвязьНаборовДанных.НаборДанныхПриемник = НаборДанных.Имя;
			СвязьНаборовДанных.ВыражениеИсточник = ВыборкаНастроекСвязи.ВыражениеИсточник;
			СвязьНаборовДанных.ВыражениеПриемник = ВыборкаНастроекСвязи.ВыражениеПриемник;
			СвязьНаборовДанных.Параметр = ВыборкаНастроекСвязи.Параметр;
			СвязьНаборовДанных.УсловиеСвязи = ВыборкаНастроекСвязи.УсловиеСвязи;
			СвязьНаборовДанных.Обязательная = Истина;
			
			// для схемы, где набором данных служит запрос Источником связи всегда выступает таблица шапки
			СвязьНаборовДанных.НаборДанныхИсточник = ИмяСтруктурыШапкиОбъекта;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// снимем ограничение на отбор по полю Условие Отбора
	Если ВключитьОтборПоПолюУсловиеОтбора = Истина Тогда
		
		ПолеУсловиеОтбора = СхемаКомпоновкиДанных.НаборыДанных[ "ТаблицаУсловийОтбора" ].Поля.Найти( "ЭлементСправочника_УсловияОтбора" );
		ПолеУсловиеОтбора.ОграничениеИспользования.Условие = Ложь;
		ПолеУсловиеОтбора.ОграничениеИспользованияРеквизитов.Условие = Ложь;
		
		ПолеУсловиеОтбораВидОбъекта = СхемаКомпоновкиДанных.НаборыДанных[ "ТаблицаУсловийОтбора" ].Поля.Найти( "ЭлементСправочника_УсловияОтбора_ВидОбъекта" );
		ПолеУсловиеОтбораВидОбъекта.ОграничениеИспользования.Условие = Ложь;
		ПолеУсловиеОтбораВидОбъекта.ОграничениеИспользованияРеквизитов.Условие = Ложь;
		
	КонецЕсли;
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

// Функция - Сформировать схему компоновки данных по виду объекта-источника условий, набор данных "объект"
//        Внутренняя функция механизма "Связей".
//        Функция формирует схему компоновки данных (СКД), настроенную для поиска успешных "Условий отбора"
//        СКД настраивается под заданный вид объекта-источника,
//        причем таким образом, что источником данных для СКД служит Объект, загруженный в стуктуру внешних источников данных,
//        созданную при помощи функции СформироватьИЗаполнитьСтруктуруВнешнихИсточниковПоОбъекту 
//
// Параметры:
//  ВидОбъектаИсточникаУсловий	 	 - СправочникСсылка.ВидыОбъектовМ - описатель вида объектов-источника
//  ВключитьОтборПоПолюУсловиеОтбора - Булево - системный параметр, добавляющий в настройку СКД отбор по полям "Условий отбора"
//                                              устанавливается в Истина при использовании СКД непосредственно для поиска,
//                                              при визуализации СКД рекомендуется оставлять значение Ложь
// 
// Возвращаемое значение:
//   - СхемаКомпоновкиДанных - настроенная СКД
//
Функция СформироватьСхемуКомпоновкиДанныхПоВидуОбъектаИсточникаУсловий_НаборДанныхОбъект( ВидОбъектаИсточникаУсловий, ВключитьОтборПоПолюУсловиеОтбора = Ложь ) Экспорт
	
	// Схема где источником данных служит объект
	// строиться таким образом, что каждая ТЧ собирается в отдельном НабореДанных
	
	// получаем структуру внешних источников данных
	// по структуре будем заполнять Поля и НаборыДанных у схемы компоновки
	СтруктураВнешнихИсточниковДанных = СвязиИОтборы_Привилегированный.СформироватьСтруктуруВнешнихИсточниковДанныхПоВидуОбъекта( ВидОбъектаИсточникаУсловий );
	
	Если СтруктураВнешнихИсточниковДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПолноеИмяМетаданного = Перечисления.ТипыОбъектовМ.ПолучитьКоллекциюМетаданныхПоТипуОбъектаМ( ВидОбъектаИсточникаУсловий.ТипОбъекта )[ ВидОбъектаИсточникаУсловий.Идентификатор ].ПолноеИмя();
	
	ИмяСтруктурыШапкиОбъекта = "ТаблицаШапкаОбъекта";
	ИмяСтруктурыСинонимовТЧ = "СинонимыТабличныхЧастей";
	
	СтруктураСинонимовТЧ = СтруктураВнешнихИсточниковДанных[ ИмяСтруктурыСинонимовТЧ ];
	
	// получим базовую схему компоновки данных
	СхемаКомпоновкиДанных = Справочники.УсловияОтбора.ПолучитьМакет( "БазоваяСхемаКомпоновкиДанных" );
	
	// в базовой схеме есть НаборДанных с именем шапки объекта
	// поскольку этот НаборДанных будет добавлен с нужным типом в ходе разбора структуры имеющийся надо удалить
	СхемаКомпоновкиДанных.НаборыДанных.Удалить( СхемаКомпоновкиДанных.НаборыДанных[ ИмяСтруктурыШапкиОбъекта ] );
	
	// обходим СтруктуруВнешнихИсточниковДанных
	Для Каждого КлючИЗначение Из СтруктураВнешнихИсточниковДанных Цикл
		
		// структуру с синонимами ТЧ пропускаем
		Если КлючИЗначение.Ключ = ИмяСтруктурыСинонимовТЧ Тогда
			Продолжить;
		КонецЕсли;
		
		// добавляем НаборДанных
		НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить( Тип( "НаборДанныхОбъектСхемыКомпоновкиДанных" ) );
		
		// заполняем сведения НабораДанных в соответствии с типом
		НаборДанных.Имя = КлючИЗначение.Ключ;
		НаборДанных.ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Получить(0).Имя;
		НаборДанных.ИмяОбъекта = КлючИЗначение.Ключ;
		
		// поля для Шапки и ТЧ формируются немножко по разному, подготовим эти различия
		Если КлючИЗначение.Ключ = ИмяСтруктурыШапкиОбъекта Тогда
			
			ПолеДополнение = "";
			ПутьКДаннымДополнение = "";
			ЗаголовокДополнение = "";
			
		Иначе
			
			ПолеДополнение = КлючИЗначение.Ключ + "__";
			ПутьКДаннымДополнение = КлючИЗначение.Ключ + "." + КлючИЗначение.Ключ + "__";
			ЗаголовокДополнение = СтруктураСинонимовТЧ[ КлючИЗначение.Ключ ] + ".";
			
			// поля табличных честей для удобства отображения собираются в папки
			ПолеНабораДанных = НаборДанных.Поля.Добавить( Тип( "ПапкаПолейНабораДанныхСхемыКомпоновкиДанных" ) );
			ПолеНабораДанных.ПутьКДанным = КлючИЗначение.Ключ;
			ПолеНабораДанных.Заголовок = СтруктураСинонимовТЧ[ КлючИЗначение.Ключ ];
			
			// для табличных частей необходимо также описать связь с НаборомДанных шапки объекта
			СвязьНаборовДанных = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
			СвязьНаборовДанных.НаборДанныхИсточник = ИмяСтруктурыШапкиОбъекта;
			СвязьНаборовДанных.НаборДанныхПриемник = КлючИЗначение.Ключ;
			СвязьНаборовДанных.ВыражениеИсточник = "Ссылка";
			СвязьНаборовДанных.ВыражениеПриемник = ПутьКДаннымДополнение + "Ссылка";
			СвязьНаборовДанных.Обязательная = Истина;
			
		КонецЕсли;
		
		// описание полей набора данных беруться из Колонок таблицы внешнего источника данных
		Для Каждого ОписаниеПоля Из КлючИЗначение.Значение.Колонки Цикл
			
			// добавим описание поля в НаборДанных
			ПолеНабораДанных = НаборДанных.Поля.Добавить( Тип( "ПолеНабораДанныхСхемыКомпоновкиДанных" ) );
			
			ПолеНабораДанных.Поле = ПолеДополнение + ОписаниеПоля.Имя;
			ПолеНабораДанных.ПутьКДанным = ПутьКДаннымДополнение + ОписаниеПоля.Имя;
			ПолеНабораДанных.Заголовок = ЗаголовокДополнение + ОписаниеПоля.Заголовок;
			ПолеНабораДанных.ТипЗначения = ОписаниеПоля.ТипЗначения;
			
			// Для поле Ссылки из ТЧ органичим доступ к полю, чтобы отображение совпадало с НабормДанныхЗапрос
			Если ОписаниеПоля.Имя = "Ссылка" И КлючИЗначение.Ключ <> ИмяСтруктурыШапкиОбъекта Тогда
				ПолеНабораДанных.ОграничениеИспользования.Условие = Истина;
				ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Условие = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// дополним схему наборами данных из справочника Дополнений
	
	// для начала найдем активные дополнения
	ПакетРезультатов = СвязиИОтборы_Привилегированный.ПолучитьРезультатПакетаЗапросовПоДополнениямУсловийОтбора( ВидОбъектаИсточникаУсловий );
	
	// выполним обход дополнений
	ВыборкаДополнений = ПакетРезультатов[3].Выбрать();
	ВыборкаПолей = ПакетРезультатов[4].Выбрать();
	ВыборкаНастроекСвязи = ПакетРезультатов[5].Выбрать();
	
	Пока ВыборкаДополнений.Следующий() Цикл
		
		// для каждого дополнения создадим набор данных 
		НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить( Тип( "НаборДанныхЗапросСхемыКомпоновкиДанных" ) );
		НаборДанных.ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Получить(0).Имя;
		НаборДанных.Запрос = ВыборкаДополнений.ТекстЗапроса;
		НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
		НаборДанных.Имя = ВыборкаДополнений.ИмяНабораДанных;
		
		// а также группу полей
		ПолеНабораДанных = НаборДанных.Поля.Добавить( Тип( "ПапкаПолейНабораДанныхСхемыКомпоновкиДанных" ) );
		ПолеНабораДанных.ПутьКДанным = ВыборкаДополнений.ИмяНабораДанных;
		ПолеНабораДанных.Заголовок = ВыборкаДополнений.Заголовок;
		
		// выполним обход полей дополнения
		ВыборкаПолей.Сбросить();
		
		Пока ВыборкаПолей.НайтиСледующий( ВыборкаДополнений.Ссылка, "Ссылка" ) Цикл
			
			// создадим и заполним поле
			ПолеНабораДанных = НаборДанных.Поля.Добавить( Тип( "ПолеНабораДанныхСхемыКомпоновкиДанных" ) );
			ПолеНабораДанных.Поле = ВыборкаПолей.Поле;
			ПолеНабораДанных.ПутьКДанным = ВыборкаПолей.ПутьКДанным;
			ПолеНабораДанных.Заголовок = ВыборкаПолей.Заголовок;
			
		КонецЦикла;
		
		// выполним обход настроек связи
		ВыборкаНастроекСвязи.Сбросить();
		
		Пока ВыборкаНастроекСвязи.НайтиСледующий( ВыборкаДополнений.Ссылка, "Ссылка" ) Цикл
			
			// добавим связь с НаборомДанных шапки объекта
			СвязьНаборовДанных = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
			СвязьНаборовДанных.НаборДанныхПриемник = НаборДанных.Имя;
			СвязьНаборовДанных.ВыражениеИсточник = ВыборкаНастроекСвязи.ВыражениеИсточник;
			СвязьНаборовДанных.ВыражениеПриемник = ВыборкаНастроекСвязи.ВыражениеПриемник;
			СвязьНаборовДанных.Параметр = ВыборкаНастроекСвязи.Параметр;
			СвязьНаборовДанных.УсловиеСвязи = ВыборкаНастроекСвязи.УсловиеСвязи;
			СвязьНаборовДанных.Обязательная = Истина;
			
			// для схемы, где набором данных служит объект Источником связи выступает Имя ТЧ, которое настроено в справочнике Дополнений
			НаборДанныхИсточник = СокрЛП( ВыборкаНастроекСвязи.ИсточникСвязи );
			Если НаборДанныхИсточник = "" Тогда
				НаборДанныхИсточник = ИмяСтруктурыШапкиОбъекта;
			КонецЕсли;
			
			СвязьНаборовДанных.НаборДанныхИсточник = СокрЛП( НаборДанныхИсточник );
			
		КонецЦикла;
		
	КонецЦикла;
	
	// снимем ограничение на отбор по полю Условие Отбора
	Если ВключитьОтборПоПолюУсловиеОтбора = Истина Тогда
		
		ПолеУсловиеОтбора = СхемаКомпоновкиДанных.НаборыДанных[ "ТаблицаУсловийОтбора" ].Поля.Найти( "ЭлементСправочника_УсловияОтбора" );
		
		ПолеУсловиеОтбора.ОграничениеИспользования.Условие = Ложь;
		ПолеУсловиеОтбора.ОграничениеИспользованияРеквизитов.Условие = Ложь;
		
		ПолеУсловиеОтбораВидОбъекта = СхемаКомпоновкиДанных.НаборыДанных[ "ТаблицаУсловийОтбора" ].Поля.Найти( "ЭлементСправочника_УсловияОтбора_ВидОбъекта" );
		ПолеУсловиеОтбораВидОбъекта.ОграничениеИспользования.Условие = Ложь;
		ПолеУсловиеОтбораВидОбъекта.ОграничениеИспользованияРеквизитов.Условие = Ложь;
		
	КонецЕсли;
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

// Функция - Получить текст запроса выборки списка объектов
//        Внутренняя функция механизма "Связей".
//        Возращает текст запроса для выборки объектов-результата
//
// Параметры:
//  ИсключитьОбъектыРезультатаПомеченныеНаУдаление	 - Булево - признак, указываеющий, что в текст запроса должно быть добавлено условие, отсекающее помеченные на удаление объекты
//  ПолноеИмяМетаданныхОбъектаРезультата			 - Строка - полное имя метаданных объекта-результата,
//                                                              должно указываться обязательно при ИсключитьОбъектыРезультатаПомеченныеНаУдаление = Истина
// 
// Возвращаемое значение:
//   - Строка - текст запроса
//
Функция ПолучитьТекстЗапросаВыборкиСпискаОбъектов( ИсключитьОбъектыРезультатаПомеченныеНаУдаление = Ложь, ПолноеИмяМетаданныхОбъектаРезультата = Неопределено ) Экспорт
	
	ТекстЗапросаВыборкиСпискаОбъектов =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	табКоличестваУспешныхУсловийОтбора.Ссылка.ОбъектРезультатСвязи КАК ПолеОбъектаРезультата
	|//ПОМЕСТИТЬ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОписанияСвязейОбъектовУсловияСвязи.Ссылка КАК Ссылка,
	|		СУММА(1) КАК КоличествоУспешныхУсловийСвязи
	|	ИЗ
	|		Справочник.ОписанияСвязейОбъектов.УсловияСвязи КАК ОписанияСвязейОбъектовУсловияСвязи
	|	ГДЕ
	|		ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ПометкаУдаления = ЛОЖЬ
	|		И ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ВидОбъектаРезультатаСвязи = &ВидОбъектаРезультатаСвязи
	|		И ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ВидОбъектаИсточникаУсловийСвязи = &ВидОбъектаИсточникаУсловийСвязи
	|		И ОписанияСвязейОбъектовУсловияСвязи.УсловиеСвязи В(&УспешныеУсловияОтбора)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОписанияСвязейОбъектовУсловияСвязи.Ссылка) КАК табКоличестваУспешныхУсловийОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОписанияСвязейОбъектовУсловияСвязи.Ссылка КАК Ссылка,
	|			МАКСИМУМ(ОписанияСвязейОбъектовУсловияСвязи.НомерСтроки) КАК КоличествоУсловийОтбора
	|		ИЗ
	|			Справочник.ОписанияСвязейОбъектов.УсловияСвязи КАК ОписанияСвязейОбъектовУсловияСвязи
	|		ГДЕ
	|			ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ПометкаУдаления = ЛОЖЬ
	|			И ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ВидОбъектаРезультатаСвязи = &ВидОбъектаРезультатаСвязи
	|			И ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ВидОбъектаИсточникаУсловийСвязи = &ВидОбъектаИсточникаУсловийСвязи
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОписанияСвязейОбъектовУсловияСвязи.Ссылка) КАК табКоличестваУсловийОтбора
	|		ПО табКоличестваУспешныхУсловийОтбора.Ссылка = табКоличестваУсловийОтбора.Ссылка
	|			И табКоличестваУспешныхУсловийОтбора.КоличествоУспешныхУсловийСвязи = табКоличестваУсловийОтбора.КоличествоУсловийОтбора";	
	
	Если ИсключитьОбъектыРезультатаПомеченныеНаУдаление = Истина И ПолноеИмяМетаданныхОбъектаРезультата <> Неопределено Тогда
		ТекстЗапросаВыборкиСпискаОбъектов = ТекстЗапросаВыборкиСпискаОбъектов + "
		|ГДЕ
		|	ВЫРАЗИТЬ( табКоличестваУспешныхУсловийОтбора.Ссылка.ОбъектРезультатСвязи КАК " + ПолноеИмяМетаданныхОбъектаРезультата + ").ПометкаУдаления = ЛОЖЬ";
	КонецЕсли;
	
	Возврат ТекстЗапросаВыборкиСпискаОбъектов;
	
КонецФункции

// Функция - Получить текст запроса выборки списка объектов с номерами строк "объекта-источника условий"
//        Внутренняя функция механизма "Связей".
//        Возращает текст запроса для выборки объектов-результата с номерами строк объекта-источника
//
// Параметры:
//  ВидОбъектаИсточникаУсловий						 - СправочникСсылка.ВидыОбъектовМ - описатель вида объектов-источника
//  СтруктураТабЧастейДляНомеровСтрок				 - Структура, Неопределено - структура, ключи которой содержат имена таб. частей, для которых требуется получать номера строк,
//                                                                               если не задана, то будут возвращены номера строк всех таб. частей
//  ИсключитьОбъектыРезультатаПомеченныеНаУдаление	 - Булево - признак, указываеющий, что в текст запроса должно быть добавлено условие, отсекающее помеченные на удаление объекты
//  ПолноеИмяМетаданныхОбъектаРезультата			 - Строка - полное имя метаданных объекта-результата,
//                                                              должно указываться обязательно при ИсключитьОбъектыРезультатаПомеченныеНаУдаление = Истина
// 
// Возвращаемое значение:
//   - Строка - текст запроса
//
Функция ПолучитьТекстЗапросаВыборкиСпискаОбъектовСНомерамиСтрокОбъектаИсточникаУсловий( ВидОбъектаИсточникаУсловий, СтруктураТабЧастейДляНомеровСтрок = Неопределено, ИсключитьОбъектыРезультатаПомеченныеНаУдаление = Ложь, ПолноеИмяМетаданныхОбъектаРезультата = Неопределено ) Экспорт
	
	// сформируем структуру данных объекта
	СтруктураДанныхОбъекта = СвязиИОтборы_Привилегированный.СформироватьСтруктуруВнешнихИсточниковДанныхПоВидуОбъекта( ВидОбъектаИсточникаУсловий );
	
	Если СтруктураДанныхОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// определим, какую структуру будем использовать в качестве структуры с именами ТЧ 
	Если СтруктураТабЧастейДляНомеровСтрок = Неопределено Тогда
		СтруктураИменТЧ = СтруктураДанныхОбъекта[ "СинонимыТабличныхЧастей" ];
	Иначе
		СтруктураИменТЧ = СтруктураТабЧастейДляНомеровСтрок;
	КонецЕсли;
	
	// сформируем тест запроса в зависимости от структуры имен табличных частей
	Если СтруктураИменТЧ.Количество() = 0 Тогда
		
		// если нет табличных частей, то и номеров строк нет
		ТекстЗапросаВыборкиСпискаОбъектовСНомерамиСтрокОбъектаОтбора =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(ТаблицаУспешныхУсловийОтбора.ЭлементСправочника_УсловияОтбора КАК Справочник.УсловияОтбора) КАК УспешноеУсловиеОтбора
		|ПОМЕСТИТЬ ТаблицаУспешныхУсловийОтбора
		|ИЗ
		|	&ТаблицаУспешныхУсловийОтбора КАК ТаблицаУспешныхУсловийОтбора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	табКоличестваУспешныхУсловийОтбора.Ссылка.ОбъектРезультатСвязи КАК ПолеОбъектаРезультата,
		|	"""" КАК ИмяТабЧасти,
		|	0 КАК НомерСтроки
		|//ПОМЕСТИТЬ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОписанияСвязейОбъектовУсловияСвязи.Ссылка КАК Ссылка,
		|		СУММА(1) КАК КоличествоУспешныхУсловийСвязи
		|	ИЗ
		|		Справочник.ОписанияСвязейОбъектов.УсловияСвязи КАК ОписанияСвязейОбъектовУсловияСвязи
		|	ГДЕ
		|		ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ПометкаУдаления = ЛОЖЬ
		|		И ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ВидОбъектаРезультатаСвязи = &ВидОбъектаРезультатаСвязи
		|		И ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ВидОбъектаИсточникаУсловийСвязи = &ВидОбъектаИсточникаУсловийСвязи
		|		И ОписанияСвязейОбъектовУсловияСвязи.УсловиеСвязи В
		|				(ВЫБРАТЬ
		|					ТаблицаУспешныхУсловийОтбора.УспешноеУсловиеОтбора
		|				ИЗ
		|					ТаблицаУспешныхУсловийОтбора КАК ТаблицаУспешныхУсловийОтбора)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОписанияСвязейОбъектовУсловияСвязи.Ссылка) КАК табКоличестваУспешныхУсловийОтбора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОписанияСвязейОбъектовУсловияСвязи.Ссылка КАК Ссылка,
		|			МАКСИМУМ(ОписанияСвязейОбъектовУсловияСвязи.НомерСтроки) КАК КоличествоУсловийОтбора
		|		ИЗ
		|			Справочник.ОписанияСвязейОбъектов.УсловияСвязи КАК ОписанияСвязейОбъектовУсловияСвязи
		|		ГДЕ
		|			ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ПометкаУдаления = ЛОЖЬ
		|			И ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ВидОбъектаРезультатаСвязи = &ВидОбъектаРезультатаСвязи
		|			И ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ВидОбъектаИсточникаУсловийСвязи = &ВидОбъектаИсточникаУсловийСвязи
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОписанияСвязейОбъектовУсловияСвязи.Ссылка) КАК табКоличестваУсловийОтбора
		|		ПО табКоличестваУспешныхУсловийОтбора.Ссылка = табКоличестваУсловийОтбора.Ссылка
		|			И табКоличестваУспешныхУсловийОтбора.КоличествоУспешныхУсловийСвязи = табКоличестваУсловийОтбора.КоличествоУсловийОтбора
		|//ГДЕ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеОбъектаРезультата,
		|	ИмяТабЧасти,
		|	НомерСтроки";	
		
	Иначе
		
		// сформируем итоговый текст запроса
		ТекстЗапросаВыборкиСпискаОбъектовСНомерамиСтрокОбъектаОтбора =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(ТаблицаУспешныхУсловийОтбора.ЭлементСправочника_УсловияОтбора КАК Справочник.УсловияОтбора) КАК УспешноеУсловиеОтбора,
		|	ТаблицаУспешныхУсловийОтбора.ИмяТабЧасти КАК ИмяТабЧасти,
		|	ТаблицаУспешныхУсловийОтбора.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ТаблицаУспешныхУсловийОтбораСНомерамиСтрокТЧ
		|ИЗ
		|	&ТаблицаУспешныхУсловийОтбора КАК ТаблицаУспешныхУсловийОтбора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОписанияСвязейОбъектовУсловияСвязи.Ссылка КАК Ссылка,
		|	ТаблицаУспешныхУсловийОтбораСНомерамиСтрокТЧ.ИмяТабЧасти КАК ИмяТабЧасти,
		|	ТаблицаУспешныхУсловийОтбораСНомерамиСтрокТЧ.НомерСтроки КАК НомерСтроки,
		|	СУММА(1) КАК КоличествоУспешныхУсловийСвязи
		|ПОМЕСТИТЬ табКоличестваУспешныхУсловийОтбора
		|ИЗ
		|	Справочник.ОписанияСвязейОбъектов.УсловияСвязи КАК ОписанияСвязейОбъектовУсловияСвязи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаУспешныхУсловийОтбораСНомерамиСтрокТЧ КАК ТаблицаУспешныхУсловийОтбораСНомерамиСтрокТЧ
		|		ПО ОписанияСвязейОбъектовУсловияСвязи.УсловиеСвязи = ТаблицаУспешныхУсловийОтбораСНомерамиСтрокТЧ.УспешноеУсловиеОтбора
		|ГДЕ
		|	ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ВидОбъектаРезультатаСвязи = &ВидОбъектаРезультатаСвязи
		|	И ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ВидОбъектаИсточникаУсловийСвязи = &ВидОбъектаИсточникаУсловийСвязи
		|
		|СГРУППИРОВАТЬ ПО
		|	ОписанияСвязейОбъектовУсловияСвязи.Ссылка,
		|	ТаблицаУспешныхУсловийОтбораСНомерамиСтрокТЧ.ИмяТабЧасти,
		|	ТаблицаУспешныхУсловийОтбораСНомерамиСтрокТЧ.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаУспешныхУсловийОтбораСНомерамиСтрокТЧ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОписанияСвязейОбъектовУсловияСвязи.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ОписанияСвязейОбъектовУсловияСвязи.НомерСтроки) КАК КоличествоУсловийОтбора
		|ПОМЕСТИТЬ табКоличестваУсловийОтбора
		|ИЗ
		|	Справочник.ОписанияСвязейОбъектов.УсловияСвязи КАК ОписанияСвязейОбъектовУсловияСвязи
		|ГДЕ
		|	ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ВидОбъектаРезультатаСвязи = &ВидОбъектаРезультатаСвязи
		|	И ОписанияСвязейОбъектовУсловияСвязи.Ссылка.ВидОбъектаИсточникаУсловийСвязи = &ВидОбъектаИсточникаУсловийСвязи
		|
		|СГРУППИРОВАТЬ ПО
		|	ОписанияСвязейОбъектовУсловияСвязи.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	табКоличестваУспешныхУсловийОтбора.Ссылка.ОбъектРезультатСвязи КАК ПолеОбъектаРезультата,
		|	табКоличестваУспешныхУсловийОтбора.ИмяТабЧасти КАК ИмяТабЧасти,
		|	табКоличестваУспешныхУсловийОтбора.НомерСтроки КАК НомерСтроки
		|//ПОМЕСТИТЬ
		|ИЗ
		|	табКоличестваУспешныхУсловийОтбора КАК табКоличестваУспешныхУсловийОтбора
		|//ГДЕ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеОбъектаРезультата,
		|	ИмяТабЧасти,
		|	НомерСтроки";
	
	КонецЕсли;
	
	Если ИсключитьОбъектыРезультатаПомеченныеНаУдаление = Истина И ПолноеИмяМетаданныхОбъектаРезультата <> Неопределено Тогда
		ТекстЗапросаВыборкиСпискаОбъектовСНомерамиСтрокОбъектаОтбора = СтрЗаменить( ТекстЗапросаВыборкиСпискаОбъектовСНомерамиСтрокОбъектаОтбора, "//ГДЕ", "
		|ГДЕ
		|	ВЫРАЗИТЬ( табКоличестваУспешныхУсловийОтбора.Ссылка.ОбъектРезультатСвязи КАК " + ПолноеИмяМетаданныхОбъектаРезультата + ").ПометкаУдаления = ЛОЖЬ" );
	КонецЕсли;
	
	Возврат ТекстЗапросаВыборкиСпискаОбъектовСНомерамиСтрокОбъектаОтбора;
	
КонецФункции

// Функция - Сформировать и заполнить структуру внешних источников по объекту
//        Функция предназначена для формирования и заполнения структуры,
//        которая в дальнейшем может быть использована механизмом связей в СКД,
//        настроенной функцией СформироватьСхемуКомпоновкиДанныхПоВидуОбъектаИсточникаУсловий_НаборДанныхОбъект
//        Структура заполняется таблицами, описывающими метаданные переданного объекта,
//        а сами таблицы заполняются данными из переданного объекта
//
// Параметры:
//  Объект		 - Объект или Ссылка - объект, данными которого убдет заполнена структура результата
//  ВидОбъекта	 - СправочникСсылка.ВидыОбъектовМ, Неопределено - описатель вида объекта, по этому параметру определются метаданные объекта
//                                                                    если не задан, то будет определен по переданному Объекту
// 
// Возвращаемое значение:
//   - Структура - заполненная структура с данными Объекта в особом формате
//                 Элементы структуры:
//                 "ТаблицаШапкаОбъекта" - таблица значений, имена колонок которой равны именам реквизитов Объекта
//                 "СинонимыТабличныхЧастей" - структура, ключами которой служат имена таб. частей Объекта, а значениями синонимы таб. частей
//                 "<ИмяТабЧасти1>"
//                 "<ИмяТабЧасти2>" - с ключами, равными именам таб. частей Объекта идут таблицы значений, имена колонок которых равны именам реквизитов соответсвующей таб. части
//                 "<ИмяТабЧасти3>"
//
Функция СформироватьИЗаполнитьСтруктуруВнешнихИсточниковПоОбъекту( Объект, Знач ВидОбъекта = Неопределено ) Экспорт
	
	// определим вид объекта, если он не задан
	Если ВидОбъекта = Неопределено Тогда
		
		ВидОбъекта = СвязиИОтборы_Привилегированный.ПолучитьСсылкуВидаОбъектаМПоОбъекту( Объект.Ссылка );
		
		Если ВидОбъекта = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// сформируем структуру с пустыми таблицами
	СтруктураВнешнихИсточниковДанных = СвязиИОтборы_Привилегированный.СформироватьСтруктуруВнешнихИсточниковДанныхПоВидуОбъекта( ВидОбъекта );
	
	Если СтруктураВнешнихИсточниковДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// выполним заполнение таблиц структуры
	ИмяСтруктурыШапкиОбъекта = "ТаблицаШапкаОбъекта";
	ИмяСтруктурыСинонимовТЧ = "СинонимыТабличныхЧастей";
	
	Для Каждого КлючИЗначение Из СтруктураВнешнихИсточниковДанных Цикл
		
		Если КлючИЗначение.Ключ = ИмяСтруктурыСинонимовТЧ Тогда
			Продолжить;
		ИначеЕсли КлючИЗначение.Ключ = ИмяСтруктурыШапкиОбъекта Тогда
			// здесь заполняем таблицу реквизитов шапки
			ЗаполнитьЗначенияСвойств( КлючИЗначение.Значение.Добавить(), Объект );
		Иначе
			
			// здесь заполняем таблицы табличных частей
			ИмяТЧ = КлючИЗначение.Ключ;
			
			Для Каждого СтрокаТЧОбъекта Из Объект[ ИмяТЧ ] Цикл
				
				СтрокаТаблицыТЧ = КлючИЗначение.Значение.Добавить();
				
				ЗаполнитьЗначенияСвойств( СтрокаТаблицыТЧ, СтрокаТЧОбъекта );
				СтрокаТаблицыТЧ.Ссылка = Объект.Ссылка;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВнешнихИсточниковДанных;
	
КонецФункции


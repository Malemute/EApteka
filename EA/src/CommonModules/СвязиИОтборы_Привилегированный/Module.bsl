
/////////////////////////////////////////////////////////////////////////////////
/// Модуль содержит функции работы механизма "Связей объектов по условиям",
/// предназначенные для выполнения в привилегированном режиме
/// 


// Функция - Сформировать структуру внешних источников данных по виду объекта
//        Функция предназначена для формирования ПУСТОЙ структуры,
//        которая в дальнейшем может быть использована механизмом связей в СКД,
//        настроенной функцией СформироватьСхемуКомпоновкиДанныхПоВидуОбъектаИсточникаУсловий_НаборДанныхОбъект
//        Структура заполняется таблицами, описывающими метаданные переданного вида объекта
//
// Параметры:
//  ВидОбъекта	 - СправочникСсылка.ВидыОбъектовМ - описатель вида объекта, по этому параметру определются метаданные объекта
// 
// Возвращаемое значение:
//   - Структура - ПУСТАЯ структура с описанием вида объекта в особом формате
//                 Элементы структуры:
//                 "ТаблицаШапкаОбъекта" - таблица значений, имена колонок которой равны именам реквизитов Объекта
//                 "СинонимыТабличныхЧастей" - структура, ключами которой служат имена таб. частей Объекта, а значениями синонимы таб. частей
//                 "<ИмяТабЧасти1>"
//                 "<ИмяТабЧасти2>" - с ключами, равными именам таб. частей Объекта идут таблицы значений, имена колонок которых равны именам реквизитов соответсвующей таб. части
//                 "<ИмяТабЧасти3>"
//
Функция СформироватьСтруктуруВнешнихИсточниковДанныхПоВидуОбъекта( ВидОбъекта ) Экспорт
	
	ТипОбъекта = ВидОбъекта.ТипОбъекта;
	Идентификатор = ВидОбъекта.Идентификатор;
	
	Если Не ЗначениеЗаполнено( ТипОбъекта ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		МетаданныеВидаОбъекта = Перечисления.ТипыОбъектовМ.ПолучитьКоллекциюМетаданныхПоТипуОбъектаМ( ТипОбъекта )[ Идентификатор ];
		ПолноеИмяМетаданного = МетаданныеВидаОбъекта.ПолноеИмя();
		ТипСсылки = Справочники.ВидыОбъектовМ.ПолучитьТипПоВидуОбъектаМ( ВидОбъекта );
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить( ТипСсылки );
	ОписаниеТипаСсылка = Новый ОписаниеТипов( МассивТипов );
	
	СтруктураВнешнихИсточниковДанных = Новый Структура;
	
	// формируем колонки таблицы шапки из наборов СтандартныеРеквизиты и Реквизиты
	ТаблицаЗначений = Новый ТаблицаЗначений;	
	
	МассивНаборовРеквизитов = Новый Массив;
	МассивНаборовРеквизитов.Добавить( МетаданныеВидаОбъекта.СтандартныеРеквизиты );
	МассивНаборовРеквизитов.Добавить( МетаданныеВидаОбъекта.Реквизиты );
	
	// для задач есть еще РеквизитыАдресации
	Если ТипОбъекта = Перечисления.ТипыОбъектовМ.Задача Тогда
		МассивНаборовРеквизитов.Добавить( МетаданныеВидаОбъекта.РеквизитыАдресации );
	КонецЕсли;
	
	Для Каждого НаборРеквизитов Из МассивНаборовРеквизитов Цикл
		
		Для Каждого Реквизит Из НаборРеквизитов Цикл
			
			ИмяРеквизита = Реквизит.Имя;
			СинонимРеквизита = ?( ПустаяСтрока( Реквизит.Синоним ), ИмяРеквизита, Реквизит.Синоним );
			
			ТаблицаЗначений.Колонки.Добавить( ИмяРеквизита, Реквизит.Тип, СинонимРеквизита );
			
		КонецЦикла;
			
	КонецЦикла;
	
	СтруктураВнешнихИсточниковДанных.Вставить( "ТаблицаШапкаОбъекта", ТаблицаЗначений );
	
	// обработаем табличные части
	
	// Синонимы ТЧ сохраним в отдельную структуру, пригодяться
	СтруктураСинонимовТЧ = Новый Структура;
	СтруктураВнешнихИсточниковДанных.Вставить( "СинонимыТабличныхЧастей", СтруктураСинонимовТЧ );
	
	Для Каждого ТабличнаяЧасть Из МетаданныеВидаОбъекта.ТабличныеЧасти Цикл
		
		ИмяТЧ = ТабличнаяЧасть.Имя;
		СинонимТЧ = ?( ПустаяСтрока( ТабличнаяЧасть.Синоним ), ТабличнаяЧасть.Синоним, ТабличнаяЧасть.Имя );
		
		// формируем колонки таблицы для каждой ТЧ из наборов СтандартныеРеквизиты и Реквизиты
		ТаблицаЗначений = Новый ТаблицаЗначений;	
		
		МассивНаборовРеквизитов = Новый Массив;
		МассивНаборовРеквизитов.Добавить( ТабличнаяЧасть.СтандартныеРеквизиты );
		МассивНаборовРеквизитов.Добавить( ТабличнаяЧасть.Реквизиты );
		
		// для табличных частей добавляем еще колонку Ссылка
		ТаблицаЗначений.Колонки.Добавить( "Ссылка", ОписаниеТипаСсылка, "Ссылка" );
		
		Для Каждого НаборРеквизитов Из МассивНаборовРеквизитов Цикл
			
			Для Каждого Реквизит Из НаборРеквизитов Цикл
				
				ИмяРеквизита = Реквизит.Имя;
				СинонимРеквизита = ?( ПустаяСтрока( Реквизит.Синоним ), ИмяРеквизита, Реквизит.Синоним );
				
				ТаблицаЗначений.Колонки.Добавить( ИмяРеквизита, Реквизит.Тип, СинонимРеквизита );
				
			КонецЦикла;
				
		КонецЦикла;
		
		СтруктураВнешнихИсточниковДанных.Вставить( ИмяТЧ, ТаблицаЗначений );
		СтруктураСинонимовТЧ.Вставить( ИмяТЧ, СинонимТЧ );
		
	КонецЦикла;	
		
	Возврат СтруктураВнешнихИсточниковДанных;
	
КонецФункции

// Функция - Получить результат пакета запросов по дополнениям условий отбора
//        Вспомогательная функция механизма "Связей"
//        Предназначена для чтения из базы настроек дополнений для "Условий отбора" из справочника "Дополнения условий отбора"
//        для заданномого вида объекта
//        Функция используется для настройки СКД
//
// Параметры:
//  ВидОбъекта	 - СправочникСсылка.ВидыОбъектовМ - описатель вида объекта
// 
// Возвращаемое значение:
//   - Массив - массив результатов запроса, содержащий описание дополнений для "Условий отбора" как они описаны в справочнике "Дополнения условий отбора"
//
Функция ПолучитьРезультатПакетаЗапросовПоДополнениямУсловийОтбора( ВидОбъекта ) Экспорт
	
	// сформируем запрос для поиска активных дополнений
	// Активными считаются не помеченные на удаления и у которых есть не менее чем по одной строчке в ТЧ ПоляЗапроса и НастройкаСвязиСОбъектом
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "ВидОбъекта", ВидОбъекта );
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополненияУсловийОтбораПоляЗапроса.Ссылка КАК Ссылка,
	|	ДополненияУсловийОтбораПоляЗапроса.НомерСтроки КАК НомерСтроки,
	|	ДополненияУсловийОтбораПоляЗапроса.Поле КАК Поле,
	|	ДополненияУсловийОтбораПоляЗапроса.ПутьКДанным КАК ПутьКДанным,
	|	ДополненияУсловийОтбораПоляЗапроса.Заголовок КАК Заголовок
	|ПОМЕСТИТЬ табПолейЗапроса
	|ИЗ
	|	Справочник.ДополненияУсловийОтбора.ПоляЗапроса КАК ДополненияУсловийОтбораПоляЗапроса
	|ГДЕ
	|	ДополненияУсловийОтбораПоляЗапроса.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ДополненияУсловийОтбораПоляЗапроса.Ссылка.ЕстьОшибки = ЛОЖЬ
	|	И ДополненияУсловийОтбораПоляЗапроса.Ссылка.ВидОбъекта = &ВидОбъекта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополненияУсловийОтбораНастройкаСвязиСОбъектом.Ссылка КАК Ссылка,
	|	ДополненияУсловийОтбораНастройкаСвязиСОбъектом.НомерСтроки КАК НомерСтроки,
	|	ДополненияУсловийОтбораНастройкаСвязиСОбъектом.ИсточникСвязи КАК ИсточникСвязи,
	|	ДополненияУсловийОтбораНастройкаСвязиСОбъектом.ВыражениеИсточник КАК ВыражениеИсточник,
	|	ДополненияУсловийОтбораНастройкаСвязиСОбъектом.ВыражениеПриемник КАК ВыражениеПриемник,
	|	ДополненияУсловийОтбораНастройкаСвязиСОбъектом.Параметр КАК Параметр,
	|	ДополненияУсловийОтбораНастройкаСвязиСОбъектом.УсловиеСвязи КАК УсловиеСвязи
	|ПОМЕСТИТЬ табНастроекСвязи
	|ИЗ
	|	Справочник.ДополненияУсловийОтбора.НастройкаСвязиСОбъектом КАК ДополненияУсловийОтбораНастройкаСвязиСОбъектом
	|ГДЕ
	|	ДополненияУсловийОтбораНастройкаСвязиСОбъектом.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ДополненияУсловийОтбораНастройкаСвязиСОбъектом.Ссылка.ЕстьОшибки = ЛОЖЬ
	|	И ДополненияУсловийОтбораНастройкаСвязиСОбъектом.Ссылка.ВидОбъекта = &ВидОбъекта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	табПолейЗапроса.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ табАктивныхДополнений
	|ИЗ
	|	табПолейЗапроса КАК табПолейЗапроса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ табНастроекСвязи КАК табНастроекСвязи
	|		ПО табПолейЗапроса.Ссылка = табНастроекСвязи.Ссылка
	|			И табПолейЗапроса.НомерСтроки = табНастроекСвязи.НомерСтроки
	|			И (табПолейЗапроса.НомерСтроки = 1)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	табАктивныхДополнений.Ссылка КАК Ссылка,
	|	табАктивныхДополнений.Ссылка.ИмяНабораДанных КАК ИмяНабораДанных,
	|	табАктивныхДополнений.Ссылка.Наименование КАК Заголовок,
	|	табАктивныхДополнений.Ссылка.ТекстЗапроса КАК ТекстЗапроса
	|ИЗ
	|	табАктивныхДополнений КАК табАктивныхДополнений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	табПолейЗапроса.Ссылка КАК Ссылка,
	|	табПолейЗапроса.Поле КАК Поле,
	|	табПолейЗапроса.ПутьКДанным КАК ПутьКДанным,
	|	табПолейЗапроса.Заголовок КАК Заголовок
	|ИЗ
	|	табПолейЗапроса КАК табПолейЗапроса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ табАктивныхДополнений КАК табАктивныхДополнений
	|		ПО табПолейЗапроса.Ссылка = табАктивныхДополнений.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	табНастроекСвязи.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(табНастроекСвязи.ИсточникСвязи КАК СТРОКА(1000)) КАК ИсточникСвязи,
	|	табНастроекСвязи.ВыражениеИсточник КАК ВыражениеИсточник,
	|	табНастроекСвязи.ВыражениеПриемник КАК ВыражениеПриемник,
	|	табНастроекСвязи.Параметр КАК Параметр,
	|	табНастроекСвязи.УсловиеСвязи КАК УсловиеСвязи
	|ИЗ
	|	табНастроекСвязи КАК табНастроекСвязи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ табАктивныхДополнений КАК табАктивныхДополнений
	|		ПО табНастроекСвязи.Ссылка = табАктивныхДополнений.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ИсточникСвязи";
	
	// вернем результат выполнения пакета
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции



// Функция - Получить таблицу успешных условий отбора для "объекта-источника условий"
//        Вспомогательная функция механизма "Связей"
//        Функция возвращает список элементов справочника "Условия отбора" в виде таблицы,
//        в которых заданные условия являются истинными для объекта-источника.
//        Также функция может возвращать номера строк таб. частей объекта-источника, для которых условия являются истинными.
//
// Параметры:
//  ВидОбъектаИсточникаУсловий					 - СправочникСсылка.ВидыОбъектовМ, Неопределено - описатель вида объекта-источника
//                                                                                                    если не задан, то будет определен по значению ОбъектИсточникСсылка
//  ОбъектИсточникСсылка						 - Ссылка, Неопределено - ссылка на объект-источник,
//                                                                        параметр обязателен, если не задан СтруктураДанныхОбъектаИсточника 
//  СтруктураДанныхОбъектаИсточника				 - Структура, Неопределено - структура в особом формате, описывающая объект-источник
//                                                                           может быть создана и заполнена функцией СформироватьИЗаполнитьСтруктуруВнешнихИсточниковПоОбъекту
//                                                                           параметр обязателен, если не задан ОбъектИсточникСсылка 
//  ПолучитьНомераСтрокТабЧастейОбъектаИсточника - Булево - признак необходимости получить номера строк таб. частей объекта-источника
//  СтруктураТабЧастейДляНомеровСтрок			 - Структура, Неопределено - структура, ключи которой содержат имена таб. частей, для которых требуется получать номера строк,
//                                                                           имеет смысл только для ПолучитьНомераСтрокТабЧастейОбъектаИсточника = Истина
//                                                                           если не задана и ПолучитьНомераСтрокТабЧастейОбъектаИсточника = Истина, то будут возвращены номера строк всех таб. частей
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица, содержащая успешные Условия отбора
//                       Колонки таблицы:
//                       * ЭлементСправочника_УсловияОтбора - ссылка элемента справочника "Условия отбора"
//                       * ИмяТабЧасти - имя таб. части объекта-источника
//                       * НомерСтроки - номер строки в таб. части объекта-источника
//
Функция ПолучитьТаблицуУспешныхУсловийОтбораДляОбъектаИсточникаУсловий( Знач ВидОбъектаИсточникаУсловий = Неопределено, ОбъектИсточникСсылка = Неопределено, СтруктураДанныхОбъектаИсточника = Неопределено, ПолучитьНомераСтрокТабЧастейОбъектаИсточника = Ложь, СтруктураТабЧастейДляНомеровСтрок = Неопределено ) Экспорт
	
	// должен быть заполнен хотя бы один из источников данных объекта
	Если ОбъектИсточникСсылка = Неопределено И СтруктураДанныхОбъектаИсточника = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// получим вид объекта-источника, если он не указан
	Если ВидОбъектаИсточникаУсловий = Неопределено Тогда
		
		// вид объекта можно получить только при условии, что работа идет по Объекту-Ссылке
		Если ОбъектИсточникСсылка = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ВидОбъектаИсточникаУсловий = СвязиИОтборы_Привилегированный.ПолучитьСсылкуВидаОбъектаМПоОбъекту( ОбъектИсточникСсылка );
		
		Если ВидОбъектаИсточникаУсловий = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// для начала проверим, есть ли вообще какие-нить настройки для объекта-источника
	ХранилищеЗначенийКомпиляцииНастроек = СвязиИОтборы_Привилегированный.ПрочитатьКомпиляциюНастроекДляВидаОбъекта( ВидОбъектаИсточникаУсловий );
	
	Если ХранилищеЗначенийКомпиляцииНастроек = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// получим схему компоновки данных в зависмости от того, что служит источником данных
	Если ОбъектИсточникСсылка = Неопределено Тогда
		СхемаКомпоновкиДанных = СвязиИОтборы.СформироватьСхемуКомпоновкиДанныхПоВидуОбъектаИсточникаУсловий_НаборДанныхОбъект( ВидОбъектаИсточникаУсловий, Истина );
	Иначе
		СхемаКомпоновкиДанных = СвязиИОтборы.СформироватьСхемуКомпоновкиДанныхПоВидуОбъектаИсточникаУсловий_НаборДанныхЗапрос( ВидОбъектаИсточникаУсловий, Истина );
	КонецЕсли;
	
	// создадим и инициализируем компоновщик настроек
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать( Новый ИсточникДоступныхНастроекКомпоновкиДанных( СхемаКомпоновкиДанных ) );
	КомпоновщикНастроек.ЗагрузитьНастройки( ХранилищеЗначенийКомпиляцииНастроек.Получить() );
	КомпоновщикНастроек.Восстановить();
	
	// чтобы СКД работало нормально обязательно нужно добавить в Выбранные поля Поле "Ссылка" из шапки
	ДобавляемоеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить( Тип( "ВыбранноеПолеКомпоновкиДанных" ) );
	ДобавляемоеПоле.Поле = Новый ПолеКомпоновкиДанных( "Ссылка" );
	ДобавляемоеПоле.Использование = Истина;
	
	// так же для нормальной работы СКД если Источником Данных служит Объект необходимо добавить в Выбранные поля по одному полю из каждой ТЧ
	// выполним добавление Номеров Строк, т.к. они могут пригодиться в дальнейшем
	НомераСтрокУжеДобавлены = Ложь;
	ПустаяСтруктураДанныхОбъекта = СвязиИОтборы_Привилегированный.СформироватьСтруктуруВнешнихИсточниковДанныхПоВидуОбъекта( ВидОбъектаИсточникаУсловий );
	
	Если ОбъектИсточникСсылка = Неопределено Тогда
		
		Если ПустаяСтруктураДанныхОбъекта = Неопределено Тогда
			СтруктураИменТЧ = Новый Структура;
		Иначе
			СтруктураИменТЧ = ПустаяСтруктураДанныхОбъекта[ "СинонимыТабличныхЧастей" ];
		КонецЕсли;
		
		// добавим каждой ТЧ поля выбора в компоновщик
		Для Каждого КлючИЗначение Из СтруктураИменТЧ Цикл
				
			ИмяТЧ = КлючИЗначение.Ключ;
			
			ДобавляемоеПолеНомераСтроки = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить( Тип( "ВыбранноеПолеКомпоновкиДанных" ) );
			ДобавляемоеПолеНомераСтроки.Поле = Новый ПолеКомпоновкиДанных( ИмяТЧ + "." + ИмяТЧ + "__НомерСтроки" );
			ДобавляемоеПолеНомераСтроки.Использование = Истина;
			
		КонецЦикла;
			
		НомераСтрокУжеДобавлены = Истина;
		
	КонецЕсли;
			
	// дополним компоновщик колонками с номерами строк ТЧ
	Если ПолучитьНомераСтрокТабЧастейОбъектаИсточника = Истина Тогда
		
		// определим структуру имен ТЧ
		Если СтруктураТабЧастейДляНомеровСтрок = Неопределено Тогда
			
			Если ПустаяСтруктураДанныхОбъекта = Неопределено Тогда
				СтруктураИменТЧ = Новый Структура;
			Иначе
				СтруктураИменТЧ = ПустаяСтруктураДанныхОбъекта[ "СинонимыТабличныхЧастей" ];
			КонецЕсли;
			
		Иначе
			СтруктураИменТЧ = СтруктураТабЧастейДляНомеровСтрок;
		КонецЕсли;
		
		// добавим поля выбора в компоновщик, если они не были добавлены ранее
		Если НомераСтрокУжеДобавлены = Ложь Тогда
		
			Для Каждого КлючИЗначение Из СтруктураИменТЧ Цикл
				
				ИмяТЧ = КлючИЗначение.Ключ;
				
				ДобавляемоеПолеНомераСтроки = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить( Тип( "ВыбранноеПолеКомпоновкиДанных" ) );
				ДобавляемоеПолеНомераСтроки.Поле = Новый ПолеКомпоновкиДанных( ИмяТЧ + "." + ИмяТЧ + "__НомерСтроки" );
				ДобавляемоеПолеНомераСтроки.Использование = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// добавим отбор по ВидОбъектаИсточникаУсловий
	ЭлементОтбораУсловиеОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить( Тип( "ЭлементОтбораКомпоновкиДанных" ) );
	ЭлементОтбораУсловиеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораУсловиеОтбора.Использование = Истина;
	ЭлементОтбораУсловиеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных( "ЭлементСправочника_УсловияОтбора_ВидОбъекта" );
	ЭлементОтбораУсловиеОтбора.ПравоеЗначение = ВидОбъектаИсточникаУсловий;
	ЭлементОтбораУсловиеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	
	// если источником данных служит ссылка, то добавим отбор по этой ссылке в компоновщик
	Если ОбъектИсточникСсылка <> Неопределено Тогда
	
		ЭлементОтбораУсловиеОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить( Тип( "ЭлементОтбораКомпоновкиДанных" ) );
		ЭлементОтбораУсловиеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораУсловиеОтбора.Использование = Истина;
		ЭлементОтбораУсловиеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных( "Ссылка" );
		ЭлементОтбораУсловиеОтбора.ПравоеЗначение = ОбъектИсточникСсылка;
		ЭлементОтбораУсловиеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
		
	КонецЕсли;
	
	// получаем таблицу успешных условий отбора
	ТаблицаУспешныхУсловийОтбора = СвязиИОтборы_Привилегированный.ПолучитьТаблицуУспешныхУсловийОтбора( СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), СтруктураДанныхОбъектаИсточника );
	
	// если не нужны номера строк, то просто возвращаем полученную таблицу избавившись от повторяющихся элементов
	Если ПолучитьНомераСтрокТабЧастейОбъектаИсточника <> Истина ИЛИ СтруктураИменТЧ.Количество() = 0 Тогда
		
		ТаблицаУспешныхУсловийОтбора.Свернуть( "ЭлементСправочника_УсловияОтбора", "" );
		
		Возврат ТаблицаУспешныхУсловийОтбора;
		
	КонецЕсли;
	
	// если номера строк нужны, то преобразуем полученную таблицу, где номера строк разбиты по колонкам
	// в другую таблицу, где номера строк собраны в одной колонке и добавлена колонка с именем таб. части
	// преобразование сделем через запрос, где исходная ТЗ будет в качестве параметра
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "ТаблицаУспешныхУсловийОтбора", ТаблицаУспешныхУсловийОтбора );
	
	// сформируем слагаемые текста запроса
	ТекстЗапросаПолейТаблицыУспешныхУсловийОтбора = "";
	ТекстВложенногоЗапросаРазбораТаблицыУспешныхУсловийОтбора = "";
	
	// сформируем составляющие тексты запроса для каждой из ТЧ
	Для Каждого КлючИЗначение Из СтруктураИменТЧ Цикл
		
		ИмяТЧ = КлючИЗначение.Ключ;
		
		ТекстЗапросаПолейТаблицыУспешныхУсловийОтбора = ТекстЗапросаПолейТаблицыУспешныхУсловийОтбора + ",
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаУспешныхУсловийОтбора." + ИмяТЧ + ИмяТЧ + "__НомерСтроки КАК ЧИСЛО(15, 0)), 0) КАК " + ИмяТЧ + ИмяТЧ + "__НомерСтроки";
		
		Если ТекстВложенногоЗапросаРазбораТаблицыУспешныхУсловийОтбора = "" Тогда
			
			ТекстВложенногоЗапросаРазбораТаблицыУспешныхУсловийОтбора = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ТаблицаУспешныхУсловийОтбора.УспешноеУсловиеОтбора КАК УспешноеУсловиеОтбора,
			|		""" + ИмяТЧ + """ КАК ИмяТабЧасти,
			|		ТаблицаУспешныхУсловийОтбора." + ИмяТЧ + ИмяТЧ + "__НомерСтроки КАК НомерСтроки
			|	ИЗ
			|		ТаблицаУспешныхУсловийОтбора КАК ТаблицаУспешныхУсловийОтбора
			|	ГДЕ
			|		ТаблицаУспешныхУсловийОтбора." + ИмяТЧ + ИмяТЧ + "__НомерСтроки > 0";
			
		Иначе
			
			ТекстВложенногоЗапросаРазбораТаблицыУспешныхУсловийОтбора = ТекстВложенногоЗапросаРазбораТаблицыУспешныхУсловийОтбора + "
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ТаблицаУспешныхУсловийОтбора.УспешноеУсловиеОтбора,
			|		""" + ИмяТЧ + """,
			|		ТаблицаУспешныхУсловийОтбора." + ИмяТЧ + ИмяТЧ + "__НомерСтроки
			|	ИЗ
			|		ТаблицаУспешныхУсловийОтбора КАК ТаблицаУспешныхУсловийОтбора
			|	ГДЕ
			|		ТаблицаУспешныхУсловийОтбора." + ИмяТЧ + ИмяТЧ + "__НомерСтроки > 0";
			
		КонецЕсли;
		
	КонецЦикла;
	
	// сформируем итоговый текст запроса
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ТаблицаУспешныхУсловийОтбора.ЭлементСправочника_УсловияОтбора КАК Справочник.УсловияОтбора) КАК УспешноеУсловиеОтбора" + ТекстЗапросаПолейТаблицыУспешныхУсловийОтбора + "
	|ПОМЕСТИТЬ ТаблицаУспешныхУсловийОтбора
	|ИЗ
	|	&ТаблицаУспешныхУсловийОтбора КАК ТаблицаУспешныхУсловийОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.УспешноеУсловиеОтбора КАК ЭлементСправочника_УсловияОтбора,
	|	ВложенныйЗапрос.ИмяТабЧасти КАК ИмяТабЧасти,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	(" + ТекстВложенногоЗапросаРазбораТаблицыУспешныхУсловийОтбора + ") КАК ВложенныйЗапрос
	|УПОРЯДОЧИТЬ ПО
	|	ЭлементСправочника_УсловияОтбора,
	|	ИмяТабЧасти,
	|	НомерСтроки";
	
	// вернем результат запроса
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция - Прочитать компиляцию настроек для вида объекта
//        Внутренняя функция механизма "Связей"
//        Используется в функции ПолучитьТаблицуУспешныхУсловийОтбораДляОбъектаИсточникаУсловий
//        Функция читает из базу сохраненные настройки СКД для всех "Условий отборов" для заданного вида объекта
//        из регистра сведений КомпиляцияНастроекУсловийОтборов
//
// Параметры:
//  ВидОбъекта	 - СправочникСсылка.ВидыОбъектовМ - описатель вида объекта
// 
// Возвращаемое значение:
//   - ХранилищеЗначения - хранилище, содержащее настройки СКД
//
Функция ПрочитатьКомпиляциюНастроекДляВидаОбъекта( ВидОбъекта ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "ВидОбъекта", ВидОбъекта );
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КомпиляцияНастроекУсловийОтборов.КопиляцияНастроекУсловийОтборов КАК КопиляцияНастроек
	|ИЗ
	|	РегистрСведений.КомпиляцияНастроекУсловийОтборов КАК КомпиляцияНастроекУсловийОтборов
	|ГДЕ
	|	КомпиляцияНастроекУсловийОтборов.ВидОбъекта = &ВидОбъекта";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КопиляцияНастроек;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция - Получить таблицу успешных условий отбора
//        Внутренняя функция механизма "Связей"
//        Используется в функции ПолучитьТаблицуУспешныхУсловийОтбораДляОбъектаИсточникаУсловий
//        Функция выполняет настроенную СКД механизма "Связей"
//
// Параметры:
//  СхемаКомпоновкиДанных			 - СхемаКомпоновкиДанных - сформированная СКД
//  Настройки						 - НастройкиКомпоновкиДанных - настройки для СКД
//  СтруктураВнешнихИсточниковДанных - Структура - структура внешних наборов данных СКД
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица содержит результат выполнения СКД, состав таблицы зависит от СКД
//
Функция ПолучитьТаблицуУспешныхУсловийОтбора( СхемаКомпоновкиДанных, Настройки, СтруктураВнешнихИсточниковДанных = Неопределено ) Экспорт
	
	// структуру СтруктураВнешнихИсточниковДанных надо обработать
	// надо в ТЧ переименовать колонки, добавив к наименованию имя ТЧ
	Если СтруктураВнешнихИсточниковДанных = Неопределено Тогда
		ОбработаннаяСтруктураВнешнихИсточниковДанных = Неопределено;
	Иначе
		
		ИмяСтруктурыШапкиОбъекта = "ТаблицаШапкаОбъекта";
		ИмяСтруктурыСинонимовТЧ = "СинонимыТабличныхЧастей";
	
		ОбработаннаяСтруктураВнешнихИсточниковДанных = Новый Структура;
		
		// шапка просто копируется
		ОбработаннаяСтруктураВнешнихИсточниковДанных.Вставить( ИмяСтруктурыШапкиОбъекта, СтруктураВнешнихИсточниковДанных[ ИмяСтруктурыШапкиОбъекта ] );
		
		// Обходим структуру ТЧ
		Для Каждого КлючИЗначение Из СтруктураВнешнихИсточниковДанных[ ИмяСтруктурыСинонимовТЧ ] Цикл
			
			ИмяТЧ = КлючИЗначение.Ключ;
			
			// получим копию таблицы ТЧ из исходной структуры
			ТаблицаТЧ = СтруктураВнешнихИсточниковДанных[ ИмяТЧ ].Скопировать();
			
			// переименуем все колонки этой таблицы
			Для Каждого Колонка Из ТаблицаТЧ.Колонки Цикл
				Колонка.Имя = ИмяТЧ + "__" + Колонка.Имя;
			КонецЦикла;
			
			// добавим таблицу в структуру обработанных
			ОбработаннаяСтруктураВнешнихИсточниковДанных.Вставить( ИмяТЧ, ТаблицаТЧ );
			
		КонецЦикла;
		
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить( СхемаКомпоновкиДанных, Настройки, , , Тип( "ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений" ) );
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать( МакетКомпоновки, ОбработаннаяСтруктураВнешнихИсточниковДанных );
	
	ТЗ = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект( ТЗ );
	ПроцессорВывода.Вывести( ПроцессорКомпоновкиДанных, Ложь );
	
	Возврат ТЗ;
	
КонецФункции



// Процедура - Провести перекомпиляцию настроек условий отбора для вида объекта
//        Внутренняя функция механизма "Связей"
//        Используется при работе со справочником УсловияОтбора
//        Сохраняет в регистре сведений КомпиляцияНастроекУсловийОтборов настроек СКД из справочника "Условия отбора" для заданного вида объекта
//          
//
// Параметры:
//  ВидОбъекта	 - СправочникСсылка.ВидыОбъектовМ - описатель вида объекта
//
Процедура ПровестиПерекомпиляциюНастроекУсловийОтбораДляВидаОбъекта( ВидОбъекта ) Экспорт
	
	Если Не ЗначениеЗаполнено( ВидОбъекта ) Тогда
		Возврат;
	КонецЕсли;
	
	// получим выборку условий отбора
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "ВидОбъекта", ВидОбъекта );
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УсловияОтбора.Ссылка,
	|	УсловияОтбора.НастройкиОтбора
	|ИЗ
	|	Справочник.УсловияОтбора КАК УсловияОтбора
	|ГДЕ
	|	УсловияОтбора.ВидОбъекта = &ВидОбъекта
	|	И УсловияОтбора.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// если актичных условий отбора нет, то необходимо очистить регистр
	Если Выборка.Количество() = 0 Тогда
		
		НаборЗаписей = РегистрыСведений.КомпиляцияНастроекУсловийОтборов.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.ВидОбъекта.Установить( ВидОбъекта );
		
		НаборЗаписей.Записать( Истина );
		
		Возврат;
		
	КонецЕсли;
	
	// для компиляции настроек нужен КомпоновщикНастроек
	// сохдадим его и проинициализируем
	СхемаКомпоновкиДанных = СвязиИОтборы.СформироватьСхемуКомпоновкиДанныхПоВидуОбъектаИсточникаУсловий_НаборДанныхЗапрос( ВидОбъекта, Истина );
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	КомпоновщикНастроек.Инициализировать( Новый ИсточникДоступныхНастроекКомпоновкиДанных( СхемаКомпоновкиДанных ) );
	КомпоновщикНастроек.ЗагрузитьНастройки( СхемаКомпоновкиДанных.НастройкиПоУмолчанию );
	КомпоновщикНастроек.Восстановить();
	
	ОтборКомпоновщика = КомпоновщикНастроек.Настройки.Структура[0].Отбор;
	
	// все настройки должны соединяться по ИЛИ
	// создадим такую группу
	БазоваяГруппаОтбораКомпоновщика = ОтборКомпоновщика.Элементы.Добавить( Тип( "ГруппаЭлементовОтбораКомпоновкиДанных" ) );
	БазоваяГруппаОтбораКомпоновщика.Использование = Истина;
	БазоваяГруппаОтбораКомпоновщика.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	БазоваяГруппаОтбораКомпоновщика.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	// обходим Выборку Условий отбора
	Пока Выборка.Следующий() Цикл
		
		// настройки отдельного Условия отбора соединяются по И
		// создадим такую группу
		ТекущаяГруппаОтбораКомпоновщика = БазоваяГруппаОтбораКомпоновщика.Элементы.Добавить( Тип( "ГруппаЭлементовОтбораКомпоновкиДанных" ) );
		ТекущаяГруппаОтбораКомпоновщика.Использование = Истина;
		ТекущаяГруппаОтбораКомпоновщика.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
		ТекущаяГруппаОтбораКомпоновщика.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		// помимо сохраненных настроек необходим отбор по конкретному элементы Условия отбора
		ЭлементОтбораУсловиеОтбора = ТекущаяГруппаОтбораКомпоновщика.Элементы.Добавить( Тип( "ЭлементОтбораКомпоновкиДанных" ) );
		ЭлементОтбораУсловиеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораУсловиеОтбора.Использование = Истина;
		ЭлементОтбораУсловиеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных( "ЭлементСправочника_УсловияОтбора" );
		ЭлементОтбораУсловиеОтбора.ПравоеЗначение = Выборка.Ссылка;
		ЭлементОтбораУсловиеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
		
		// читаем настройку элемента Условие отбора во временный компоновщик
		врКомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		врКомпоновщикНастроек.Инициализировать( Новый ИсточникДоступныхНастроекКомпоновкиДанных( СхемаКомпоновкиДанных ) );
		врКомпоновщикНастроек.ЗагрузитьНастройки( Выборка.НастройкиОтбора.Получить() );
		врКомпоновщикНастроек.Восстановить();
		
		// переносим настройки отбора из временного компоновщика в общий
		// поскольку настройки также могут содержать группы, делаем перенос через рекурсивную процедуру
		ДополнитьПодгруппуОтбораКомпоновщикаЭлементамиОтбораВторойПодгруппы( ТекущаяГруппаОтбораКомпоновщика, врКомпоновщикНастроек.Настройки.Отбор );
		
	КонецЦикла;
	
	// сохраняем полученную компиляцию настроек в регистр
	НаборЗаписей = РегистрыСведений.КомпиляцияНастроекУсловийОтборов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидОбъекта.Установить( ВидОбъекта );
	
	Запись = НаборЗаписей.Добавить();
	Запись.ВидОбъекта = ВидОбъекта;
	Запись.КопиляцияНастроекУсловийОтборов = Новый ХранилищеЗначения( КомпоновщикНастроек.ПолучитьНастройки(), Новый СжатиеДанных(9) );
		
	НаборЗаписей.Записать( Истина );
	
КонецПроцедуры

// Процедура - Дополнить подгруппу отбора компоновщика элементами отбора второй подгруппы
//        Внутренняя функция механизма "Связей"
//        Используется в процедуре ПровестиПерекомпиляциюНастроекУсловийОтбораДляВидаОбъекта
//        Рекурсивно копирует настройки отбора из одной группы элементов отбора в другую
//
// Параметры:
//  ПодгруппаПолучатель	 - ГруппаЭлементовОтбораКомпоновкиДанных, ОтборКомпоновкиДанных - группа элементов отбора, получаетель копирования
//  ПодгруппаИсточник	 - ГруппаЭлементовОтбораКомпоновкиДанных, ОтборКомпоновкиДанных - группа элементов отбора, источник копирования
//
Процедура ДополнитьПодгруппуОтбораКомпоновщикаЭлементамиОтбораВторойПодгруппы( ПодгруппаПолучатель, ПодгруппаИсточник )
	
	Для Каждого ЭлементИсточник Из ПодгруппаИсточник.Элементы Цикл
		
		Если ТипЗнч( ЭлементИсточник ) = Тип( "ГруппаЭлементовОтбораКомпоновкиДанных" ) Тогда
			
			ЭлементПолучатель = ПодгруппаПолучатель.Элементы.Добавить( Тип( "ГруппаЭлементовОтбораКомпоновкиДанных" ) );
			
			ЗаполнитьЗначенияСвойств( ЭлементПолучатель, ЭлементИсточник, , "ИдентификаторПользовательскойНастройки, Родитель, Элементы" );
			
			ДополнитьПодгруппуОтбораКомпоновщикаЭлементамиОтбораВторойПодгруппы( ЭлементПолучатель, ЭлементИсточник );
			
		Иначе
			
			ЭлементПолучатель = ПодгруппаПолучатель.Элементы.Добавить( Тип( "ЭлементОтбораКомпоновкиДанных" ) );
			
			ЭлементПолучатель.ЛевоеЗначение = Новый ПолеКомпоновкиДанных( Строка( ЭлементИсточник.ЛевоеЗначение ) );
			
			ЗаполнитьЗначенияСвойств( ЭлементПолучатель, ЭлементИсточник, , "ИдентификаторПользовательскойНастройки, ЛевоеЗначение, Родитель" );
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры




// Функция - Получить ссылку вида объекта по объекту
//        Функция выполняет поиск описателя вида обекта по объекту в привилегированном режиме
//
// Параметры:
//  Объект	 - Объект, Ссылка, Строка, Метаданные - объект, или ссылка на объект, или строка с полным именем метаданных, или метаданные объекта
// 
// Возвращаемое значение:
//   - СправочникСсылка.ВидыОбъектовМ - описатель вида объекта
//
Функция ПолучитьСсылкуВидаОбъектаМПоОбъекту( Объект ) Экспорт
	
	Возврат Справочники.ВидыОбъектовМ.ПолучитьСсылкуВидаОбъектаМПоОбъекту( Объект );
	
КонецФункции

// Функция - Получить тип по виду объекта
//        Функция получает тип объекта по описателю вида объекта в привилегированном режиме
//
// Параметры:
//  ВидОбъекта	 - СправочникСсылка.ВидыОбъектовМ - описатель вида объекта
// 
// Возвращаемое значение:
//   - Тип - тип, соответсующий заданному описателю вида объекта
//
Функция ПолучитьТипПоВидуОбъектаМ( ВидОбъекта ) Экспорт
	
	Возврат Справочники.ВидыОбъектовМ.ПолучитьТипПоВидуОбъектаМ( ВидОбъекта );
	
КонецФункции

// Функция - Получить полное имя метаданных по виду объекта
//        Функция получает полное имя метаданных, соответсвующих виду объекта в привилегированнм режиме
//
// Параметры:
//  ВидОбъекта	 - СправочникСсылка.ВидыОбъектовМ - описатель вида объекта
// 
// Возвращаемое значение:
//   - Строка - полное имя метаданных
//
Функция ПолучитьПолноеИмяМетаданныхПоВидуОбъектаМ( ВидОбъекта ) Экспорт
	
	Возврат ВидОбъекта.ПолноеИмяМетаданных;
	
КонецФункции



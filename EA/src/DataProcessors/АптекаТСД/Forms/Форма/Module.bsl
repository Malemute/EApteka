
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Комплектация_РучноеСканированиеМаксимальноеКоличество = Константы.Комплектация_РучноеСканированиеМаксимальноеКоличество.Получить();
	Если РольДоступна("Инвентаризация") тогда
		Элементы.ПриемкаИРаскладкаСамовывозов.Видимость = Ложь;
		Элементы.ПолучитьЗаданиеНаСборкуИКомплектациюЗаказа.Видимость = Ложь; 
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = МенеджерОборудованияВызовСервераПереопределяемый.ИспользоватьПодключаемоеОборудование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещенияПриПодключении, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ЗаголовокИнформации = НСтр("ru = 'При подключении оборудования произошла ошибка: '; en = 'An error occurred while connecting the equipment: '");
		ТекстСообщения     = РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЗаголовокИнформации + ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если РольДоступнаСервер("ТСД") тогда
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	ОповещенияПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект); 
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещенияПриОтключении, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
   
   Если Не РезультатВыполнения.Результат Тогда
      ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
      ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
      Сообщить(ТекстСообщения);
   //Иначе
   //   ТекстСообщения = НСтр("ru = 'Оборудование отключено.'" );
   //   Сообщить(ТекстСообщения);
   КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработкаСканированияШтрихкодаКлиент

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	//Если Событие = "ScanData" Тогда
	Если Событие = "Штрихкод" Тогда
// ЕМ		Scan.ПосылкаДанных = 1;
		Если Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.ПустаяСсылка") тогда
			Ответ = ЗаполнитьСотрудника(Данные);
			Если Ответ <> Истина тогда
				ПоказатьПредупреждение(,Ответ,,"Ошибка!");
			КонецЕсли;
		ИначеЕсли Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.СборкаСамовывозов")
			И ТипСборки = ПредопределенноеЗначение("Перечисление.ТипСборки.СборкаЗаказовИзКоробки") и Элементы.ВыборМаршрута.Видимость тогда
			ВыбратьКоробкуПриСканированииШК(Данные);
		ИначеЕсли Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.ПриемкаИРаскладкаСамовывозов") тогда
			ОбработкаВводаШтрихКодаПриемкаЗаказовМаршрут(Данные);
		ИначеЕсли Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.ЗаменаМестаХранения") тогда
			Ответ = ОбработкаВводаШтрихКодаЗаменаМестаХранения(Данные);
			Если Ответ <> Истина тогда
				ПоказатьПредупреждение(,Ответ,,"Ошибка!");
			КонецЕсли;
		ИначеЕсли Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.СборкаСамовывозов") 
			или Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.СборкаПеремещения") тогда
			ОбработкаВводаШтрихКодаСборкаСамовывозов(Данные);
		ИначеЕсли Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.КомплектацияСамовывозов") тогда
			ОбработкаВводаШтрихКодаКомплектацияСамовывозов(Данные);
		ИначеЕсли Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.ИнформацияПоШтрихКоду") тогда
			ОбработкаВводаШтрихКодаИнформацияПоШК(Данные);
		ИначеЕсли Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.Инвентаризация") тогда
			ОбработкаВводаШтрихКодаИнвентаризация(Данные);
		ИначеЕсли Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.ПечатьЦенников") тогда
			Ответ = ОбработкаВводаШтрихПечатьЦенников(Данные);
			Если Ответ <> Истина тогда
				ПоказатьПредупреждение(,Ответ,,"Ошибка!");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЭтаФорма.Элементы.МестаЗаказаТЧ.Обновить();
	ЭтаФорма.Элементы.Раскаладка_НеПросканированныеТЧ.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаШтрихКодаКомплектацияСамовывозов(ШтрихКод)
	
	Ответ = ОбработкаВводаШтрихКодаКомплектацияСамовывозовНаСервере(ШтрихКод,Ложь);
	Если ТипЗнч(Ответ) = Тип("Строка") тогда
		ПоказатьПредупреждение(,Ответ,10,"Ошибка!");
	ИначеЕсли ТипЗнч(Ответ) = Тип("Число") тогда
		Оповещение = Новый ОписаниеОповещения("ПослеВводаКоличества_Комплектация", ЭтотОбъект, Неопределено);					
		ПоказатьВводЗначения(Оповещение, Ответ, "Введите кол. товара",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12,2)));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаШтрихКодаСборкаСамовывозов(ШтрихКод)
	
	Если ОбработкаВводаШтрихКодаСборкаСамовывозовНаСервере(ШтрихКод,Ложь) тогда
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Число"));
		КЧ = Новый КвалификаторыЧисла(12,2);
		ОписаниеТипов = Новый ОписаниеТипов(Массив, КЧ);
		Оповещение = Новый ОписаниеОповещения("ПослеВводаКоличества_Сборка", ЭтотОбъект, Неопределено);
		
		ПоказатьВводЗначения(Оповещение, Сборка_ТекНоменклатураКол, "Введите кол. товара", ОписаниеТипов);
	Иначе
		ПоказатьПредупреждение(,"Отсканирован неверный товар!",,"Ошибка!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаШтрихКодаПриемкаЗаказовМаршрут(Данные)
	
	Ответ = ОбработкаВводаШтрихКодаПриемкаЗаказовМаршрутСервер(Данные);
	Если ТипЗнч(Ответ) = Тип("Строка") тогда
		ПоказатьПредупреждение(,Ответ,10,"Ошибка!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаШтрихКодаИнвентаризация(ШК)
	Ответ = ОбработкаВводаШтрихКодаИнвентаризацияСервер(ШК);
	Если ТипЗнч(Ответ) = Тип("Строка") тогда
		ПоказатьПредупреждение(,Ответ,10,"Ошибка!");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСканированияШтрихкодаСервер

&НаСервере
Функция ЗаполнитьСотрудника(Данные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ШтрихКод = &ШтрихКод";
	Запрос.УстановитьПараметр("ШтрихКод", Данные);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат "Сотрудник не найден!";
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() цикл
		Объект.Сотрудник = Выборка.Ссылка;
	КонецЦикла;
	МестаЗаказа.Параметры.УстановитьЗначениеПараметра("Сотрудник",Объект.Сотрудник);
	МестаЗаказа.Параметры.УстановитьЗначениеПараметра("Маршрут",Маршрут);
	Раскаладка_НеПросканированные.Параметры.УстановитьЗначениеПараметра("Маршрут",Маршрут);
	ЭтаФорма.Инвентаризация_Прогресс.Параметры.УстановитьЗначениеПараметра("Сотрудник",Объект.Сотрудник);
	ЭтаФорма.Инвентаризация_Прогресс.Параметры.УстановитьЗначениеПараметра("Склад",ПараметрыСеанса.ОсновнойСклад);
	ЭтаФорма.Заголовок = Объект.Сотрудник.Наименование;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ОбработкаВводаШтрихКодаКомплектацияСамовывозовНаСервере(ШтрихКод,ГиперСсылка)
	Если Комплектация_ДокументКомплектация.Сотрудник <> Объект.Сотрудник тогда
		Комплектация_ОчиститьДанные();
		Элементы.ОсновноеМеню.Видимость = Истина;
		Элементы.СборкаИКомплектацияЗаказовГруппа.Видимость = Ложь;
		Номенклатура =  ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.ВыборРежима");	
		Элементы.Комплектация.Видимость = Ложь;
		Элементы.СборкаИКомплектацияЗаказовГруппа.Видимость = Ложь;
		Возврат "Комплектация была переназначена на пользователя " + Объект.Сотрудник.Наименование;		
	КонецЕсли;
	
	Если Лев(ШтрихКод,2) = "21" и Комплектация_ОтсканированноТовара > 0 тогда	
		
		ЗСЯ = ПолучитьЗСЯИзШтрихКода(ШтрихКод,Перечисления.ВидыМестЗСЯ.СборкаСамовывозов,Ложь);
		Если ТипЗнч(ЗСЯ) = Тип("Строка") тогда
			Возврат ЗСЯ;
		КонецЕсли;
		
		Если Комплектация_ТекТоварКоличество = 0 тогда
			Возврат "Весь товар отсканирован!";
		КонецЕсли;
		Если ЗСЯ = Комплектация_ТекТоварЗСЯ тогда
			МенеджерЗаписи = РегистрыСведений.КомплектацияЗаказов_ПрогрессКомплектации.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = ТекущаяДата();
			МенеджерЗаписи.Заказ = Комплектация_ТекЗаказ;
			МенеджерЗаписи.Товар = Комплектация_ТекТоварСсылка;
			МенеджерЗаписи.ДокументКомплектация = Комплектация_ДокументКомплектация;
			МенеджерЗаписи.Партия = Комплектация_ТекТоварПартия;
			МенеджерЗаписи.ЗСЯ = ЗСЯ;
			МенеджерЗаписи.Количество = Комплектация_ОтсканированноТовара;
			МенеджерЗаписи.Записать();
			Если Комплектация_ТекТоварКоличество - Комплектация_ОтсканированноТовара = 0 тогда
				Комплектация_ИндексСтроки = Комплектация_ИндексСтроки+1;
				Если Комплектация_ИндексСтроки > Комплектация.Количество() - 1 тогда
					Комплектация_ИндексСтроки = Комплектация.Количество() - 1;
				КонецЕсли;				
				Комплектация_ЗаполнитьКомплектацию();
				Комплектация_ЗаполнитьПоИндексуСтроки();
			Иначе
				Комплектация_ЗаполнитьКомплектацию();
				Комплектация_ЗаполнитьПоИндексуСтроки();
			КонецЕсли;
			Если Комплектация.Итог("Количество") = Комплектация.Итог("КоличествоСкомплектовано") тогда
				Если Комплектация_СформироватьДокументКомплектация() тогда
					Комплектация_ОчиститьДанные();
					Элементы.ОсновноеМеню.Видимость = Истина;
					Элементы.СменаМестаХраненияГруппа.Видимость = Ложь;
					Элементы.РаскладкаЗаказаГруппа.Видимость = Ложь;
					Элементы.ВыборМаршрутаГруппа.Видимость = Ложь;
					Элементы.ПриемкаИРаскладкаСамовывозовГруппа.Видимость = Ложь;
					Элементы.СборкаИКомплектацияЗаказовГруппа.Видимость = Ложь;
					ВозвратКВыборуСервер();
					Маршруты.Очистить();
					Маршрут = ПредопределенноеЗначение("Документ.МаршрутНаАптеку.ПустаяСсылка");
					МестоЗСЯ = ПредопределенноеЗначение("Справочник.МестоЗСЯ.ПустаяСсылка");
					Номенклатура =  ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
					Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.ВыборРежима");	
					Элементы.Комплектация.Видимость = Ложь;
					Элементы.СборкаИКомплектацияЗаказовГруппа.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Возврат "Отсканирована не верная ячейка!!!";
		КонецЕсли;	
		Возврат Истина;	    		
	Иначе
		Если Лев(ШтрихКод,2) = "21" тогда 
			Возврат "Просканируйте товар!!!";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаводскиеШК.Владелец
		|ИЗ
		|	Справочник.ЗаводскиеШК КАК ЗаводскиеШК
		|ГДЕ
		|	ЗаводскиеШК.Владелец = &Номенклатура
		|	И ЗаводскиеШК.Наименование ПОДОБНО &ШК";
		
		Запрос.УстановитьПараметр("Номенклатура",Комплектация_ТекТоварСсылка);
		Запрос.УстановитьПараметр("ШК","%"+ШтрихКод+?(ГиперСсылка,"","%"));
		Результат = Запрос.Выполнить(); 
		Если Результат.Пустой() тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаКомплектации.НомерСтроки,
			|	ТаблицаКомплектации.Товар
			|ПОМЕСТИТЬ ТаблицаКомплектации
			|ИЗ
			|	&ТаблицаКомплектации КАК ТаблицаКомплектации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаКомплектации.НомерСтроки
			|ИЗ
			|	Справочник.ЗаводскиеШК КАК ЗаводскиеШК
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКомплектации КАК ТаблицаКомплектации
			|		ПО ЗаводскиеШК.Владелец = ТаблицаКомплектации.Товар
			|			И (ЗаводскиеШК.Наименование ПОДОБНО &ШК)";
			Запрос.УстановитьПараметр("ТаблицаКомплектации", Комплектация.Выгрузить(,"НомерСтроки,Товар"));
			Запрос.УстановитьПараметр("ШК","%"+ШтрихКод+?(ГиперСсылка,"","%"));
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() тогда
				Возврат "Просканирован неверный товар!";
			Иначе
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() цикл
					Комплектация_ИндексСтроки = Выборка.НомерСтроки;
					Комплектация_ОтсканированноТовара = 0;
					Комплектация_ЗаполнитьПоИндексуСтроки();
					СтрокаКомплектация = Комплектация.Получить(Комплектация_ИндексСтроки);
					Если СтрокаКомплектация.Количество - СтрокаКомплектация.КоличествоСкомплектовано >= Комплектация_РучноеСканированиеМаксимальноеКоличество тогда
						Возврат СтрокаКомплектация.Количество - СтрокаКомплектация.КоличествоСкомплектовано ;
					Иначе
						Если Комплектация_ОтсканированноТовара <= СтрокаКомплектация.Количество - СтрокаКомплектация.КоличествоСкомплектовано тогда 
							Комплектация_ОтсканированноТовара = 1;
							Возврат Истина
						Иначе
							Возврат "Уже отсканированно необходимое количество!";
						КонецЕсли;
					КонецЕсли;		
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() цикл
			Если Комплектация_ТекТоварСсылка = Выборка.Владелец тогда
				СтрокаКомплектация = Комплектация.Получить(Комплектация_ИндексСтроки);
				Если СтрокаКомплектация.Количество-Комплектация_ОтсканированноТовара >= Комплектация_РучноеСканированиеМаксимальноеКоличество тогда
					Возврат СтрокаКомплектация.Количество-Комплектация_ОтсканированноТовара;
				Иначе
					Если Комплектация_ОтсканированноТовара +1 <= СтрокаКомплектация.Количество тогда 
						Комплектация_ОтсканированноТовара = Комплектация_ОтсканированноТовара + 1;
						Возврат Истина
					Иначе
						Возврат "Уже отсканированно необходимое количество!";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОбработкаВводаШтрихКодаСборкаСамовывозовНаСервере(ШтрихКод,ГиперСсылка)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаводскиеШК.Ссылка
	|ИЗ
	|	Справочник.ЗаводскиеШК КАК ЗаводскиеШК
	|ГДЕ
	|	ЗаводскиеШК.Владелец = &Номенклатура
	|	И ЗаводскиеШК.Наименование ПОДОБНО &ШК";
	
	Запрос.УстановитьПараметр("Номенклатура",Сборка_ТекНоменклатураСсылка);
	Запрос.УстановитьПараметр("ШК","%"+ШтрихКод+?(ГиперСсылка,"","%"));
	
	Если Запрос.Выполнить().Пустой() тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ОбработкаВводаШтрихКодаПриемкаЗаказовМаршрутСервер(Данные,ЭтоКод = Ложь)
	
	Если ЭтаФорма.Элементы.ВыборМаршрутаГруппа.Видимость тогда
		Возврат ВыборМаршрутаСервер(Данные);
	КонецЕсли;
	Если Лев(Данные,2) = "21" и не ЭтоКод тогда 
		
		ЗСЯ = ПолучитьЗСЯИзШтрихКода(Данные,Перечисления.ВидыМестЗСЯ.ХранениеМестСамовывозов,Истина);
		Если ТипЗнч(ЗСЯ) = Тип("Строка") тогда
			Возврат ЗСЯ;
		КонецЕсли;
		Если не ЗначениеЗаполнено(ЗСЯ) тогда
			Возврат "Просканирован неверный тип ячейки!";	
		КонецЕсли;
		ТаблицаЗаказовМестЗаказов = ПолучитьСписокОбрабатываемыхЗаказовИМестЗаказов();
		Если ТаблицаЗаказовМестЗаказов.Количество() = 0 тогда
			Возврат "Нет просканированных заказов!";
		КонецЕсли;
		ОшибкаТемпературногоРежима = ложь;
		ТекстОшибки = "Тип просканированной ячейки - " + ?(ЗСЯ.ЗонаСсылка.Холод,"ХОЛОД","ТЕПЛО")+"
					|Пакеты :"+Символы.ПС;			
		Для каждого СтрокаМеста из ТаблицаЗаказовМестЗаказов цикл
			Если СтрокаМеста.МестоЗаказа.Холод <> ЗСЯ.ЗонаСсылка.Холод тогда
				ТекстОшибки = ТекстОшибки + СокрЛП(СтрокаМеста.МестоЗаказа.Код)+Символы.ПС;
				ОшибкаТемпературногоРежима = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ОшибкаТемпературногоРежима тогда
			ТекстОшибки = ТекстОшибки + "Должны хранится в " + ?(ЗСЯ.ЗонаСсылка.Холод,"ТЕПЛЕ","ХОЛОДЕ");
			Возврат ТекстОшибки;
		КонецЕсли;
		ЗаполнитьЗСЯПоМестамЗаказа(ТаблицаЗаказовМестЗаказов,ЗСЯ);
		ЗаполнитьДанныеПоМаршруту(Маршрут);
		Элементы.МестаЗаказаТЧ.Обновить();
	ИначеЕсли Лев(Данные,1) = "1" или Лев(Данные,2) = "26" или ЭтоКод Тогда 
		МестоЗаказа = ПолучитьМестоЗаказа(Данные,ЭтоКод);
		Если ЗначениеЗаполнено(МестоЗаказа) тогда
			Ошибка = ПроверитьМестоЗаказаМаршрут(МестоЗаказа);
			Если ЗначениеЗаполнено(Ошибка) тогда
				Возврат Ошибка;
			КонецЕсли;
			ДобавитьСканированиеМестоЗаказа(МестоЗаказа); 
			ЗаполнитьДанныеПоМаршруту(Маршрут);
			Элементы.МестаЗаказаТЧ.Обновить();
			Возврат Истина;
		Иначе
			Возврат "Место заказа не найдено!";
		КонецЕсли;		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ОбработкаВводаШтрихКодаЗаменаМестаХранения(Данные)
	
	//Если не ЗначениеЗаполнено(МестоЗСЯ) тогда	
	Если Лев(Данные,2) = "21" тогда 
		ЗСЯ = ПолучитьЗСЯИзШтрихКода(Данные,Перечисления.ВидыМестЗСЯ.ХранениеНоменклатуры,Истина);
		Если ТипЗнч(ЗСЯ) = Тип("Строка") тогда
			Возврат ЗСЯ;
		КонецЕсли;
		МестоЗСЯ = ЗСЯ;
		//КонецЕсли;		
	Иначе		
		Номенклатура = ПолучитьНоменклатуруПоШК(Данные);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МестоЗСЯ) и ЗначениеЗаполнено(Номенклатура) тогда
		Ответ = ИзменитьМестоХраненияНаСервере();
		Возврат Ответ;
	КонецЕсли;
	
	Возврат Истина;	
	
КонецФункции

&НаСервере
Процедура ОбработкаВводаШтрихКодаИнформацияПоШК(ШК)
	
	ИдентификаторШК = Лев(ШК,2);
	
	ДлинаШК = СтрДлина(ШК);
	
	Если ДлинаШК = 8 тогда
		ЗаполнитьИнформациюПоСотруднику(ШК);	
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторШК = "26" или Лев(ИдентификаторШК,1) = "1" тогда
		ЗаполнитьИнформациюПоМестуЗаказа(ШК);
	ИначеЕсли ИдентификаторШК = "21" тогда
		ЗаполнитьИнформациюПоМестуЗСЯ(ШК);
	Иначе
		ЗаполнитьИнформациюПоНоменклатуре(ШК);
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ОбработкаВводаШтрихКодаИнвентаризацияСервер(ШК)
	
	НоменклатураТек = ПолучитьНоменклатуруПоШК(ШК);
	
	Возврат Инвентаризация_ОбработкаВыбораНоменклатуры(НоменклатураТек);	
	
КонецФункции

#КонецОбласти

#Область ОсновноеМеню

&НаКлиенте
Процедура СменаМестаХранения(Команда)
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) тогда
		ЭтаФорма.Элементы.СменаМестаХраненияГруппа.Видимость = Истина;
		ЭтаФорма.Элементы.ОсновноеМеню.Видимость = Ложь; 
		Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.ЗаменаМестаХранения");
	Иначе
		ПоказатьПредупреждение(,"Для продолжения отсканируейте ШК сотрудника!");			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриемкаИРаскладкаСамовывозов(Команда)
	Если ЗначениеЗаполнено(Объект.Сотрудник) тогда
		ЭтаФорма.Элементы.ПриемкаИРаскладкаСамовывозовГруппа.Видимость = Истина;
		ЭтаФорма.Элементы.ВыборМаршрутаГруппа.Видимость = Истина;
		ЭтаФорма.Элементы.ОсновноеМеню.Видимость = Ложь;
		ЭтаФорма.Элементы.РаскладкаЗаказаГруппа.Видимость = Ложь;
		Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.ПриемкаИРаскладкаСамовывозов");
		ЗаполнитьМаршруты();     
	Иначе
		ПоказатьПредупреждение(,"Для продолжения отсканируейте ШК сотрудника!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗаданиеНаСборкуИКомплектацию(Команда)
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) тогда
		Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.СборкаСамовывозов");
		ТипСборки = ПредопределенноеЗначение("Перечисление.ТипСборки.СборкаЗаказа");
		Элементы.ОсновноеМеню.Видимость = Ложь;
		Элементы.СборкаИКомплектацияЗаказовГруппа.Видимость = Истина;  
		Элементы.ВыборХолодТепло.Видимость = Истина;
	Иначе
		ПоказатьПредупреждение(,"Для продолжения отсканируейте ШК сотрудника!");			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЦенников(Команда)
	
	ЭтаФорма.Элементы.ПечатьЦенниковГруппа.Видимость = Истина;
	ЭтаФорма.Элементы.ОсновноеМеню.Видимость = Ложь;
	Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.ПечатьЦенников");
	
КонецПроцедуры

&НаКлиенте
Процедура Инвентаризация(Команда)
	Если ЗначениеЗаполнено(Объект.Сотрудник) тогда
		ЭтаФорма.Элементы.Инвентаризация.Видимость = Истина;
		ЭтаФорма.Элементы.ОсновноеМеню.Видимость = Ложь;
		ЭтаФорма.Элементы.РаскладкаЗаказаГруппа.Видимость = Ложь;
		Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.Инвентаризация");
	Иначе
		ПоказатьПредупреждение(,"Для продолжения отсканируейте ШК сотрудника!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияПоШтрихКоду(Команда)
	
	ЭтаФорма.Элементы.ИнформацияПоШтрихКодуГруппа.Видимость = Истина;
	ЭтаФорма.Элементы.ОсновноеМеню.Видимость = Ложь;
	Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.ИнформацияПоШтрихКоду");
	ВывестиНачальноеЗначениеИнфоПоШК();
	
КонецПроцедуры

#КонецОбласти

#Область СменаМестаХранения

&НаСервере
Функция ИзменитьМестоХраненияНаСервере()
	
	Если не ЗначениеЗаполнено(МестоЗСЯ) тогда
		Возврат "Не отсканированно место ЗСЯ!";
	КонецЕсли;
	Если не ЗначениеЗаполнено(Номенклатура) тогда
		Возврат "Не отсканированна номенклатура!";
	КонецЕсли;
	//НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
	//СтрокаЗСЯ = НоменклатураОбъект.ЗСЯ.Найти(ПараметрыСеанса.ОсновнойСклад,"Склад");
	//Если СтрокаЗСЯ = неопределено тогда
	//	СтрокаЗСЯ = НоменклатураОбъект.ЗСЯ.Добавить();
	//	СтрокаЗСЯ.Склад = ПараметрыСеанса.ОсновнойСклад;
	//КонецЕсли;
	//СтрокаЗСЯ.Зона = МестоЗСЯ.Зона;
	//СтрокаЗСЯ.Стеллаж = МестоЗСЯ.Стеллаж;
	//СтрокаЗСЯ.Ячейка = МестоЗСЯ.Ячейка;
	//НоменклатураОбъект.Записать();
	Склад = ПараметрыСеанса.ОсновнойСклад;
	СтрокиЗСЯ = РегистрыСведений.ЗСЯНоменклатуры.СоздатьНаборЗаписей();
	СтрокиЗСЯ.Отбор.Номенклатура.Значение = Номенклатура;
	СтрокиЗСЯ.Отбор.Номенклатура.Использование = Истина;
	СтрокиЗСЯ.Отбор.Склад.Значение = Склад;
	СтрокиЗСЯ.Отбор.Склад.Использование = Истина;
	СтрокиЗСЯ.Прочитать();
	Для каждого строка из СтрокиЗСЯ цикл
		МенеджерЗСЯ = РегистрыСведений.ЗСЯНоменклатуры.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗСЯ,Строка);
		МенеджерЗСЯ.Удалить();
	КонецЦикла;
	МенеджерЗСЯ = РегистрыСведений.ЗСЯНоменклатуры.СоздатьМенеджерЗаписи();
	МенеджерЗСЯ.Номенклатура = Номенклатура;
	МенеджерЗСЯ.Склад = Склад; 
	МенеджерЗСЯ.МестоЗСЯ = МестоЗСЯ;
	МенеджерЗСЯ.Зона = МестоЗСЯ.Зона;
	МенеджерЗСЯ.Стеллаж = МестоЗСЯ.Стеллаж;
	МенеджерЗСЯ.Ячейка = МестоЗСЯ.Ячейка;
	МенеджерЗСЯ.ЗонаСсылка = МестоЗСЯ.ЗонаСсылка;
	МенеджерЗСЯ.Записать();
	
	МестоЗСЯ = справочники.МестоЗСЯ.ПустаяСсылка();
	Номенклатура = справочники.Номенклатура.ПустаяСсылка();
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьМестоХранения(Команда)
	
	Ответ = ИзменитьМестоХраненияНаСервере();
	Если Ответ <> истина тогда
		ПоказатьПредупреждение(,Ответ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПриемкаИРаскладкаСамовывозов  

&НаКлиенте
Процедура Раскладка_РучнойВводКодаПакета(Команда)
	Данные = 0;
	КодВведен = ВвестиЧисло(Данные,"Введите код пакета",9,0);
	Если КодВведен и ЗначениеЗаполнено(Данные) тогда
		Ответ = ОбработкаВводаШтрихКодаПриемкаЗаказовМаршрутСервер(Формат(Данные,"ЧГ="),Истина);
		Если Ответ <> Истина тогда
			ПоказатьПредупреждение(,Ответ,,"Ошибка!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗСЯПоМестамЗаказа(ТаблицаЗаказовМестЗаказов,ЗСЯ)
	
	Для каждого строка из ТаблицаЗаказовМестЗаказов цикл
		
		МенеджерЗаписи = РегистрыСведений.ПриемкаСамовывозов_РаскаладкаЗаказов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Заказ = строка.Заказ;
		МенеджерЗаписи.Сотрудник = Объект.Сотрудник;
		МенеджерЗаписи.МестоЗаказа = строка.МестоЗаказа;
		МенеджерЗаписи.Маршрут = Маршрут;
		МенеджерЗаписи.ЗСЯ = справочники.МестоЗСЯ.ПустаяСсылка();
		МенеджерЗаписи.Удалить();	
		
		МенеджерЗаписи = РегистрыСведений.ПриемкаСамовывозов_РаскаладкаЗаказов.СоздатьМенеджерЗаписи();		
		МенеджерЗаписи.Заказ = строка.Заказ;
		МенеджерЗаписи.Сотрудник = Объект.Сотрудник;
		МенеджерЗаписи.МестоЗаказа = строка.МестоЗаказа;
		МенеджерЗаписи.Маршрут = Маршрут;
		МенеджерЗаписи.ЗСЯ = ЗСЯ;
		МенеджерЗаписи.Записать();	
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокОбрабатываемыхЗаказовИМестЗаказов()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемкаСамовывозов_РаскаладкаЗаказов.Заказ,
	|	ПриемкаСамовывозов_РаскаладкаЗаказов.МестоЗаказа
	|ИЗ
	|	РегистрСведений.ПриемкаСамовывозов_РаскаладкаЗаказов КАК ПриемкаСамовывозов_РаскаладкаЗаказов
	|ГДЕ
	|	ПриемкаСамовывозов_РаскаладкаЗаказов.Сотрудник = &Сотрудник
	|	И ПриемкаСамовывозов_РаскаладкаЗаказов.ЗСЯ = ЗНАЧЕНИЕ(Справочник.МестоЗСЯ.ПустаяСсылка)
	|	И ПриемкаСамовывозов_РаскаладкаЗаказов.Маршрут = &Маршрут";
	Запрос.УстановитьПараметр("Маршрут", Маршрут);	
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	
	ТоварыКСборкеТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат ТоварыКСборкеТЗ;	
	
КонецФункции

&НаСервере
Процедура ДобавитьСканированиеМестоЗаказа(МестоЗаказа)
	
	МенеджерЗаписи = РегистрыСведений.ПриемкаСамовывозов_РаскаладкаЗаказов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Заказ = МестоЗаказа.Документ;
	МенеджерЗаписи.Маршрут = Маршрут;
	МенеджерЗаписи.Сотрудник = Объект.Сотрудник;
	МенеджерЗаписи.МестоЗаказа = МестоЗаказа;
	МенеджерЗаписи.ЗСЯ = Справочники.МестоЗСЯ.ПустаяСсылка();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

&НаСервере
Функция	ПроверитьМестоЗаказаМаршрут(МестоЗаказа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемкаСамовывозов_РаскаладкаЗаказов.МестоЗаказа
	|ИЗ
	|	РегистрСведений.ПриемкаСамовывозов_РаскаладкаЗаказов КАК ПриемкаСамовывозов_РаскаладкаЗаказов
	|ГДЕ
	|	ПриемкаСамовывозов_РаскаладкаЗаказов.МестоЗаказа = &МестоЗаказа";
	Запрос.УстановитьПараметр("МестоЗаказа",МестоЗаказа);
	Если не Запрос.Выполнить().Пустой() тогда
		Возврат "Уже отсканированно!";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемкаСамовывозов_РаскаладкаЗаказов.МестоЗаказа
	|ИЗ
	|	РегистрСведений.ПриемкаСамовывозов_РаскаладкаЗаказов КАК ПриемкаСамовывозов_РаскаладкаЗаказов
	|ГДЕ
	|	ПриемкаСамовывозов_РаскаладкаЗаказов.Маршрут = &Маршрут
	|	И ПриемкаСамовывозов_РаскаладкаЗаказов.Сотрудник = &Сотрудник
	|	И ПриемкаСамовывозов_РаскаладкаЗаказов.МестоЗаказа.Холод <> &Холод";
	Запрос.УстановитьПараметр("Сотрудник",Объект.Сотрудник);
	Запрос.УстановитьПараметр("Маршрут",Маршрут);
	Запрос.УстановитьПараметр("Холод", МестоЗаказа.Холод);
	Если не Запрос.Выполнить().Пустой() тогда
		Возврат "Нельзя сканировать холод и тепло одновременно!!!";
	КонецЕсли;

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаЗаказовОбороты.МестоЗаказа,
	|   МестаЗаказовОбороты.Маршрут,
	|	МестаЗаказовОбороты.ПриемкаПриход,
	|	МестаЗаказовОбороты.ПриемкаРасход
	|ИЗ
	|	РегистрНакопления.МестаЗаказов.Обороты(
	|			,
	|			,
	|			,
	|			МестоЗаказа = &МестоЗаказа) КАК МестаЗаказовОбороты";
	Запрос.УстановитьПараметр("МестоЗаказа",МестоЗаказа);
	Если Запрос.Выполнить().Пустой() тогда
		Возврат "Маршрут заказа ещё не загружен в базу!";
	Иначе
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() цикл
			Если Выборка.Маршрут <> Маршрут тогда
				Возврат "Место относится к маршруту " + СокрЛП(Выборка.Маршрут.НомерДокументаОснования);	
			ИначеЕсли Выборка.ПриемкаПриход > 0 и Выборка.ПриемкаРасход > 0 тогда
				Возврат "Место уже принято и разложенно";
			ИначеЕсли Выборка.ПриемкаПриход >0 и Выборка.ПриемкаРасход = 0 тогда
				Возврат "";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат "";
	
КонецФункции

&НаСервере
Функция ПолучитьМестоЗаказа(Данные,ЭтоКод) 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НаклейкиМестЗаказа.Ссылка
	|ИЗ
	|	Справочник.НаклейкиМестЗаказа КАК НаклейкиМестЗаказа
	|ГДЕ
	|	(НаклейкиМестЗаказа.Наименование = &Наименование
	|				И НЕ &ЭтоКод
	|			ИЛИ НаклейкиМестЗаказа.Код = &Наименование
	|				И &ЭтоКод)";
	Запрос.УстановитьПараметр("Наименование",Данные);
	Запрос.УстановитьПараметр("ЭтоКод",ЭтоКод);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	Возврат Справочники.НаклейкиМестЗаказа.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ЗавершитьРаскаладкуНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемкаСамовывозов_РаскаладкаЗаказов.Сотрудник,
	|	ПриемкаСамовывозов_РаскаладкаЗаказов.Заказ,
	|	ПриемкаСамовывозов_РаскаладкаЗаказов.МестоЗаказа,
	|	ПриемкаСамовывозов_РаскаладкаЗаказов.ЗСЯ
	|ПОМЕСТИТЬ втЗаказыЗСЯ
	|ИЗ
	|	РегистрСведений.ПриемкаСамовывозов_РаскаладкаЗаказов КАК ПриемкаСамовывозов_РаскаладкаЗаказов
	|ГДЕ
	|	ПриемкаСамовывозов_РаскаладкаЗаказов.Сотрудник = &Сотрудник
	|	И ПриемкаСамовывозов_РаскаладкаЗаказов.Маршрут = &Маршрут
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаказыЗСЯ.Сотрудник,
	|	втЗаказыЗСЯ.Заказ,
	|	втЗаказыЗСЯ.МестоЗаказа,
	|	втЗаказыЗСЯ.ЗСЯ
	|ИЗ
	|	втЗаказыЗСЯ КАК втЗаказыЗСЯ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаказыЗСЯ.ЗСЯ
	|ИЗ
	|	втЗаказыЗСЯ КАК втЗаказыЗСЯ
	|ГДЕ
	|	втЗаказыЗСЯ.ЗСЯ = ЗНАЧЕНИЕ(Справочник.МестоЗСЯ.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Маршрут",Маршрут);
	Запрос.УстановитьПараметр("Сотрудник",Объект.Сотрудник);
	Результат = Запрос.ВыполнитьПакет();
	Если Результат[1].Пустой() тогда
		Возврат "Нет разложенных самовывозов! Невозможно завершить раскладку!";
	КонецЕсли;
	Если НЕ Результат[2].Пустой() тогда
		Возврат "Просканируйте ЗСЯ!";
	КонецЕсли;
	
	РаскладкаСамовывоза = Документы.РаскладкаСамовывоза.СоздатьДокумент();
	РаскладкаСамовывоза.Дата = ТекущаяДата();
	РаскладкаСамовывоза.ДокументОснование = Маршрут;
	РаскладкаСамовывоза.Сотрудник = Объект.Сотрудник;
	РаскладкаСамовывоза.Склад = ПараметрыСеанса.ОсновнойСклад;
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() цикл
		Строка = РаскладкаСамовывоза.Состав.Добавить();
		Строка.Заказ = Выборка.Заказ;
		Строка.МестоЗаказа = Выборка.МестоЗаказа;
		Строка.ЗСЯ = Выборка.ЗСЯ;
	КонецЦикла;
	РаскладкаСамовывоза.Записать(РежимЗаписиДокумента.Проведение);
	МестоЗСЯ = справочники.МестоЗСЯ.ПустаяСсылка();
	Номенклатура = Справочники.Номенклатура.ПустаяСсылка();

	//{Грачев Р.А. 14.02.2018
	Если ОбщиеФункцииСервер.АдресХраненияПринадлежитФранчайзи(Маршрут.АдресХранения, РаскладкаСамовывоза.Дата) Тогда
		Если РаскладкаСамовывоза.Проведен Тогда
			МассивЗаказов = РаскладкаСамовывоза.Состав.ВыгрузитьКолонку("Заказ");
			СоздатьПриходныеОрдераПоЗаказам(МассивЗаказов);
		КонецЕсли;
	КонецЕсли;
	//}Грачев Р.А. 14.02.2018	

КонецФункции

&НаКлиенте
Процедура ЗавершитьРаскаладку(Команда)
	
	Ответ = ЗавершитьРаскаладкуНаСервере();
	Если Ответ <> Неопределено тогда
		ПоказатьПредупреждение(,Ответ,,"Ошибка!");
	КонецЕсли;
	ЭтаФорма.Элементы.МестаЗаказаТЧ.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМаршруты()
	Маршруты.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаЗаказовОстатки.Маршрут,
	|	МестаЗаказовОстатки.Маршрут.НомерДокументаОснования КАК НомерМаршрута,
	|	МестаЗаказовОстатки.Маршрут.Дата КАК ДатаМаршрута,
	|	МестаЗаказовОстатки.МестоЗаказа
	|ПОМЕСТИТЬ втМаршруты
	|ИЗ
	|	РегистрНакопления.МестаЗаказов.Остатки КАК МестаЗаказовОстатки
	|ГДЕ
	|	МестаЗаказовОстатки.ПриемкаОстаток > 0
	|	И НЕ МестаЗаказовОстатки.Маршрут.Номер ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	МестаЗаказовОстатки.Маршрут,
	|	МестаЗаказовОстатки.Маршрут.НомерДокументаОснования,
	|	МестаЗаказовОстатки.Маршрут.Дата,
	|	МестаЗаказовОстатки.МестоЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втМаршруты.Маршрут,
	|	втМаршруты.НомерМаршрута,
	|	втМаршруты.ДатаМаршрута
	|ИЗ
	|	втМаршруты КАК втМаршруты
	|
	|СГРУППИРОВАТЬ ПО
	|	втМаршруты.НомерМаршрута,
	|	втМаршруты.Маршрут,
	|	втМаршруты.ДатаМаршрута";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		СтрокаМаршрут = Маршруты.Добавить(); 
		СтрокаМаршрут.Маршрут = Выборка.Маршрут;
		СтрокаМаршрут.НомерМаршрута = СокрЛП(Выборка.НомерМаршрута);
		СтрокаМаршрут.ДатаМаршрута = Выборка.ДатаМаршрута;	
		ШК = "2"+Формат(СтрокаМаршрут.ДатаМаршрута,"ДФ=гг")+Формат(Число(СтрокаМаршрут.НомерМаршрута),"ЧЦ=9; ЧВН=; ЧГ=");
		ШК = ШК + ОбщиеФункцииСервер.КонтрольныйСимволEAN(ШК,13);
		СтрокаМаршрут.ШтрихКод = ШК;
	КонецЦикла;
	Для каждого строка из Маршруты цикл
		ИмяКоманды ="К"+строка.ШтрихКод; 
		КомандаФормы = ЭтаФорма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "ВыборМаршрута";
		Кнопка = ЭтаФорма.Элементы.Добавить(
		ИмяКоманды,//Имя элемента
		Тип("КнопкаФормы"),//Тип элемента
		Элементы.СписокМаршрутов);//Владелец элемента.
		Кнопка.Высота = 2;
		Кнопка.РастягиватьПоГоризонтали = Истина;
		
		Кнопка.ИмяКоманды = ИмяКоманды;  
		Кнопка.Отображение     = ОтображениеКнопки.Текст;
		Кнопка.Заголовок    = строка.НомерМаршрута + " " + Формат(строка.ДатаМаршрута,"ДФ=dd.MM.yyyy");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборМаршрута(Команда)
	Ответ = ВыборМаршрутаСервер(Команда.Имя);	
	Если ТипЗнч(Ответ) = Тип("Строка") тогда
		ПоказатьПредупреждение(,Ответ,10,"Ошибка!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВыборМаршрутаСервер(ШК)
	ШКМаршрута = СтрЗаменить(ШК,"К","");
	СтрокиМаршрута = Маршруты.НайтиСтроки(Новый Структура("ШтрихКод",ШКМаршрута));
	Для каждого СтрокаМаршрута из СтрокиМаршрута цикл
		Маршрут = СтрокаМаршрута.Маршрут;	
		ЗаполнитьДанныеПоМаршруту(Маршрут,Истина);
		Элементы.ВыборМаршрутаГруппа.Видимость = Ложь;
		Элементы.РаскладкаЗаказаГруппа.Видимость = Истина;
		Элементы.Группа3.ТекущаяСтраница = Элементы.Группа5; 
		МестаЗаказа.Параметры.УстановитьЗначениеПараметра("Маршрут",Маршрут);
		Раскаладка_НеПросканированные.Параметры.УстановитьЗначениеПараметра("Маршрут",Маршрут);
		Элементы.МестаЗаказаТЧ.Обновить();
		Возврат Истина;
	КонецЦикла;
	Возврат "Маршрут не найден!";	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПоМаршруту(Маршрут,ПерекинутьНаТекПользователя = неопределено)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ПрогрессСборки.ВсегоОбычные) КАК ВсегоОбычные,
	|	МАКСИМУМ(ПрогрессСборки.ВсегоХолод) КАК ВсегоХолод,
	|	СУММА(ПрогрессСборки.СканОбычные) КАК СканОбычные,
	|	СУММА(ПрогрессСборки.СканХолод) КАК СканХолод
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ВЫБОР
	|				КОГДА МаршрутНаАптекуСостав.МестоЗаказа.Холод
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК ВсегоОбычные,
	|		СУММА(ВЫБОР
	|				КОГДА МаршрутНаАптекуСостав.МестоЗаказа.Холод
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ВсегоХолод,
	|		СУММА(ВЫБОР
	|				КОГДА ЕСТЬNULL(ПриемкаСамовывозов_РаскаладкаЗаказов.МестоЗаказа.Холод, ИСТИНА)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК СканОбычные,
	|		СУММА(ВЫБОР
	|				КОГДА ЕСТЬNULL(ПриемкаСамовывозов_РаскаладкаЗаказов.МестоЗаказа.Холод, ЛОЖЬ)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СканХолод
	|	ИЗ
	|		Документ.МаршрутНаАптеку.Состав КАК МаршрутНаАптекуСостав
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриемкаСамовывозов_РаскаладкаЗаказов КАК ПриемкаСамовывозов_РаскаладкаЗаказов
	|			ПО МаршрутНаАптекуСостав.МестоЗаказа = ПриемкаСамовывозов_РаскаладкаЗаказов.МестоЗаказа
	|	ГДЕ
	|		МаршрутНаАптекуСостав.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СУММА(0),
	|		СУММА(0),
	|		СУММА(ВЫБОР
	|				КОГДА ЕСТЬNULL(РаскладкаСамовывозаСостав.МестоЗаказа.Холод, ИСТИНА)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ),
	|		СУММА(ВЫБОР
	|				КОГДА ЕСТЬNULL(РаскладкаСамовывозаСостав.МестоЗаказа.Холод, ЛОЖЬ)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ)
	|	ИЗ
	|		Документ.МаршрутНаАптеку.Состав КАК МаршрутНаАптекуСостав
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаскладкаСамовывоза.Состав КАК РаскладкаСамовывозаСостав
	|			ПО МаршрутНаАптекуСостав.МестоЗаказа = РаскладкаСамовывозаСостав.МестоЗаказа
	|	ГДЕ
	|		МаршрутНаАптекуСостав.Ссылка = &Ссылка
	|		И РаскладкаСамовывозаСостав.Ссылка.Проведен) КАК ПрогрессСборки";
	Запрос.УстановитьПараметр("ссылка",Маршрут);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		МаршрутОбычных = Строка(Выборка.ВсегоОбычные)+"/" + Строка(Выборка.СканОбычные);
		МаршрутХолодных = Строка(Выборка.ВсегоХолод)+"/" + Строка(Выборка.СканХолод);
		
		Если ПерекинутьНаТекПользователя = Истина тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПриемкаСамовывозов_РаскаладкаЗаказов.Сотрудник,
			|	ПриемкаСамовывозов_РаскаладкаЗаказов.Маршрут,
			|	ПриемкаСамовывозов_РаскаладкаЗаказов.Заказ,
			|	ПриемкаСамовывозов_РаскаладкаЗаказов.МестоЗаказа,
			|	ПриемкаСамовывозов_РаскаладкаЗаказов.ЗСЯ
			|ИЗ
			|	РегистрСведений.ПриемкаСамовывозов_РаскаладкаЗаказов КАК ПриемкаСамовывозов_РаскаладкаЗаказов
			|ГДЕ
			|	ПриемкаСамовывозов_РаскаладкаЗаказов.Маршрут = &Маршрут
			|	И ПриемкаСамовывозов_РаскаладкаЗаказов.Сотрудник <> &Сотрудник";
			Запрос.УстановитьПараметр("Маршрут",Маршрут);
			Запрос.УстановитьПараметр("Сотрудник",Объект.Сотрудник);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Менеджер = РегистрыСведений.ПриемкаСамовывозов_РаскаладкаЗаказов.СоздатьМенеджерЗаписи();
				
				Менеджер.Сотрудник = Выборка.Сотрудник;
				Менеджер.Маршрут = Выборка.Маршрут;
				Менеджер.Заказ = Выборка.Заказ;
				Менеджер.МестоЗаказа = Выборка.МестоЗаказа;
				//Менеджер.ЗСЯ = Менеджер.ЗСЯ;
				
				Менеджер.Удалить();
				
				Менеджер.Сотрудник = Объект.Сотрудник;
				Менеджер.Маршрут = Выборка.Маршрут;
				Менеджер.Заказ = Выборка.Заказ;
				Менеджер.МестоЗаказа = Выборка.МестоЗаказа;
				Менеджер.ЗСЯ = Выборка.ЗСЯ;
				
				Менеджер.Записать();	
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

#Область СборкаИКомплектацияЗаказов

#Область МенюСборкиИКомплектации

&НаКлиенте
Процедура ВыбратьТип(Команда)	
	
	Холод = Команда.Имя = "ВыбратьХолод";
	Ответ = ВыбратьТипСервер(Холод);
	Если Ответ <> Истина Тогда
		ПоказатьПредупреждение(,Ответ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыбратьТипСервер(Холод)
	ТоварыКСборке.Очистить();
	Ответ = СборкаИКомплектацияСамовывозовАлгоритмы.ПолучитьЗаданиеНаСборку(Холод,Объект.Сотрудник,,ТипСборки);	
	Если ТипЗнч(Ответ) = Тип("Строка") тогда
		Возврат Ответ;
	ИначеЕсли ТипЗнч(Ответ) = Тип("ДокументСсылка.КомплектацияЗаказов") тогда
		Сборка_ОчиститьДанныеСборки();
		Комплектация_ДокументКомплектация = Ответ;
		Комплектация_ЗаполнитьКомплектацию();
		Комплектация_ИндексСтроки = 0;
		Комплектация_УстановитьВидимостьКомплектации();
	Иначе
		Сборка_Холод = Холод;
		Сборка_ЗаполнитьДанныеПоЗаданиюНаСборку();
		Сборка_ИндексСтроки = 0;
		Сборка_ЗаполнитьПоНомеруСтроки();
		Элементы.ВыборХолодТепло.Видимость = Ложь;
		Элементы.СборкаЗаказаГруппа.Видимость = Истина;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Сборка

&НаКлиенте
Процедура ПослеВводаКоличества_Сборка(ВыбЗнач, Параметры) Экспорт
	
	Если ВыбЗнач <> Неопределено Тогда
		Ответ = ВводКоличестваСборка(ВыбЗнач);
	Иначе
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Ответ) = Тип("Строка") тогда
		ПоказатьПредупреждение(,Ответ,10,"Ошибка!");
	Иначе
		СтрокаСборки = Сборка.Получить(Сборка_ИндексСтроки);
		Если СтрокаСборки.Количество = СтрокаСборки.КоличествоСобрано + СтрокаСборки.КоличествоНеХватило тогда
			Сборка_ИндексСтроки = Сборка_ИндексСтроки + 1;	
		КонецЕсли;
	КонецЕсли;  
	ОбработатьИндексСтрокиСборки();
	Сборка_ЗаполнитьПоНомеруСтроки();
	
КонецПроцедуры

&НаСервере
Функция ВводКоличестваСборка(Количество)
	
	СтрокаСборка = Сборка.Получить(Сборка_ИндексСтроки);
	Если Количество = 0 тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Количество > СтрокаСборка.Количество - СтрокаСборка.КоличествоСобрано - СтрокаСборка.КоличествоНеХватило тогда
		Возврат "Введеное количество больше требуемого!";
	КонецЕсли;
	Отбор = Новый Структура("Товар,Партия,Зона,Стелаж,Ячейка");
	ЗаполнитьЗначенияСвойств(Отбор,СтрокаСборка);
	СтрокиТоварыКСборке = ТоварыКСборке.НайтиСтроки(Отбор);
	Для каждого СтрокаСборки из СтрокиТоварыКСборке цикл	
		МенеджерЗаписи = РегистрыСведений.СборкаЗаказов_ПрогрессСборки.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ = СтрокаСборки.Документ;
		МенеджерЗаписи.Товар = СтрокаСборки.Товар;
		МенеджерЗаписи.Партия = СтрокаСборки.Партия;
		МенеджерЗаписи.Сотрудник = Объект.Сотрудник;
		МенеджерЗаписи.Зона = СтрокаСборки.Зона;
		МенеджерЗаписи.Стелаж = СтрокаСборки.Стелаж;
		МенеджерЗаписи.Ячейка = СтрокаСборки.Ячейка;
		МенеджерЗаписи.Холод = СтрокаСборки.Товар.Холод;
		МенеджерЗаписи.Период = ТекущаяДата();
		МенеджерЗаписи.ТипСборки = ТипСборки;
		НадоСписать = Мин(Количество,СтрокаСборки.Количество - СтрокаСборки.КоличествоСобрано);
		МенеджерЗаписи.КоличествоСобрано = НадоСписать;
		МенеджерЗаписи.Записать();
		Количество = Количество-НадоСписать;
		Если Количество = 0 тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Сборка_ЗаполнитьДанныеПоЗаданиюНаСборку();
	
	Сборка_ЗаполнитьПоНомеруСтроки();
	Возврат истина;	
	
КонецФункции

&НаСервере
Процедура Сборка_ОчиститьДанныеСборки()
	
	Элементы.ВыборХолодТепло.Видимость = Ложь;
	Элементы.СборкаЗаказаГруппа.Видимость = Ложь;
	//Элементы.СборкаИКомплектацияЗаказовГруппа.Видимость = Ложь;
	Сборка.Очистить();
	ТоварыКСборке.Очистить();
	Сборка_ТекНоменклатураСсылка = Справочники.Номенклатура.ПустаяСсылка();
	Сборка_ТекНоменклатураСерия = "";
	Сборка_ТекНоменклатураКол = 0;
	Сборка_ТекНоменклатура = "";
	Сборка_СледующийТовар = "";
	Сборка_ПредыдущийТовар = "";
	Сборка_Номенклатура = "";
	Сборка_КоличествоНеХватило = 0;
	Сборка_ИндексСтроки = 0;
	Сборка_ЗаданиеНаСборку = Документы.Сборка.ПустаяСсылка();
	
КонецПроцедуры

&НаСервере
Процедура Сборка_ЗаполнитьДанныеПоЗаданиюНаСборку()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СборкаЗаказов_ЗаданиеНаСборку.Документ,
	|	СборкаЗаказов_ЗаданиеНаСборку.Товар,
	|	СборкаЗаказов_ЗаданиеНаСборку.Партия,
	|	СборкаЗаказов_ЗаданиеНаСборку.Зона КАК Зона,
	|	СборкаЗаказов_ЗаданиеНаСборку.Стелаж КАК Стелаж,
	|	СборкаЗаказов_ЗаданиеНаСборку.Ячейка КАК Ячейка,
	|	МАКСИМУМ(СборкаЗаказов_ЗаданиеНаСборку.Количество) КАК Количество,
	|	СУММА(СборкаЗаказов_ПрогрессСборки.КоличествоСобрано) КАК КоличествоСобрано,
	|	СУММА(СборкаЗаказов_ПрогрессСборки.КоличествоНеХватило) КАК КоличествоНеХватило
	|ПОМЕСТИТЬ втТоварыКСборке
	|ИЗ
	|	РегистрСведений.СборкаЗаказов_ЗаданиеНаСборку КАК СборкаЗаказов_ЗаданиеНаСборку
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СборкаЗаказов_ПрогрессСборки КАК СборкаЗаказов_ПрогрессСборки
	|		ПО СборкаЗаказов_ЗаданиеНаСборку.Документ = СборкаЗаказов_ПрогрессСборки.Документ
	|			И СборкаЗаказов_ЗаданиеНаСборку.Товар = СборкаЗаказов_ПрогрессСборки.Товар
	|			И СборкаЗаказов_ЗаданиеНаСборку.Партия = СборкаЗаказов_ПрогрессСборки.Партия
	|ГДЕ
	|	СборкаЗаказов_ЗаданиеНаСборку.Сотрудник = &Сотрудник
	|	И СборкаЗаказов_ЗаданиеНаСборку.ТипСборки = &ТипСборки
	|	И СборкаЗаказов_ЗаданиеНаСборку.Холод = &Холод
	|
	|СГРУППИРОВАТЬ ПО
	|	СборкаЗаказов_ЗаданиеНаСборку.Товар,
	|	СборкаЗаказов_ЗаданиеНаСборку.Партия,
	|	СборкаЗаказов_ЗаданиеНаСборку.Документ,
	|	СборкаЗаказов_ЗаданиеНаСборку.Зона,
	|	СборкаЗаказов_ЗаданиеНаСборку.Стелаж,
	|	СборкаЗаказов_ЗаданиеНаСборку.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыКСборке.Документ,
	|	втТоварыКСборке.Товар,
	|	втТоварыКСборке.Партия,
	|	втТоварыКСборке.Зона,
	|	втТоварыКСборке.Стелаж,
	|	втТоварыКСборке.Ячейка,
	|	втТоварыКСборке.Количество,
	|	втТоварыКСборке.КоличествоСобрано,
	|	втТоварыКСборке.КоличествоНеХватило
	|ИЗ
	|	втТоварыКСборке КАК втТоварыКСборке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаводскиеШК.Наименование,
	|	ЗаводскиеШК.Владелец
	|ИЗ
	|	Справочник.ЗаводскиеШК КАК ЗаводскиеШК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТоварыКСборке КАК втТоварыКСборке
	|		ПО ЗаводскиеШК.Владелец = втТоварыКСборке.Товар";
	Запрос.УстановитьПараметр("Сотрудник",Объект.Сотрудник);
	Запрос.УстановитьПараметр("ТипСборки",ТипСборки);
	Запрос.УстановитьПараметр("Холод",Сборка_Холод);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[1].Выбрать();
	ТаблицаШК = МассивРезультатов[2].Выгрузить();
	Ит = 1;
	ТоварыКСборке.Очистить();
	Пока Выборка.Следующий() цикл
		СтрокаСборки = ТоварыКСборке.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСборки,Выборка);
		ЗаводскойШК = "";
		СтрокиШК = ТаблицаШК.НайтиСтроки(Новый Структура("Владелец",Выборка.Товар));
		Для каждого СтрокаШК из строкиШК цикл
			ЗаводскойШК = ЗаводскойШК + ?(ЗаводскойШК = "", "", ", ") + Прав(СтрокаШК.Наименование,7);		
		КонецЦикла;
		СтрокаСборки.ЗаводскойШК = "("+ЗаводскойШК+")";
		СтрокаСборки.Номер = Ит;
		Ит = Ит+1;
	КонецЦикла;
	ТЗСборка = ТоварыКСборке.Выгрузить(,"Товар,Партия,Зона,Стелаж,Ячейка,Количество,КоличествоСобрано,КоличествоНеХватило,ЗаводскойШК");
	ТЗСборка.Свернуть("Товар,Партия,Зона,Стелаж,Ячейка,ЗаводскойШК","Количество,КоличествоСобрано,КоличествоНеХватило");
	Сборка.Очистить();
	Сборка.Загрузить(ТЗСборка);
	
КонецПроцедуры

&НаСервере
Процедура Сборка_ЗаполнитьПоНомеруСтроки()
	КоличествоСтрок = Сборка.Количество();
	Если КоличествоСтрок = 0 тогда
		Возврат;
	КонецЕсли;
	
	Строка = Сборка.Получить(Сборка_ИндексСтроки);
	Сборка_КоличествоНеХватило = Строка.КоличествоНеХватило;
	Сборка_Номенклатура = Строка.ЗаводскойШК + СокрЛП(Строка.Товар.Наименование);
	Сборка_ТекНоменклатураСсылка = Строка.Товар;
	ИндПредСтроки = Сборка_ИндексСтроки-1;
	Если ИндПредСтроки < 0 тогда 
		Сборка_ПредыдущийТовар = "";
	Иначе
		СтрокаПредТовар = Сборка.Получить(ИндПредСтроки);
		Сборка_ПредыдущийТовар = СтрокаПредТовар.ЗаводскойШК + СокрЛП(СтрокаПредТовар.Товар.Наименование); 
	КонецЕсли;
	
	ИндСледСтроки = Сборка_ИндексСтроки+1;
	Если КоличествоСтрок-ИндСледСтроки < 1 тогда 
		Сборка_СледующийТовар = "";
	Иначе
		СтрокаСледТовар = Сборка.Получить(ИндСледСтроки);
		Сборка_СледующийТовар = СтрокаСледТовар.ЗаводскойШК + СокрЛП(СтрокаСледТовар.Товар.Наименование); 
	КонецЕсли;
	
	Сборка_ТекНоменклатура = Строка(Строка.Зона) + "-" + Строка(Строка.Стелаж) + "-" + Строка(Строка.Ячейка);
	Сборка_ТекНоменклатураКол = Строка.Количество-Строка.КоличествоСобрано-Строка.КоличествоНеХватило;
	Сборка_ТекНоменклатураСерия = Формат(Строка.Партия.ГоденДо,"ДФ=dd.MM.yyyy")
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИндексСтрокиСборки()
	
	Если Сборка_ИндексСтроки < 0 тогда
		Сборка_ИндексСтроки = 0;
	ИначеЕсли Сборка_ИндексСтроки > Сборка.Количество() - 1 тогда
		Сборка_ИндексСтроки = Сборка.Количество() - 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Сборка_ВверхВниз(Команда)
	
	Если Команда.Имя = "Сборка_Вверх" тогда
		Сборка_ИндексСтроки  = Сборка_ИндексСтроки-1;
	Иначе
		Сборка_ИндексСтроки  = Сборка_ИндексСтроки+1;
	КонецЕсли;
	Если Сборка_ИндексСтроки < 0 тогда
		Сборка_ИндексСтроки = 0;
	ИначеЕсли Сборка_ИндексСтроки > Сборка.Количество() - 1 тогда
		Сборка_ИндексСтроки = Сборка.Количество() - 1;
	КонецЕсли;
	Сборка_ЗаполнитьПоНомеруСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКСборкеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Сборка_ИндексСтроки = ТоварыКСборке.Индекс(ТоварыКСборке.НайтиПоИдентификатору(ВыбраннаяСтрока));
	Сборка_ЗаполнитьПоНомеруСтроки();
	Элементы.СборкаЗаказа.ТекущаяСтраница = Элементы.Сборка;   
КонецПроцедуры

&НаКлиенте
Процедура Сборка_СбросСканера(Команда)
// ЕМ	Scan.ПосылкаДанных=1;	
КонецПроцедуры

&НаСервере
Процедура Сборка_ОтменитьСканированиеНаСервере()
	Строка = Сборка.Получить(Сборка_ИндексСтроки);
	НаборЗаписей = РегистрыСведений.СборкаЗаказов_ПрогрессСборки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Товар.Значение = Строка.Товар;
	НаборЗаписей.Отбор.Товар.Использование = Истина;
	НаборЗаписей.Отбор.Партия.Значение = Строка.Партия;
	НаборЗаписей.Отбор.Партия.Использование = Истина;
	НаборЗаписей.Отбор.Сотрудник.Значение = Объект.Сотрудник;
	НаборЗаписей.Отбор.Сотрудник.Использование = Истина;
	НаборЗаписей.Прочитать();
	КоличествоЗаписейВНаборе = НаборЗаписей.Количество();
	Если КоличествоЗаписейВНаборе > 0 тогда
		НаборЗаписей.Удалить(КоличествоЗаписейВНаборе-1);
	КонецЕсли;
	НаборЗаписей.Записать();
	Сборка_ЗаполнитьДанныеПоЗаданиюНаСборку();
	Сборка_ЗаполнитьПоНомеруСтроки();
КонецПроцедуры

&НаКлиенте
Процедура Сборка_ОтменитьСканирование(Команда)
	Сборка_ОтменитьСканированиеНаСервере();
КонецПроцедуры

&НаСервере
Функция Сборка_НеХватилоНаСервере(Количество)
	
	Если Количество = 0 тогда
		Возврат Ложь;
	КонецЕсли;
	СтрокаСборка = Сборка.Получить(Сборка_ИндексСтроки);
	Если Количество > СтрокаСборка.Количество - СтрокаСборка.КоличествоСобрано - СтрокаСборка.КоличествоНеХватило тогда
		Возврат "Введеное количество больше требуемого!";
	КонецЕсли;
	Отбор = Новый Структура("Товар,Партия,Зона,Стелаж,Ячейка");
	ЗаполнитьЗначенияСвойств(Отбор,СтрокаСборка);
	СтрокиТоварыКСборке = ТоварыКСборке.НайтиСтроки(Отбор);
	Для каждого СтрокаСборки из СтрокиТоварыКСборке цикл			
		МенеджерЗаписи = РегистрыСведений.СборкаЗаказов_ПрогрессСборки.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ = СтрокаСборки.Документ;
		МенеджерЗаписи.Товар = СтрокаСборки.Товар;
		МенеджерЗаписи.Партия = СтрокаСборки.Партия;
		МенеджерЗаписи.Сотрудник = Объект.Сотрудник;
		МенеджерЗаписи.Зона = СтрокаСборки.Зона;
		МенеджерЗаписи.Стелаж = СтрокаСборки.Стелаж;
		МенеджерЗаписи.Ячейка = СтрокаСборки.Ячейка;
		МенеджерЗаписи.Холод = СтрокаСборки.Товар.Холод;
		МенеджерЗаписи.Период = ТекущаяДата();
		НадоСписать = Мин(Количество,СтрокаСборки.Количество - СтрокаСборки.КоличествоСобрано);
		МенеджерЗаписи.КоличествоНеХватило = НадоСписать;
		МенеджерЗаписи.Записать();
		Количество = Количество-НадоСписать;
		Если Количество = 0 тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Сборка_ЗаполнитьДанныеПоЗаданиюНаСборку();
	
	Сборка_ЗаполнитьПоНомеруСтроки();
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Сборка_НеХватило(Команда)
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(12,2);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, КЧ);
	Оповещение = Новый ОписаниеОповещения("ПослеВводаЗначенияНеХватило", ЭтотОбъект, Неопределено);
	
	ПоказатьВводЗначения(Оповещение, Сборка_ТекНоменклатураКол, "Введите кол. товара", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЗначенияНеХватило(ВыбЗнач, Параметры) Экспорт
	
	Если ВыбЗнач <> Неопределено Тогда
		Ответ = Сборка_НеХватилоНаСервере(ВыбЗнач);
		Если Ответ <> Истина тогда
			ПоказатьПредупреждение(,Ответ,,"Ошибка!");
		КонецЕсли;
	КонецЕсли;
	Сборка_ЗаполнитьПоНомеруСтроки();
	
КонецПроцедуры

&НаСервере
Функция Сборка_ЗавершитьСборкуНаСервере()
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.КомплектацияЗаказов_РаспределениеЗаказовПоЗСЯ");
	Блокировка.Заблокировать();
	
	СборкаЗаказов = Документы.Сборка.СоздатьДокумент();
	СборкаЗаказов.ТипСборки = ТипСборки;
	
	ДатаСборки = ТекущаяДата();
	
	СборкаЗаказов.Сотрудник = Объект.Сотрудник;
	СборкаЗаказов.ДокументОснование = ДокументОснованиеСборки;
	СборкаЗаказов.Дата = ДатаСборки;
	СборкаЗаказов.Склад = ПараметрыСеанса.ОсновнойСклад;
	СборкаЗаказов.СкладПотерь = ПараметрыСеанса.ТекущийАдресХранения.СкладПотерь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СборкаЗаказов_ЗаданиеНаСборку.Документ,
	|	СборкаЗаказов_ЗаданиеНаСборку.Товар,
	|	СборкаЗаказов_ЗаданиеНаСборку.Партия,
	|	СборкаЗаказов_ЗаданиеНаСборку.Холод,
	|	СборкаЗаказов_ЗаданиеНаСборку.Сотрудник,
	|	СборкаЗаказов_ЗаданиеНаСборку.Зона,
	|	СборкаЗаказов_ЗаданиеНаСборку.Стелаж,
	|	СборкаЗаказов_ЗаданиеНаСборку.Ячейка,
	|	СборкаЗаказов_ЗаданиеНаСборку.Количество
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	РегистрСведений.СборкаЗаказов_ЗаданиеНаСборку КАК СборкаЗаказов_ЗаданиеНаСборку
	|ГДЕ
	|	СборкаЗаказов_ЗаданиеНаСборку.Сотрудник = &Сотрудник
	|	И СборкаЗаказов_ЗаданиеНаСборку.Холод = &Холод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Документ,
	|	втТовары.Товар,
	|	втТовары.Партия,
	|	втТовары.Холод,
	|	втТовары.Сотрудник,
	|	втТовары.Количество,
	|	СУММА(ЕСТЬNULL(СборкаЗаказов_ПрогрессСборки.КоличествоСобрано, 0)) КАК КоличествоСобрано,
	|	СУММА(ЕСТЬNULL(СборкаЗаказов_ПрогрессСборки.КоличествоНеХватило, 0)) КАК КоличествоНеХватило,
	|	ВЫБОР
	|		КОГДА СборкаЗаказов_ПрогрессСборки.Товар ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Записывать,
	|	втТовары.Зона,
	|	втТовары.Стелаж,
	|	втТовары.Ячейка
	|ПОМЕСТИТЬ втТоварыПредЗагрузка
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СборкаЗаказов_ПрогрессСборки КАК СборкаЗаказов_ПрогрессСборки
	|		ПО втТовары.Документ = СборкаЗаказов_ПрогрессСборки.Документ
	|			И втТовары.Товар = СборкаЗаказов_ПрогрессСборки.Товар
	|			И втТовары.Партия = СборкаЗаказов_ПрогрессСборки.Партия
	|			И втТовары.Сотрудник = СборкаЗаказов_ПрогрессСборки.Сотрудник
	|			И втТовары.Зона = СборкаЗаказов_ПрогрессСборки.Зона
	|			И втТовары.Стелаж = СборкаЗаказов_ПрогрессСборки.Стелаж
	|			И втТовары.Ячейка = СборкаЗаказов_ПрогрессСборки.Ячейка
	|
	|СГРУППИРОВАТЬ ПО
	|	втТовары.Документ,
	|	втТовары.Товар,
	|	втТовары.Партия,
	|	втТовары.Холод,
	|	втТовары.Сотрудник,
	|	ВЫБОР
	|		КОГДА СборкаЗаказов_ПрогрессСборки.Товар ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	втТовары.Количество,
	|	втТовары.Зона,
	|	втТовары.Стелаж,
	|	втТовары.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкаЗаказов_ПрогрессСборки.Период,
	|	СборкаЗаказов_ПрогрессСборки.Документ,
	|	СборкаЗаказов_ПрогрессСборки.Товар,
	|	СборкаЗаказов_ПрогрессСборки.Партия,
	|	СборкаЗаказов_ПрогрессСборки.Сотрудник,
	|	СборкаЗаказов_ПрогрессСборки.КоличествоСобрано,
	|	СборкаЗаказов_ПрогрессСборки.КоличествоНеХватило,
	|	СборкаЗаказов_ПрогрессСборки.Зона,
	|	СборкаЗаказов_ПрогрессСборки.Стелаж,
	|	СборкаЗаказов_ПрогрессСборки.Ячейка,
	|	СборкаЗаказов_ПрогрессСборки.Холод
	|ИЗ
	|	РегистрСведений.СборкаЗаказов_ПрогрессСборки КАК СборкаЗаказов_ПрогрессСборки
	|ГДЕ
	|	СборкаЗаказов_ПрогрессСборки.Сотрудник = &Сотрудник
	|	И СборкаЗаказов_ПрогрессСборки.Холод = &Холод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыПредЗагрузка.Документ,
	|	втТоварыПредЗагрузка.Товар,
	|	втТоварыПредЗагрузка.Партия,
	|	втТоварыПредЗагрузка.Холод,
	|	втТоварыПредЗагрузка.Сотрудник,
	|	втТоварыПредЗагрузка.Количество,
	|	СУММА(втТоварыПредЗагрузка.КоличествоСобрано) КАК КоличествоСобрано,
	|	СУММА(втТоварыПредЗагрузка.КоличествоНеХватило) КАК КоличествоНеХватило
	|ИЗ
	|	втТоварыПредЗагрузка КАК втТоварыПредЗагрузка
	|ГДЕ
	|	втТоварыПредЗагрузка.Записывать
	|
	|СГРУППИРОВАТЬ ПО
	|	втТоварыПредЗагрузка.Сотрудник,
	|	втТоварыПредЗагрузка.Холод,
	|	втТоварыПредЗагрузка.Товар,
	|	втТоварыПредЗагрузка.Партия,
	|	втТоварыПредЗагрузка.Документ,
	|	втТоварыПредЗагрузка.Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыПредЗагрузка.Документ,
	|	втТоварыПредЗагрузка.Товар,
	|	втТоварыПредЗагрузка.Партия,
	|	втТоварыПредЗагрузка.Холод,
	|	втТоварыПредЗагрузка.Сотрудник,
	|	втТоварыПредЗагрузка.Зона,
	|	втТоварыПредЗагрузка.Стелаж,
	|	втТоварыПредЗагрузка.Ячейка,
	|	втТоварыПредЗагрузка.Количество - (втТоварыПредЗагрузка.КоличествоСобрано + втТоварыПредЗагрузка.КоличествоНеХватило) КАК Количество
	|ИЗ
	|	втТоварыПредЗагрузка КАК втТоварыПредЗагрузка
	|ГДЕ
	|	(НЕ втТоварыПредЗагрузка.Записывать
	|			ИЛИ втТоварыПредЗагрузка.Количество - (втТоварыПредЗагрузка.КоличествоСобрано + втТоварыПредЗагрузка.КоличествоНеХватило) > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	втТоварыПредЗагрузка.Партия,
	|	втТоварыПредЗагрузка.Товар,
	|	втТоварыПредЗагрузка.Документ,
	|	втТоварыПредЗагрузка.Холод,
	|	втТоварыПредЗагрузка.Сотрудник,
	|	втТоварыПредЗагрузка.Зона,
	|	втТоварыПредЗагрузка.Стелаж,
	|	втТоварыПредЗагрузка.Ячейка,
	|	втТоварыПредЗагрузка.Количество - (втТоварыПредЗагрузка.КоличествоСобрано + втТоварыПредЗагрузка.КоличествоНеХватило)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыПредЗагрузка.Товар,
	|	втТоварыПредЗагрузка.Партия,
	|	СУММА(втТоварыПредЗагрузка.КоличествоСобрано) КАК КоличествоСобрано,
	|	СУММА(втТоварыПредЗагрузка.КоличествоНеХватило) КАК КоличествоНеХватило
	|ПОМЕСТИТЬ втНаПотери
	|ИЗ
	|	втТоварыПредЗагрузка КАК втТоварыПредЗагрузка
	|
	|СГРУППИРОВАТЬ ПО
	|	втТоварыПредЗагрузка.Товар,
	|	втТоварыПредЗагрузка.Партия
	|
	|ИМЕЮЩИЕ
	|	СУММА(втТоварыПредЗагрузка.КоличествоНеХватило) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиТовараОстатки.Товар,
	|	ОстаткиТовараОстатки.Партия,
	|	СУММА(ВЫБОР
	|			КОГДА ОстаткиТовараОстатки.ОстатокОстаток < 0
	|				ТОГДА 0
	|			ИНАЧЕ ОстаткиТовараОстатки.ОстатокОстаток
	|		КОНЕЦ) КАК Остаток,
	|	СУММА(ОстаткиТовараОстатки.РезервОстаток) КАК Резерв,
	|	ОстаткиТовараОстатки.ДокументРезерва КАК Документ
	|ИЗ
	|	РегистрНакопления.ОстаткиТовара.Остатки(
	|			&Дата,
	|			Отдел = &Отдел
	|				И Партия В
	|					(ВЫБРАТЬ
	|						втНаПотери.Партия
	|					ИЗ
	|						втНаПотери КАК втНаПотери)) КАК ОстаткиТовараОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНаПотери КАК втНаПотери
	|		ПО ОстаткиТовараОстатки.Товар = втНаПотери.Товар
	|			И ОстаткиТовараОстатки.Партия = втНаПотери.Партия
	|ГДЕ
	|	(ОстаткиТовараОстатки.ОстатокОстаток > 0
	|			ИЛИ ОстаткиТовараОстатки.РезервОстаток > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТовараОстатки.Партия,
	|	ОстаткиТовараОстатки.Товар,
	|	ОстаткиТовараОстатки.ДокументРезерва";
	
	Запрос.УстановитьПараметр("Сотрудник",Объект.Сотрудник);
	Запрос.УстановитьПараметр("Дата",ДатаСборки);
	Запрос.УстановитьПараметр("Отдел",ПараметрыСеанса.ОсновнойСклад);
	Запрос.УстановитьПараметр("Холод",Сборка_Холод);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СборкаЗаказов.Холод = Сборка_Холод;
	
	СборкаЗаказов.ПрогрессСборки.Загрузить(МассивРезультатов[2].Выгрузить());
	СборкаЗаказов.Товары.Загрузить(МассивРезультатов[3].Выгрузить());
	СборкаЗаказов.Потери.Загрузить(МассивРезультатов[6].Выгрузить());
	
	Попытка
		СборкаЗаказов.Записать(РежимЗаписиДокумента.Проведение);
		Выборка = МассивРезультатов[4].Выбрать();
		
		Пока Выборка.Следующий() цикл
			МенеджерЗаписи = РегистрыСведений.СборкаЗаказов_ЗаданиеНаСборку.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Выборка,"Документ,Товар,Партия,Холод,Сотрудник,Зона,Стелаж,Ячейка");
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() тогда
				МенеджерЗаписи.Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
				МенеджерЗаписи.Количество = Выборка.Количество;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
			
		КонецЦикла;
		Если СборкаЗаказов.ПрогрессСборки.Количество() = 0 тогда
			Возврат "Нет собранных товаров";
		КонецЕсли;
		
		НЗ = РегистрыСведений.СборкаЗаказов_ЗаданиеНаСборку.СоздатьНаборЗаписей();
		НЗ.Отбор.Сотрудник.Значение = Объект.Сотрудник;
		НЗ.Отбор.Сотрудник.Использование = Истина;
		НЗ.Записать();
		
		НЗ = РегистрыСведений.СборкаЗаказов_ПрогрессСборки.СоздатьНаборЗаписей();
		НЗ.Отбор.Сотрудник.Значение = Объект.Сотрудник;
		НЗ.Отбор.Сотрудник.Использование = Истина;
		НЗ.Записать();
		
		Если ТипСборки = Перечисления.ТипСборки.СборкаПеремещения тогда
			ВозвратКВыборуСервер();
			ВозратКВыборуВидимостьИОчисткаДанных();
		Иначе
			Ответ = Документы.Сборка.СоздатьКомплектациюЗаказаНаОснованииСборкиЗаказа(СборкаЗаказов.Ссылка,Объект.Сотрудник,Комплектация_ДокументКомплектация);
			
			Если Ответ = Ложь тогда
				ЗафиксироватьТранзакцию();
				ВозвратКВыборуСервер();
				ВозратКВыборуВидимостьИОчисткаДанных();
				Возврат Истина;
			ИначеЕсли Ответ <> Истина тогда
				ОтменитьТранзакцию();
				Возврат Ответ;
			КонецЕсли;	
			
			Сборка_ОчиститьДанныеСборки();
			
			Комплектация_ЗаполнитьКомплектацию();
			Комплектация_ИндексСтроки = 0;
			Комплектация_УстановитьВидимостьКомплектации();
			Если Комплектация.Итог("Количество") = Комплектация.Итог("КоличествоСкомплектовано") тогда
				Если Комплектация.Количество() = 0 тогда 
					Ответ = Истина;
				Иначе
					Ответ = Комплектация_СформироватьДокументКомплектация();
				КонецЕсли;
				Если Ответ = истина тогда
					Комплектация_ОчиститьДанные();
					Элементы.ОсновноеМеню.Видимость = Истина;
					Элементы.СменаМестаХраненияГруппа.Видимость = Ложь;
					Элементы.РаскладкаЗаказаГруппа.Видимость = Ложь;
					Элементы.ВыборМаршрутаГруппа.Видимость = Ложь;
					Элементы.ПриемкаИРаскладкаСамовывозовГруппа.Видимость = Ложь;
					Элементы.СборкаИКомплектацияЗаказовГруппа.Видимость = Ложь;
					ВозвратКВыборуСервер();
					Маршруты.Очистить();
					Маршрут = ПредопределенноеЗначение("Документ.МаршрутНаАптеку.ПустаяСсылка");
					МестоЗСЯ = ПредопределенноеЗначение("Справочник.МестоЗСЯ.ПустаяСсылка");
					Номенклатура =  ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
					Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.ВыборРежима");	
					Элементы.Комплектация.Видимость = Ложь;
					Элементы.СборкаИКомплектацияЗаказовГруппа.Видимость = Ложь;
				Иначе
					Возврат Ответ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		
	Исключение
		
		ОтменитьТранзакцию();
		Возврат ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Сборка_ЗавершитьСборку(Команда)
	Ответ = Сборка_ЗавершитьСборкуНаСервере();
	Если Ответ <> Истина тогда
		ПоказатьПредупреждение(,Ответ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сборка_ВвестиШтрихКод(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаШК_СборкаКомплектация", ЭтотОбъект, Неопределено);		
	ПоказатьВводЗначения(Оповещение, 0, "Введите последние 6 цифр ШК", Новый ОписаниеТипов("Строка", Новый КвалификаторыЧисла(12,0,ДопустимыйЗнак.Неотрицательный)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаШК_СборкаКомплектация(ВыбЗнач, Параметры) Экспорт
	ЭтоСборка = Неопределено;
	Если Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.СборкаСамовывозов") тогда
		ЭтоСборка = Истина;
	ИначеЕсли Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.КомплектацияСамовывозов") тогда
		ЭтоСборка = Ложь;
	КонецЕсли;
	Если ВыбЗнач <> Неопределено и ЭтоСборка <> неопределено Тогда
		ШК = Формат(ВыбЗнач,"ЧГ=");
		Если СтрДлина(ШК) >= 6 тогда
			Если ЭтоСборка тогда
				Ответ = ОбработкаВводаШтрихКодаСборкаСамовывозовНаСервере(ШК,Истина);
			Иначе
				Ответ = ОбработкаВводаШтрихКодаКомплектацияСамовывозовНаСервере(ШК,Истина);
			КонецЕсли;
		Иначе
			ПоказатьПредупреждение(,"Необходимо ввести минимум 6 цифр");
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;	
	КонецЕсли;
	Если ТипЗнч(Ответ) = Тип("Строка") тогда
		ПоказатьПредупреждение(,Ответ,10,"Ошибка!");
		Возврат;
	КонецЕсли;
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(12,2);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, КЧ);
	Если ЭтоСборка тогда
		Оповещение = Новый ОписаниеОповещения("ПослеВводаКоличества_Сборка", ЭтотОбъект, Неопределено);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ПослеВводаКоличества_Комплектация", ЭтотОбъект, Неопределено);
	КонецЕсли;
	
	ПоказатьВводЗначения(Оповещение, Сборка_ТекНоменклатураКол, "Введите кол. товара", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура стрНоменклатураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Ответ = стрНоменклатураНажатиеНаСервере();
	Если Ответ <> Истина Тогда
		ПоказатьПредупреждение(,Ответ);
		Возврат;
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(12,2);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, КЧ);
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКоличества_Сборка", ЭтотОбъект, Неопределено);
	
	ПоказатьВводЗначения(Оповещение, Сборка_ТекНоменклатураКол, "Введите кол. товара", ОписаниеТипов);
	
КонецПроцедуры

&НаСервере
Функция стрНоменклатураНажатиеНаСервере()
	
	Если НЕ Сборка_ТекНоменклатураСсылка.Обязательный тогда
		Возврат "Товар требует обязательного сканирования!";
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Комплектация

&НаКлиенте
Процедура ПослеВводаКоличества_Комплектация(ВыбЗнач, Параметры) Экспорт
	
	Если ВыбЗнач <> Неопределено Тогда
		СтрокаКомплектация = Комплектация.Получить(Комплектация_ИндексСтроки);
		ОсталосьСкомплектовать = СтрокаКомплектация.Количество-Комплектация_ОтсканированноТовара;
		Если ВыбЗнач > ОсталосьСкомплектовать тогда
			ПоказатьПредупреждение(,"Количество больше оставшегося к комплектации!",,"Ошибка");
			Возврат;
		Иначе
			Комплектация_ОтсканированноТовара = Комплектация_ОтсканированноТовара + ВыбЗнач;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура Комплектация_ОчиститьДанные()
	
	Комплектация_ДокументКомплектация = Документы.КомплектацияЗаказов.ПустаяСсылка();
	Комплектация_ИндексСтроки = 0;
	Комплектация_СледТоварЗСЯ = справочники.МестоЗСЯ.ПустаяСсылка();
	Комплектация_СледТоварКоличество = 0;
	Комплектация_СледТоварНаименование = "";
	Комплектация_СледТоварСсылка = Справочники.Номенклатура.ПустаяСсылка();
	Комплектация_ТекЗаказ = Документы.Заказ.ПустаяСсылка();
	Комплектация_ТекТоварЗСЯ = справочники.МестоЗСЯ.ПустаяСсылка();
	Комплектация_ТекТоварКоличество = 0;
	Комплектация_ТекТоварНаименование = "";
	Комплектация_ТекТоварПартия = Справочники.Партии.ПустаяСсылка();
	Комплектация_ТекТоварСсылка = Справочники.Номенклатура.ПустаяСсылка();
	Комплектация_ОтсканированноТовара = 0;
	Комплектация.Очистить();
	ВозвратКВыборуСервер();
	
	
КонецПроцедуры

&НаСервере
Функция Комплектация_СформироватьДокументКомплектация()
	
	Попытка
		Если ЗначениеЗаполнено(Комплектация_ДокументКомплектация) тогда
			КомплектацияОбъект = Комплектация_ДокументКомплектация.ПолучитьОбъект();	
			КомплектацияОбъект.КомплектацияЗавершена = Истина;
			НаборЗаписей = РегистрыСведений.КомплектацияЗаказов_ПрогрессКомплектации.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ДокументКомплектация.Значение = Комплектация_ДокументКомплектация;
			НаборЗаписей.Отбор.ДокументКомплектация.Использование = Истина;
			НаборЗаписей.Прочитать();
			КомплектацияОбъект.ПрогрессКомплектации.Загрузить(НаборЗаписей.Выгрузить());
			КомплектацияОбъект.Записать(РежимЗаписиДокумента.Проведение);
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли;
		Возврат Истина;
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура Комплектация_ЗаполнитьКомплектацию()
	Комплектация.Очистить();
	
	Объект.РежимРаботыОператора = Перечисления.РежимРаботыОператора.КомплектацияСамовывозов;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КомплектацияЗаказовКомплектация.Заказ,
	|	КомплектацияЗаказовКомплектация.Товар,
	|	КомплектацияЗаказовКомплектация.Партия,
	|	КомплектацияЗаказовКомплектация.ЗСЯ КАК ЗСЯ,
	|	КомплектацияЗаказовКомплектация.Количество,
	|	ЕСТЬNULL(СУММА(КомплектацияЗаказов_ПрогрессКомплектации.Количество), 0) КАК КоличествоСкомплектовано
	|ИЗ
	|	Документ.КомплектацияЗаказов.Комплектация КАК КомплектацияЗаказовКомплектация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КомплектацияЗаказов_ПрогрессКомплектации КАК КомплектацияЗаказов_ПрогрессКомплектации
	|		ПО КомплектацияЗаказовКомплектация.Ссылка = КомплектацияЗаказов_ПрогрессКомплектации.ДокументКомплектация
	|			И КомплектацияЗаказовКомплектация.Заказ = КомплектацияЗаказов_ПрогрессКомплектации.Заказ
	|			И КомплектацияЗаказовКомплектация.Товар = КомплектацияЗаказов_ПрогрессКомплектации.Товар
	|			И КомплектацияЗаказовКомплектация.Партия = КомплектацияЗаказов_ПрогрессКомплектации.Партия
	|			И КомплектацияЗаказовКомплектация.ЗСЯ = КомплектацияЗаказов_ПрогрессКомплектации.ЗСЯ
	|ГДЕ
	|	КомплектацияЗаказовКомплектация.Ссылка = &СсылкаКомплектация
	|	И КомплектацияЗаказовКомплектация.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КомплектацияЗаказовКомплектация.Партия,
	|	КомплектацияЗаказовКомплектация.ЗСЯ,
	|	КомплектацияЗаказовКомплектация.Заказ,
	|	КомплектацияЗаказовКомплектация.Товар,
	|	КомплектацияЗаказовКомплектация.Количество
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗСЯ";
	
	Запрос.УстановитьПараметр("СсылкаКомплектация",Комплектация_ДокументКомплектация);
	Выборка = Запрос.Выполнить().Выбрать();
	НомерСтроки = 0;
	Пока Выборка.Следующий() цикл
		СтрокаКомплектация = Комплектация.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКомплектация,Выборка);  
		СтрокаКомплектация.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Если Комплектация.Количество() > 0 тогда
		Комплектация_ЗаполнитьПоИндексуСтроки();	
	КонецЕсли;	
	Комплектация_УстановитьВидимостьКомплектации();
	
КонецПроцедуры

&НаКлиенте
Процедура Комплектация_ВверхВниз(Команда)
	
	Если Команда.Имя = "Комплектация_Вверх" тогда
		Комплектация_ИндексСтроки  = Комплектация_ИндексСтроки-1;
	Иначе
		Комплектация_ИндексСтроки  = Комплектация_ИндексСтроки+1;
	КонецЕсли;
	Если Комплектация_ИндексСтроки < 0 тогда
		Комплектация_ИндексСтроки = 0;
	ИначеЕсли Комплектация_ИндексСтроки > Комплектация.Количество() - 1 тогда
		Комплектация_ИндексСтроки = Комплектация.Количество() - 1;
	КонецЕсли;
	Комплектация_ОтсканированноТовара = 0;
	Комплектация_ЗаполнитьПоИндексуСтроки();
КонецПроцедуры

&НаСервере
Процедура Комплектация_ЗаполнитьПоИндексуСтроки()
	
	КоличествоСтрок = Комплектация.Количество();
	Если КоличествоСтрок = 0 тогда
		Возврат;
	КонецЕсли;
	
	Строка = Комплектация.Получить(Комплектация_ИндексСтроки);
	Комплектация_ТекТоварКоличество = Строка.Количество - Строка.КоличествоСкомплектовано;
	Комплектация_ТекТоварНаименование = СокрЛП(Строка.Товар.Наименование);
	Комплектация_ТекТоварСсылка = Строка.Товар;
	Комплектация_ТекТоварЗСЯ = Строка.ЗСЯ; 
	Комплектация_ТекЗаказ = Строка.Заказ;
	Комплектация_ТекТоварПартия = Строка.Партия;
	
	ИндСледСтроки = Комплектация_ИндексСтроки+1;
	Если КоличествоСтрок-ИндСледСтроки < 1 тогда 
		Комплектация_СледТоварКоличество = 0;
		Комплектация_СледТоварНаименование = "";
		Комплектация_СледТоварСсылка = Справочники.Номенклатура.ПустаяСсылка();
		Комплектация_СледТоварЗСЯ = Справочники.МестоЗСЯ.ПустаяСсылка();
	Иначе
		СтрокаСледТовар = Комплектация.Получить(ИндСледСтроки);
		Комплектация_СледТоварКоличество = СтрокаСледТовар.Количество - СтрокаСледТовар.КоличествоСкомплектовано;
		Комплектация_СледТоварНаименование = СокрЛП(СтрокаСледТовар.Товар.Наименование);
		Комплектация_СледТоварСсылка = СтрокаСледТовар.Товар;
		Комплектация_СледТоварЗСЯ = СтрокаСледТовар.ЗСЯ;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Комплектация_УстановитьВидимостьКомплектации()
	
	Комплектация_ОтсканированноТовара = 0;
	Элементы.Комплектация.Видимость = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура Комплектация_ЗавершитьКомплектацию(Команда)
	Если Комплектация.Итог("Количество") = Комплектация.Итог("КоличествоСкомплектовано") тогда
		Ответ = Комплектация_СформироватьДокументКомплектация();
		Если Ответ = истина тогда
			Комплектация_ОчиститьДанные();
			Элементы.ОсновноеМеню.Видимость = Истина;
			Элементы.СменаМестаХраненияГруппа.Видимость = Ложь;
			Элементы.РаскладкаЗаказаГруппа.Видимость = Ложь;
			Элементы.ВыборМаршрутаГруппа.Видимость = Ложь;
			Элементы.ПриемкаИРаскладкаСамовывозовГруппа.Видимость = Ложь;
			Элементы.СборкаИКомплектацияЗаказовГруппа.Видимость = Ложь;
			ВозвратКВыборуСервер();
			Маршруты.Очистить();
			Маршрут = ПредопределенноеЗначение("Документ.МаршрутНаАптеку.ПустаяСсылка");
			МестоЗСЯ = ПредопределенноеЗначение("Справочник.МестоЗСЯ.ПустаяСсылка");
			Номенклатура =  ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.ВыборРежима");	
			Элементы.Комплектация.Видимость = Ложь;
			Элементы.СборкаИКомплектацияЗаказовГруппа.Видимость = Ложь;
		Иначе
			ПоказатьПредупреждение(,Ответ,10,"Ошибка!");
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(,"Не все товары в корзинке разложенны по ЗСЯ!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Комплектация_ТекТоварНаименованиеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Ответ = Комплектация_ТекТоварНаименованиеНажатиеНаСервере();
	Если Ответ <> истина тогда
		ПоказатьПредупреждение(,Ответ);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция Комплектация_ТекТоварНаименованиеНажатиеНаСервере()
	
	Если НЕ Комплектация_ТекТоварСсылка.Обязательный тогда
		Возврат "Товар требует обязательного сканирования!";
	Иначе
		СтрокаКомплектация = Комплектация.Получить(Комплектация_ИндексСтроки);
		Если Комплектация_ОтсканированноТовара +1 <= СтрокаКомплектация.Количество тогда 
			Комплектация_ОтсканированноТовара = Комплектация_ОтсканированноТовара + 1;
			Возврат Истина;
		Иначе
			Возврат "Уже отсканированно необходимое количество!";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Комплектация_ВвестиШтрихКод(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаШК_СборкаКомплектация", ЭтотОбъект, Неопределено);		
	ПоказатьВводЗначения(Оповещение, 0, "Введите последние 6 симовлов ШК", Новый ОписаниеТипов("Строка", Новый КвалификаторыЧисла(12,0,ДопустимыйЗнак.Неотрицательный)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаШК_Комплектация(ВыбЗнач, Параметры) Экспорт
	
	Если ВыбЗнач <> Неопределено Тогда
		ШК = Формат(ВыбЗнач,"ЧГ=");
		Если СтрДлина(ШК) >= 6 тогда
			Ответ = ОбработкаВводаШтрихКодаКомплектацияСамовывозовНаСервере(ШК,Истина);
		Иначе
			ПоказатьПредупреждение(,"Необходимо ввести минимум 6 цифр");
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Ответ) = Тип("Строка") тогда
		ПоказатьПредупреждение(,Ответ,10,"Ошибка!");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Комплектация_ОтменитьСканированиеНаСервере()
	Строка = Комплектация.Получить(Комплектация_ИндексСтроки);
	НаборЗаписей = РегистрыСведений.КомплектацияЗаказов_ПрогрессКомплектации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументКомплектация.Значение = Комплектация_ДокументКомплектация;
	НаборЗаписей.Отбор.ДокументКомплектация.Использование = Истина;
	НаборЗаписей.Отбор.Заказ.Значение = Строка.Заказ;
	НаборЗаписей.Отбор.Заказ.Использование = Истина;
	НаборЗаписей.Отбор.Товар.Значение = Строка.Товар;
	НаборЗаписей.Отбор.Товар.Использование = Истина;
	НаборЗаписей.Отбор.Партия.Значение = Строка.Партия;
	НаборЗаписей.Отбор.Партия.Использование = Истина;
	НаборЗаписей.Отбор.ЗСЯ.Значение = Строка.ЗСЯ;
	НаборЗаписей.Отбор.ЗСЯ.Использование = Истина;
	НаборЗаписей.Прочитать();
	КоличествоЗаписейВНаборе = НаборЗаписей.Количество();
	Если КоличествоЗаписейВНаборе > 0 тогда
		НаборЗаписей.Удалить(КоличествоЗаписейВНаборе-1);
	КонецЕсли;
	НаборЗаписей.Записать();
	Комплектация_ЗаполнитьКомплектацию();
	Комплектация_ЗаполнитьПоИндексуСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура Комплектация_ОтменитьСканирование(Команда)
	Комплектация_ОтменитьСканированиеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Комплектация_ВыборМаршрута(Команда)
	ТипСборки = ПредопределенноеЗначение("Перечисление.ТипСборки.СборкаЗаказовИзКоробки");
	
	Маршруты.Очистить();
	ЭтаФорма.Элементы.ВыборХолодТепло.Видимость = Ложь;
	
	Ответ = СборкаИКомплектацияСамовывозовАлгоритмы.ПолучитьЗаданиеНаСборку(Ложь,Объект.Сотрудник,Истина,ТипСборки);
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить(КодВозвратаДиалога.Да,"Комплектовать " + Ответ.НомерЗадания);
	КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет,"Выбрать другую");
	Если ТипЗнч(Ответ) = Тип("Структура") и ЗначениеЗаполнено(Ответ.Комплектация) тогда
		Если Вопрос("На вас уже назначено задание по коробке " +Ответ.НомерЗадания+"!",КнопкиВопроса) = КодВозвратаДиалога.Да тогда 
			Сборка_ОчиститьДанныеСборки();
			Комплектация_ДокументКомплектация = Ответ.Комплектация;
			Комплектация_ЗаполнитьКомплектацию();
			Комплектация_ИндексСтроки = 0;
			Комплектация_УстановитьВидимостьКомплектации();
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьМаршрутыКомплектация();
	
КонецПроцедуры

#КонецОбласти

#Область КомплектацияИзКоробки

&НаКлиенте
Процедура ВыбратьКоробкуПриСканированииШК(Данные)
	
	МассивСтрок = Маршруты.НайтиСтроки(Новый Структура("ШтрихКод",Данные));
	Для каждого строка из МассивСтрок цикл
		ВыборМаршрутаКоробка(Команды["К"+строка.УИД]);
		Возврат;
	КонецЦикла;
	
	ПоказатьПредупреждение(,"Коробка с штрихкодом " + Данные + " не найдена!");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМаршрутыКомплектация()
	
	//Маршруты.Очистить();
	//ЭтаФорма.Элементы.ВыборХолодТепло.Видимость = Ложь;
	//
	//Ответ = СборкаИКомплектацияСамовывозовАлгоритмы.ПолучитьЗаданиеНаСборку(Ложь,Объект.Сотрудник,Истина);
	//
	//Если ЗначениеЗаполнено(Ответ) тогда
	//	Сборка_ОчиститьДанныеСборки();
	//	Комплектация_ДокументКомплектация = Ответ;
	//	Комплектация_ЗаполнитьКомплектацию();
	//	Комплектация_ИндексСтроки = 0;
	//	Комплектация_УстановитьВидимостьКомплектации();
	//	Возврат;
	//КонецЕсли;
	
	ЭтаФорма.Элементы.ВыборМаршрута.Видимость = Истина;
	
	Для каждого Элем из ЭтаФорма.Элементы.СписокМаршрутовКомплектация.ПодчиненныеЭлементы цикл
		Если Прав(Элем.Имя,1) = "К" тогда
			Элементы.Удалить(Элем);	
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКСборкеОстатки.Документ КАК Документ,
	|	ТоварыКСборкеОстатки.Товар КАК Товар,
	|	ТоварыКСборкеОстатки.Партия КАК Партия
	|ПОМЕСТИТЬ втОстаткиНаКомплектации
	|ИЗ
	|	РегистрНакопления.ТоварыКСборке.Остатки(
	|			,
	|			ТипСборки = &ТипСборки
	|				И Склад = &Склад) КАК ТоварыКСборкеОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Товар,
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТоварыКСборкеОбороты.Регистратор КАК Документ.Сборка) КАК ЗаданиеНаСборку,
	|	ТоварыКСборкеОбороты.Регистратор.Номер КАК Номер,
	|	ТоварыКСборкеОбороты.Регистратор.Дата КАК Дата,
	|	СУММА(ТоварыКСборкеОбороты.КоличествоНаКомплектацииПриход) КАК НаКомплектации
	|ПОМЕСТИТЬ втКоробки
	|ИЗ
	|	РегистрНакопления.ТоварыКСборке.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			ТипСборки = &ТипСборки
	|				И Склад = &Склад) КАК ТоварыКСборкеОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОстаткиНаКомплектации КАК втОстаткиНаКомплектации
	|		ПО ТоварыКСборкеОбороты.Документ = втОстаткиНаКомплектации.Документ
	|			И ТоварыКСборкеОбороты.Товар = втОстаткиНаКомплектации.Товар
	|			И ТоварыКСборкеОбороты.Партия = втОстаткиНаКомплектации.Партия
	|			И (ТоварыКСборкеОбороты.Регистратор ССЫЛКА Документ.Сборка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКСборкеОбороты.Регистратор.Номер,
	|	ТоварыКСборкеОбороты.Регистратор.Дата,
	|	ВЫРАЗИТЬ(ТоварыКСборкеОбороты.Регистратор КАК Документ.Сборка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаданиеНаСборку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКоробки.НаКомплектации,
	|	ЕСТЬNULL(КомплектацияЗаказов.Ссылка, ЗНАЧЕНИЕ(Документ.КомплектацияЗаказов.ПустаяСсылка)) КАК Комплектация,
	|	ЕСТЬNULL(КомплектацияЗаказов.Сотрудник, ЗНАЧЕНИЕ(справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
	|	втКоробки.Номер,
	|	втКоробки.Дата,
	|	втКоробки.ЗаданиеНаСборку,
	|	втКоробки.ЗаданиеНаСборку.ШК КАК ШК
	|ПОМЕСТИТЬ ВТКоробкиСКомплектацией
	|ИЗ
	|	втКоробки КАК втКоробки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КомплектацияЗаказов КАК КомплектацияЗаказов
	|		ПО втКоробки.ЗаданиеНаСборку = КомплектацияЗаказов.ДокументОснование
	|			И (КомплектацияЗаказов.Проведен)
	|ГДЕ
	|	(КомплектацияЗаказов.Ссылка ЕСТЬ NULL 
	|			ИЛИ НЕ КомплектацияЗаказов.КомплектацияЗавершена)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТКоробкиСКомплектацией.НаКомплектации,
	|	ВТКоробкиСКомплектацией.Комплектация,
	|	ВТКоробкиСКомплектацией.Сотрудник,
	|	ВТКоробкиСКомплектацией.Номер,
	|	ВТКоробкиСКомплектацией.Дата,
	|	ВТКоробкиСКомплектацией.ЗаданиеНаСборку,
	|	ВТКоробкиСКомплектацией.ШК,
	|	МаршрутНаАптекуКоробкиСборки.Ссылка.Ссылка КАК Маршрут,
	|	МаршрутНаАптекуКоробкиСборки.Ссылка.НомерДокументаОснования КАК НомерМаршрута,
	|	МаршрутНаАптекуКоробкиСборки.Ссылка.Дата КАК ДатаМаршрута
	|ИЗ
	|	ВТКоробкиСКомплектацией КАК ВТКоробкиСКомплектацией
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутНаАптеку.КоробкиСборки КАК МаршрутНаАптекуКоробкиСборки
	|		ПО ВТКоробкиСКомплектацией.ЗаданиеНаСборку = МаршрутНаАптекуКоробкиСборки.Коробка";
	Запрос.УстановитьПараметр("ТипСборки",Перечисления.ТипСборки.СборкаЗаказовИзКоробки);
	Запрос.УстановитьПараметр("Склад",ПараметрыСеанса.ОсновнойСклад);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		СтрокаМаршрут = Маршруты.Добавить(); 
		СтрокаМаршрут.Маршрут = Выборка.Маршрут;
		СтрокаМаршрут.НомерМаршрута = СокрЛП(Выборка.НомерМаршрута);
		СтрокаМаршрут.ДатаМаршрута = Выборка.ДатаМаршрута;	
		ШК = Выборка.ШК;
		СтрокаМаршрут.ШтрихКод = ШК;
		СтрокаМаршрут.УИД = СтрЗаменить(Строка(Новый УникальныйИдентификатор),"-","");
		СтрокаМаршрут.Коробка = Выборка.ЗаданиеНаСборку;
		СтрокаМаршрут.КомплектацияКоробки = Выборка.Комплектация;
		СтрокаМаршрут.Сотрудник = Выборка.Сотрудник;
	КонецЦикла;
	Для каждого строка из Маршруты цикл
		ИмяКоманды ="К"+строка.УИД; 
		КомандаФормы = ЭтаФорма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "ВыборМаршрутаКоробка";
		Кнопка = ЭтаФорма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"),Элементы.СписокМаршрутовКомплектация);
		Кнопка.Высота = 2;
		Кнопка.РастягиватьПоГоризонтали = Истина;
		Кнопка.ИмяКоманды  = ИмяКоманды;  
		Кнопка.Отображение = ОтображениеКнопки.Текст;
		Кнопка.Заголовок   = "Маршрут " + Формат(Число(строка.НомерМаршрута),"ЧГ=") + " от " + Формат(строка.ДатаМаршрута,"ДФ=dd.MM.yyyy") + "/" 
		+ "Коробка " +Строка.Коробка.Номер + " " + Формат(Строка.Коробка.Холод,"БЛ=Тепло; БИ=Холод") + Символы.ПС + строка.Сотрудник.Наименование;
	КонецЦикла;                                                                                                                    
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборМаршрутаКоробка(Команда)
	УИДМаршрута = СтрЗаменить(Команда.Имя,"К","");
	СтрокиМаршрута = Маршруты.НайтиСтроки(Новый Структура("УИД",УИДМаршрута));
	
	Для каждого СтрокаМаршрута из СтрокиМаршрута цикл		
		
		АктуальныеДанныеПоКоробке = ПолучитьАктуальныеДанныеПоКоробке(СтрокаМаршрута.Коробка);
		ЗаполнитьЗначенияСвойств(СтрокаМаршрута,АктуальныеДанныеПоКоробке);
		
		Если АктуальныеДанныеПоКоробке.КомплектацияЗавершена тогда			
			Ответ = "Коробка уже собрана!";
			КнопкаКоманды = Элементы.Найти(Команда.Имя);
			КнопкаКоманды.Видимость = Ложь;
			//ЭтаФорма.Команды.Удалить(Команда);
			ЭтаФорма.ОбновитьОтображениеДанных(Элементы.СписокМаршрутовКомплектация);
			Маршруты.Удалить(СтрокаМаршрута);
		ИначеЕсли ЗначениеЗаполнено(СтрокаМаршрута.КомплектацияКоробки) тогда						
			Если ЗначениеЗаполнено(СтрокаМаршрута.Сотрудник) и СтрокаМаршрута.Сотрудник <> Объект.Сотрудник тогда			
				Если Вопрос("Комплектация уже закреплена за пользователем " + СтрокаМаршрута.Сотрудник + " .
					|Назначить текущего пользователя?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда				
					ПереназначитьКомплектациюНаПользователя(Объект.Сотрудник,СтрокаМаршрута.КомплектацияКоробки);				
				Иначе				
					Возврат				
				КонецЕсли;				
			КонецЕсли;			
			Комплектация_ДокументКомплектация = СтрокаМаршрута.КомплектацияКоробки;
			Ответ = неопределено;				
		Иначе			
			Ответ = СоздатьКомплектациюНаКоробкуСервер(СтрокаМаршрута.Коробка);
		КонецЕсли;
		
		Если ТипЗнч(Ответ) = Тип("Строка") тогда
			ПоказатьПредупреждение(,Ответ,10,"Ошибка!");
			Возврат;
		КонецЕсли;  		
		
		Комплектация_ЗаполнитьКомплектацию();
		Комплектация_ИндексСтроки = 0;
		Элементы.ВыборМаршрута.Видимость = Ложь;
		Комплектация_УстановитьВидимостьКомплектации();	
		
		Прервать;
		
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПолучитьАктуальныеДанныеПоКоробке(Коробка)
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("КомплектацияКоробки",Документы.КомплектацияЗаказов.ПустаяСсылка());
	СтруктураОтвета.Вставить("Сотрудник",Справочники.Сотрудники.ПустаяСсылка());
	СтруктураОтвета.Вставить("КомплектацияЗавершена",Ложь);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КомплектацияЗаказов.Ссылка как КомплектацияКоробки,
	|	КомплектацияЗаказов.Сотрудник,
	|	КомплектацияЗаказов.КомплектацияЗавершена
	|ИЗ
	|	Документ.КомплектацияЗаказов КАК КомплектацияЗаказов
	|ГДЕ
	|	КомплектацияЗаказов.ДокументОснование = &Коробка
	|	И КомплектацияЗаказов.Проведен";
	Запрос.УстановитьПараметр("Коробка",Коробка);
	
	Результат = Запрос.Выполнить();
	Если не Результат.Пустой() тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() цикл
			ЗаполнитьЗначенияСвойств(СтруктураОтвета,Выборка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаСервере
Функция СоздатьКомплектациюНаКоробкуСервер(Коробка)
	Попытка
		НачатьТранзакцию();
		Ответ = Документы.Сборка.СоздатьКомплектациюЗаказаНаОснованииСборкиЗаказа(Коробка,Объект.Сотрудник,Комплектация_ДокументКомплектация);
		
		Если Ответ <> Истина тогда
			ОтменитьТранзакцию();
			Возврат Ответ;
		КонецЕсли;	
		
		ЗафиксироватьТранзакцию();
	Исключение
		Возврат ОписаниеОшибки()
	КонецПопытки;
	Возврат Истина;	
КонецФункции

&НаСервереБезКонтекста
Процедура ПереназначитьКомплектациюНаПользователя(Сотрудник,Комплектация)
	
	Об = Комплектация.ПолучитьОбъект();
	Об.Сотрудник = Сотрудник;
	Об.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПечатьЦенников

&НаСервере
Функция КомандаПечатьЦенниковНаСервере()
	Если НоменклатураДляЦенников.Количество() > 0 тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КОЛИЧЕСТВО(ККМ.ТипЦены) КАК ТипЦеныКол,
		|	ККМ.ТипЦены КАК ТипЦены
		|ИЗ
		|	Справочник.ККМ КАК ККМ
		|ГДЕ
		|	ККМ.Наименование ПОДОБНО ""%АТОЛ%""
		|	И ККМ.Отдел = &Отдел
		|
		|СГРУППИРОВАТЬ ПО
		|	ККМ.ТипЦены
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипЦеныКол УБЫВ";
		Запрос.УстановитьПараметр("Отдел",ПараметрыСеанса.ОсновнойСклад);
		Выборка = Запрос.Выполнить().Выбрать();
		ТипЦены = Справочники.ТипЦены.ПустаяСсылка();
		Пока Выборка.Следующий() цикл
			ТипЦены = Выборка.ТипЦены;
		КонецЦикла;
		Об = Обработки.ПечатьЦенников.Создать();
		Об.ЗаполнитьТаблицуЦенниковПоМассиву(НоменклатураДляЦенников.Выгрузить().ВыгрузитьКолонку("Товар"),ПараметрыСеанса.ТекущийАдресХранения.РегионРаботы,ТипЦены);
		ТД = Об.ПечатьЦенников(); 
		ТД.ИмяПринтера = ПараметрыСеанса.ТекущийАдресХранения.ИмяПринтера;
		Возврат ТД;
	Иначе
		Возврат "Нет товаров для печати!";
	КонецЕсли;      	
	
КонецФункции

&НаКлиенте
Процедура КомандаПечатьЦенников(Команда)
	ТД = КомандаПечатьЦенниковНаСервере();
	Если ТипЗнч(ТД) = Тип("Строка") тогда
		ПоказатьПредупреждение(,ТД,,"Ошибка!");
		Возврат;
	КонецЕсли;
	НоменклатураДляЦенников.Очистить();
	ТД.Напечатать();
КонецПроцедуры

&НаСервере
Функция ОбработкаВводаШтрихПечатьЦенников(Данные)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаводскиеШК.Владелец КАК Товар,
	|	ЕСТЬNULL(ОстаткиТовараОстатки.ОстатокОстаток, 0) КАК Остаток
	|ИЗ
	|	Справочник.ЗаводскиеШК КАК ЗаводскиеШК
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТовара.Остатки(, Отдел = &Отдел) КАК ОстаткиТовараОстатки
	|		ПО ЗаводскиеШК.Владелец = ОстаткиТовараОстатки.Товар
	|ГДЕ
	|	ЗаводскиеШК.Наименование ПОДОБНО &ШК";
	
	Запрос.УстановитьПараметр("Номенклатура",Комплектация_ТекТоварСсылка);
	Запрос.УстановитьПараметр("ШК","%"+Данные+"%");
	Запрос.УстановитьПараметр("Отдел",ПараметрыСеанса.ОсновнойСклад);
	
	Результат = Запрос.Выполнить(); 
	Если Результат.Пустой() Тогда
		Возврат "Не найдена номенклатура с ШК " + Данные;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() цикл
		Если НоменклатураДляЦенников.НайтиСтроки(Новый Структура("Товар",Выборка.Товар)).Количество() <> 0 Тогда
			Возврат "Товар " +  Выборка.Товар.КраткоеНаименование + " уже просканирован!";
		ИначеЕсли Выборка.Остаток <= 0 тогда
			Возврат "Товара " +  Выборка.Товар.КраткоеНаименование + " нет на остатке!";
		КонецЕсли;
		НоваяСтрока = НоменклатураДляЦенников.Добавить();
		НоваяСтрока.Товар = Выборка.Товар;
		Возврат Истина;
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область Инвентаризация

&НаКлиенте
Процедура Инвентаризация_ТоварДелимыйНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Инвентаризация_ТоварДелимый тогда
		Элементы.ИнвентаризацияСтраницы.ТекущаяСтраница = Элементы.ВыборДелимогоТовараИнвентаризация;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция Инвентаризация_ОбработкаВыбораНоменклатуры(НоменклатураТек)
	
	Инвентаризация_ВыборДелимогоТовара.Очистить();
	
	Если НоменклатураТек <> Номенклатура тогда
		Номенклатура = НоменклатураТек;
		Инвентаризация_Количество = 1;
	ИначеЕсли  ЗначениеЗаполнено(Номенклатура) тогда
		Инвентаризация_Количество = Инвентаризация_Количество + 1;
	КонецЕсли;
	Если не ЗначениеЗаполнено(Номенклатура) тогда
		Возврат "Товар по ШК не найден!";
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Деление.Ссылка
		|ПОМЕСТИТЬ вт1
		|ИЗ
		|	Справочник.Деление КАК Деление
		|ГДЕ
		|	(Деление.Владелец = &Номенклатура
		|			ИЛИ Деление.ТоварПолучаемый = &Номенклатура)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт1.Ссылка.Владелец КАК Номенклатура
		|ПОМЕСТИТЬ вт2
		|ИЗ
		|	вт1 КАК вт1
		|
		|СГРУППИРОВАТЬ ПО
		|	вт1.Ссылка.Владелец
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	вт1.Ссылка.ТоварПолучаемый
		|ИЗ
		|	вт1 КАК вт1
		|
		|СГРУППИРОВАТЬ ПО
		|	вт1.Ссылка.ТоварПолучаемый
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт2.Номенклатура
		|ИЗ
		|	вт2 КАК вт2
		|ГДЕ
		|	вт2.Номенклатура <> &Номенклатура";
		Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
		Рез = Запрос.Выполнить();
		Инвентаризация_ТоварДелимый = не Рез.Пустой();			
		Если Инвентаризация_ТоварДелимый тогда
			Инвентаризация_ВыборДелимогоТовара.Загрузить(Рез.Выгрузить());
		КонецЕсли;
		Элементы.ИнвентаризацияСтраницы.ТекущаяСтраница = Элементы.ОсновнаяФормаИнвентаризации;
	КонецЕсли;
	ЭтаФорма.ТекущийЭлемент = Элементы.Инвентаризация_Количество;	
КонецФункции

&НаКлиенте
Процедура Инвентаризация_Выбрать(Команда)
	
	СтрокаДелимогоТовара = Элементы.Инвентаризация_ВыборДелимогоТовара.ТекущиеДанные;
	
	Если СтрокаДелимогоТовара <> неопределено тогда
		Ответ = Инвентаризация_ОбработкаВыбораНоменклатуры(СтрокаДелимогоТовара.Номенклатура);
		Если ТипЗнч(Ответ) = Тип("Строка") тогда
			ПоказатьПредупреждение(,Ответ,10,"Ошибка!");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция Инвентаризация_ПодтвердитьНаСервере()
	Если ЗначениеЗаполнено(Номенклатура) и Инвентаризация_Количество > 0 Тогда 
		МенеджерИнвентаризация = РегистрыСведений.Инвентаризация_Сканирование.СоздатьМенеджерЗаписи();
		МенеджерИнвентаризация.Период = ТекущаяДата();
		МенеджерИнвентаризация.Товар = Номенклатура;
		МенеджерИнвентаризация.Склад = ПараметрыСеанса.ОсновнойСклад;
		МенеджерИнвентаризация.Сотрудник = Объект.Сотрудник;
		МенеджерИнвентаризация.Количество = Инвентаризация_Количество;
		МенеджерИнвентаризация.Записать();
		Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		Инвентаризация_ТоварДелимый = Ложь;
		Инвентаризация_Количество = 1;
	ИначеЕсли НЕ  ЗначениеЗаполнено(Номенклатура) тогда 
		Возврат "Не отсканирован товар!";
	Иначе
		Возврат "Не указанно количество!";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Инвентаризация_Подтвердить(Команда)
	
	
	Ответ = Инвентаризация_ПодтвердитьНаСервере();
	Если ТипЗнч(Ответ) = Тип("Строка") тогда
		ПоказатьПредупреждение(,Ответ,10,"Ошибка!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Инвентаризация_Отменить(Команда)
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	Инвентаризация_ТоварДелимый = Ложь;
	Инвентаризация_Количество = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура Инвентаризация_ВозвратКИнвентаризации(Команда)
	Элементы.ИнвентаризацияСтраницы.ТекущаяСтраница = Элементы.ОсновнаяФормаИнвентаризации;
КонецПроцедуры

&НаКлиенте
Процедура Инвентаризация_ПрогрессВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура Инвентаризация_УдалитьПрогрессНаСервере(Данные)
	МенеджерСканирование = РегистрыСведений.Инвентаризация_Сканирование.СоздатьМенеджерЗаписи();	
	ЗаполнитьЗначенияСвойств(МенеджерСканирование,Данные);
	МенеджерСканирование.Прочитать();
	МенеджерСканирование.Удалить();
КонецПроцедуры

&НаКлиенте
Процедура Инвентаризация_УдалитьПрогресс(Команда)
	ТекущаяСтрока = Элементы.Инвентаризация_Прогресс.ТекущаяСтрока;
	Если ТекущаяСтрока <> неопределено тогда
		Если Вопрос("Удалить сканирование?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
			Инвентаризация_УдалитьПрогрессНаСервере(ТекущаяСтрока);
			Элементы.Инвентаризация_Прогресс.Обновить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ИнфоПоШК

&НаСервере
Процедура ВывестиНачальноеЗначениеИнфоПоШК()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("ИнформацияПоШтрихКоду");
	Область = Макет.ПолучитьОбласть("ПросканируйтеШК");
	ИнформацияПоШтрихКодуТабличныйДокумент.Очистить();
	ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоМестуЗаказа(ШК)
	
	ИнформацияПоШтрихКодуТабличныйДокумент.Очистить();
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("ИнформацияПоШтрихКоду");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НаклейкиМестЗаказа.Ссылка КАК МестоЗаказа,
	|	НаклейкиМестЗаказа.Документ КАК Заказ,
	|	НаклейкиМестЗаказа.Холод,
	|	НаклейкиМестЗаказа.Код КАК НомерМеста,
	|	НаклейкиМестЗаказа.Документ.Номер КАК ЗаказНомер,
	|	НаклейкиМестЗаказа.Документ.Дата КАК ЗаказДата
	|ПОМЕСТИТЬ ВТМестаЗаказа
	|ИЗ
	|	Справочник.НаклейкиМестЗаказа КАК НаклейкиМестЗаказа
	|ГДЕ
	|	НаклейкиМестЗаказа.Наименование = &ШтрихКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТМестаЗаказа.МестоЗаказа,
	|	ВТМестаЗаказа.Заказ,
	|	ВТМестаЗаказа.Холод,
	|	ВТМестаЗаказа.НомерМеста,
	|	ЕСТЬNULL(МаршрутНаАптекуСостав.Ссылка.НомерДокументаОснования, """") КАК МаршрутНомер,
	|	ЕСТЬNULL(МаршрутНаАптекуСостав.Ссылка.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК МаршрутДата,
	|	ВТМестаЗаказа.ЗаказНомер,
	|	ВТМестаЗаказа.ЗаказДата
	|ПОМЕСТИТЬ втСМаршрутом
	|ИЗ
	|	ВТМестаЗаказа КАК ВТМестаЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутНаАптеку.Состав КАК МаршрутНаАптекуСостав
	|		ПО ВТМестаЗаказа.МестоЗаказа = МаршрутНаАптекуСостав.МестоЗаказа
	|			И (МаршрутНаАптекуСостав.Ссылка.Проведен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСМаршрутом.МестоЗаказа,
	|	втСМаршрутом.Заказ,
	|	втСМаршрутом.НомерМеста,
	|	втСМаршрутом.МаршрутНомер,
	|	втСМаршрутом.МаршрутДата,
	|	втСМаршрутом.ЗаказНомер,
	|	втСМаршрутом.ЗаказДата,
	|	ЕСТЬNULL(МестаЗаказовОбороты.ПриемкаПриход, 0) КАК ПриемкаПриход,
	|	ЕСТЬNULL(МестаЗаказовОбороты.ПриемкаРасход, 0) КАК ПриемкаРасход,
	|	ЕСТЬNULL(ХранениеЗСЯОбороты.КоличествоПриход, 0) КАК ЗСЯКоличествоПриход,
	|	ЕСТЬNULL(ХранениеЗСЯОбороты.КоличествоРасход, 0) КАК ЗСЯКоличествоРасход,
	|	ЕСТЬNULL(ХранениеЗСЯОбороты.ЗСЯ.Наименование, """") КАК ЗСЯ,
	|	втСМаршрутом.Холод
	|ИЗ
	|	втСМаршрутом КАК втСМаршрутом
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.МестаЗаказов.Обороты(
	|				,
	|				,
	|				,
	|				МестоЗаказа В
	|					(ВЫБРАТЬ
	|						ВТМестаЗаказа.МестоЗаказа
	|					ИЗ
	|						ВТМестаЗаказа КАК ВТМестаЗаказа)) КАК МестаЗаказовОбороты
	|		ПО втСМаршрутом.МестоЗаказа = МестаЗаказовОбороты.МестоЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ХранениеЗСЯ.Обороты(
	|				,
	|				,
	|				,
	|				МестоЗаказа В
	|					(ВЫБРАТЬ
	|						ВТМестаЗаказа.МестоЗаказа
	|					ИЗ
	|						ВТМестаЗаказа КАК ВТМестаЗаказа)) КАК ХранениеЗСЯОбороты
	|		ПО втСМаршрутом.МестоЗаказа = ХранениеЗСЯОбороты.МестоЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХранениеЗСЯОбороты.ЗСЯ.Наименование, """") КАК ЗСЯ,
	|	МестаЗаказовОбороты.МестоЗаказа.Холод КАК Холод,
	|	МестаЗаказовОбороты.МестоЗаказа.Код КАК НомерМеста
	|ИЗ
	|	втСМаршрутом КАК втСМаршрутом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.МестаЗаказов.Обороты(
	|				,
	|				,
	|				,
	|				МестоЗаказа В
	|					(ВЫБРАТЬ
	|						ВТМестаЗаказа.МестоЗаказа
	|					ИЗ
	|						ВТМестаЗаказа КАК ВТМестаЗаказа)) КАК МестаЗаказовОбороты
	|		ПО втСМаршрутом.Заказ = МестаЗаказовОбороты.Заказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ХранениеЗСЯ.Обороты(
	|				,
	|				,
	|				,
	|				МестоЗаказа В
	|					(ВЫБРАТЬ
	|						ВТМестаЗаказа.МестоЗаказа
	|					ИЗ
	|						ВТМестаЗаказа КАК ВТМестаЗаказа)) КАК ХранениеЗСЯОбороты
	|		ПО втСМаршрутом.Заказ = ХранениеЗСЯОбороты.Заказ";
	
	Запрос.УстановитьПараметр("ШтрихКод",ШК);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Если МассивРезультатов[2].Пустой() тогда
		Область = Макет.ПолучитьОбласть("Шапка");	
		Область.Параметры.стрШК = ШК;
		Область.Параметры.стрНаименование = "Место заказа";
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("НетДанных");
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(Область);
	Иначе
		МассивРезультатов = Запрос.ВыполнитьПакет();
		ВыборкаПоМесту = МассивРезультатов[2].Выбрать();
		ВыборкаПоЗаказу = МассивРезультатов[3].Выбрать();
		ЭтоСамосбор = Лев(ШК,2) = "10";
		Пока ВыборкаПоМесту.Следующий() цикл
			ЗаказНомер = СокрЛП(ВыборкаПоМесту.ЗаказНомер);
			ЗаказДата = ВыборкаПоМесту.ЗаказДата;
			МаршрутНомер = СокрЛП(ВыборкаПоМесту.МаршрутНомер);
			МаршрутДата = ВыборкаПоМесту.МаршрутДата;
			Если ЭтоСамосбор тогда
				НомерМеста = ЗаказНомер;
			Иначе
				НомерМеста = ВыборкаПоМесту.НомерМеста;
			КонецЕсли;
			ЗСЯ = ВыборкаПоМесту.ЗСЯ;
			Состояние = "";
			Если ВыборкаПоМесту.ЗСЯКоличествоПриход <> 0 Тогда
				Если ВыборкаПоМесту.ЗСЯКоличествоРасход <> 0 тогда
					Состояние = "Продан";
				Иначе
					Состояние = "Разложен";
				КонецЕсли;
			Иначе
				Если ВыборкаПоМесту.ПриемкаПриход <> 0 тогда
					Если ВыборкаПоМесту.ПриемкаРасход <> 0 тогда
						Состояние = "Принят";
					Иначе
						Состояние = "Не разложен";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Холод = ВыборкаПоМесту.Холод;
		КонецЦикла;
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.СтрШК = ШК;
		ОбластьШапка.Параметры.стрНаименование = "Место заказа "+НомерМеста;
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьШапка);
		
		ОбластьИнформацияПоТекМесту = Макет.ПолучитьОбласть("ШапкаМестоЗаказа");
		ОбластьИнформацияПоТекМесту.Параметры.Заказ = ЗаказНомер + " от " + Формат(ЗаказДата,"ДФ=dd.MM.yyyy");
		ОбластьИнформацияПоТекМесту.Параметры.Маршрут = МаршрутНомер + " от " + Формат(МаршрутДата,"ДФ=dd.MM.yyyy");
		ОбластьИнформацияПоТекМесту.Параметры.Состояние = Состояние; 
		ОбластьИнформацияПоТекМесту.Параметры.ЗСЯ = ЗСЯ;
		ОбластьИнформацияПоТекМесту.Параметры.Холод = Холод;
		
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьИнформацияПоТекМесту);
		
		СоставЗаказаШапка = Макет.ПолучитьОбласть("СоставЗаказаШапка");
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(СоставЗаказаШапка);
		Ном = 1;
		Пока ВыборкаПоЗаказу.Следующий() цикл
			СоставЗаказаСтрока = Макет.ПолучитьОбласть("СоставЗаказаСтрока");
			СоставЗаказаСтрока.Параметры.Ном = Ном;
			СоставЗаказаСтрока.Параметры.НомерМеста = ?(ЭтоСамосбор,ЗаказНомер,ВыборкаПоЗаказу.НомерМеста);
			СоставЗаказаСтрока.Параметры.Холод = Формат(ВыборкаПоЗаказу.Холод,"БЛ=Нет; БИ=Да");
			СоставЗаказаСтрока.Параметры.ЗСЯ = ВыборкаПоЗаказу.ЗСЯ; 
			Ном = Ном + 1;
			ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(СоставЗаказаСтрока);	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоМестуЗСЯ(ШК)
	ИнформацияПоШтрихКодуТабличныйДокумент.Очистить();
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("ИнформацияПоШтрихКоду");
	
	ЗСЯ = ПолучитьЗСЯИзШтрихКода(ШК,Неопределено,Ложь);
	
	Если ТипЗнч(ЗСЯ) = Тип("Строка") тогда
		
		Область = Макет.ПолучитьОбласть("Шапка");	
		Область.Параметры.стрШК = ШК;
		Область.Параметры.стрНаименование = "Место ЗСЯ";
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("НетДанных");
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(Область);
		
		ОбластьПояснение = Макет.ПолучитьОбласть("Пояснение");
		ОбластьПояснение.Параметры.Пояснение = ЗСЯ;
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьПояснение);
		Возврат;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(ЗСЯ) тогда
		Область = Макет.ПолучитьОбласть("Шапка");	
		Область.Параметры.стрШК = ШК;
		Область.Параметры.стрНаименование = "Место ЗСЯ";
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("НетДанных");
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(Область);
		
		ОбластьПояснение = Макет.ПолучитьОбласть("Пояснение");
		ОбластьПояснение.Параметры.Пояснение = "Ячейка не найдена!";
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьПояснение);
		Возврат;
	КонецЕсли;
	
	Если ЗСЯ.ВидМестаЗСЯ = Перечисления.ВидыМестЗСЯ.ПустаяСсылка() тогда
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.стрШК = ШК;
		ОбластьШапка.Параметры.стрНаименование = "Ячейка "+ЗСЯ.Наименование;
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьШапка);
		
		Область = Макет.ПолучитьОбласть("НетДанных");
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(Область);
		
		ОбластьХарактеристикиЯчейки = Макет.ПолучитьОбласть("ХарактеристикиЯчейки");
		ОбластьХарактеристикиЯчейки.Параметры.Тип = "У ячейки не указан тип!";
		ОбластьХарактеристикиЯчейки.Параметры.Объем = ЗСЯ.Объем;
		
		
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьХарактеристикиЯчейки);
		Возврат;
	КонецЕсли;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.стрШК = ШК;
	ОбластьШапка.Параметры.стрНаименование = "Ячейка "+ЗСЯ.Наименование;
	ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьШапка);
	
	ЗонаСсылка = ЗСЯ.ЗонаСсылка;
	ИмяПеречисления = ЗСЯ.ВидМестаЗСЯ.Метаданные().Имя;
	Индекс = Перечисления[ИмяПеречисления].Индекс(ЗСЯ.ВидМестаЗСЯ);
	
	ОбластьХарактеристикиЯчейки = Макет.ПолучитьОбласть("ХарактеристикиЯчейки");	
	ОбластьХарактеристикиЯчейки.Параметры.Тип = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[Индекс].Синоним;  	
	ОбластьХарактеристикиЯчейки.Параметры.Объем = ЗСЯ.Объем; 
	Если ЗначениеЗаполнено(ЗонаСсылка) тогда
		ОбластьХарактеристикиЯчейки.Параметры.Холод = Формат(ЗонаСсылка.Холод,"БЛ=Нет; БИ=Да");	
	Иначе
		ОбластьХарактеристикиЯчейки.Параметры.Холод = "Нет зоны";
	КонецЕсли;		
	ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьХарактеристикиЯчейки);
	
	Если ЗСЯ.ВидМестаЗСЯ = Перечисления.ВидыМестЗСЯ.СборкаСамовывозов тогда 
		ВывестиИнформациюПоСборкеЗСЯ(ЗСЯ,Макет);		
	ИначеЕсли ЗСЯ.ВидМестаЗСЯ = Перечисления.ВидыМестЗСЯ.ХранениеМестСамовывозов тогда
		ВывестиИнформациюПоХранениюСамовывозовЗСЯ(ЗСЯ,Макет);
	ИначеЕсли ЗСЯ.ВидМестаЗСЯ = Перечисления.ВидыМестЗСЯ.ХранениеНоменклатуры тогда
		ВывестиИнформациюПоНоменклатуреЗСЯ(ЗСЯ,Макет);
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИнформациюПоСборкеЗСЯ(ЗСЯ,Макет)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КомплектацияЗаказов_РаспределениеЗаказовПоЗСЯСрезПоследних.Заказ,
	|	КомплектацияЗаказов_РаспределениеЗаказовПоЗСЯСрезПоследних.ЗСЯ
	|ПОМЕСТИТЬ ВТЗаказЯчейки
	|ИЗ
	|	РегистрСведений.КомплектацияЗаказов_РаспределениеЗаказовПоЗСЯ.СрезПоследних(, ЗСЯ = &ЗСЯ) КАК КомплектацияЗаказов_РаспределениеЗаказовПоЗСЯСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХранениеЗСЯОстатки.КоличествоОстаток,
	|	ВТЗаказЯчейки.Заказ.Номер КАК НомерЗаказа,
	|	ВТЗаказЯчейки.Заказ.Дата КАК ДатаЗаказа
	|ИЗ
	|	РегистрНакопления.ХранениеЗСЯ.Остатки(, ЗСЯ = &ЗСЯ) КАК ХранениеЗСЯОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаказЯчейки КАК ВТЗаказЯчейки
	|		ПО ХранениеЗСЯОстатки.Заказ = ВТЗаказЯчейки.Заказ
	|			И ХранениеЗСЯОстатки.ЗСЯ = ВТЗаказЯчейки.ЗСЯ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомплектацияЗаказовПрогрессКомплектации.Товар.Наименование КАК Товар,
	|	СУММА(КомплектацияЗаказовПрогрессКомплектации.Количество) КАК Количество
	|ПОМЕСТИТЬ втПрогрессКомпектации
	|ИЗ
	|	Документ.КомплектацияЗаказов.ПрогрессКомплектации КАК КомплектацияЗаказовПрогрессКомплектации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаказЯчейки КАК ВТЗаказЯчейки
	|		ПО КомплектацияЗаказовПрогрессКомплектации.Заказ = ВТЗаказЯчейки.Заказ
	|			И КомплектацияЗаказовПрогрессКомплектации.ЗСЯ = ВТЗаказЯчейки.ЗСЯ
	|
	|СГРУППИРОВАТЬ ПО
	|	КомплектацияЗаказовПрогрессКомплектации.Товар,
	|	КомплектацияЗаказовПрогрессКомплектации.Товар.Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КомплектацияЗаказов_ПрогрессКомплектации.Товар.Наименование,
	|	СУММА(КомплектацияЗаказов_ПрогрессКомплектации.Количество)
	|ИЗ
	|	РегистрСведений.КомплектацияЗаказов_ПрогрессКомплектации КАК КомплектацияЗаказов_ПрогрессКомплектации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаказЯчейки КАК ВТЗаказЯчейки
	|		ПО КомплектацияЗаказов_ПрогрессКомплектации.Заказ = ВТЗаказЯчейки.Заказ
	|			И КомплектацияЗаказов_ПрогрессКомплектации.ЗСЯ = ВТЗаказЯчейки.ЗСЯ
	|
	|СГРУППИРОВАТЬ ПО
	|	КомплектацияЗаказов_ПрогрессКомплектации.Товар,
	|	КомплектацияЗаказов_ПрогрессКомплектации.Товар.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПрогрессКомпектации.Товар,
	|	СУММА(втПрогрессКомпектации.Количество) КАК Количество
	|ИЗ
	|	втПрогрессКомпектации КАК втПрогрессКомпектации
	|
	|СГРУППИРОВАТЬ ПО
	|	втПрогрессКомпектации.Товар";
	Запрос.УстановитьПараметр("ЗСЯ",ЗСЯ);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ОбластьСтатусЯчейкаСборки = Макет.ПолучитьОбласть("СтатусЯчейкаСборки");
	
	
	Если МассивРезультатов[1].Пустой() тогда
		ОбластьСтатусЯчейкаСборки.Параметры.Статус = "Свободна";
		ОбластьСтатусЯчейкаСборки.Параметры.Заказ = "";
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьСтатусЯчейкаСборки);		
		Возврат;	
	КонецЕсли;
	
	ВыборкаСтатус = МассивРезультатов[1].Выбрать();
	Пока ВыборкаСтатус.Следующий() цикл
		Если ВыборкаСтатус.КоличествоОстаток <> 0 тогда 
			Статус = "Заказ скомплектован"; 	
		Иначе
			Статус = "Зарезервированна";
		КонецЕсли;
		ОбластьСтатусЯчейкаСборки.Параметры.Статус = Статус;
		ОбластьСтатусЯчейкаСборки.Параметры.Заказ = СокрЛП(ВыборкаСтатус.НомерЗаказа) + " от " +Формат(ВыборкаСтатус.ДатаЗаказа,"ДФ=dd.MM.yyyy");
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьСтатусЯчейкаСборки);		
	КонецЦикла;
	
	Если МассивРезультатов[3].Пустой() тогда
		Возврат;
	КонецЕсли;
	ВыборкаСоставЯчейки = МассивРезультатов[3].Выбрать();
	ОбластьСодержимоеЯчейкиСборкиШапка = Макет.ПолучитьОбласть("СодержимоеЯчейкиСборкиШапка");
	ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьСодержимоеЯчейкиСборкиШапка);
	Ном = 1;
	Пока ВыборкаСоставЯчейки.Следующий() цикл
		ОбластьСодержимоеЯчейкиСборкиСтрока = Макет.ПолучитьОбласть("СодержимоеЯчейкиСборкиСтрока");
		ОбластьСодержимоеЯчейкиСборкиСтрока.Параметры.Ном = Ном;
		ОбластьСодержимоеЯчейкиСборкиСтрока.Параметры.Товар = ВыборкаСоставЯчейки.Товар;
		ОбластьСодержимоеЯчейкиСборкиСтрока.Параметры.Количество = ВыборкаСоставЯчейки.Количество;
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьСодержимоеЯчейкиСборкиСтрока);
		Ном = Ном + 1;		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИнформациюПоХранениюСамовывозовЗСЯ(ЗСЯ,Макет)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХранениеЗСЯОстатки.МестоЗаказа.Код,
	|	ХранениеЗСЯОстатки.Заказ.Номер,
	|	ХранениеЗСЯОстатки.Заказ.Дата,
	|	ХранениеЗСЯОстатки.МестоЗаказа.Наименование
	|ИЗ
	|	РегистрНакопления.ХранениеЗСЯ.Остатки(, ЗСЯ = &ЗСЯ) КАК ХранениеЗСЯОстатки";
	
	Запрос.УстановитьПараметр("ЗСЯ",ЗСЯ);
	Результат = Запрос.Выполнить();
	
	ОбластьСтатусЯчейкаХраненияСамовывозов = Макет.ПолучитьОбласть("СтатусЯчейкаХраненияСамовывозов");
	
	Если Результат.Пустой() тогда	
		ОбластьСтатусЯчейкаХраненияСамовывозов.Параметры.Статус = "Свободна";
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьСтатусЯчейкаХраненияСамовывозов);
		Возврат;
	КонецЕсли;
	
	ОбластьСтатусЯчейкаХраненияСамовывозов.Параметры.Статус = "Занята";
	ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьСтатусЯчейкаХраненияСамовывозов);
	
	ОбластьСоставЯчейкиХраненияШапка = Макет.ПолучитьОбласть("СоставЯчейкиХраненияШапка");
	ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьСоставЯчейкиХраненияШапка);
	
	
	Ном = 1;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() цикл
		ОбластьСоставЯчейкиХраненияСтрока = Макет.ПолучитьОбласть("СоставЯчейкиХраненияСтрока");
		ОбластьСоставЯчейкиХраненияСтрока.Параметры.Ном = Ном;
		ОбластьСоставЯчейкиХраненияСтрока.Параметры.НомерМеста = ?(Лев(Выборка.МестоЗаказаНаименование,2) = "10", СокрЛП(Выборка.ЗаказНомер),Выборка.МестоЗаказаКод);
		ОбластьСоставЯчейкиХраненияСтрока.Параметры.Заказ = СокрЛП(Выборка.ЗаказНомер) + " от " + Формат(Выборка.ЗаказДата,"ДФ=dd.MM.yyyy");
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьСоставЯчейкиХраненияСтрока);			
		Ном = Ном + 1;
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИнформациюПоНоменклатуреЗСЯ(ЗСЯ,Макет)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗСЯНоменклатуры.Номенклатура.Наименование КАК Товар
	|ИЗ
	|	РегистрСведений.ЗСЯНоменклатуры КАК ЗСЯНоменклатуры
	|ГДЕ
	|	ЗСЯНоменклатуры.МестоЗСЯ = &МестоЗСЯ";
	Запрос.УстановитьПараметр("МестоЗСЯ",ЗСЯ);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат;
	КонецЕсли;
	
	ОбластьСоставШапкаХранимый = Макет.ПолучитьОбласть("СоставШапкаХранимый");
	ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьСоставШапкаХранимый);
	
	Ном = 1;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() цикл
		ОбластьСоставСтрокаХранимый = Макет.ПолучитьОбласть("СоставСтрокаХранимый");
		ОбластьСоставСтрокаХранимый.Параметры.Ном = Ном;
		ОбластьСоставСтрокаХранимый.Параметры.Товар = Выборка.Товар;
		Ном = Ном+1;
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьСоставСтрокаХранимый);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоНоменклатуре(ШК)
	ИнформацияПоШтрихКодуТабличныйДокумент.Очистить();
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("ИнформацияПоШтрихКоду");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаводскиеШК.Владелец.Наименование КАК ТоварНаименование,
	|	ЗаводскиеШК.Владелец КАК Товар,
	|	ЗаводскиеШК.Владелец.Вес КАК Вес,
	|	ЗаводскиеШК.Владелец.Объем КАК Объем,
	|	ЗаводскиеШК.Владелец.Холод КАК Холод
	|ПОМЕСТИТЬ ВТТовар
	|ИЗ
	|	Справочник.ЗаводскиеШК КАК ЗаводскиеШК
	|ГДЕ
	|	ЗаводскиеШК.Наименование ПОДОБНО &Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТовар.ТоварНаименование,
	|	ВТТовар.Вес,
	|	ВТТовар.Объем,
	|	ВТТовар.Холод,
	|	ЕСТЬNULL(ОстаткиТовараОстатки.ОстатокОстаток, 0) КАК Остаток
	|ИЗ
	|	ВТТовар КАК ВТТовар
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТовара.Остатки(
	|				,
	|				Товар В
	|						(ВЫБРАТЬ
	|							ВТТовар.Товар
	|						ИЗ
	|							ВТТовар КАК ВТТовар)
	|					И Отдел = &Склад) КАК ОстаткиТовараОстатки
	|		ПО ВТТовар.Товар = ОстаткиТовараОстатки.Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ЗСЯНоменклатуры.МестоЗСЯ.Наименование, """") КАК ЗСЯ
	|ИЗ
	|	РегистрСведений.ЗСЯНоменклатуры КАК ЗСЯНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТовар КАК ВТТовар
	|		ПО ЗСЯНоменклатуры.Номенклатура = ВТТовар.Товар
	|			И (ЗСЯНоменклатуры.Склад = &Склад)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ЗСЯНоменклатуры.МестоЗСЯ.Наименование, """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнформацияПоСборкеЗаказа.ЗаказНомер,
	|	ИнформацияПоСборкеЗаказа.ЗаказДата,
	|	ИнформацияПоСборкеЗаказа.ЗСЯ,
	|	СУММА(ИнформацияПоСборкеЗаказа.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		КомплектацияЗаказов_ПрогрессКомплектации.Количество КАК Количество,
	|		КомплектацияЗаказов_ПрогрессКомплектации.ЗСЯ.Наименование КАК ЗСЯ,
	|		КомплектацияЗаказов_ПрогрессКомплектации.Заказ.Номер КАК ЗаказНомер,
	|		КомплектацияЗаказов_ПрогрессКомплектации.Заказ.Дата КАК ЗаказДата
	|	ИЗ
	|		ВТТовар КАК ВТТовар
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомплектацияЗаказов_ПрогрессКомплектации КАК КомплектацияЗаказов_ПрогрессКомплектации
	|			ПО ВТТовар.Товар = КомплектацияЗаказов_ПрогрессКомплектации.Товар
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КомплектацияЗаказовПрогрессКомплектации.Количество,
	|		КомплектацияЗаказовПрогрессКомплектации.ЗСЯ.Наименование,
	|		КомплектацияЗаказовПрогрессКомплектации.Заказ.Номер,
	|		КомплектацияЗаказовПрогрессКомплектации.Заказ.Дата
	|	ИЗ
	|		ВТТовар КАК ВТТовар
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КомплектацияЗаказов.ПрогрессКомплектации КАК КомплектацияЗаказовПрогрессКомплектации
	|			ПО ВТТовар.Товар = КомплектацияЗаказовПрогрессКомплектации.Товар
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ХранениеЗСЯ.Остатки КАК ХранениеЗСЯОстатки
	|			ПО (КомплектацияЗаказовПрогрессКомплектации.Заказ = ХранениеЗСЯОстатки.Заказ)
	|				И (ХранениеЗСЯОстатки.КоличествоОстаток > 0)) КАК ИнформацияПоСборкеЗаказа
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнформацияПоСборкеЗаказа.ЗСЯ,
	|	ИнформацияПоСборкеЗаказа.ЗаказДата,
	|	ИнформацияПоСборкеЗаказа.ЗаказНомер";
	Запрос.УстановитьПараметр("Наименование","%"+ШК+"%");
	Запрос.УстановитьПараметр("Склад", ПараметрыСеанса.ТекущийАдресХранения.ОсновнойСклад);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если МассивРезультатов[1].Пустой() тогда
		Область = Макет.ПолучитьОбласть("Шапка");	
		Область.Параметры.стрШК = ШК;
		Область.Параметры.стрНаименование = "Товар";
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("НетДанных");
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(Область);
		
		
		ОбластьПояснение = Макет.ПолучитьОбласть("Пояснение");
		ОбластьПояснение.Параметры.Пояснение = "Товар с таким штрих-кодом не найден!";
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьПояснение);
		
		Возврат;
	КонецЕсли;	
	
	Выборка = МассивРезультатов[1].Выбрать();
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьХарактеристикиТовара = Макет.ПолучитьОбласть("ХарактеристикиТовара");
	
	Пока Выборка.Следующий() цикл
		ОбластьШапка.Параметры.стрШК = ШК;
		ОбластьШапка.Параметры.стрНаименование = Выборка.ТоварНаименование;
		ОбластьХарактеристикиТовара.Параметры.Вес = Выборка.Вес; 
		ОбластьХарактеристикиТовара.Параметры.Объем = Выборка.Объем; 
		ОбластьХарактеристикиТовара.Параметры.Холод = Формат(Выборка.Холод,"БЛ=Нет; БИ=Да"); 
		ОбластьХарактеристикиТовара.Параметры.Остаток = Формат(Выборка.Остаток,"ЧН=0; ЧГ="); 
	КонецЦикла;
	
	ВыборкаЗСЯ = МассивРезультатов[2].Выбрать();
	Пока ВыборкаЗСЯ.Следующий() цикл
		ОбластьХарактеристикиТовара.Параметры.ЗСЯ= ВыборкаЗСЯ.ЗСЯ;
	КонецЦикла;
	
	ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьШапка);
	ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьХарактеристикиТовара);
	
	Если МассивРезультатов[3].Пустой() тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПоСборке = МассивРезультатов[3].Выбрать();
	
	ТоварВЯчейкахСборкиШапка = Макет.ПолучитьОбласть("ТоварВЯчейкахСборкиШапка");
	ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ТоварВЯчейкахСборкиШапка);
	Ном = 1;
	Пока ВыборкаПоСборке.Следующий() цикл
		ТоварВЯчейкахСборкиСтрока = Макет.ПолучитьОбласть("ТоварВЯчейкахСборкиСтрока");
		ТоварВЯчейкахСборкиСтрока.Параметры.Ном = Ном;
		ТоварВЯчейкахСборкиСтрока.Параметры.Заказ = СокрЛП(ВыборкаПоСборке.ЗаказНомер) + " от " + Формат(ВыборкаПоСборке.ЗаказДата,"ДФ=dd.MM.yyyy");
		ТоварВЯчейкахСборкиСтрока.Параметры.Количество = ВыборкаПоСборке.Количество;
		ТоварВЯчейкахСборкиСтрока.Параметры.ЗСЯ = ВыборкаПоСборке.ЗСЯ; 
		Ном = Ном + 1;
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ТоварВЯчейкахСборкиСтрока);	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоСотруднику(ШК)
	
	ИнформацияПоШтрихКодуТабличныйДокумент.Очистить();
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("ИнформацияПоШтрихКоду");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сотрудники.Наименование
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() тогда
		
		Область = Макет.ПолучитьОбласть("Шапка");	
		Область.Параметры.стрШК = ШК;
		Область.Параметры.стрНаименование = "Сотрудник";
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("НетДанных");
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(Область);
		
		
		ОбластьПояснение = Макет.ПолучитьОбласть("Пояснение");
		ОбластьПояснение.Параметры.Пояснение = "Сотрудник с таким штрих-кодом не найден!";
		ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(ОбластьПояснение);
		
		Возврат;
		
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	
	Область = Макет.ПолучитьОбласть("Шапка");
	
	Пока Выборка.Следующий() цикл		
		Область.Параметры.стрШК = ШК;
		Область.Параметры.стрНаименование = "Сотрудник "+ Выборка.Наименование;
	КонецЦикла;
	
	ИнформацияПоШтрихКодуТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииКлиент

&НаКлиенте
Процедура ВозвратКВыбору(Команда)
	
	ВозвратКВыборуСервер();
	ВозратКВыборуВидимостьИОчисткаДанных();
	
КонецПроцедуры

&НаСервере
Процедура ВозратКВыборуВидимостьИОчисткаДанных()
	
	Элементы.ОсновноеМеню.Видимость = Истина;
	Элементы.СменаМестаХраненияГруппа.Видимость = Ложь;
	Элементы.РаскладкаЗаказаГруппа.Видимость = Ложь;
	Элементы.ВыборМаршрутаГруппа.Видимость = Ложь;
	Элементы.ПриемкаИРаскладкаСамовывозовГруппа.Видимость = Ложь;
	Элементы.СборкаИКомплектацияЗаказовГруппа.Видимость = Ложь;
	Элементы.ВыборМаршрута.Видимость = Ложь;
	Маршруты.Очистить();
	Маршрут = ПредопределенноеЗначение("Документ.МаршрутНаАптеку.ПустаяСсылка");
	МестоЗСЯ = ПредопределенноеЗначение("Справочник.МестоЗСЯ.ПустаяСсылка");
	Номенклатура =  ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.ВыборРежима");	
	ЭтаФорма.Элементы.Комплектация.Видимость = Ложь;
	ЭтаФорма.Элементы.СборкаИКомплектацияЗаказовГруппа.Видимость = Ложь;
	Сборка_ОчиститьДанныеСборки();
	Комплектация_ОчиститьДанные();
	Сборка_Холод = Ложь;
	Элементы.ИнформацияПоШтрихКодуГруппа.Видимость = Ложь;
	Элементы.Инвентаризация.Видимость = Ложь;
	Инвентаризация_ВыборДелимогоТовара.Очистить();
	Инвентаризация_Количество = 0;
	Инвентаризация_ТоварДелимый = Ложь;
	Элементы.ПечатьЦенниковГруппа.Видимость = Ложь;
	НоменклатураДляЦенников.Очистить();
	ТипСборки = ПредопределенноеЗначение("Перечисление.ТипСборки.ПустаяСсылка");
	ДокументОснованиеСборки = ПредопределенноеЗначение("Документ.Перемещение.ПустаяСсылка");    
	Элементы.СборкаПеремещенияГруппа.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииСервер

&НаСервере
Процедура ВозвратКВыборуСервер()
	ИнформацияПоШтрихКодуТабличныйДокумент.Очистить();
	Для каждого Строка из Маршруты цикл
		КомандаУИД = Команды.Найти("К"+Строка.УИД);
		КомандаШК = Команды.Найти("К"+Строка.ШтрихКод);
		Если КомандаУИД <> Неопределено тогда
			ЭтаФорма.Команды.Удалить(КомандаУИД);
		КонецЕсли;
		Если КомандаШК <> Неопределено тогда
			ЭтаФорма.Команды.Удалить(КомандаШК);
		КонецЕсли;
	КонецЦикла;	
	//Для каждого Строка из ДокументыДляКнопок цикл
	//	Если ЗначениеЗаполнено(Строка.УИД) тогда
	//		ЭтаФорма.Команды.Удалить(Команды.Найти("К"+Строка.УИД));
	//	КонецЕсли;
	//КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНоменклатуруПоШК(Данные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаводскиеШК.Владелец
	|ИЗ
	|	Справочник.ЗаводскиеШК КАК ЗаводскиеШК
	|ГДЕ
	|	ЗаводскиеШК.Наименование = &Данные";
	Запрос.УстановитьПараметр("Данные",Данные);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Возврат Выборка.Владелец;
	КонецЦикла;
	Возврат Справочники.Номенклатура.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция РольДоступнаСервер(ИмяРоли)
	Возврат РольДоступна(ИмяРоли)
КонецФункции

&НаСервере
Функция ПолучитьЗСЯИзШтрихКода(Данные,ВидМестаЗСЯ = Неопределено,СоздаватьЕслиНет = Ложь)
	
	КодСклада = Сред(Данные,3,2);	
	КодСклада = ?(Лев(КодСклада,1)="0", Сред(КодСклада,2,1), КодСклада);
	КодЗоны = Сред(Данные,5,2);	
	КодЗоны = ?(Лев(КодЗоны,1)="0", Сред(КодЗоны,2,1), КодЗоны);
	Стеллаж = Сред(Данные,7,3);	
	Пока Лев(Стеллаж,1) = "0" Цикл	
		Стеллаж = Сред(Стеллаж,2);	
	КонецЦикла;
	Ячейка = Сред(Данные,10,3);	
	Пока Лев(Ячейка,1) = "0" Цикл	
		Ячейка = Сред(Ячейка,2);	
	КонецЦикла;
	текЗона=КодЗоны;
	текСтеллаж=Стеллаж;
	текЯчейка=Ячейка;
	Склад = Справочники.МестаХранения.НайтиПоКоду(КодСклада);
	Если Склад.АдресХранения <> ПараметрыСеанса.ТекущийАдресХранения или не ЗначениеЗаполнено(Склад) тогда
		Возврат  "Ячейка не текущего склада! "+Склад.Наименование;	
	КонецЕсли;
	Возврат ОбщиеФункцииСервер.ПолучитьЗСЯ(Склад,текЗона,текСтеллаж,текЯчейка,,ВидМестаЗСЯ,СоздаватьЕслиНет);
	
КонецФункции

#КонецОбласти


#Область СборкаПеремещения

&НаКлиенте
Процедура Сборка_СборкаПеремещения(Команда)
	Если ЗначениеЗаполнено(Объект.Сотрудник) тогда
		Объект.РежимРаботыОператора = ПредопределенноеЗначение("Перечисление.РежимРаботыОператора.СборкаПеремещения");
		ТипСборки = ПредопределенноеЗначение("Перечисление.ТипСборки.СборкаПеремещения");
		Элементы.ОсновноеМеню.Видимость = Ложь;
		Элементы.СборкаПеремещенияГруппа.Видимость = Истина;  
		ЗаполнитьПеремещения();
	Иначе
		ПоказатьПредупреждение(,"Для продолжения отсканируейте ШК сотрудника!");			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПеремещения()
	
	ДокументыДляКнопок.Очистить();	
	
	Для каждого Элем из ЭтаФорма.Элементы.СписокПеремещений.ПодчиненныеЭлементы цикл
		Элементы.Удалить(Элем);	
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТоварыКСборкеОстатки.Документ КАК Документ.Перемещение) КАК Документ,
	|	ТоварыКСборкеОстатки.Товар.Холод КАК Холод,
	|	ВЫРАЗИТЬ(ТоварыКСборкеОстатки.Документ КАК Документ.Перемещение).Номер КАК Номер,
	|	ВЫРАЗИТЬ(ТоварыКСборкеОстатки.Документ КАК Документ.Перемещение).Дата КАК Дата,
	|	Естьnull(СборкаЗаказов_ЗаданиеНаСборку.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник
	|ИЗ
	|	РегистрНакопления.ТоварыКСборке.Остатки(
	|			,
	|			Документ ССЫЛКА Документ.Перемещение
	|				И Склад = &Склад) КАК ТоварыКСборкеОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СборкаЗаказов_ЗаданиеНаСборку КАК СборкаЗаказов_ЗаданиеНаСборку
	|		ПО ТоварыКСборкеОстатки.Документ = СборкаЗаказов_ЗаданиеНаСборку.Документ
	|ГДЕ
	|	ТоварыКСборкеОстатки.КоличествоКСборкеОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ТоварыКСборкеОстатки.Документ КАК Документ.Перемещение).Дата,
	|	ТоварыКСборкеОстатки.Товар.Холод,
	|	ВЫРАЗИТЬ(ТоварыКСборкеОстатки.Документ КАК Документ.Перемещение),
	|	ВЫРАЗИТЬ(ТоварыКСборкеОстатки.Документ КАК Документ.Перемещение).Номер,
	|	СборкаЗаказов_ЗаданиеНаСборку.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер,
	|	Дата,
	|	Холод";
	Запрос.УстановитьПараметр("Склад",ПараметрыСеанса.ОсновнойСклад);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		СтрокаДокумент = ДокументыДляКнопок.Добавить(); 
		СтрокаДокумент.Документ = Выборка.Документ;
		СтрокаДокумент.Номер = СокрЛП(Выборка.Номер);
		СтрокаДокумент.Дата = Выборка.Дата;	
		СтрокаДокумент.Холод = Выборка.Холод;
		СтрокаДокумент.УИД = СтрЗаменить(Строка(Новый УникальныйИдентификатор),"-","");
		СтрокаДокумент.Сотрудник = Выборка.Сотрудник;
	КонецЦикла;
	Для каждого строка из ДокументыДляКнопок цикл
		ИмяКоманды ="К"+строка.УИД; 
		КомандаФормы = ЭтаФорма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "ВыборПеремещения";
		Кнопка = ЭтаФорма.Элементы.Добавить(
		ИмяКоманды,//Имя элемента
		Тип("КнопкаФормы"),//Тип элемента
		Элементы.СписокПеремещений);//Владелец элемента.
		Кнопка.Высота = 2;
		Кнопка.РастягиватьПоГоризонтали = Истина;
		
		Кнопка.ИмяКоманды  = ИмяКоманды;  
		Кнопка.Отображение = ОтображениеКнопки.Текст;
		Кнопка.Заголовок   = строка.Номер + " " + Формат(строка.Дата,"ДФ=dd.MM.yyyy") + " / " 
		+ Формат(Строка.Холод,"БЛ=Тепло; БИ=Холод") + Символы.ПС + строка.Сотрудник.Наименование;
	КонецЦикла;                                                                                                                    
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПеремещения(Команда)
	УИДПеремещения = СтрЗаменить(Команда.Имя,"К","");
	СтрокиПеремещения = ДокументыДляКнопок.НайтиСтроки(Новый Структура("УИД",УИДПеремещения));
	Для каждого СтрокаПеремещения из СтрокиПеремещения цикл
		Если ЗначениеЗаполнено(СтрокаПеремещения.Сотрудник) и СтрокаПеремещения.Сотрудник <> Объект.Сотрудник тогда
			Если Вопрос("Задание на сборку уже закреплено за пользователем " + СтрокаПеремещения.Сотрудник + " .
				|Назначить текущего пользователя?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
				
			Иначе
				Возврат
			КонецЕсли;
		КонецЕсли;
		Ответ = СборкаИКомплектацияСамовывозовАлгоритмы.ПолучитьЗаданиеНаСборку(СтрокаПеремещения.Холод,СтрокаПеремещения.Сотрудник,Ложь,ТипСборки,СтрокаПеремещения.Документ,Объект.Сотрудник);	
		Ответ = неопределено;
		Если ТипЗнч(Ответ) = Тип("Строка") тогда
			ПоказатьПредупреждение(,Ответ,10,"Ошибка!");
			Возврат;
		КонецЕсли;  	
		Сборка_Холод = СтрокаПеремещения.Холод;
		ДокументОснованиеСборки = СтрокаПеремещения.Документ;
		Сборка_ЗаполнитьДанныеПоЗаданиюНаСборку();
		Сборка_ИндексСтроки = 0;
		Сборка_ЗаполнитьПоНомеруСтроки();
		Элементы.ВыборХолодТепло.Видимость = Ложь;
		Элементы.СборкаПеремещенияГруппа.Видимость = Ложь;
		Элементы.СборкаЗаказаГруппа.Видимость = Истина;
		Элементы.СборкаИКомплектацияЗаказовГруппа.Видимость = Истина;			
		Прервать;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ОчиститьЯчейкуНаСервере()
	Если ЗначениеЗаполнено(МестоЗСЯ) тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗСЯНоменклатуры.Номенклатура,
		|	ЗСЯНоменклатуры.Склад,
		|	ЗСЯНоменклатуры.Зона,
		|	ЗСЯНоменклатуры.Стеллаж,
		|	ЗСЯНоменклатуры.Ячейка,
		|	ЗСЯНоменклатуры.МестоЗСЯ
		|ИЗ
		|	РегистрСведений.ЗСЯНоменклатуры КАК ЗСЯНоменклатуры
		|ГДЕ
		|	ЗСЯНоменклатуры.МестоЗСЯ = &МестоЗСЯ";
		Запрос.УстановитьПараметр("МестоЗСЯ", МестоЗСЯ);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() цикл
			МенеджерЗСЯНоменклатуры = РегистрыСведений.ЗСЯНоменклатуры.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗСЯНоменклатуры,Выборка);
			МенеджерЗСЯНоменклатуры.Прочитать();
			МенеджерЗСЯНоменклатуры.Удалить();
		КонецЦикла;
		Возврат "Очищенны привязки номенклатуры к ячейке" + Символы.ПС + МестоЗСЯ.Наименование;
	Иначе
		Возврат "Не просканированно ЗСЯ!";
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОчиститьЯчейку(Команда)
	ПоказатьПредупреждение(,ОчиститьЯчейкуНаСервере());
КонецПроцедуры

#КонецОбласти

#Область СоздатьПриемныеОрдера

&НаСервере
Процедура СоздатьПриходныеОрдераПоЗаказам(ДокЗаказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Приходная.Ссылка КАК ПриходнаяНакладная
	|ПОМЕСТИТЬ ВТ_Приходная
	|ИЗ
	|	Документ.Приходная КАК Приходная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО Приходная.СчетФактура = СчетФактураВыданный.Ссылка
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование В (&ДокументОснование)
	|	И Приходная.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Приходная.ПриходнаяНакладная КАК ДокументОснование,
	|	ПриходнаяТовары.Товар КАК Товар,
	|	ПриходнаяТовары.Партия КАК Партия,
	|	ПриходнаяТовары.Количество КАК Количество
	|ИЗ
	|	ВТ_Приходная КАК ВТ_Приходная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Приходная.Товары КАК ПриходнаяТовары
	|		ПО ВТ_Приходная.ПриходнаяНакладная = ПриходнаяТовары.Ссылка
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товар),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Партия),
	|	СУММА(Количество)
	|ПО
	|	ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокЗаказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДокументОснование = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументОснование.Следующий() Цикл
		ПриемныйОрдерОбъект = Документы.ПриемныйОрдер.СоздатьДокумент();
		ПриемныйОрдерОбъект.Дата = ТекущаяДата();
		ПриемныйОрдерОбъект.ДокументОснование = ВыборкаДокументОснование.ДокументОснование;
		ВыборкаДетальныеЗаписи = ВыборкаДокументОснование.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрока = ПриемныйОрдерОбъект.ПринятыйТовар.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
		Попытка
			ПриемныйОрдерОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить("Не удалось создать приемный ордер для приходной накладной "+Строка(ВыборкаДокументОснование.ДокументОснование));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти



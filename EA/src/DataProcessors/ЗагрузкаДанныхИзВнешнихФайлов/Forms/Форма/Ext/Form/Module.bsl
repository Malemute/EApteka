&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗагружатьКоличество = ?(Параметры.Свойство("ЗагружатьКоличество"), Параметры.ЗагружатьКоличество, Истина);
	
	ЗагружатьМинимальныйЗапас         = Параметры.ЗагружатьМинимальныйЗапас;
	ЗагружатьУчитыватьНаличие         = Параметры.ЗагружатьУчитыватьНаличие;
	ЗагружатьЦены                     = Параметры.ЗагружатьЦены;
	ЗагружатьСуммы                    = Параметры.ЗагружатьСуммы;
	ЗагружатьПроизводителя            = Параметры.ЗагружатьПроизводителя;
	ЦенаВключаетНДС                   = Параметры.ЦенаВключаетНДС;
	ЗагружатьГТД                      = Параметры.ЗагружатьГТД;
	ИмяТЧ                             = Параметры.ИмяТЧ;
	НеПересчитыватьСуммовыеПоказатели = Параметры.НеПересчитыватьСуммовыеПоказатели;
	Поставщик                         = Параметры.Поставщик;
	Объект.ВидИмпортируемыхДанных     = Параметры.ВидИмпортируемыхДанных;
	
	Если Параметры.Свойство("Шаг1Подсказка") И ЗначениеЗаполнено(Параметры.Шаг1Подсказка) Тогда
		Элементы.Шаг1Подсказка.Заголовок = Параметры.Шаг1Подсказка;
	КонецЕсли;
	
	Если Параметры.Свойство("Шаг2Подсказка") И ЗначениеЗаполнено(Параметры.Шаг2Подсказка) Тогда
		Элементы.Шаг2Подсказка.Заголовок = Параметры.Шаг2Подсказка;
	КонецЕсли;
	
	Если Параметры.Свойство("Заголовок") И ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	Элементы.ТоварыСоздатьНоменклатуру.Видимость = ЗначениеЗаполнено(Поставщик);
	
	Если ЗначениеЗаполнено(Параметры.ОтборПоТипуНоменклатуры) Тогда
		ОтборПоТипуНоменклатуры = Параметры.ОтборПоТипуНоменклатуры;
		
		ТекстОтбора = НСтр("ru='Для выбора доступна номенклатура с типом: %Тип%.'");
		Тип = "";
		Для каждого ТипНоменклатурыОтбор Из Параметры.ОтборПоТипуНоменклатуры Цикл
			
			Тип = Тип + ТипНоменклатурыОтбор + ", ";
			
		КонецЦикла;
		ТекстОтбора = СтрЗаменить(ТекстОтбора, "%Тип%", Лев(Тип, СтрДлина(Тип)-2));
		
		Элементы.ОтборНадпись.Заголовок = ТекстОтбора;
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Параметры.ОтборПоТипуНоменклатуры));
		Элементы.ТоварыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;
	
	ИнициализироватьТабличныйДокумент();
	УстановитьДоступностьКомандБуфераОбмена();
	УстановитьДоступностьКолонок();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураПараметровСопоставленнияНоменклатуры = Новый Структура;
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Ссылка",                             Объект);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("НеВыполнятьПроверкуДляПользователя", Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ПроверитьСопоставленнуюНоменклатуруПоставщика",
		СтруктураПараметровСопоставленнияНоменклатуры);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	Если Не НеПересчитыватьСуммовыеПоказатели Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	Если НеПересчитыватьСуммовыеПоказатели Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	Если НеПересчитыватьСуммовыеПоказатели Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВЗакупках");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	Если НеПересчитыватьСуммовыеПоказатели Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	Если НеПересчитыватьСуммовыеПоказатели Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено И Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" Тогда
		ЗаполнитьСписокВыбораНоменклатуры(ТекущаяСтрока.КодСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.СоздатьНомерГТД = НЕ ЗначениеЗаполнено(ТекущаяСтрока.НомерГТД);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтранаПроисхожденияОчистка(Элемент, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.ЗагружаемаяСтранаПроисхождения = "";
КонецПроцедуры

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ТаблицаТоваров = ПолучитьСтрокиИзБуфераОбменаНаСервере();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"Доступность", 
		НЕ ПустойБуферОбмена("Строки"));
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПоискИСопоставлениеНоменклатуры

&НаСервере
Процедура СопоставитьДанныеТабличногоДокументаСДаннымиИБ()
	
	УточнениеНоменклатуры.Очистить();
	ПодобраннаяНоменклатура.Очистить();
	Объект.Товары.Очистить();
	
	ЗаполнитьТаблицуНоменклатурыИШтрихкодов();
	
	ТаблицаПоставщиков = Неопределено;
	Если Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Закупки Тогда
		ТаблицаПоставщиков = ОбменДаннымиСКонтрагентами.ТаблицаПоставщиковДляПоиска();
	КонецЕсли;
	
	НомераКолонок = Новый Соответствие;
	
	НомерКолонки = 0;
	Если Объект.ВидИмпортируемыхДанных <> Перечисления.ВидыИмпортируемыхДанных.Остатки
		И Объект.ВидИмпортируемыхДанных <> Перечисления.ВидыИмпортируемыхДанных.Закупки
		И Объект.ВидИмпортируемыхДанных <> Перечисления.ВидыИмпортируемыхДанных.Продажи Тогда
		НомерКолонки = НомерКолонки + 1;
		НомераКолонок.Вставить("КолонкаШтрихкод", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	КонецЕсли;
	
	Если Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Закупки
		Или Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Продажи Тогда
		НомерКолонки = НомерКолонки + 1;
		НомераКолонок.Вставить("КолонкДата", "D" + Формат(НомерКолонки, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	НомерКолонки = НомерКолонки +1;
	НомераКолонок.Вставить("КолонкаНоменклатура", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	
	НомерКолонки = НомерКолонки +1;
	Если ЗначениеЗаполнено(Поставщик) Тогда
		НомераКолонок.Вставить("КолонкаАртикул", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	Иначе
		НомераКолонок.Вставить("КолонкаКод", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	КонецЕсли;
	
	Если Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Остатки Тогда
		НомерКолонки = НомерКолонки +1;
		НомераКолонок.Вставить("КолонкаНачальныйОстаток", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		
		НомерКолонки = НомерКолонки +1;
		НомераКолонок.Вставить("КолонкаКонечныйОстаток", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	КонецЕсли;
	
	Если ЗагружатьПроизводителя Тогда
		НомерКолонки = НомерКолонки +1;
		НомераКолонок.Вставить("КолонкаПроизводитель", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	КонецЕсли;
	
	Если Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Закупки Тогда
		НомерКолонки = НомерКолонки +1;
		НомераКолонок.Вставить("КолонкаИНН", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		
		НомерКолонки = НомерКолонки +1;
		НомераКолонок.Вставить("КолонкаКПП", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		
		НомерКолонки = НомерКолонки +1;
		НомераКолонок.Вставить("КолонкаПоставщик", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	КонецЕсли;
	
	Если ЗагружатьМинимальныйЗапас Тогда
		НомерКолонки = НомерКолонки +1;
		НомераКолонок.Вставить("КолонкаМинимальныйЗапас", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	КонецЕсли;
	
	Если ЗагружатьУчитыватьНаличие Тогда
		НомерКолонки = НомерКолонки +1;
		НомераКолонок.Вставить("КолонкаУчитыватьНаличие", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	КонецЕсли;
	
	Если ЗагружатьКоличество Тогда
		НомерКолонки = НомерКолонки +1;
		НомераКолонок.Вставить("КолонкаКоличество", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	КонецЕсли;
	
	Если Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Продажи Тогда
		НомерКолонки = НомерКолонки +1;
		НомераКолонок.Вставить("КолонкаЦенаЗакупки", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		
		НомерКолонки = НомерКолонки +1;
		НомераКолонок.Вставить("КолонкаЦенаПродажи", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	КонецЕсли;
	
	Если ЗагружатьЦены Тогда
		НомерКолонки = НомерКолонки +1;
		НомераКолонок.Вставить("КолонкаЦена", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	КонецЕсли;
	
	Если ЗагружатьСуммы Тогда
		НомерКолонки = НомерКолонки +1;
		НомераКолонок.Вставить("КолонкаСумма", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	КонецЕсли;
	
	Если ЗагружатьГТД Тогда
		НомерКолонки = НомерКолонки +1;
		НомераКолонок.Вставить("КолонкаНомерГТД", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
		НомераКолонок.Вставить("КолонкаСтранаПроисхождения", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	КонецЕсли;
	
	НомерСтроки = 2;
	СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
	ЗаполненыНоменклатураКодАртикулШтрихкод = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаАртикул")).Текст)
		Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНоменклатура")).Текст)
		Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаШтрихкод")).Текст)
		Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКод")).Текст);
	ЕстьОшибкиРаспознавания = Ложь;
	
	Пока ЗаполненыНоменклатураКодАртикулШтрихкод Цикл
		
		НоваяСтрока = УточнениеНоменклатуры.Добавить();
		Количество = 0;
		НоваяСтрока.КодСтроки = НомерСтроки;
		
		Если Объект.ВидИмпортируемыхДанных <> Перечисления.ВидыИмпортируемыхДанных.Остатки
			И Объект.ВидИмпортируемыхДанных <> Перечисления.ВидыИмпортируемыхДанных.Закупки
			И Объект.ВидИмпортируемыхДанных <> Перечисления.ВидыИмпортируемыхДанных.Продажи Тогда
			Попытка
				НоваяСтрока.Штрихкод = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаШтрихкод")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
		Если Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Закупки
			Или Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Продажи Тогда
			Попытка
				ДатаСтрока = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаШтрихкод")).Текст;
				
				ВозможныеРазделители = ".,/\";
				ДатаМассив = Новый Массив;
				Для Сч = 1 По СтрДлина(ВозможныеРазделители) Цикл
					ДатаМассив = СтрРазделить(ДатаСтрока, Сред(ВозможныеРазделители, Сч, 1));
					Если ДатаМассив.Количество() = 3 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ДатаМассив.Количество() = 3 Тогда
					НоваяСтрока.Дата = Дата(Число(ДатаМассив[2]), Число(ДатаМассив[1]), Число(ДатаМассив[0]));
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Попытка
			Если ЗначениеЗаполнено(Поставщик) Тогда
				НоваяСтрока.Артикул = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаАртикул")).Текст;
			Иначе
				НоваяСтрока.Код = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКод")).Текст;
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Попытка
			НоваяСтрока.НоменклатураНаименование = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНоменклатура")).Текст;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Попытка
			Если ЗагружатьКоличество Тогда
				Количество = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКоличество")).Текст;
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Остатки Тогда
			Попытка
				НачальныйОстаток = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНачальныйОстаток")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			Попытка
				КонечныйОстаток = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКонечныйОстаток")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Попытка
				НоваяСтрока.НачальныйОстаток = Число(СтрЗаменить(НачальныйОстаток, " ", ""));
			Исключение
			КонецПопытки;
			Попытка
				НоваяСтрока.КонечныйОстаток = Число(СтрЗаменить(КонечныйОстаток, " ", ""));
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если ЗагружатьПроизводителя Тогда
			Попытка
				НоваяСтрока.Производитель = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаПроизводитель")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
		Если Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Закупки Тогда
			
			Попытка
				НоваяСтрока.ИНН = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаИНН")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Попытка
				НоваяСтрока.КПП = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКПП")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Попытка
				НоваяСтрока.Поставщик = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаПоставщик")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЗагружатьМинимальныйЗапас Тогда
			МинимальныйЗапас = 0;
			Попытка
				МинимальныйЗапас = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаМинимальныйЗапас")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Попытка
				НоваяСтрока.МинимальныйЗапас = Число(СтрЗаменить(МинимальныйЗапас, " ", ""));
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если ЗагружатьУчитыватьНаличие Тогда
			УчитыватьНаличие = Ложь;
			Попытка
				УчитыватьНаличие = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаУчитыватьНаличие")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Попытка
				НоваяСтрока.УчитыватьНаличие = Булево(УчитыватьНаличие);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если ЗагружатьКоличество Тогда
			Попытка
				НоваяСтрока.Количество = Число(СтрЗаменить(Количество, " ", "")); 
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Продажи Тогда
			Попытка
				ЦенаЗакупки = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаЦенаЗакупки")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			Попытка
				ЦенаПродажи = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаЦенаПродажи")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Попытка
				НоваяСтрока.ЦенаЗакупки = Число(СтрЗаменить(ЦенаЗакупки, " ", ""));
			Исключение
			КонецПопытки;
			Попытка
				НоваяСтрока.ЦенаПродажи = Число(СтрЗаменить(ЦенаПродажи, " ", ""));
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если ЗагружатьЦены Тогда
			Цена = 0;
			Попытка
				Цена = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаЦена")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Попытка
				НоваяСтрока.Цена = Число(СтрЗаменить(Цена, " ", ""));
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЗагружатьСуммы Тогда
			Сумма               = 0;
			СуммаНДС            = 0;
			СуммаСНДС           = 0;
			
			Попытка
				Если НомераКолонок.Получить("КолонкаСумма") <>  Неопределено Тогда
					Сумма     = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСумма")).Текст;
				КонецЕсли;
				Если НомераКолонок.Получить("КолонкаСуммаНДС") <>  Неопределено Тогда
					СуммаНДС  = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСуммаНДС")).Текст;
				КонецЕсли;
				Если НомераКолонок.Получить("КолонкаСуммаСНДС") <>  Неопределено Тогда
					СуммаСНДС = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСуммаСНДС")).Текст;
				КонецЕсли;
				
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Попытка
				НоваяСтрока.Сумма = Число(СтрЗаменить(Сумма, " ", "")); 
			Исключение
			
			КонецПопытки;
			
			Попытка
				НоваяСтрока.СуммаНДС = Число(СтрЗаменить(СуммаНДС, " ", "")); 
			Исключение
			
			КонецПопытки;
			
			Попытка
				НоваяСтрока.СуммаСНДС = Число(СтрЗаменить(СуммаСНДС, " ", ""));
			Исключение
			
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЗагружатьГТД Тогда
			Попытка
				НомерГТД            = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНомерГТД")).Текст;
				СтранаПроисхождения = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСтранаПроисхождения")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Если ЗначениеЗаполнено(НомерГТД) Тогда
				НоваяСтрока.НомерГТД             = СокрЛП(НомерГТД);
				Если ЗначениеЗаполнено(СтранаПроисхождения) Тогда
					НоваяСтрока.СтранаПроисхождения  = ВРег(СокрЛП(СтранаПроисхождения));
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаПоискаКод          = ВРег(СтрЗаменить(НоваяСтрока.Код, " ", ""));
		СтрокаПоискаАртикул      = ВРег(СтрЗаменить(НоваяСтрока.Артикул, " ", ""));
		СтрокаПоискаНоменклатура = ВРег(СтрЗаменить(НоваяСтрока.НоменклатураНаименование, " ", ""));
		
		НайденныеСтроки = Новый Массив;
		
		Если ЗначениеЗаполнено(НоваяСтрока.Штрихкод) Тогда
			ШтрихКодБезПробелов = СтрЗаменить(НоваяСтрока.Штрихкод, " ", "");
			НайденныеСтроки = ТаблицаШтрихкодов.НайтиСтроки(Новый Структура("Штрихкод", ШтрихКодБезПробелов));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
					ПодобраннаяСтрока.КодСтроки = НомерСтроки;
					ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(НоваяСтрока.Код) И НайденныеСтроки.Количество() = 0 Тогда
			
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код", СтрокаПоискаКод));
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
				ПодобраннаяСтрока.КодСтроки = НомерСтроки;
				ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока);
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Артикул) И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование)
			И НайденныеСтроки.Количество() = 0 Тогда
			
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПоиск",
				СтрокаПоискаАртикул,
				СтрокаПоискаНоменклатура));
				
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПолноеПоиск",
					СтрокаПоискаАртикул,
					СтрокаПоискаНоменклатура));
					
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск", СтрокаПоискаАртикул));
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ПодобранныеРанееТовары = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, НоменклатураПоставщика, КодСтроки",
																							НайденнаяСтрока.Номенклатура, НайденнаяСтрока.НоменклатураПоставщика, НомерСтроки));
				Если ПодобранныеРанееТовары.Количество() = 0 Тогда
					ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
					ПодобраннаяСтрока.КодСтроки = НомерСтроки;
					ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(НоваяСтрока.Артикул) И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование)
			И НайденныеСтроки.Количество() = 0 Тогда
			
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПоиск", СтрокаПоискаНоменклатура));
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПолноеПоиск", СтрокаПоискаНоменклатура));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НоменклатураПоставщикаПоиск", СтрокаПоискаНоменклатура));
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
				ПодобраннаяСтрока.КодСтроки = НомерСтроки;
				ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока);
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Артикул) И НЕ ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование)
			И НайденныеСтроки.Количество() = 0 Тогда
			
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск", СтрокаПоискаАртикул));
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ПодобранныеРанееТовары = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, НоменклатураПоставщика, КодСтроки",
																							НайденнаяСтрока.Номенклатура, НайденнаяСтрока.НоменклатураПоставщика, НомерСтроки));
				Если ПодобранныеРанееТовары.Количество() = 0 Тогда
					ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
					ПодобраннаяСтрока.КодСтроки = НомерСтроки;
					ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		// Заполнение тч Товары.
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		НоваяСтрокаТовары.ЗагружаемаяНоменклатура        = НоваяСтрока.НоменклатураНаименование;
		НоваяСтрокаТовары.ЗагружаемыйАртикул             = НоваяСтрока.Артикул;
		НоваяСтрокаТовары.ЗагружаемыйШтрихкод            = НоваяСтрока.Штрихкод;
		НоваяСтрокаТовары.ЗагружаемыйКод                 = НоваяСтрока.Код;
		НоваяСтрокаТовары.ЗагружаемыйНомерГТД            = НоваяСтрока.НомерГТД;
		НоваяСтрокаТовары.ЗагружаемаяСтранаПроисхождения = НоваяСтрока.СтранаПроисхождения;
		НоваяСтрокаТовары.ЗагружаемыйПроизводитель       = НоваяСтрока.Производитель;
		
		Если Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Остатки Тогда
			НоваяСтрокаТовары.ЗагружаемыйНачальныйОстаток = НоваяСтрока.НачальныйОстаток;
			НоваяСтрокаТовары.ЗагружаемыйКонечныйОстаток = НоваяСтрока.КонечныйОстаток;
		КонецЕсли;
		
		Если Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Закупки
			Или Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Продажи Тогда
			НоваяСтрокаТовары.ЗагружаемаяДата = НоваяСтрока.Дата;
		КонецЕсли;
		
		Если Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Закупки Тогда
			НоваяСтрокаТовары.ЗагружаемыйИНН = НоваяСтрока.ИНН;
			НоваяСтрокаТовары.ЗагружаемыйКПП = НоваяСтрока.КПП;
			НоваяСтрокаТовары.ЗагружаемыйПоставщик = НоваяСтрока.Поставщик;
			
			СтрокаТаблицыПоставщиков = Неопределено;
			
			Если ЗначениеЗаполнено(НоваяСтрока.ИНН) Тогда
				СтрокаТаблицыПоставщиков = ТаблицаПоставщиков.Найти(СокрЛП(НоваяСтрока.ИНН), "ИНН");
			КонецЕсли;
			
			Если СтрокаТаблицыПоставщиков = Неопределено И ЗначениеЗаполнено(НоваяСтрока.Поставщик) Тогда
				СтрокаТаблицыПоставщиков = ТаблицаПоставщиков.Найти(ВРег(СтрЗаменить(НоваяСтрока.Поставщик, " ", "")), "НаименованиеПоиск");
				Если СтрокаТаблицыПоставщиков = Неопределено Тогда
					СтрокаТаблицыПоставщиков = ТаблицаПоставщиков.Найти(ВРег(СтрЗаменить(НоваяСтрока.Поставщик, " ", "")), "ПолнНаименованиеПоиск");
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТаблицыПоставщиков <> Неопределено Тогда
				НоваяСтрокаТовары.Поставщик = СтрокаТаблицыПоставщиков.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Продажи Тогда
			НоваяСтрокаТовары.ЗагружаемаяЦенаЗакупки = НоваяСтрока.ЦенаЗакупки;
			НоваяСтрокаТовары.ЗагружаемаяЦенаПродажи = НоваяСтрока.ЦенаПродажи;
		КонецЕсли;
		
		Если ЗагружатьКоличество Тогда
			НоваяСтрокаТовары.Количество = НоваяСтрока.Количество;
		КонецЕсли;
		НоваяСтрокаТовары.КодСтроки = НомерСтроки;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, НоваяСтрока,,"Артикул, Поставщик");
		
		МассивПодобраннойНоменклатуры = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("КодСтроки", НомерСтроки));
		
		Если МассивПодобраннойНоменклатуры.Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, МассивПодобраннойНоменклатуры.Получить(0));
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		Если ЗагружатьКоличество Тогда
			Если НоваяСтрокаТовары.Количество > 0 Тогда
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ НеПересчитыватьСуммовыеПоказатели Тогда
			СтруктураПересчетаСуммы = Новый Структура;
			СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СуммаНДС) Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СуммаСНДС) Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Сумма) Тогда
				СтруктураДействий.Вставить("ПересчитатьСумму");
			КонецЕсли;
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
		
		Попытка
			ЗаполненыНоменклатураКодАртикулШтрихкод = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаАртикул")).Текст)
				Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНоменклатура")).Текст)
				Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаШтрихкод")).Текст)
				Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКод")).Текст);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	Если ЗагружатьГТД Тогда
		ДополнитьТоварыНомерамиГТД();
	КонецЕсли;
	
	ТаблицаНоменклатуры.Очистить();
	ТаблицаШтрихкодов.Очистить();
	УточнениеНоменклатуры.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНоменклатурыИШтрихкодов()
	
	ТаблицаНоменклатуры.Очистить();
	ТаблицаШтрихкодов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	
	Если ЗначениеЗаполнено(Поставщик) Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	"""" КАК Код,
		|	НоменклатураКонтрагентов.Код КАК Артикул,
		|	"""" КАК АртикулПоиск,
		|	НоменклатураКонтрагентов.Наименование,
		|	"""" КАК НаименованиеПоиск,
		|	"""" КАК НаименованиеПолное,
		|	"""" КАК НаименованиеПолноеПоиск,
		|	"""" КАК Номенклатура,
		|	НоменклатураКонтрагентов.Ссылка КАК НоменклатураПоставщика,
		|	"""" КАК НоменклатураПоставщикаПоиск
		|ИЗ
		|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|ГДЕ
		|	НоменклатураКонтрагентов.Владелец = &Поставщик";
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Наименование КАК Штрихкод,
		|	ШтрихкодыНоменклатуры.Владелец КАК Номенклатура
		|ИЗ
		|	Справочник.ЗаводскиеШК КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ИСТИНА
		|	И &ШтрихкодыТекстУсловияОтбор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ НомХар
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И &ТекстУсловияОтбор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НомХар.Номенклатура.Код КАК Код,
		|	СоответствиеНоменклатурыПоставщика.НоменклатураКонтрагента.Код КАК Артикул,
		|	"""" КАК АртикулПоиск,
		|	НомХар.Номенклатура.Наименование КАК Наименование,
		|	"""" КАК НаименованиеПоиск,
		|	НомХар.Номенклатура.ПолноеНаименование КАК НаименованиеПолное,
		|	"""" КАК НаименованиеПолноеПоиск,
		|	НомХар.Номенклатура КАК Номенклатура,
		|	СоответствиеНоменклатурыПоставщика.НоменклатураКонтрагента.Наименование КАК НоменклатураПоставщика,
		|	"""" КАК НоменклатураПоставщикаПоиск
		|ИЗ
		|	НомХар КАК НомХар
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыКонтрагентов КАК СоответствиеНоменклатурыПоставщика
		|		ПО НомХар.Номенклатура = СоответствиеНоменклатурыПоставщика.Номенклатура
		|			И (СоответствиеНоменклатурыПоставщика.НоменклатураКонтрагента.Владелец = &Поставщик)";
	КонецЕсли;
	
	ТекстУсловияОтбор = "ИСТИНА";
	ШтрихкодыТекстУсловияОтбор = "ИСТИНА";
	
	Если ЗначениеЗаполнено(ОтборПоТипуНоменклатуры) Тогда
		
		ОтборыПоТипуНоменклатурыБезНаборов = Новый СписокЗначений;
		Для Каждого ЭлементМассива Из ОтборПоТипуНоменклатуры Цикл
			ОтборыПоТипуНоменклатурыБезНаборов.Добавить(ЭлементМассива);
		КонецЦикла;
	
		ТекстУсловияОтбор          = "Номенклатура.ТипНоменклатуры В (&ОтборПоТипуНоменклатуры)";
		ШтрихкодыТекстУсловияОтбор = "ШтрихкодыНоменклатуры.Владелец.ТипНоменклатуры В (&ОтборПоТипуНоменклатуры)";
		
		Запрос.УстановитьПараметр("ОтборПоТипуНоменклатуры", ОтборПоТипуНоменклатуры);
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТекстУсловияОтбор", ТекстУсловияОтбор);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ШтрихкодыТекстУсловияОтбор", ШтрихкодыТекстУсловияОтбор);
	
	Если ЗначениеЗаполнено(Поставщик) Тогда
		ТаблицаНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
	Иначе
		Результат = Запрос.ВыполнитьПакет();
		
		ТаблицаШтрихкодов.Загрузить(Результат[0].Выгрузить());
		ТаблицаНоменклатуры.Загрузить(Результат[2].Выгрузить());
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТаблицаНоменклатуры Цикл
		ТекСтрока.Код                         = ВРег(СтрЗаменить(ТекСтрока.Код                   , " ", ""));
		ТекСтрока.АртикулПоиск                = ВРег(СтрЗаменить(ТекСтрока.Артикул               , " ", ""));
		ТекСтрока.НаименованиеПоиск           = ВРег(СтрЗаменить(ТекСтрока.Наименование          , " ", ""));
		ТекСтрока.НаименованиеПолноеПоиск     = ВРег(СтрЗаменить(ТекСтрока.НаименованиеПолное    , " ", ""));
		ТекСтрока.НоменклатураПоставщикаПоиск = ВРег(СтрЗаменить(ТекСтрока.НоменклатураПоставщика, " ", ""));
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДополнитьТоварыНомерамиГТД()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаГТД.КодСтроки КАК КодСтроки,
	|	ТаблицаГТД.НомерГТД КАК НомерГТД,
	|	ТаблицаГТД.СтранаПроисхождения КАК СтранаПроисхождения
	|ПОМЕСТИТЬ ТаблицаНомеровГТД
	|ИЗ
	|	&ТаблицаГТД КАК ТаблицаГТД
	|ГДЕ
	|	ТаблицаГТД.НомерГТД <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСправочника.Ссылка КАК Ссылка,
	|	ДанныеСправочника.СтранаПроисхождения.Наименование КАК СтранаПроисхождения,
	|	ТаблицаНомеровГТД.НомерГТД КАК НомерГТД,
	|	ТаблицаНомеровГТД.КодСтроки КАК КодСтроки
	|ИЗ
	|	ТаблицаНомеровГТД КАК ТаблицаНомеровГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК ДанныеСправочника
	|		ПО ТаблицаНомеровГТД.НомерГТД = ДанныеСправочника.Код 
	|			И ТаблицаНомеровГТД.СтранаПроисхождения = ДанныеСправочника.СтранаПроисхождения.Наименование
	|ГДЕ
	|	НЕ ДанныеСправочника.ПометкаУдаления
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНомеровГТД.КодСтроки КАК КодСтроки,
	|	ДанныеСправочника.Ссылка КАК СтранаПроисхождения
	|ИЗ
	|	ТаблицаНомеровГТД КАК ТаблицаНомеровГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК ДанныеСправочника
	|		ПО ТаблицаНомеровГТД.СтранаПроисхождения = ДанныеСправочника.Наименование
	|ГДЕ
	|	НЕ ДанныеСправочника.ПометкаУдаления");
	ТаблицаГТД = УточнениеНоменклатуры.Выгрузить(,"КодСтроки, НомерГТД, СтранаПроисхождения");
	Запрос.УстановитьПараметр("ТаблицаГТД", ТаблицаГТД);
	Результат = Запрос.ВыполнитьПакет();

	ВыборкаГТД = Результат[1].Выгрузить();
	ВыборкаСтран = Результат[2].Выгрузить();
	
	Для каждого УточняемаяСтрока Из ТаблицаГТД Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КодСтроки", УточняемаяСтрока.КодСтроки); 
		Если ЗначениеЗаполнено(УточняемаяСтрока.НомерГТД) Тогда
			НайденныеСтроки = ВыборкаГТД.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 1 Тогда
				ЗаполняемыеСтрокиТаблицыТовары = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки", УточняемаяСтрока.КодСтроки));
				Если ЗаполняемыеСтрокиТаблицыТовары.Количество() = 1 Тогда
					ЗаполняемыеСтрока = ЗаполняемыеСтрокиТаблицыТовары.Получить(0);
					ЗаполняемыеСтрока.НомерГТД = НайденныеСтроки.Получить(0).Ссылка;
				КонецЕсли; 
			ИначеЕсли НайденныеСтроки.Количество() = 0 Тогда
				ЗаполняемыеСтрокиТаблицыТовары = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки", УточняемаяСтрока.КодСтроки));
				Если ЗаполняемыеСтрокиТаблицыТовары.Количество() = 1 Тогда
					ЗаполняемыеСтрока = ЗаполняемыеСтрокиТаблицыТовары.Получить(0);
					ЗаполняемыеСтрока.СоздатьНомерГТД = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		Если ЗначениеЗаполнено(УточняемаяСтрока.СтранаПроисхождения) Тогда
			НайденныеСтраны = ВыборкаСтран.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтраны.Количество() = 1 Тогда
				ЗаполняемыеСтрока.СтранаПроисхождения = НайденныеСтраны.Получить(0).СтранаПроисхождения;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ИнициализироватьТабличныйДокумент()
	
	МакетЗаполненияПоВнешнемуИсточнику = Обработки.ЗагрузкаДанныхИзВнешнихФайлов.ПолучитьМакет("МакетЗагрузкиДанных");
	ТабличныйДокумент.Очистить();
	
	Если Объект.ВидИмпортируемыхДанных <> Перечисления.ВидыИмпортируемыхДанных.Остатки
		И Объект.ВидИмпортируемыхДанных <> Перечисления.ВидыИмпортируемыхДанных.Закупки
		И Объект.ВидИмпортируемыхДанных <> Перечисления.ВидыИмпортируемыхДанных.Продажи Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Штрихкод");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	Если Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Закупки
		Или Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Продажи Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Дата");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Номенклатура");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	
	Если ЗначениеЗаполнено(Поставщик) Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Артикул");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	Иначе
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Код");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	Если Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Остатки Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("НачальныйОстаток");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
		
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("КонечныйОстаток");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	Если ЗагружатьПроизводителя Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Производитель");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	Если Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Закупки Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("ИНН");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
		
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("КПП");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
		
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Поставщик");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	Если ЗагружатьМинимальныйЗапас Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("МинимальныйЗапас");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	Если ЗагружатьУчитыватьНаличие Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("УчитыватьНаличие");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	Если ЗагружатьКоличество Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Количество");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	Если Объект.ВидИмпортируемыхДанных = Перечисления.ВидыИмпортируемыхДанных.Продажи Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("ЦенаЗакупки");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
		
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("ЦенаПродажи");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	Если ЗагружатьЦены Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Цена");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	Если ЗагружатьСуммы Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Сумма");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	Если ЗагружатьГТД Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("НомерГТД");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("СтранаПроисхождения");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	ТабличныйДокумент.ФиксацияСверху = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораНоменклатуры(КодТекущейСтроки)
	
	СписокВыбораНоменклатура  = Элементы.ТоварыНоменклатура.СписокВыбора;
	СписокВыбораНоменклатура.Очистить();
	
	МассивПодобраннойНоменклатуры = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("КодСтроки", КодТекущейСтроки));
	Для каждого ЭлементМассива Из МассивПодобраннойНоменклатуры Цикл
		Если СписокВыбораНоменклатура.НайтиПоЗначению(ЭлементМассива.Номенклатура) = Неопределено Тогда
			СписокВыбораНоменклатура.Добавить(ЭлементМассива.Номенклатура);
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВХранилище()

	Товары = Объект.Товары.Выгрузить();
	
	ТоварыДляПереноса = Товары.СкопироватьКолонки();
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	КэшированныеЗначения = Неопределено;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		ЗаполнитьЗначенияСвойств(ТоварыДляПереноса.Добавить(), СтрокаТЧ)
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТоварыДляПереноса);
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьНомерГТД(НомерГТД, СтранаПроисхождения)
	
	НовыйНомерГТД = Справочники.НомераГТД.СоздатьЭлемент();
	НовыйНомерГТД.Код = НомерГТД;
	НовыйНомерГТД.Страна = СтранаПроисхождения;
	НовыйНомерГТД.ОбменДанными.Загрузка = Истина;
	Попытка 
		НовыйНомерГТД.Записать();
	Исключение
	КонецПопытки;
	
	Возврат НовыйНомерГТД.Ссылка;
	
КонецФункции

&НаСервере
Процедура СоздатьНомераГТД()
	
	ТаблицаСоздаваемыхНомеровГТД = Объект.Товары.Выгрузить(Новый Структура("СоздатьНомерГТД, ВедетсяУчетПоГТД", Истина, Истина),"ЗагружаемыйНомерГТД, СтранаПроисхождения");
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаГТД.ЗагружаемыйНомерГТД КАК ЗагружаемыйНомерГТД,
	|	ТаблицаГТД.СтранаПроисхождения КАК СтранаПроисхождения
	|ПОМЕСТИТЬ ТаблицаНомеровГТД
	|ИЗ
	|	&ТаблицаГТД КАК ТаблицаГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСправочника.Ссылка КАК НомерГТД,
	|	ТаблицаНомеровГТД.ЗагружаемыйНомерГТД КАК ЗагружаемыйНомерГТД,
	|	ТаблицаНомеровГТД.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	ТаблицаНомеровГТД КАК ТаблицаНомеровГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК ДанныеСправочника
	|		ПО ТаблицаНомеровГТД.ЗагружаемыйНомерГТД = ДанныеСправочника.Код
	|			И ТаблицаНомеровГТД.СтранаПроисхождения = ДанныеСправочника.СтранаПроисхождения
	|			И НЕ ДанныеСправочника.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСправочника.Ссылка,
	|	ТаблицаНомеровГТД.ЗагружаемыйНомерГТД,
	|	ТаблицаНомеровГТД.СтранаПроисхождения");
	Запрос.УстановитьПараметр("ТаблицаГТД", ТаблицаСоздаваемыхНомеровГТД);
	ВыборкаГТД = Запрос.Выполнить().Выгрузить();

	Для Каждого СоздаваемаяСтрока Из ВыборкаГТД Цикл
		Если ЗначениеЗаполнено(СоздаваемаяСтрока.НомерГТД) Тогда
			ЗаполняемыйНомерГТД = СоздаваемаяСтрока.НомерГТД;
		Иначе 
			ЗаполняемыйНомерГТД = СоздатьНомерГТД(СоздаваемаяСтрока.ЗагружаемыйНомерГТД, СоздаваемаяСтрока.СтранаПроисхождения);
		КонецЕсли; 
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ЗагружаемыйНомерГТД", СоздаваемаяСтрока.ЗагружаемыйНомерГТД);
		СтруктураПоиска.Вставить("СтранаПроисхождения", СоздаваемаяСтрока.СтранаПроисхождения);
		СтруктураПоиска.Вставить("СоздатьНомерГТД", Истина);
		СтруктураПоиска.Вставить("ВедетсяУчетПоГТД", Истина);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
			
		Для каждого ЗаполняемаяСтрока Из НайденныеСтроки Цикл
			ЗаполняемаяСтрока.НомерГТД = ЗаполняемыйНомерГТД;
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКолонок()
	
	УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыЗагружаемыйКод", "Видимость", Не ЗначениеЗаполнено(Поставщик));
	УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНоменклатура", "Видимость", Не ЗначениеЗаполнено(Поставщик));
	
	УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыЗагружаемыйАртикул", "Видимость", ЗначениеЗаполнено(Поставщик), Истина);
	УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНоменклатураПоставщика", "Видимость", ЗначениеЗаполнено(Поставщик), Истина);
	
	УстановитьСвойствоЭлементовФормы(Элементы, "ТоварыГруппаСтранаПроисхождения", "Видимость", ЗагружатьГТД);
	УстановитьСвойствоЭлементовФормы(Элементы, "ТоварыГруппаНомерГТД", "Видимость", ЗагружатьГТД);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	ЗаполненыНоменклатураКодАртикулШтрихкод = ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C1").Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C2").Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C3").Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C4").Текст);
			
	Если Не ЗаполненыНоменклатураКодАртикулШтрихкод Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо скопировать колонки в таблицу из внешнего файла.'"));
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Состояние(НСтр("ru = 'Осуществляется сопоставление введенных данных с данными информационной базы. Пожалуйста подождите...'"),,,БиблиотекаКартинок.Информация32);
	СопоставитьДанныеТабличногоДокументаСДаннымиИБ();

	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТовары(Команда)
	
	ОчиститьСообщения();
	СоздатьНомераГТД = Ложь;
	Если Объект.Товары.НайтиСтроки(Новый Структура("СоздатьНомерГТД, ВедетсяУчетПоГТД", Истина, Истина)).Количество()>0 Тогда
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Создать", НСтр("ru = 'Создать'"));
		СписокКнопок.Добавить("БезСоздания", НСтр("ru = 'Не создавать'"));
		СписокКнопок.Добавить("Отмена", НСтр("ru = 'Отмена'"));
		
		ОтветНаВопрос = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПеренестиТоварыЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Некоторые загружаемые номера ГТД не найдены в информационной базе. Создать номера ГТД?'"), 
			СписокКнопок);
		Возврат;
	КонецЕсли;
	
	ПеренестиТоварыФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТоварыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = "Отмена" Тогда
		Отказ = Истина;
		Возврат
	ИначеЕсли ОтветНаВопрос = "Создать" Тогда
		СоздатьНомераГТД = Истина;
	КонецЕсли;
	ПеренестиТоварыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТоварыФрагмент()
	
	Перем СтруктураВыбора;
	
	Если ПроверитьЗаполнение() Тогда
		Если СоздатьНомераГТД Тогда
			СоздатьНомераГТД();
		КонецЕсли;
		Закрыть();
		СтруктураВыбора = Новый Структура();
		СтруктураВыбора.Вставить("АдресТоваровВХранилище", ПоместитьТоварыВХранилище());
		Если ЗначениеЗаполнено(ИмяТЧ) Тогда
			СтруктураВыбора.Вставить("ИмяТЧ", ИмяТЧ);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ВидИмпортируемыхДанных) Тогда
			СтруктураВыбора.Вставить("ВидИмпортируемыхДанных", Объект.ВидИмпортируемыхДанных);
		КонецЕсли;
		ОповеститьОВыборе(СтруктураВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	
	ДанныеЗагрузки = Новый Массив;
	
	СоответствиеИдентификаторовСтрок = Новый Соответствие;
	
	Для Каждого ИдентификаторСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЗагружаемыйАртикул)
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.ЗагружаемаяНоменклатура)
			Или ЗначениеЗаполнено(СтрокаТаблицы.НоменклатураПоставщика) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("КодТовара",                 СтрокаТаблицы.ЗагружаемыйАртикул);
		СтруктураДанных.Вставить("НаименованиеТовара",        СтрокаТаблицы.ЗагружаемаяНоменклатура);
		СтруктураДанных.Вставить("НаименованиеПроизводителя", СтрокаТаблицы.ЗагружаемыйПроизводитель);
		СтруктураДанных.Вставить("Штрихкод",                  СтрокаТаблицы.ЗагружаемыйШтрихкод);
		
		ДанныеЗагрузки.Добавить(СтруктураДанных);
		
		СоответствиеИдентификаторовСтрок.Вставить(СтрокаТаблицы.ЗагружаемыйАртикул, ИдентификаторСтроки);
	КонецЦикла;
	
	Если ДанныеЗагрузки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Для создания номенклатуры контрагентов выделите строки с ненайденными позициями'"));
		Возврат;
	КонецЕсли;
	
	СозданныеЭлементы = СоздатьНоменклатуруНаСервере(Поставщик, ДанныеЗагрузки).СозданныеЭлементы;
	
	Для Каждого КлючЗначение Из СозданныеЭлементы Цикл
		Если СоответствиеИдентификаторовСтрок[КлючЗначение.Ключ] <> Неопределено Тогда
			СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(СоответствиеИдентификаторовСтрок[КлючЗначение.Ключ]);
			СтрокаТаблицы.НоменклатураПоставщика = КлючЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНенайденные(Команда)
	
	ТолькоНенайденные = Не Элементы.ТоварыПоказатьНенайденные.Пометка;
	
	Если ТолькоНенайденные Тогда
		Если ЗначениеЗаполнено(Поставщик) Тогда
			ОтборСтрок = Новый ФиксированнаяСтруктура("НоменклатураПоставщика", ПредопределенноеЗначение("Справочник.НоменклатураКонтрагентов.ПустаяСсылка"));
		Иначе
			ОтборСтрок = Новый ФиксированнаяСтруктура("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		КонецЕсли;
	Иначе
		ОтборСтрок = Неопределено
	КонецЕсли;
	
	Элементы.Товары.ОтборСтрок = ОтборСтрок;
	Элементы.ТоварыПоказатьНенайденные.Пометка = ТолькоНенайденные;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаСНДС.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЦенаВключаетНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтавкаНДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаНДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаСНДС.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьСуммы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Скрытие количества

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличество.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТД.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для товаров>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТД.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<ГТД не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТД.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТД.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыМинимальныйЗапас.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьМинимальныйЗапас");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУчитыватьНаличие.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьУчитыватьНаличие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТД.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТДИнфо.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемаяСтранаПроисхождения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтранаПроисхождения.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТД.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТДИнфо.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗагружаемыйНомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТДИнфо.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗагружаемыйНомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<будет создан>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТДИнфо.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.NotGroup;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗагружаемыйНомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемаяСтранаПроисхождения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗагружаемаяСтранаПроисхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтранаПроисхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемаяСтранаПроисхождения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтранаПроисхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьСуммы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить(Перечисления.ВидыИмпортируемыхДанных.Закупки);
	СписокВидов.Добавить(Перечисления.ВидыИмпортируемыхДанных.Остатки);
	СписокВидов.Добавить(Перечисления.ВидыИмпортируемыхДанных.Продажи);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураПоставщика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НоменклатураПоставщика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидИмпортируемыхДанных");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокВидов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить(Перечисления.ВидыИмпортируемыхДанных.Закупки);
	СписокВидов.Добавить(Перечисления.ВидыИмпортируемыхДанных.Продажи);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемаяДата.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидИмпортируемыхДанных");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокВидов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйИНН.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйКПП.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйПоставщик.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоставщик.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидИмпортируемыхДанных");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыИмпортируемыхДанных.Закупки;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение, УстанавливатьДляПодчиненных = Ложь)
	
	Элемент = ЭлементыФормы.Найти(ИмяЭлемента);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НРег(ИмяСвойства) = НРег("ТолькоПросмотр")
	И ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
		ИмяСвойстваЭлемента = "Доступность";
		ЗначениеСвойства    = НЕ Значение;
	Иначе
		ИмяСвойстваЭлемента = ИмяСвойства;
		ЗначениеСвойства    = Значение;
	КонецЕсли;
	
	Если Элемент[ИмяСвойстваЭлемента] <> ЗначениеСвойства Тогда
		Элемент[ИмяСвойстваЭлемента] = ЗначениеСвойства;
	КонецЕсли;
	
	ТипыЭлементовФормыСПодчиненнымиЭлементами = Новый ОписаниеТипов("УправляемаяФорма, ГруппаФормы, ТаблицаФормы");
	
	Если УстанавливатьДляПодчиненных И ТипыЭлементовФормыСПодчиненнымиЭлементами.СодержитТип(ТипЗнч(Элемент)) Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ПодчиненныйЭлемент.Имя, ИмяСвойства, Значение, Истина);
		КонецЦикла;
 	КонецЕсли;
 	
КонецПроцедуры // УстановитьСвойствоЭлементаФорма()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойствоЭлементовФормы(ЭлементыФормы, ИменаЭлементов, ИмяСвойства, Значение, УстанавливатьДляПодчиненных = Ложь)
	
	Если ТипЗнч(ИменаЭлементов) = Тип("Массив") Тогда
		
		Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
			УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение, УстанавливатьДляПодчиненных);
		КонецЦикла
		
	Иначе
		
		Если ТипЗнч(ИменаЭлементов) = Тип("Строка") Тогда
			СтруктураИменЭлементов = Новый Структура(ИменаЭлементов);
		Иначе
			СтруктураИменЭлементов = ИменаЭлементов;
		КонецЕсли;
		
		Для Каждого ИмяЭлемента Из СтруктураИменЭлементов Цикл
			УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента.Ключ, ИмяСвойства, Значение, УстанавливатьДляПодчиненных);
		КонецЦикла
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоместитьВыделенныеСтрокиВБуферОбмена(ВыделенныеСтроки, ТабЧасть)
	ТаблицаБуфераОбмена = ИнициализироватьТаблицуБуфераОбмена();
	
	ВыделенныеСтрокиТЧ = Новый Массив;
	Если ВыделенныеСтроки <> Неопределено Тогда
		
		Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
			СтрокаТаблицы = ТабЧасть.НайтиПоИдентификатору(ТекСтрока);
			ВыделенныеСтрокиТЧ.Добавить(СтрокаТаблицы);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыделенныеСтрокиТЧ) Тогда
		Для каждого СтрокаТаблицы Из ВыделенныеСтрокиТЧ Цикл
			
			НоваяСтрока = ТаблицаБуфераОбмена.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЦикла;
	Иначе
		Для каждого СтрокаТаблицы Из ТабЧасть Цикл
			
			НоваяСтрока = ТаблицаБуфераОбмена.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЦикла;
	КонецЕсли;
	
	СкопироватьТаблицуВБуферОбмена(ТаблицаБуфераОбмена, "Строки");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнициализироватьТаблицуБуфераОбмена()
	
	ТаблицаСтрок = Новый ТаблицаЗначений();
	ОписаниеТиповЧисло15_2 = ПолучитьОписаниеТиповЧисла(15,2);
	ОписаниеТиповЧисло15_3 = ПолучитьОписаниеТиповЧисла(15,3);
	ТаблицаСтрок.Колонки.Добавить("Номенклатура"                         , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСтрок.Колонки.Добавить("ТипНоменклатуры"                      , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	ТаблицаСтрок.Колонки.Добавить("Содержание"                           , Новый ОписаниеТипов("Строка"));
	ТаблицаСтрок.Колонки.Добавить("Количество"                           , ОписаниеТиповЧисло15_3);
	ТаблицаСтрок.Колонки.Добавить("Цена"                                 , ОписаниеТиповЧисло15_2);
	ТаблицаСтрок.Колонки.Добавить("СуммаРасходов"                        , ОписаниеТиповЧисло15_2);
	ТаблицаСтрок.Колонки.Добавить("ДатаОтражения"                        , Новый ОписаниеТипов("Дата"));
	ТаблицаСтрок.Колонки.Добавить("СуммаДоходов"                         , ОписаниеТиповЧисло15_2);
	ТаблицаСтрок.Колонки.Добавить("Сумма"                                , ОписаниеТиповЧисло15_2);
	ТаблицаСтрок.Колонки.Добавить("СуммаБезНДС"                          , ОписаниеТиповЧисло15_2);
	ТаблицаСтрок.Колонки.Добавить("СуммаРегл"                            , ОписаниеТиповЧисло15_2);
	ТаблицаСтрок.Колонки.Добавить("СуммаПР"                              , ОписаниеТиповЧисло15_2);
	ТаблицаСтрок.Колонки.Добавить("СуммаВР"                              , ОписаниеТиповЧисло15_2);
	ТаблицаСтрок.Колонки.Добавить("ДокументРеализации"                   , Документы.ТипВсеСсылки());
	ТаблицаСтрок.Колонки.Добавить("Себестоимость"                        , ОписаниеТиповЧисло15_2);
	ТаблицаСтрок.Колонки.Добавить("СебестоимостьБезНДС"                  , ОписаниеТиповЧисло15_2);
	ТаблицаСтрок.Колонки.Добавить("СебестоимостьРегл"                    , ОписаниеТиповЧисло15_2);
	ТаблицаСтрок.Колонки.Добавить("СебестоимостьПР"                      , ОписаниеТиповЧисло15_2);
	ТаблицаСтрок.Колонки.Добавить("СебестоимостьВР"                      , ОписаниеТиповЧисло15_2);
	ТаблицаСтрок.Колонки.Добавить("ДатаЗаполненияСебестоимостиПоВидуЦены", Новый ОписаниеТипов("Дата"));
	ТаблицаСтрок.Колонки.Добавить("Склад"                                , Новый ОписаниеТипов("СправочникСсылка.Склады"));
	
	Возврат ТаблицаСтрок;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СкопироватьТаблицуВБуферОбмена(Таблица, Источник = Неопределено)
	ТекущийБуферОбмена = ПараметрыСеанса.БуферОбмена;
	
	Если ЗначениеЗаполнено(ТекущийБуферОбмена.Данные) Тогда
		Адрес = ТекущийБуферОбмена.Данные;
	Иначе
		Адрес = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ДанныеВХранилище = ПоместитьВоВременноеХранилище(Таблица, Адрес);
	
	СтруктураБуфераОбмена = Новый Структура;
	СтруктураБуфераОбмена.Вставить("Источник", Источник);
	СтруктураБуфераОбмена.Вставить("Данные", ДанныеВХранилище);
	
	ПараметрыСеанса.БуферОбмена = Новый ФиксированнаяСтруктура(СтруктураБуфераОбмена);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтрокиИзБуфераОбменаНаСервере()
	
	ДанныеИзБуфераОбмена = СтрокиИзБуфераОбмена();
	Если ДанныеИзБуфераОбмена.Источник = "Строки" Тогда
		СтрокиДляВставки = ДанныеИзБуфераОбмена.Данные;
	Иначе
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Возврат СтрокиДляВставки;
КонецФункции 

&НаСервереБезКонтекста
Функция СтрокиИзБуфераОбмена()
	
	Результат = Новый Структура;
	Результат.Вставить("Источник", Неопределено);
	Результат.Вставить("Данные", Неопределено);
	
	Если ПустойБуферОбмена() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекущийБуферОбмена = ПараметрыСеанса.БуферОбмена;
	Результат.Источник = ТекущийБуферОбмена.Источник;
	Результат.Данные = ПолучитьИзВременногоХранилища(ТекущийБуферОбмена.Данные);
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ПустойБуферОбмена(Источник = Неопределено)
	
	ТекущийБуферОбмена = ПараметрыСеанса.БуферОбмена;
	ИсточникСовпадает = Истина;
	Если Источник <> Неопределено Тогда
		ИсточникСовпадает = (Источник = ТекущийБуферОбмена.Источник);
	КонецЕсли;
	Возврат (Не ИсточникСовпадает Или Не ЗначениеЗаполнено(ТекущийБуферОбмена.Данные));
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти, Неотрицательный = Ложь)
	
	Если Неотрицательный Тогда
		Знак = ДопустимыйЗнак.Неотрицательный;
	Иначе
		Знак = ДопустимыйЗнак.Любой;
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, Знак));

КонецФункции

&НаКлиенте
Функция ВозможноКопированиеСтрок(ТекущаяСтрока)
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Для выполнения команды требуется выбрать строку табличной части.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьПользователяОКопированииСтрок(КоличествоВыделенных)
	
	ТекстСообщения = НСтр("ru='В буфер обмена скопировано строк (%КоличествоВыделенных%)'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВыделенных%", КоличествоВыделенных);
	
	ТекстЗаголовка = НСтр("ru='Строки скопированы'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	Оповестить("КопированиеСтрокВБуферОбмена");
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОВставкеСтрок(КоличествоВставленных)
	
	ТекстСообщения = НСтр("ru='Из буфера обмена вставлено строк (%КоличествоВставленных%)'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВставленных%", КоличествоВставленных);
	
	ТекстЗаголовка = НСтр("ru='Строки вставлены'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПутьКТабличнойЧасти(Знач ИмяТабличнойЧасти, Знач НомерСтроки, 
	Знач ИмяРеквизита)

	Возврат ИмяТабличнойЧасти + "[" + Формат(НомерСтроки - 1, "ЧН=0; ЧГ=0") + "]." + ИмяРеквизита;

КонецФункции

&НаСервереБезКонтекста
Функция СоздатьНоменклатуруНаСервере(Поставщик, ДанныеЗагрузки)
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("ДанныеЗагрузки", ДанныеЗагрузки);
	ПараметрыЗагрузки.Вставить("ИдентификаторыПоставщиков", Новый Соответствие);
	
	Возврат ОбменДаннымиСКонтрагентами.ЗагрузитьСправочникТоваров(Поставщик, ПараметрыЗагрузки);
	
КонецФункции

#КонецОбласти

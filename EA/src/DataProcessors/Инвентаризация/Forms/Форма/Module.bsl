
&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Объект.Товары.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ОстаткиТовараОстатки.Товар, Инвентаризация_Сканирование.Товар) КАК Товар,
	|	МАКСИМУМ(ЕСТЬNULL(ОстаткиТовараОстатки.ОстатокОстаток, 0)) КАК ПоБазе,
	|	СУММА(ЕСТЬNULL(Инвентаризация_Сканирование.Количество, 0)) КАК Факт,
	|	ВЫБОР
	|		КОГДА НЕ Инвентаризация_Сканирование.Товар ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Сортировка,
	|	ЕСТЬNULL(ОстаткиТовараОстатки.Товар.Наименование, Инвентаризация_Сканирование.Товар.Наименование) КАК СортировкаНоменклатура
	|ИЗ
	|	РегистрНакопления.ОстаткиТовара.Остатки(, Отдел = &Склад) КАК ОстаткиТовараОстатки
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.Инвентаризация_Сканирование КАК Инвентаризация_Сканирование
	|		ПО ОстаткиТовараОстатки.Товар = Инвентаризация_Сканирование.Товар
	|ГДЕ
	|	(Инвентаризация_Сканирование.Склад = &Склад
	|			ИЛИ Инвентаризация_Сканирование.Товар ЕСТЬ NULL )
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ОстаткиТовараОстатки.Товар, Инвентаризация_Сканирование.Товар),
	|	ВЫБОР
	|		КОГДА НЕ Инвентаризация_Сканирование.Товар ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЕСТЬNULL(ОстаткиТовараОстатки.Товар.Наименование, Инвентаризация_Сканирование.Товар.Наименование)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сортировка УБЫВ,
	|	СортировкаНоменклатура";
	Запрос.УстановитьПараметр("Склад", Склад);
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Склад = ПараметрыСеанса.ОсновнойСклад;

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Если не ЕстьСканированиеПоИнвентаризации() тогда
		Ответ = Вопрос("Нет данных по фактическим остаткам!
		|Если продолжить то будут списанны все остатки с выбранного склада.
		|Продолжить?",РежимДиалогаВопрос.ДаНет,,,"ВНИМАНИЕ!");
		Если Ответ = КодВозвратаДиалога.Нет тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьНаСервере();  
	
КонецПроцедуры

&НаСервере
Функция ЕстьСканированиеПоИнвентаризации() 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Инвентаризация_Сканирование.Период
	|ИЗ
	|	РегистрСведений.Инвентаризация_Сканирование КАК Инвентаризация_Сканирование
	|ГДЕ
	|	Инвентаризация_Сканирование.Склад = &Склад";
	Запрос.УстановитьПараметр("Склад",Склад);
	Возврат не Запрос.Выполнить().Пустой()
КонецФункции

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> неопределено тогда
		Если не ТекущиеДанные.ДобавленноВручную	тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьИнвентаризациюНаСервере()
	
	НачатьТранзакцию();
	Попытка
		ДокументИнвентаризация = Документы.Инвентаризация.СоздатьДокумент();
		ДокументИнвентаризация.Дата = ТекущаяДата();
		ДокументИнвентаризация.Склад = Склад;
		
		ИнвентаризацияСканированиеВЛог(ДокументИнвентаризация);
		ДокументИнвентаризация.Итог.Загрузить(РеквизитФормыВЗначение("Объект.Товары").Выгрузить());
		
		Запрос = новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиТовараОстатки.Товар,
		|	ОстаткиТовараОстатки.Партия,
		|	ОстаткиТовараОстатки.ОстатокОстаток как Количество,
		|	ОстаткиТовараОстатки.Партия.ГоденДо КАК ПартияГоденДо
		|ИЗ
		|	РегистрНакопления.ОстаткиТовара.Остатки(
		|			,
		|			Товар В (&МассивНоменклатуры)
		|				И Отдел = &Отдел) КАК ОстаткиТовараОстатки
		|ГДЕ
		|	ОстаткиТовараОстатки.ОстатокОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПартияГоденДо";
		МассивНоменклатуры = новый Массив;
		Запрос.УстановитьПараметр("МассивНоменклатуры",Объект.Товары.Выгрузить(,"Товар").ВыгрузитьКолонку("Товар"));
		Запрос.УстановитьПараметр("Отдел",Склад);
		ОстаткиПартии = Запрос.Выполнить().Выгрузить();
		
		Для каждого строка из Объект.Товары цикл
			Если строка.Факт <> строка.ПоБазе и ЗначениеЗаполнено(строка.Товар) тогда
				ОстаткиПоТовару = ОстаткиПартии.НайтиСтроки(Новый Структура("Товар",строка.Товар));
				Разница = строка.ПоБазе - строка.Факт;
				Если Разница > 0 тогда
					Для каждого СтрОстатки из ОстаткиПоТовару цикл
						СписываемоеКоличество = Мин(Разница,СтрОстатки.Количество);
						СтрТовары = ДокументИнвентаризация.СписаниеПоПартиям.Добавить();	
						СтрТовары.Товар = строка.Товар;
						СтрТовары.Партия = СтрОстатки.Партия;
						СтрТовары.Количество = СписываемоеКоличество;					
						Разница = Разница - СписываемоеКоличество;
						СтрОстатки = стрОстатки.Количество - СписываемоеКоличество;
						Если Разница = 0 тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Разница <> 0 тогда
						СтрТовары = ДокументИнвентаризация.СписаниеПоПартиям.Добавить();	
						СтрТовары.Товар = строка.Товар;
						СтрТовары.Количество = Разница;			
					КонецЕсли;
				ИначеЕсли Разница < 0 тогда
					СтрТовары = ДокументИнвентаризация.ПриходПоТоварам.Добавить();	
					СтрТовары.Товар = строка.Товар;
					СтрТовары.Количество = -Разница;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТЗПриход = ДокументИнвентаризация.ПриходПоТоварам.Выгрузить(,"Товар");
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТЗПриход.Товар КАК Справочник.Номенклатура) КАК Товар
		|ПОМЕСТИТЬ втТовары
		|ИЗ
		|	&ТЗПриход КАК ТЗПриход
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТовары.Товар,
		|	ЕСТЬNULL(Партии.Документ.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДок,
		|	Партии.ГоденДо,
		|	Партии.ЗакупочнаяЦена,
		|	Партии.ЦенаПроизводителя,
		|	Партии.РеестроваяЦена,
		|	Партии.СтавкаНДС
		|ПОМЕСТИТЬ втПартии
		|ИЗ
		|	втТовары КАК втТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партии КАК Партии
		|		ПО втТовары.Товар = Партии.Владелец
		|ГДЕ
		|	Партии.ЗакупочнаяЦена <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПартии.Товар,
		|	МАКСИМУМ(втПартии.ДатаДок) КАК ДатаДок
		|ПОМЕСТИТЬ втДатаПоследнегоДокумента
		|ИЗ
		|	втПартии КАК втПартии
		|
		|СГРУППИРОВАТЬ ПО
		|	втПартии.Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПартии.Товар,
		|	втПартии.ДатаДок,
		|	МАКСИМУМ(втПартии.ГоденДо) КАК ГоденДо
		|ПОМЕСТИТЬ втПоследнееПоступление
		|ИЗ
		|	втПартии КАК втПартии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДатаПоследнегоДокумента КАК втДатаПоследнегоДокумента
		|		ПО втПартии.Товар = втДатаПоследнегоДокумента.Товар
		|			И втПартии.ДатаДок = втДатаПоследнегоДокумента.ДатаДок
		|
		|СГРУППИРОВАТЬ ПО
		|	втПартии.Товар,
		|	втПартии.ДатаДок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПартии.Товар,
		|	втПартии.ДатаДок,
		|	втПартии.ГоденДо,
		|	МАКСИМУМ(втПартии.ЗакупочнаяЦена) КАК ЗакупочнаяЦена
		|ПОМЕСТИТЬ втПоследнееПоступлениеСЦеной
		|ИЗ
		|	втПартии КАК втПартии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоследнееПоступление КАК втПоследнееПоступление
		|		ПО втПартии.Товар = втПоследнееПоступление.Товар
		|			И втПартии.ДатаДок = втПоследнееПоступление.ДатаДок
		|			И втПартии.ГоденДо = втПоследнееПоступление.ГоденДо
		|
		|СГРУППИРОВАТЬ ПО
		|	втПартии.Товар,
		|	втПартии.ДатаДок,
		|	втПартии.ГоденДо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПартии.Товар,
		|	втПартии.ЗакупочнаяЦена КАК Цена,
		|	втПартии.ЦенаПроизводителя,
		|	втПартии.РеестроваяЦена,
		|	ЕСТЬNULL(СтавкиНДСПоНоменклатуреСрезПоследних.СтавкаНДС, втПартии.СтавкаНДС) КАК СтавкаНДС
		|ИЗ
		|	втПартии КАК втПартии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоследнееПоступлениеСЦеной КАК втПоследнееПоступлениеСЦеной
		|		ПО втПартии.Товар = втПоследнееПоступлениеСЦеной.Товар
		|			И втПартии.ДатаДок = втПоследнееПоступлениеСЦеной.ДатаДок
		|			И втПартии.ГоденДо = втПоследнееПоступлениеСЦеной.ГоденДо
		|			И втПартии.ЗакупочнаяЦена = втПоследнееПоступлениеСЦеной.ЗакупочнаяЦена
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСПоНоменклатуре.СрезПоследних КАК СтавкиНДСПоНоменклатуреСрезПоследних
		|		ПО втПартии.Товар = СтавкиНДСПоНоменклатуреСрезПоследних.Товар";
		Запрос.УстановитьПараметр("ТЗПриход",ТЗПриход);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() цикл
			МассивСтрок = ДокументИнвентаризация.ПриходПоТоварам.НайтиСтроки(Новый Структура("Товар",Выборка.Товар));		
			Для каждого строка из МассивСтрок цикл
				ЗаполнитьЗначенияСвойств(Строка,Выборка,"Цена,ЦенаПроизводителя,РеестроваяЦена,СтавкаНДС");
			КонецЦикла;
		КонецЦикла;
		
		ДокументИнвентаризация.Записать(РежимЗаписиДокумента.Проведение);
		
		ДокументИнвентаризация.СоздатьПеремещение();
		
		ДокументИнвентаризация.СоздатьПриход();
		
		Объект.Товары.Очистить();
	
		Инвентаризация = ДокументИнвентаризация.Ссылка;
	
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Процедура ИнвентаризацияСканированиеВЛог(ДокументИнвентаризация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Инвентаризация_Сканирование.Период,
	|	Инвентаризация_Сканирование.Сотрудник,
	|	Инвентаризация_Сканирование.Склад,
	|	Инвентаризация_Сканирование.Товар,
	|	Инвентаризация_Сканирование.Количество
	|ИЗ
	|	РегистрСведений.Инвентаризация_Сканирование КАК Инвентаризация_Сканирование
	|ГДЕ
	|	Инвентаризация_Сканирование.Склад = &Склад";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	
	ТаблицаСканирование = Запрос.Выполнить().Выгрузить();
	
	ДокументИнвентаризация.Лог_Инвентаризация_Сканирование.Загрузить(ТаблицаСканирование);
	
	Для каждого строка из ТаблицаСканирование цикл		
		
		Менеджер = РегистрыСведений.Инвентаризация_Сканирование.СоздатьМенеджерЗаписи();	
		ЗаполнитьЗначенияСвойств(Менеджер,строка);
		Менеджер.Удалить();
		
	КонецЦикла;


	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИнвентаризацию(Команда)
	
	Если Вопрос("Зафиксировать результат инвентаризации и создать документы?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
		СоздатьИнвентаризациюНаСервере();
		Если ЗначениеЗаполнено(Инвентаризация) тогда
			ОткрытьФорму("Документ.Инвентаризация.Форма.ФормаДокумента", Новый Структура("Ключ",Инвентаризация),ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> неопределено тогда
		Если не ТекущиеДанные.ДобавленноВручную и Элемент.ТекущийЭлемент <> Элементы.ТоварыПросканированно тогда
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> неопределено и НоваяСтрока тогда
		ТекущиеДанные.ДобавленноВручную = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если Источник = "BarCodeScaner" тогда
		Если Событие = "BarCodeValue" тогда
			Scan.ПосылкаДанных = 1;   
			Если ЭтаФорма.ВводДоступен() тогда
				Ответ = ВнешнееСобытиеНаСервере("%"+Строка(Данные)+"%");	
				Если ТипЗнч(Ответ) = Тип("Строка") тогда
					ПоказатьПредупреждение(,Ответ);
				Иначе
					МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Товар",Ответ));	
					Если МассивСтрок.Количество() > 0 тогда
						Элементы.Товары.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();	
					Иначе
						Если Вопрос(Строка(Ответ)+" не найден в табличной части.
							|Добавить строку для товара?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
							Элементы.Товары.ДобавитьСтроку();
							Элементы.Товары.ТекущиеДанные.Товар = Ответ;
							Элементы.Товары.ТекущиеДанные.ДобавленноВручную = Истина;
							Элементы.Товары.ИзменитьСтроку();	
							Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыПросканированно;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Функция ВнешнееСобытиеНаСервере(ШК)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаводскиеШК.Владелец как Товар
	|ИЗ
	|	Справочник.ЗаводскиеШК КАК ЗаводскиеШК
	|ГДЕ
	|	ЗаводскиеШК.Наименование ПОДОБНО &ШК";
	Запрос.УстановитьПараметр("ШК",ШК);
	
	Результат = Запрос.Выполнить();
	
	Элементы.Товары.ОтборСтрок = Неопределено;
	
	Если не Результат.Пустой() тогда		
		Выборка = Результат.Выбрать();	
		Пока Выборка.Следующий() цикл
			Возврат Выборка.Товар;
		КонецЦикла;	
	Иначе		
		Возврат "Товар не найден!";		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ТоварыТоварНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокНоменклатуры = Новый СписокЗначений;
	Для каждого строка из Объект.Товары цикл
		СписокНоменклатуры.Добавить(строка.Товар);	
	КонецЦикла;
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораСОграничениемПоСпискуНоменклатуры", Новый Структура("СписокНоменклатуры",СписокНоменклатуры),Элемент,Истина,,,);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование тогда
		Отказ = Истина;
	КонецЕсли;
	Элементы.ТоварыТовар.ТолькоПросмотр = Ложь;

		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> неопределено тогда
		Если ТекущиеДанные.ДобавленноВручную или не ЗначениеЗаполнено(ТекущиеДанные.Товар) тогда
			Элементы.ТоварыТовар.ТолькоПросмотр = Ложь;
		ИначеЕсли не ТекущиеДанные.ДобавленноВручную тогда
			Элементы.ТоварыТовар.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТоварыТоварОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> неопределено тогда
		МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Товар",ВыбранноеЗначение));	
		Если МассивСтрок.Количество() > 0 тогда
			Если Не ЗначениеЗаполнено(ТекущиеДанные.Товар) тогда
				Объект.Товары.Удалить(ТекущиеДанные);
				Элементы.Товары.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
			Иначе
				Если Вопрос("Выбранный товар уже есть в табличной части.
					|Удалить текущую строку и перейти к строке с товаром?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
					Объект.Товары.Удалить(ТекущиеДанные);
					Элементы.Товары.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
					Элементы.Товары.ИзменитьСтроку();
				Иначе
					ВыбранноеЗначение = ТекущиеДанные.Товар;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;                              
КонецПроцедуры






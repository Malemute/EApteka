&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗакупкуТоваров") Тогда
		Сообщить("В настройках программы отключена возможность ведения закупки товаров");
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	фГлубинаДнейПродаж = 60;
	фСтраховойЗапас = 10;
	фТоварныйЗапасДней = 20;
	фТипПоставки = Справочники.ДоговорыТипДоговора.ПоставкаДень;

	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);

КонецПроцедуры
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	ПередЗакрытиемНаСервере();
	
КонецПроцедуры
&НаСервере
Процедура ПередЗакрытиемНаСервере()

	НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сотрудник.Установить(ПараметрыСеанса.ТекущийПользователь);
	НаборЗаписей.Отбор.Поставщик.Установить(Справочники.Контрагенты.ПустаяСсылка());
	НаборЗаписей.Записать();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", ПараметрыСеанса.ТекущийПользователь);

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТемпАвтозаказ.ID
		|ИЗ
		|	РегистрСведений.ТемпАвтозаказ КАК ТемпАвтозаказ
		|ГДЕ
		|	ТемпАвтозаказ.Сотрудник = &Сотрудник
		|	И ТемпАвтозаказ.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";

	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл

		НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ID.Установить(РезультатЗапроса.ID);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей[0].Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		НаборЗаписей.Записать();
		НаборЗаписей = "";

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеСклада()

	Если Объект.табСклады.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "НЕ выбран склад работы";
		Сообщение.Поле = "Объект.табСклады";
		Сообщение.Сообщить(); 
		Возврат Ложь;
	КонецЕсли; 

	Возврат Истина;
	
КонецФункции


&НаКлиенте
Процедура СвернутьРазвернутьГруппу(Элемент)

	ИмяСвертываемойГруппы = Элемент.Имя;

	ИмяСвертываемойГруппы = СтрЗаменить(ИмяСвертываемойГруппы, "ДекорацияОткрыть", "");
	ИмяСвертываемойГруппы = СтрЗаменить(ИмяСвертываемойГруппы, "ДекорацияЗакрыть", "");

	ИзменитьСостояниеСвернутостиГруппы(ИмяСвертываемойГруппы);
	ПодключитьОбработчикОжидания("УстановитьАктивностьСворачиваемойГруппы", 0.0001, Истина);
	
КонецПроцедуры
&НаСервере
Процедура ИзменитьСостояниеСвернутостиГруппы(ИмяГруппы)
	
	Элементы["Группа" + ИмяГруппы].Видимость = ?(Элементы["Группа" + ИмяГруппы].Видимость, Ложь, Истина);
	Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость = ?(Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость, Ложь,
		Истина);
	Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость = ?(Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость, Ложь,
		Истина);
	
КонецПроцедуры
&НаКлиенте
Процедура УстановитьАктивностьСворачиваемойГруппы()
	
	Если Элементы["ДекорацияОткрыть" + ИмяСвертываемойГруппы].Видимость Тогда
		ТекущийЭлемент = Элементы["ДекорацияОткрыть" + ИмяСвертываемойГруппы];
	Иначе
		ТекущийЭлемент = Элементы["ДекорацияЗакрыть" + ИмяСвертываемойГруппы];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура фТабДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
//	Отказ = Истина;
КонецПроцедуры
 
&НаСервереБезКонтекста
Функция ИзменитьСостояниеДокумента(обДокумент, Действие = 0)
	
	Если Действие = 0 Тогда		// Записать
	
		Попытка
			обДокумент.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			СС = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;

	ИначеЕсли Действие = 1 Тогда	// Провести
	
		Попытка
			обДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			СС = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;
		
	ИначеЕсли Действие = -1 Тогда	// Снять с удаления

		Попытка
			обДокумент.УстановитьПометкуУдаления(Ложь);
		Исключение
			Ссс = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;

	ИначеЕсли Действие = -2 Тогда	// Удалить

		Попытка
			обДокумент.УстановитьПометкуУдаления(Истина);
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	ИначеЕсли Действие = -3 Тогда	// Отменить проведение

		Попытка
			обДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			Возврат Ложь;
		КонецПопытки;

	КонецЕсли;
	

	Возврат Истина;

КонецФункции //

&НаКлиенте
Процедура АннулироватьДефектуру(Команда)

	Если НЕ ПроверитьЗаполнениеСклада() Тогда
		Возврат;
	КонецЕсли;

	АннулироватьДефектуруНаСервере();
	ПоказатьПредупреждение(, "Дефектура аннулирована", 15);

КонецПроцедуры
&НаСервере
Процедура АннулироватьДефектуруНаСервере()
	
	Для каждого СтрокаСклад Из Объект.табСклады Цикл
		
		т_Документ = Документы.ЗаявкаНаДефектуру.СоздатьДокумент();
		т_Документ.Дата = ТекущаяДата();
		т_Документ.УстановитьНовыйНомер();
		т_Документ.ТипЗаявки = Перечисления.ТипыЗаявокНаДефектуру.АннулированиеПотребности;
		т_Документ.Склад = СтрокаСклад.Склад;
		т_Документ.ЗаполнитьНаСервере();
		
		Если т_Документ.Товары.Количество() > 0 Тогда
			
			ИзменитьСостояниеДокумента(т_Документ, 0);
			ИзменитьСостояниеДокумента(т_Документ, 1);

		КонецЕсли; 

	КонецЦикла; 

КонецПроцедуры



&НаКлиенте
Процедура УдалитьАвтораспределение(Команда)

	Если НЕ ПроверитьЗаполнениеСклада() Тогда
		Возврат;
	КонецЕсли; 

	Если Вопрос("Вы действительно хотите очистить автораспределение по выбранным складам?", РежимДиалогаВопрос.ДаНет, 20) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 

	УдалитьАвтораспределениеНаСервере();
	ПоказатьПредупреждение(, "Автораспределение удалено", 15);

КонецПроцедуры
&НаСервере
Процедура УдалитьАвтораспределениеНаСервере(Флаг = 0)

	Для каждого текСклад Из Объект.табСклады Цикл
	
		НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Склад.Установить(текСклад.Склад);
		НаборЗаписей.Отбор.Сотрудник.Установить(Справочники.Сотрудники.ПустаяСсылка());
		НаборЗаписей.Записать();
		НаборЗаписей = "";

		НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Склад.Установить(текСклад.Склад);
		НаборЗаписей.Отбор.Сотрудник.Установить(ПараметрыСеанса.ТекущийПользователь);
		НаборЗаписей.Записать();
		НаборЗаписей = "";

	КонецЦикла;

	фТабДанных.Очистить();

КонецПроцедуры


&НаКлиенте
Процедура РассчитатьДефектуру(Команда)
	
	Если НЕ ПроверитьЗаполнениеСклада() Тогда
		Возврат;
	КонецЕсли;

	РассчитатьДефектуруНаСервере();
	ПоказатьПредупреждение(, "Рассчет дефектуры окончен", 15);

КонецПроцедуры
&НаСервере
Процедура delРассчитатьДефектуруНаСервере()
	
	КонецПериода = КонецДня(ТекущаяДата());
	НачалоПериода = НачалоДня(КонецПериода - фГлубинаДнейПродаж*24*60*60);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КонПериод", КонецПериода);
	Запрос.УстановитьПараметр("НачПериод", НачалоПериода);
	Запрос.УстановитьПараметр("СтраховойЗапас", фСтраховойЗапас);
	Запрос.УстановитьПараметр("ТоварныйЗапасДней", фТоварныйЗапасДней);
	Запрос.УстановитьПараметр("Категория", ФильтрКатегории - 1);
	Запрос.УстановитьПараметр("Отдел", Объект.табСклады.Выгрузить().ВыгрузитьКолонку("Склад"));

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияОбороты.Период КАК Период,
		|	РеализацияОбороты.Товар КАК Товар,
		|	РеализацияОбороты.Отдел КАК Отдел,
		|	РеализацияОбороты.КоличествоОборот КАК Количество
		|ПОМЕСТИТЬ ВТ_ТоварыПоРеализацииПоДням
		|ИЗ
		|	РегистрНакопления.Реализация.Обороты(&НачПериод, &КонПериод, День, Отдел В (&Отдел)) КАК РеализацияОбороты
		|ГДЕ
		|	РеализацияОбороты.КоличествоОборот > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Товар,
		|	Период,
		|	Отдел
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыПоРеализацииПоДням.Товар КАК Товар,
		|	ТоварыПоРеализацииПоДням.Отдел КАК Отдел,
		|	СУММА(ТоварыПоРеализацииПоДням.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТ_ТоварыПоРеализации
		|ИЗ
		|	ВТ_ТоварыПоРеализацииПоДням КАК ТоварыПоРеализацииПоДням
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыПоРеализацииПоДням.Товар,
		|	ТоварыПоРеализацииПоДням.Отдел
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Товар,
		|	Отдел
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
		|ПОМЕСТИТЬ ВТ_Календарь
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачПериод И &КонПериод
		|ИНДЕКСИРОВАТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиТовараОстаткиИОбороты.Период КАК Дата,
		|	ОстаткиТовараОстаткиИОбороты.Отдел КАК Отдел,
		|	ОстаткиТовараОстаткиИОбороты.Товар КАК Товар,
		|	ОстаткиТовараОстаткиИОбороты.ОстатокКонечныйОстаток КАК Остаток
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	РегистрНакопления.ОстаткиТовара.ОстаткиИОбороты(
		|			&НачПериод,
		|			&КонПериод,
		|			День,
		|			ДвиженияИГраницыПериода,
		|			Отдел В (Отдел)) КАК ОстаткиТовараОстаткиИОбороты
		|ИНДЕКСИРОВАТЬ ПО
		|	Дата,
		|	Отдел,
		|	Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Q.Дата1 КАК Дата1,
		|	Q.Дата2 КАК Дата2,
		|	Q.Отдел КАК Отдел,
		|	Q.Товар КАК Товар,
		|	ВТ_Остатки.Остаток КАК Остаток
		|ПОМЕСТИТЬ ВТ_ОстаткиВПериоде
		|ИЗ
		|	ВТ_Остатки КАК ВТ_Остатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(Т1.Дата) КАК Дата1,
		|			Т2.Дата КАК Дата2,
		|			Т1.Отдел КАК Отдел,
		|			Т1.Товар КАК Товар
		|		ИЗ
		|			ВТ_Остатки КАК Т1
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК Т2
		|				ПО Т1.Отдел = Т2.Отдел
		|					И Т1.Товар = Т2.Товар
		|					И Т1.Дата < Т2.Дата
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Т1.Отдел,
		|			Т1.Товар,
		|			Т2.Дата) КАК Q
		|		ПО ВТ_Остатки.Дата = Q.Дата1
		|			И ВТ_Остатки.Отдел = Q.Отдел
		|			И ВТ_Остатки.Товар = Q.Товар
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Дата1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиВПериоде.Дата1 КАК Период,
		|	ВТ_ОстаткиВПериоде.Отдел КАК Отдел,
		|	ВТ_ОстаткиВПериоде.Товар КАК Товар,
		|	ВТ_ОстаткиВПериоде.Остаток КАК Остаток
		|ПОМЕСТИТЬ ВТ_ОстаткиПоДням
		|ИЗ
		|	ВТ_ОстаткиВПериоде КАК ВТ_ОстаткиВПериоде
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Календарь КАК ВТ_Календарь
		|		ПО ВТ_Календарь.Дата >= ВТ_ОстаткиВПериоде.Дата1 
		|		и ВТ_Календарь.Дата < ВТ_ОстаткиВПериоде.Дата2
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Отдел,
		|	Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Q.Отдел КАК Отдел,
		|	Q.Товар КАК Товар,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Q.Период) КАК cnt_days
		|ПОМЕСТИТЬ ВТ_cd
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕСТЬNULL(ВТ_ТоварыПоРеализацииПоДням.Отдел, ВТ_ОстаткиПоДням.Отдел) КАК Отдел,
		|		ЕСТЬNULL(ВТ_ТоварыПоРеализацииПоДням.Товар, ВТ_ОстаткиПоДням.Товар) КАК Товар,
		|		ЕСТЬNULL(ВТ_ТоварыПоРеализацииПоДням.Период, ВТ_ОстаткиПоДням.Период) КАК Период
		|	ИЗ
		|		ВТ_ТоварыПоРеализацииПоДням КАК ВТ_ТоварыПоРеализацииПоДням
		|			ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ОстаткиПоДням КАК ВТ_ОстаткиПоДням
		|			ПО ВТ_ТоварыПоРеализацииПоДням.Период = ВТ_ОстаткиПоДням.Период
		|				И ВТ_ТоварыПоРеализацииПоДням.Товар = ВТ_ОстаткиПоДням.Товар
		|				И ВТ_ТоварыПоРеализацииПоДням.Отдел = ВТ_ОстаткиПоДням.Отдел) КАК Q
		|
		|СГРУППИРОВАТЬ ПО
		|	Q.Товар,
		|	Q.Отдел
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Отдел,
		|	Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТоварыПоРеализации.Отдел КАК Отдел,
		|	ВТ_ТоварыПоРеализации.Товар КАК Товар,
		|	ВТ_ТоварыПоРеализации.Количество КАК КоличествоЗаПериод,
		|	ВТ_ТоварыПоРеализации.Количество / ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_cd.cnt_days, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ВТ_cd.cnt_days
		|	КОНЕЦ КАК СкоростьПродаж
		|ПОМЕСТИТЬ ВТ_СкоростьПродажТовара
		|ИЗ
		|	ВТ_ТоварыПоРеализации КАК ВТ_ТоварыПоРеализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_cd КАК ВТ_cd
		|		ПО ВТ_ТоварыПоРеализации.Товар = ВТ_cd.Товар
		|			И ВТ_ТоварыПоРеализации.Отдел = ВТ_cd.Отдел
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Отдел,
		|	Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиТовараОстатки.Отдел,
		|	ОстаткиТовараОстатки.Товар,
		|	СУММА(ОстаткиТовараОстатки.ОстатокОстаток) КАК Количество
		|ПОМЕСТИТЬ ВТ_ОстаткиРеализуемогоТовара
		|ИЗ
		|	РегистрНакопления.ОстаткиТовара.Остатки(, Отдел В (&Отдел)) КАК ОстаткиТовараОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТовараОстатки.Отдел,
		|	ОстаткиТовараОстатки.Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДефектураОстатки.Склад КАК Склад,
		|	ДефектураОстатки.Товар КАК Товар,
		|	ВЫБОР
		|		КОГДА ДефектураОстатки.Заказ = ЗНАЧЕНИЕ(документ.Заказ.ПустаяСсылка)
		|				И ДефектураОстатки.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ДефектураОстатки.КоличествоОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОстатокВПути,
		|	ВЫБОР
		|		КОГДА ДефектураОстатки.Заказ = ЗНАЧЕНИЕ(документ.Заказ.ПустаяСсылка)
		|				И ДефектураОстатки.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ДефектураОстатки.КоличествоОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НеРеализованнаяДефектура
		|ПОМЕСТИТЬ ВТ_ОстаткиДефектуры
		|ИЗ
		|	РегистрНакопления.Дефектура.Остатки(, Склад В (&Отдел)) КАК ДефектураОстатки
		|ГДЕ
		|	ДефектураОстатки.КоличествоОстаток <> 0
		|	И ДефектураОстатки.Товар <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|	ДефектураОстатки.Склад,
		|	ДефектураОстатки.Товар,
		|	ВЫБОР
		|		КОГДА ДефектураОстатки.Заказ = ЗНАЧЕНИЕ(документ.Заказ.ПустаяСсылка)
		|				И ДефектураОстатки.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ДефектураОстатки.КоличествоОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ДефектураОстатки.Заказ = ЗНАЧЕНИЕ(документ.Заказ.ПустаяСсылка)
		|				И ДефектураОстатки.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ДефектураОстатки.КоличествоОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрайсЛистПрайсМестаХранения.Отдел КАК Отдел,
		|	ПрайсЛистПрайсМестаХранения.Ссылка.Товар КАК Товар,
		|	ВЫРАЗИТЬ(ВЫБОР
		|		КОГДА 
		|			ВЫРАЗИТЬ(ЕСТЬNULL(ВТ_СкоростьПродажТовара.СкоростьПродаж * &ТоварныйЗапасДней, 1) + 0.4999 КАК Число(12, 0))
		|			 > ВТ_СкоростьПродажТовара.КоличествоЗаПериод * 2
		|			ТОГДА ВТ_СкоростьПродажТовара.КоличествоЗаПериод * 2
		|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ВТ_СкоростьПродажТовара.СкоростьПродаж * &ТоварныйЗапасДней, 1) + 0.4999 КАК Число(12, 0))
		|	КОНЕЦ - (ЕСТЬNULL(ВТ_ОстаткиРеализуемогоТовара.Количество, 0) + ЕСТЬNULL(ВТ_ОстаткиДефектуры.ОстатокВПути, 0) + ЕСТЬNULL(ВТ_ОстаткиДефектуры.НеРеализованнаяДефектура, 0)) + 0.4999 КАК ЧИСЛО(12, 0)) КАК Потребность,
		|	ВТ_СкоростьПродажТовара.КоличествоЗаПериод
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	ВТ_ОстаткиРеализуемогоТовара КАК ВТ_ОстаткиРеализуемогоТовара
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрайсЛист.ПрайсМестаХранения КАК ПрайсЛистПрайсМестаХранения
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиДефектуры КАК ВТ_ОстаткиДефектуры
		|			ПО ПрайсЛистПрайсМестаХранения.Отдел = ВТ_ОстаткиДефектуры.Склад
		|				И ПрайсЛистПрайсМестаХранения.Ссылка.Товар = ВТ_ОстаткиДефектуры.Товар
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТоварыПоРеализации КАК ВТ_ТоварыПоРеализации
		|			ПО (ВТ_ТоварыПоРеализации.Отдел = ПрайсЛистПрайсМестаХранения.Отдел)
		|				И (ВТ_ТоварыПоРеализации.Товар = ПрайсЛистПрайсМестаХранения.Ссылка.Товар)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СкоростьПродажТовара КАК ВТ_СкоростьПродажТовара
		|			ПО (ВТ_СкоростьПродажТовара.Отдел = ПрайсЛистПрайсМестаХранения.Отдел)
		|				И (ВТ_СкоростьПродажТовара.Товар = ПрайсЛистПрайсМестаХранения.Ссылка.Товар)
		|		ПО ВТ_ОстаткиРеализуемогоТовара.Отдел = ПрайсЛистПрайсМестаХранения.Отдел
		|			И ВТ_ОстаткиРеализуемогоТовара.Товар = ПрайсЛистПрайсМестаХранения.Ссылка.Товар
		|ГДЕ
		|	ПрайсЛистПрайсМестаХранения.ДержимНаСкладе = Истина
		|	И ЕСТЬNULL(ВТ_ОстаткиРеализуемогоТовара.Количество, 0) + ЕСТЬNULL(ВТ_ОстаткиДефектуры.ОстатокВПути, 0) + ЕСТЬNULL(ВТ_ОстаткиДефектуры.НеРеализованнаяДефектура, 0) < ВЫРАЗИТЬ(ВТ_СкоростьПродажТовара.СкоростьПродаж * &СтраховойЗапас + 0.4999 КАК Число(12, 0))
		|	" + ?(ФильтрКатегории = 0, "", "И ПрайсЛистПрайсМестаХранения.Рейтинг = &Категория")+ "
		|И 
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА 
		|				ВЫРАЗИТЬ(ЕСТЬNULL(ВТ_СкоростьПродажТовара.СкоростьПродаж * &ТоварныйЗапасДней, 1) + 0.4999 КАК Число(12, 0))
		|				 > ВТ_СкоростьПродажТовара.КоличествоЗаПериод * 2
		|				ТОГДА ВТ_СкоростьПродажТовара.КоличествоЗаПериод * 2
		|			ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ВТ_СкоростьПродажТовара.СкоростьПродаж * &ТоварныйЗапасДней, 1) + 0.4999 КАК Число(12, 0))
		|		КОНЕЦ - (ЕСТЬNULL(ВТ_ОстаткиРеализуемогоТовара.Количество, 0) + ЕСТЬNULL(ВТ_ОстаткиДефектуры.ОстатокВПути, 0) + ЕСТЬNULL(ВТ_ОстаткиДефектуры.НеРеализованнаяДефектура, 0)) + 0.4999 КАК ЧИСЛО(12, 0)) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Данные.Отдел КАК Отдел
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|
		|УПОРЯДОЧИТЬ ПО
		|	Отдел";

	
	
	ТабОтделов = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаОтдел Из ТабОтделов Цикл

		т_Документ = Документы.ЗаявкаНаДефектуру.СоздатьДокумент();
		т_Документ.Дата = ТекущаяДата();
		т_Документ.УстановитьНовыйНомер();
		т_Документ.Склад = СтрокаОтдел.Отдел;
		т_Документ.ТипЗаявки = Перечисления.ТипыЗаявокНаДефектуру.ОформлениеПотребности;
		
		Запрос.УстановитьПараметр("Отдел", СтрокаОтдел.Отдел);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВТ_Данные.Товар КАК Товар,
		|	ВТ_Данные.Потребность КАК Количество
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|ГДЕ ВТ_Данные.Отдел = &Отдел
		|	И ВТ_Данные.Потребность > 0
		|	И ВТ_Данные.Товар <> Значение(Справочник.Номенклатура.ПустаяСсылка)
		|УПОРЯДОЧИТЬ ПО
		|	Товар";

		т_Документ.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
		Если т_Документ.Товары.Количество() > 0 Тогда
			Попытка
				т_Документ.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				сообщить("Ошибка записи документа для отдела - " + СокрЛП(СтрокаОтдел.Отдел.Наименование));
				Продолжить;
			КонецПопытки; 
			
			Попытка
				т_Документ.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			КонецПопытки; 

		КонецЕсли; 
	
	КонецЦикла; 
	

КонецПроцедуры
&НаСервере
Процедура РассчитатьДефектуруНаСервере()
	
	КонецПериода = НачалоДня(ТекущаяДата()) - 1;
	НачалоПериода = НачалоДня(КонецПериода - фГлубинаДнейПродаж*24*60*60);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КонПериод", КонецПериода);
	Запрос.УстановитьПараметр("НачПериод", НачалоПериода);
	Запрос.УстановитьПараметр("СтраховойЗапас", фСтраховойЗапас);
	Запрос.УстановитьПараметр("ТоварныйЗапасДней", фТоварныйЗапасДней);
	Запрос.УстановитьПараметр("Категория", ФильтрКатегории - 1);
	Запрос.УстановитьПараметр("Отдел", Объект.табСклады.Выгрузить().ВыгрузитьКолонку("Склад"));
	Запрос.УстановитьПараметр("ВыбСклады", Объект.табСклады.Выгрузить());

	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыбСклады.Склад КАК Склад
		|ПОМЕСТИТЬ ВТ_Склады
		|ИЗ
		|	&ВыбСклады КАК ВыбСклады
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияОбороты.ПериодДень КАК ПериодДень,
		|	РеализацияОбороты.Регистратор КАК Регистратор,
		|	РеализацияОбороты.Отдел КАК Отдел,
		|	РеализацияОбороты.Товар КАК Товар,
		|	РеализацияОбороты.КоличествоОборот КАК Количество,
		|	РеализацияОбороты.ДокументПродажи КАК ДокументПродажи
		|ПОМЕСТИТЬ ВТ_ДокументыПродажи
		|ИЗ
		|	РегистрНакопления.Реализация.Обороты(&НачПериод, &КонПериод, Авто, Отдел В (&Отдел)) КАК РеализацияОбороты
		|ГДЕ
		|	РеализацияОбороты.КоличествоОборот > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Q.ПериодДень КАК Период,
		|	Q.Отдел КАК Отдел,
		|	Q.Товар КАК Товар,
		|	СУММА(Q.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТ_ТоварыПоРеализацииПоДням
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_ДокументыПродажи.ПериодДень КАК ПериодДень,
		|		ВТ_ДокументыПродажи.Отдел КАК Отдел,
		|		ВТ_ДокументыПродажи.Товар КАК Товар,
		|		ВТ_ДокументыПродажи.Количество КАК Количество
		|	ИЗ
		|		ВТ_ДокументыПродажи КАК ВТ_ДокументыПродажи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заказ КАК Заказ
		|			ПО ВТ_ДокументыПродажи.ДокументПродажи = Заказ.Ссылка
		|	ГДЕ
		|		Заказ.Ссылка ЕСТЬ NULL
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ВТ_ДокументыПродажи.ПериодДень,
		|		Заказ.Отдел,
		|		ВТ_ДокументыПродажи.Товар,
		|		ВТ_ДокументыПродажи.Количество
		|	ИЗ
		|		ВТ_ДокументыПродажи КАК ВТ_ДокументыПродажи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заказ КАК Заказ
		|			ПО ВТ_ДокументыПродажи.ДокументПродажи = Заказ.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Склады КАК ВТ_Склады
		|			ПО Заказ.Отдел = ВТ_Склады.Склад
		|	) КАК Q
		|СГРУППИРОВАТЬ ПО
		|	Q.ПериодДень,
		|	Q.Отдел,
		|	Q.Товар
		|ИНДЕКСИРОВАТЬ ПО
		|	Товар,
		|	Период,
		|	Отдел
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыПоРеализацииПоДням.Товар КАК Товар,
		|	ТоварыПоРеализацииПоДням.Отдел КАК Отдел,
		|	СУММА(ТоварыПоРеализацииПоДням.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТ_ТоварыПоРеализации
		|ИЗ
		|	ВТ_ТоварыПоРеализацииПоДням КАК ТоварыПоРеализацииПоДням
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыПоРеализацииПоДням.Товар,
		|	ТоварыПоРеализацииПоДням.Отдел
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Товар,
		|	Отдел
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕжедневныйТоварныйОстаток.Дата КАК Период,
		|	ЕжедневныйТоварныйОстаток.Отдел,
		|	ЕжедневныйТоварныйОстаток.Товар,
		|	ЕжедневныйТоварныйОстаток.Остаток
		|ПОМЕСТИТЬ ВТ_ОстаткиПоДням
		|ИЗ
		|	РегистрСведений.ЕжедневныйТоварныйОстаток КАК ЕжедневныйТоварныйОстаток
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Склады КАК ВТ_Склады ПО ВТ_Склады.Склад = ЕжедневныйТоварныйОстаток.Отдел
		|ГДЕ
		|	ЕжедневныйТоварныйОстаток.Дата МЕЖДУ &НачПериод И &КонПериод
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Отдел,
		|	Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Q.Отдел КАК Отдел,
		|	Q.Товар КАК Товар,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Q.Период) КАК cnt_days
		|ПОМЕСТИТЬ ВТ_cd
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕСТЬNULL(ВТ_ТоварыПоРеализацииПоДням.Отдел, ВТ_ОстаткиПоДням.Отдел) КАК Отдел,
		|		ЕСТЬNULL(ВТ_ТоварыПоРеализацииПоДням.Товар, ВТ_ОстаткиПоДням.Товар) КАК Товар,
		|		ЕСТЬNULL(ВТ_ТоварыПоРеализацииПоДням.Период, ВТ_ОстаткиПоДням.Период) КАК Период
		|	ИЗ
		|		ВТ_ТоварыПоРеализацииПоДням КАК ВТ_ТоварыПоРеализацииПоДням
		|			ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ОстаткиПоДням КАК ВТ_ОстаткиПоДням
		|			ПО ВТ_ТоварыПоРеализацииПоДням.Период = ВТ_ОстаткиПоДням.Период
		|				И ВТ_ТоварыПоРеализацииПоДням.Товар = ВТ_ОстаткиПоДням.Товар
		|				И ВТ_ТоварыПоРеализацииПоДням.Отдел = ВТ_ОстаткиПоДням.Отдел) КАК Q
		|
		|СГРУППИРОВАТЬ ПО
		|	Q.Товар,
		|	Q.Отдел
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Отдел,
		|	Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТоварыПоРеализации.Отдел КАК Отдел,
		|	ВТ_ТоварыПоРеализации.Товар КАК Товар,
		|	ВТ_ТоварыПоРеализации.Количество КАК КоличествоЗаПериод,
		|	ВТ_ТоварыПоРеализации.Количество / ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_cd.cnt_days, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ВТ_cd.cnt_days
		|	КОНЕЦ КАК СкоростьПродаж
		|ПОМЕСТИТЬ ВТ_СкоростьПродажТовара
		|ИЗ
		|	ВТ_ТоварыПоРеализации КАК ВТ_ТоварыПоРеализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_cd КАК ВТ_cd
		|		ПО ВТ_ТоварыПоРеализации.Товар = ВТ_cd.Товар
		|			И ВТ_ТоварыПоРеализации.Отдел = ВТ_cd.Отдел
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Отдел,
		|	Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиТовараОстатки.Отдел,
		|	ОстаткиТовараОстатки.Товар,
		|	СУММА(ОстаткиТовараОстатки.ОстатокОстаток) КАК Количество
		|ПОМЕСТИТЬ ВТ_ОстаткиРеализуемогоТовара
		|ИЗ
		|	РегистрНакопления.ОстаткиТовара.Остатки(, Отдел В (&Отдел)) КАК ОстаткиТовараОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТовараОстатки.Отдел,
		|	ОстаткиТовараОстатки.Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДефектураОстатки.Склад КАК Склад,
		|	ДефектураОстатки.Товар КАК Товар,
		|	ВЫБОР
		|		КОГДА ДефектураОстатки.Заказ = ЗНАЧЕНИЕ(документ.Заказ.ПустаяСсылка)
		|				И ДефектураОстатки.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ДефектураОстатки.КоличествоОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОстатокВПути,
		|	ВЫБОР
		|		КОГДА ДефектураОстатки.Заказ = ЗНАЧЕНИЕ(документ.Заказ.ПустаяСсылка)
		|				И ДефектураОстатки.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ДефектураОстатки.КоличествоОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НеРеализованнаяДефектура
		|ПОМЕСТИТЬ ВТ_ОстаткиДефектуры
		|ИЗ
		|	РегистрНакопления.Дефектура.Остатки(, Склад В (&Отдел)) КАК ДефектураОстатки
		|ГДЕ
		|	ДефектураОстатки.КоличествоОстаток <> 0
		|	И ДефектураОстатки.Товар <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|	ДефектураОстатки.Склад,
		|	ДефектураОстатки.Товар,
		|	ВЫБОР
		|		КОГДА ДефектураОстатки.Заказ = ЗНАЧЕНИЕ(документ.Заказ.ПустаяСсылка)
		|				И ДефектураОстатки.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ДефектураОстатки.КоличествоОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ДефектураОстатки.Заказ = ЗНАЧЕНИЕ(документ.Заказ.ПустаяСсылка)
		|				И ДефектураОстатки.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ДефектураОстатки.КоличествоОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрайсЛистПрайсМестаХранения.Отдел КАК Отдел,
		|	ПрайсЛистПрайсМестаХранения.Ссылка.Товар КАК Товар,
		|	ВЫРАЗИТЬ(ВЫБОР
		|		КОГДА 
		|			ВЫРАЗИТЬ(ЕСТЬNULL(ВТ_СкоростьПродажТовара.СкоростьПродаж * &ТоварныйЗапасДней, 1) + 0.4999 КАК Число(12, 0))
		|			 > ВТ_СкоростьПродажТовара.КоличествоЗаПериод * 2
		|			ТОГДА ВТ_СкоростьПродажТовара.КоличествоЗаПериод * 2
		|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ВТ_СкоростьПродажТовара.СкоростьПродаж * &ТоварныйЗапасДней, 1) + 0.4999 КАК Число(12, 0))
		|	КОНЕЦ - (ЕСТЬNULL(ВТ_ОстаткиРеализуемогоТовара.Количество, 0) + ЕСТЬNULL(ВТ_ОстаткиДефектуры.ОстатокВПути, 0) + ЕСТЬNULL(ВТ_ОстаткиДефектуры.НеРеализованнаяДефектура, 0)) + 0.4999 КАК ЧИСЛО(12, 0)) КАК Потребность,
		|	ВТ_СкоростьПродажТовара.КоличествоЗаПериод
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	Справочник.ПрайсЛист.ПрайсМестаХранения КАК ПрайсЛистПрайсМестаХранения
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Склады КАК ВТ_Склады ПО ВТ_Склады.Склад = ПрайсЛистПрайсМестаХранения.Отдел
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиРеализуемогоТовара КАК ВТ_ОстаткиРеализуемогоТовара
		|		ПО ВТ_ОстаткиРеализуемогоТовара.Отдел = ПрайсЛистПрайсМестаХранения.Отдел
		|			И ВТ_ОстаткиРеализуемогоТовара.Товар = ПрайсЛистПрайсМестаХранения.Ссылка.Товар
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиДефектуры КАК ВТ_ОстаткиДефектуры
		|		ПО ПрайсЛистПрайсМестаХранения.Отдел = ВТ_ОстаткиДефектуры.Склад
		|			И ПрайсЛистПрайсМестаХранения.Ссылка.Товар = ВТ_ОстаткиДефектуры.Товар
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТоварыПоРеализации КАК ВТ_ТоварыПоРеализации
		|		ПО (ВТ_ТоварыПоРеализации.Отдел = ПрайсЛистПрайсМестаХранения.Отдел)
		|			И (ВТ_ТоварыПоРеализации.Товар = ПрайсЛистПрайсМестаХранения.Ссылка.Товар)
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СкоростьПродажТовара КАК ВТ_СкоростьПродажТовара
		|		ПО (ВТ_СкоростьПродажТовара.Отдел = ПрайсЛистПрайсМестаХранения.Отдел)
		|			И (ВТ_СкоростьПродажТовара.Товар = ПрайсЛистПрайсМестаХранения.Ссылка.Товар)
		|ГДЕ
		|	ПрайсЛистПрайсМестаХранения.ДержимНаСкладе = Истина
		|	И ЕСТЬNULL(ВТ_ОстаткиРеализуемогоТовара.Количество, 0) + ЕСТЬNULL(ВТ_ОстаткиДефектуры.ОстатокВПути, 0) + ЕСТЬNULL(ВТ_ОстаткиДефектуры.НеРеализованнаяДефектура, 0) < (ВЫРАЗИТЬ(isNull(ВТ_СкоростьПродажТовара.СкоростьПродаж * &СтраховойЗапас, 1) + 0.4999 КАК ЧИСЛО(12, 0)))
		|	И ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА 
		|				ВЫРАЗИТЬ(ЕСТЬNULL(ВТ_СкоростьПродажТовара.СкоростьПродаж * &ТоварныйЗапасДней, 1) + 0.4999 КАК Число(12, 0)) > ВТ_СкоростьПродажТовара.КоличествоЗаПериод * 2
		|				ТОГДА ВТ_СкоростьПродажТовара.КоличествоЗаПериод * 2
		|			ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ВТ_СкоростьПродажТовара.СкоростьПродаж * &ТоварныйЗапасДней, 1) + 0.4999 КАК Число(12, 0))
		|		КОНЕЦ - (ЕСТЬNULL(ВТ_ОстаткиРеализуемогоТовара.Количество, 0) + ЕСТЬNULL(ВТ_ОстаткиДефектуры.ОстатокВПути, 0) + ЕСТЬNULL(ВТ_ОстаткиДефектуры.НеРеализованнаяДефектура, 0)) + 0.4999 КАК ЧИСЛО(12, 0)) > 0
		|	" + ?(ФильтрКатегории = 0, "", "И ПрайсЛистПрайсМестаХранения.Рейтинг = &Категория")+ "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Данные.Отдел КАК Отдел
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|
		|УПОРЯДОЧИТЬ ПО
		|	Отдел";

	ТабОтделов = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаОтдел Из ТабОтделов Цикл

		т_Документ = Документы.ЗаявкаНаДефектуру.СоздатьДокумент();
		т_Документ.Дата = ТекущаяДата();
		т_Документ.УстановитьНовыйНомер();
		т_Документ.Склад = СтрокаОтдел.Отдел;
		т_Документ.ТипЗаявки = Перечисления.ТипыЗаявокНаДефектуру.ОформлениеПотребности;
		
		Запрос.УстановитьПараметр("Отдел", СтрокаОтдел.Отдел);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВТ_Данные.Товар КАК Товар,
		|	ВТ_Данные.Потребность КАК Количество
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|ГДЕ ВТ_Данные.Отдел = &Отдел
		|	И ВТ_Данные.Потребность > 0
		|	И ВТ_Данные.Товар <> Значение(Справочник.Номенклатура.ПустаяСсылка)
		|УПОРЯДОЧИТЬ ПО
		|	Товар";

		т_Документ.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
		Если т_Документ.Товары.Количество() > 0 Тогда
			Попытка
				т_Документ.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				сообщить("Ошибка записи документа для отдела - " + СокрЛП(СтрокаОтдел.Отдел.Наименование));
				Продолжить;
			КонецПопытки; 
			
			Попытка
				т_Документ.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			КонецПопытки; 

		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры


&НаКлиенте
Процедура АннулироватьЗаказыПоставщику(Команда)
	
	Если НЕ ПроверитьЗаполнениеСклада() Тогда
		Возврат;
	КонецЕсли;

	АннулироватьЗаказыПоставщикуНаСервере();
	ПоказатьПредупреждение(, "Заказы поставщикам аннулированы", 15);

КонецПроцедуры
&НаСервере
Процедура АннулироватьЗаказыПоставщикуНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДефектураОстатки.Поставщик КАК Поставщик,
		|	ДефектураОстатки.Товар КАК Товар,
		|	ДефектураОстатки.Заказ КАК Заказ,
		|	ДефектураОстатки.КлючСвязи КАК КлючСвязи,
		|	ДефектураОстатки.ДатаДоставки КАК ДатаДоставки,
		|	ДефектураОстатки.ЦенаЗакупки КАК ЦенаЗакупки,
		|	ДефектураОстатки.СрокГодности КАК СрокГодности,
		|	СУММА(ДефектураОстатки.КоличествоОстаток) КАК Количество
		|ИЗ
		|	РегистрНакопления.Дефектура.Остатки(
		|			,
		|			Склад = &Склад
		|				И Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				И ДатаДоставки < &Дата) КАК ДефектураОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ДефектураОстатки.Товар,
		|	ДефектураОстатки.Заказ,
		|	ДефектураОстатки.Поставщик,
		|	ДефектураОстатки.ДатаДоставки,
		|	ДефектураОстатки.СрокГодности,
		|	ДефектураОстатки.КлючСвязи,
		|	ДефектураОстатки.ЦенаЗакупки";

	Для каждого СтрокаСклад Из Объект.табСклады Цикл
		
		т_Документ = Документы.АннулированиеЗаказовПоставщику.СоздатьДокумент();
		т_Документ.Дата = ТекущаяДата();
		т_Документ.УстановитьНовыйНомер();
		т_Документ.Склад = СтрокаСклад.Склад;
		Запрос.УстановитьПараметр("Склад", СтрокаСклад.Склад);
		т_Документ.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
		Если т_Документ.Товары.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		ИзменитьСостояниеДокумента(т_Документ, 0);
		ИзменитьСостояниеДокумента(т_Документ, 1);

	КонецЦикла; 

КонецПроцедуры


&НаКлиенте
Процедура ПолучитьРаспределенныеДанные(Команда)

	Если НЕ ПроверитьЗаполнениеСклада() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьРаспределенныеДанныеНаСервере();
	ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.СтраницаРаспределение;

КонецПроцедуры
&НаСервере
Процедура ПолучитьРаспределенныеДанныеНаСервере()
	
	фТабДанных.Очистить();
	фТабРасшифровки.Очистить();

	// 1.1 удалим ранее полученные но без поставщика
	ПередЗакрытиемНаСервере();
	
	ОтборПоТовару = ?((МетодАвтораспределения = 1 И Объект.табТовары.Количество() > 0), Истина, Ложь);
	ОтборПоПоставщику = ?((МетодАвтораспределения = 1 И Объект.табПоставщики.Количество() > 0), Истина, Ложь);

	 // 1.2 удалим сведения о захватившем сотруднике (освободим данные)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сотрудник", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ВыбСклады", Объект.табСклады.Выгрузить());
	Запрос.УстановитьПараметр("ВыбТовары", Объект.табТовары.Выгрузить());
	Запрос.УстановитьПараметр("ВыбПоставщики", Объект.табПоставщики.Выгрузить());
	Запрос.УстановитьПараметр("ТекДата", НачалоДня(ТекущаяДата()));

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТемпАвтозаказ.ID
		|ИЗ
		|	РегистрСведений.ТемпАвтозаказ КАК ТемпАвтозаказ
		|ГДЕ
		|	ТемпАвтозаказ.Сотрудник = &Сотрудник";

	НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл

		НаборЗаписей.Отбор.ID.Установить(РезультатЗапроса.ID);
		НаборЗаписей.Прочитать();
		НаборЗаписей[0].Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
		НаборЗаписей.Записать();

		НаборЗаписей.Отбор.Сбросить();

	КонецЦикла;

	Запрос.УстановитьПараметр("ДатаНачЗакупки", ДобавитьМесяц(ТекущаяДата(), -1));
	Запрос.УстановитьПараметр("ПустаяДата", Дата(2000, 1, 1));
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВыбСклады.Склад КАК Склад
	               |ПОМЕСТИТЬ ВТ_Склады
	               |ИЗ
	               |	&ВыбСклады КАК ВыбСклады
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Склад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВыбТовары.Товар КАК Товар
	               |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	&ВыбТовары КАК ВыбТовары
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Товар
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВыбПоставщики.Поставщик КАК Поставщик
	               |ПОМЕСТИТЬ ВТ_Поставщики
	               |ИЗ
	               |	&ВыбПоставщики КАК ВыбПоставщики
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Поставщик
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	МестаХраненияПоДоговору.Поставщик КАК Поставщик,
	               |	МестаХраненияПоДоговору.Договор КАК Договор,
	               |	МестаХраненияПоДоговору.МестоХранения КАК Склад,
				   |	МестаХраненияПоДоговору.КратностьУпаковки КАК КратностьУпаковки,
	               |	МестаХраненияПоДоговору.ТипПрайса КАК ТипПрайса,
				   |	МестаХраненияПоДоговору.ТипПоставки КАК ТипПоставки
	               |ИЗ
	               |	ВТ_Склады КАК ВТ_Склады
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияПоДоговору КАК МестаХраненияПоДоговору
	               |		ПО ВТ_Склады.Склад = МестаХраненияПоДоговору.МестоХранения
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Поставщики КАК Поставщики
	               |		ПО (Поставщики.Поставщик = МестаХраненияПоДоговору.Поставщик)
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Договоры КАК Договора
	               |		ПО Договора.Ссылка = МестаХраненияПоДоговору.Договор
				   |	" + ?(ОтборПоПоставщику, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Поставщики КАК ВТ_Поставщики ПО (ВТ_Поставщики.Поставщик = Поставщики.Поставщик)", "") + "
	               |ГДЕ
	               |	МестаХраненияПоДоговору.Активный = ИСТИНА
	               |	И Договора.ПометкаУдаления = ЛОЖЬ
	               |	И Поставщики.Активно = ИСТИНА
	               |;";

		Тт = Запрос.Выполнить().Выгрузить();
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(36));
		Тт.Колонки.Добавить("ID_МХ", ОписаниеТиповС);
		Для каждого СтрокаТЧ Из Тт Цикл
			СтрокаТЧ.ID_МХ = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;

		Запрос.УстановитьПараметр("МестаХраненияПоДоговору", Тт);
		Запрос.Текст = "ВЫБРАТЬ
	               |	МестаХраненияПоДоговору.ID_МХ КАК ID_МХ,
	               |	МестаХраненияПоДоговору.Поставщик КАК Поставщик,
	               |	МестаХраненияПоДоговору.Договор КАК Договор,
	               |	МестаХраненияПоДоговору.Склад КАК Склад,
				   |	МестаХраненияПоДоговору.КратностьУпаковки КАК КратностьУпаковки,
	               |	МестаХраненияПоДоговору.ТипПрайса КАК ТипПрайса,
				   |	МестаХраненияПоДоговору.ТипПоставки КАК ТипПоставки
	               |ПОМЕСТИТЬ ТабПоставщиковНаСклад
	               |ИЗ
	               |	&МестаХраненияПоДоговору КАК МестаХраненияПоДоговору
	               |
	               |ИНДЕКСИРОВАТЬ ПО
				   |	ID_МХ,
	               |	Поставщик,
	               |	Договор,
	               |	Склад,
	               |	ТипПрайса
	               |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	Q.Товар
				   |ПОМЕСТИТЬ ВТ_РегТовары
				   |ИЗ (
				   |	ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |		ДефектураОстатки.Товар КАК Товар
				   |	ИЗ
				   |		РегистрНакопления.Дефектура.Остатки(
				   |			,
				   |			Склад В
				   |				(ВЫБРАТЬ
				   |					ВТ_Склады.Склад
				   |				ИЗ
				   |					ВТ_Склады КАК ВТ_Склады)
				   |		" + ?(ОтборПоТовару, "И Товар В (Выбрать Различные ВТ_Товары.Товар ИЗ ВТ_Товары КАК ВТ_Товары)", "") + "
				   |	) КАК ДефектураОстатки
				   |	ГДЕ
				   |		ДефектураОстатки.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
				   |		И ДефектураОстатки.КоличествоОстаток <> 0
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
	               |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		ТемпАвтозаказ.Товар
	               |	ИЗ
	               |		РегистрСведений.ТемпАвтозаказ КАК ТемпАвтозаказ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Склады КАК ВТ_Склады
	               |			ПО (ВТ_Склады.Склад = ТемпАвтозаказ.Склад)
				   |		" + ?(ОтборПоТовару, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары ПО (ВТ_Товары.Товар = ТемпАвтозаказ.Товар)", "") +  "
				   |) КАК Q
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТабПоставщиковНаСклад.ID_МХ,
				   |	ТабПоставщиковНаСклад.Склад,
				   |	supplier_price.Поставщик КАК Поставщик,
				   |	supplier_price.Договор,
				   |	supplier_price.Товар КАК Товар,
				   |	supplier_price.Наименование КАК Наименование,
				   |	supplier_price.Производитель КАК Производитель,
				   |	supplier_price.price КАК price,
				   |	supplier_price.price_corr КАК price_corr,
				   |	supplier_price.cnt КАК cnt,
				   |	supplier_price.expiration КАК expiration,
				   |	supplier_price.delivery_date КАК delivery_date,
				   |	supplier_price.КодПоставщика КАК КодПоставщика,
				   |	supplier_price.cnt_pack КАК cnt_pack,
				   |	supplier_price.ТипПрайса КАК ТипПрайса,
				   |	ТабПоставщиковНаСклад.КратностьУпаковки
				   |ПОМЕСТИТЬ ВТ_SP
				   |ИЗ
				   |	ТабПоставщиковНаСклад КАК ТабПоставщиковНаСклад
				   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.supplier_price КАК supplier_price
				   |		ПО (ТабПоставщиковНаСклад.Поставщик = supplier_price.Поставщик)
				   |			И ТабПоставщиковНаСклад.Договор = supplier_price.Договор
				   |			И (ТабПоставщиковНаСклад.ТипПрайса = supplier_price.ТипПрайса)
				   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РегТовары КАК ВТ_РегТовары
				   |		ПО ВТ_РегТовары.Товар = supplier_price.Товар
				   |ИНДЕКСИРОВАТЬ ПО
				   |	ID_МХ,
				   |	Поставщик,
				   |	ТипПрайса
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	supplier_price.ID_МХ,
				   |	supplier_price.Склад,
				   |	supplier_price.Поставщик КАК Поставщик,
				   |	supplier_price.Договор КАК Договор,
				   |	supplier_price.Товар КАК Товар,
				   |	supplier_price.Наименование,
				   |	supplier_price.Производитель,
				   |	supplier_price.price,
				   |	supplier_price.price_corr КАК КорректЦенаПоставщика,
				   |	supplier_price.cnt,
				   |	supplier_price.expiration,
				   |	supplier_price.delivery_date,
				   |	supplier_price.КодПоставщика,
				   |	supplier_price.cnt_pack,
				   |	1 КАК КоэфДеления,
				   |	supplier_price.ТипПрайса,
				   |	supplier_price.КратностьУпаковки
				   |ПОМЕСТИТЬ suppliers
				   |ИЗ
				   |	ВТ_SP КАК supplier_price
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	supplier_price.ID_МХ,
				   |	supplier_price.Склад,
				   |	supplier_price.Поставщик,
				   |	supplier_price.Договор,
				   |	supplier_price.Товар,
				   |	supplier_price.Наименование,
				   |	supplier_price.Производитель,
				   |	ВЫРАЗИТЬ(supplier_price.price / Деление.Коэффициент КАК ЧИСЛО(12, 2)),
				   |	ВЫРАЗИТЬ(supplier_price.price_corr / Деление.Коэффициент КАК ЧИСЛО(12, 2)),
				   |	supplier_price.cnt * Деление.Коэффициент,
				   |	supplier_price.expiration,
				   |	supplier_price.delivery_date,
				   |	supplier_price.КодПоставщика,
				   |	ВЫРАЗИТЬ(supplier_price.cnt_pack * Деление.Коэффициент КАК ЧИСЛО(12, 2)),
				   |	Деление.Коэффициент,
				   |	supplier_price.ТипПрайса,
				   |	supplier_price.КратностьУпаковки
				   |ИЗ
				   |	Справочник.Деление КАК Деление
				   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураДеленный ПО Деление.Владелец = НоменклатураДеленный.Ссылка
				   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
				   |		ПО Деление.ТоварПолучаемый = Номенклатура.Ссылка
				   |		И (Деление.ПометкаУдаления = ЛОЖЬ) И (Деление.Коэффициент <> 0)
				   |	" + ?(ОтборПоТовару, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары ПО ВТ_Товары.Товар = Номенклатура.Ссылка", "") + "
				   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_SP КАК supplier_price ПО (Номенклатура.Ссылка = supplier_price.Товар)
				   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Склады КАК ВТ_Склады ПО (ВТ_Склады.Склад = supplier_price.Склад)
				   |ИНДЕКСИРОВАТЬ ПО
				   |	ID_МХ, Поставщик
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТемпАвтозаказ.ID,
				   |	suppliers.ID_МХ КАК ID_МХ,
				   |	ТемпАвтозаказ.Поставщик КАК Поставщик,
				   |	suppliers.Договор КАК Договор,
				   |	ТемпАвтозаказ.Склад КАК Склад,
				   |	ТемпАвтозаказ.Товар КАК Товар,
				   |	ТемпАвтозаказ.КодТовараПоставщика,
				   |	ТемпАвтозаказ.Заказ,
				   |	ТемпАвтозаказ.КлючСвязи,
				   |	ТемпАвтозаказ.Потребность,
				   |	ТемпАвтозаказ.Заказано,
				   |	ВЫБОР
				   |		КОГДА suppliers.КратностьУпаковки = 1
				   |				ИЛИ suppliers.ТипПрайса = 1
				   |			ТОГДА ЕСТЬNULL(suppliers.cnt_pack, 1)
				   |		ИНАЧЕ 1
				   |	КОНЕЦ КАК Кратность,
				   |	ТемпАвтозаказ.Цена,
//				   |	suppliers.price КАК ЦенаРознРасч,
				   |	suppliers.delivery_date КАК СрокГодности_Прайс,
				   |	ТемпАвтозаказ.Потребность - ТемпАвтозаказ.Заказано КАК НЕ_Распределено,
				   |	ВЫБОР
				   |		КОГДА ТемпАвтозаказ.Заказ <> ЗНАЧЕНИЕ(Документ.Заказ.ПустаяСсылка)
				   |			ТОГДА ТемпАвтозаказ.Заказано
				   |		ИНАЧЕ 0
				   |	КОНЕЦ КАК ПодЗаказ,
				   |	ТемпАвтозаказ.Сотрудник,
				   |	ТемпАвтозаказ.КоэфДеления,
				   |	ТемпАвтозаказ.ТипПрайса
				   |ПОМЕСТИТЬ Автозаказ
				   |ИЗ
				   |	РегистрСведений.ТемпАвтозаказ КАК ТемпАвтозаказ
				   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Склады КАК ВТ_Склады
				   |		ПО ТемпАвтозаказ.Склад = ВТ_Склады.Склад
				   |		И ТемпАвтозаказ.Сотрудник = Значение(Справочник.Сотрудники.ПустаяСсылка)
				   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура ПО ТемпАвтозаказ.Товар = Номенклатура.Ссылка
				   |	" + ?(ОтборПоТовару, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары ПО ВТ_Товары.Товар = Номенклатура.Ссылка", "") + "
				   |	" + ?(ОтборПоПоставщику, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Поставщики КАК ВТ_Поставщики ПО ВТ_Поставщики.Поставщик = ТемпАвтозаказ.Поставщик", "") + "
				   |	ЛЕВОЕ СОЕДИНЕНИЕ suppliers КАК suppliers
				   |		ПО ТемпАвтозаказ.Поставщик = suppliers.Поставщик
				   |		И ТемпАвтозаказ.Договор = suppliers.Договор
				   |		И ТемпАвтозаказ.Товар = suppliers.Товар
				   |		И ТемпАвтозаказ.Склад = suppliers.Склад
				   |		И ТемпАвтозаказ.КодТовараПоставщика = suppliers.КодПоставщика
				   |		И ТемпАвтозаказ.Цена = suppliers.price
				   |		И ТемпАвтозаказ.ТипПрайса = suppliers.ТипПрайса
				   |" + ?(ФильтрКатегории = 0, "", "
				   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрайсЛист Как ПрайсЛист ПО ПрайсЛист.Товар = ТемпАвтозаказ.Товар
				   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрайсМестаХранения Как ПрайсМестаХранения_ ПО ПрайсМестаХранения_.Владелец = ПрайсЛист.Ссылка") + "
				   |ГДЕ Истина
				   |	" + ?(ФильтрКатегории = 0, "", "И ПрайсМестаХранения_.Рейтинг = " + Строка(ФильтрКатегории)) + "
				   |	" + ?(ФильтрПодЗаказ = 0, "", ?(ФильтрПодЗаказ = 1, "И ТемпАвтозаказ.Заказ <> Значение(Документ.Заказ.ПустаяСсылка)", "И ТемпАвтозаказ.Заказ = Значение(Документ.Заказ.ПустаяСсылка)")) + "
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Склад,
				   |	Поставщик
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ДефектураОстатки.Склад КАК Склад,
				   |	ДефектураОстатки.Товар КАК Товар,
				   |	ДефектураОстатки.Заказ КАК Заказ,
				   |	ДефектураОстатки.КлючСвязи КАК КлючСвязи,
				   |	ДефектураОстатки.СрокГодности,
				   |	СУММА(ДефектураОстатки.КоличествоОстаток) КАК ВсегоДефектура,
				   |	СУММА(ВЫБОР
				   |			КОГДА ДефектураОстатки.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
				   |				ТОГДА ДефектураОстатки.КоличествоОстаток
				   |			ИНАЧЕ 0
				   |		КОНЕЦ) КАК НЕ_Распределено,
				   |	СУММА(ВЫБОР
				   |			КОГДА ДефектураОстатки.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
				   |				ТОГДА ДефектураОстатки.КоличествоОстаток
				   |			ИНАЧЕ 0
				   |		КОНЕЦ) КАК ПодЗаказ
				   |ПОМЕСТИТЬ РегДефектуры_Темп
				   |ИЗ
				   |	РегистрНакопления.Дефектура.Остатки(
				   |			,
				   |			Склад В
				   |				(ВЫБРАТЬ
				   |					ВТ_Склады.Склад
				   |				ИЗ
				   |					вт_склады КАК ВТ_Склады)
				   |	" + ?(ОтборПоТовару, "И Товар В (Выбрать Различные ВТ_Товары.Товар ИЗ ВТ_Товары КАК ВТ_Товары)", "") + "
				   |	" + ?(ОтборПоПоставщику, "И Поставщик В (Выбрать Различные ВТ_Поставщики.Поставщик ИЗ ВТ_Поставщики КАК ВТ_Поставщики)", "") + "
				   |) КАК ДефектураОстатки
				   |" + ?(ФильтрКатегории = 0, "", "
				   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрайсЛист Как ПрайсЛист ПО ПрайсЛист.Товар = ДефектураОстатки.Товар
				   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрайсМестаХранения Как ПрайсМестаХранения_ ПО ПрайсМестаХранения_.Владелец = ПрайсЛист.Ссылка
				   |") + "
				   |ГДЕ
				   |	ДефектураОстатки.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
				   |	И ДефектураОстатки.КоличествоОстаток <> 0
				   |" + ?(ФильтрКатегории = 0, "", "	И ПрайсМестаХранения_.Рейтинг = " + Строка(ФильтрКатегории)) + "
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ДефектураОстатки.Склад,
				   |	ДефектураОстатки.Товар,
				   |	ДефектураОстатки.Заказ,
				   |	ДефектураОстатки.КлючСвязи,
				   |	ДефектураОстатки.СрокГодности
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Склад,
				   |	Заказ,
				   |	КлючСвязи
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ДефектураОстатки.Склад КАК Склад,
				   |	ДефектураОстатки.Товар КАК Товар,
				   |	СУММА(ДефектураОстатки.КоличествоОстаток) КАК ВПути
				   |ПОМЕСТИТЬ РегДефектурыВПути
				   |ИЗ
				   |	РегистрНакопления.Дефектура.Остатки(
				   |			,
				   |			Склад В
				   |				(ВЫБРАТЬ
				   |					ВТ_Склады.Склад
				   |				ИЗ
				   |					вт_склады КАК ВТ_Склады)
				   |	" + ?(ОтборПоТовару, "И Товар В (Выбрать Различные ВТ_Товары.Товар ИЗ ВТ_Товары КАК ВТ_Товары)", "") + "
				   |	" + ?(ОтборПоПоставщику, "И Поставщик В (Выбрать Различные ВТ_Поставщики.Поставщик ИЗ ВТ_Поставщики КАК ВТ_Поставщики)", "") + "
				   |) КАК ДефектураОстатки
				   |" + ?(ФильтрКатегории = 0, "", "
				   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрайсЛист Как ПрайсЛист ПО ПрайсЛист.Товар = ДефектураОстатки.Товар
				   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрайсМестаХранения Как ПрайсМестаХранения_ ПО ПрайсМестаХранения_.Владелец = ПрайсЛист.Ссылка
				   |") + "
				   |ГДЕ
				   |	ДефектураОстатки.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
				   |	И ДефектураОстатки.КоличествоОстаток <> 0
				   |" + ?(ФильтрКатегории = 0, "", "	И ПрайсМестаХранения_.Рейтинг = " + Строка(ФильтрКатегории)) + "
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ДефектураОстатки.Склад,
				   |	ДефектураОстатки.Товар
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Склад
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегДефектуры_Темп.Склад,
				   |	РегДефектуры_Темп.Товар,
				   |	РегДефектуры_Темп.Заказ,
				   |	РегДефектуры_Темп.КлючСвязи,
				   |	РегДефектуры_Темп.СрокГодности,
				   |	РегДефектуры_Темп.ВсегоДефектура - isNull(Автозаказ.Заказано, 0) КАК ВсегоДефектура,
				   |	РегДефектуры_Темп.НЕ_Распределено - isNull(Автозаказ.Заказано, 0) КАК НЕ_Распределено,
				   |	РегДефектуры_Темп.ПодЗаказ
				   |ПОМЕСТИТЬ РегДефектуры_1
				   |ИЗ
				   |	РегДефектуры_Темп КАК РегДефектуры_Темп
				   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				   |			Автозаказ.Склад КАК Склад,
				   |			Автозаказ.Товар КАК Товар,
				   |			Автозаказ.Заказ КАК Заказ,
				   |			Автозаказ.КлючСвязи КАК КлючСвязи,
				   |			СУММА(Автозаказ.Заказано) КАК Заказано
				   |		ИЗ
				   |			Автозаказ КАК Автозаказ
				   |		
				   |		СГРУППИРОВАТЬ ПО
				   |			Автозаказ.Склад,
				   |			Автозаказ.Товар,
				   |			Автозаказ.Заказ,
				   |			Автозаказ.КлючСвязи) КАК Автозаказ
				   |		ПО (Автозаказ.Склад = РегДефектуры_Темп.Склад)
				   |			И (Автозаказ.Товар = РегДефектуры_Темп.Товар)
				   |			И РегДефектуры_Темп.Заказ = Автозаказ.Заказ
				   |			И РегДефектуры_Темп.КлючСвязи = Автозаказ.КлючСвязи
				   |ГДЕ
				   |	РегДефектуры_Темп.ВсегоДефектура - isNull(Автозаказ.Заказано, 0) > 0
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |УНИЧТОЖИТЬ РегДефектуры_Темп
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	РегДефектуры_1.Склад КАК Склад,
				   |	РегДефектуры_1.Товар,
				   |	РегДефектуры_1.Заказ КАК Заказ,
				   |	РегДефектуры_1.КлючСвязи,
				   |	РегДефектуры_1.СрокГодности,
				   |	РегДефектуры_1.ВсегоДефектура - ЕСТЬNULL(Автозаказ.Потребность, 0) КАК ВсегоДефектура,
				   |	РегДефектуры_1.НЕ_Распределено,
				   |	РегДефектуры_1.ПодЗаказ
				   |ПОМЕСТИТЬ РегДефектуры
				   |ИЗ
				   |	РегДефектуры_1 КАК РегДефектуры_1
				   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				   |			Автозаказ.Склад КАК Склад,
				   |			Автозаказ.Товар КАК Товар,
				   |			Автозаказ.Заказ КАК Заказ,
				   |			Автозаказ.КлючСвязи КАК КлючСвязи,
				   |			СУММА(Автозаказ.Потребность) КАК Потребность
				   |		ИЗ
				   |			Автозаказ КАК Автозаказ
				   |		ГДЕ
				   |			Автозаказ.Сотрудник <> ЗНАЧЕНИЕ(справочник.сотрудники.пустаяссылка)
				   |		
				   |		СГРУППИРОВАТЬ ПО
				   |			Автозаказ.Склад,
				   |			Автозаказ.Товар,
				   |			Автозаказ.Заказ,
				   |			Автозаказ.КлючСвязи) КАК Автозаказ
				   |		ПО (Автозаказ.Склад = РегДефектуры_1.Склад)
				   |			И (Автозаказ.Товар = РегДефектуры_1.Товар)
				   |			И (Автозаказ.Заказ = РегДефектуры_1.Заказ)
				   |			И (Автозаказ.КлючСвязи = РегДефектуры_1.КлючСвязи)
				   |ГДЕ Истина
				   |	" + ?(ФильтрПодЗаказ = 0, "", ?(ФильтрПодЗаказ = 1, "И РегДефектуры_1.Заказ <> Значение(Документ.Заказ.ПустаяСсылка)", "И РегДефектуры_1.Заказ = Значение(Документ.Заказ.ПустаяСсылка)")) + "
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Склад,
				   |	Заказ
				   |;
				   |////////////////////////////////////////////////////////////////////////////////
				   |УНИЧТОЖИТЬ РегДефектуры_1
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ОстаткиТовараОстатки.Отдел КАК Склад,
				   |	ОстаткиТовараОстатки.Товар,
				   |	СУММА(ОстаткиТовараОстатки.ОстатокОстаток) КАК Количество
				   |ПОМЕСТИТЬ ОстаткиТовара
				   |ИЗ
				   |	РегистрНакопления.ОстаткиТовара.Остатки(
				   |			,
				   |			Отдел В
				   |					(ВЫБРАТЬ
				   |						ВТ_Склады.Склад
				   |					ИЗ
				   |						вт_склады КАК ВТ_Склады)
				   |				И Товар В
				   |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |						РегДефектуры.Товар
				   |					ИЗ
				   |						РегДефектуры КАК РегДефектуры)) КАК ОстаткиТовараОстатки
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ОстаткиТовараОстатки.Отдел,
				   |	ОстаткиТовараОстатки.Товар
				   |
				   |ИМЕЮЩИЕ
				   |	СУММА(ОстаткиТовараОстатки.ОстатокОстаток) > 0
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	Q.Склад,
				   |	Q.Товар,
				   |	МИНИМУМ(ПриходнаяТовары.Цена) КАК Цена
				   |ПОМЕСТИТЬ ЦеныЗакупки
				   |ИЗ
				   |	Документ.Приходная.Товары КАК ПриходнаяТовары
				   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
				   |	(
				   |		ВЫБРАТЬ Различные
				   |			Автозаказ.Склад КАК Склад,
				   |			Автозаказ.Товар КАК Товар
				   |		ИЗ
				   |			Автозаказ КАК Автозаказ
				   |	ОБЪЕДИНИТЬ ВСЕ
				   |		ВЫБРАТЬ
				   |			РегДефектуры.Склад,
				   |			РегДефектуры.Товар
				   |		ИЗ
				   |			РегДефектуры КАК РегДефектуры
				   |	) КАК Q
				   |	ПО ПриходнаяТовары.Товар = Q.Товар
				   |	И ПриходнаяТовары.Ссылка.Отдел = Q.Склад
				   |ГДЕ
				   |	ПриходнаяТовары.Ссылка.Дата >= &ДатаНачЗакупки
				   |	И ПриходнаяТовары.Ссылка.Проведен = ИСТИНА
				   |	И ПриходнаяТовары.Ссылка.ВычНП = ИСТИНА
				   |СГРУППИРОВАТЬ ПО
				   |	Q.Склад,
				   |	Q.Товар
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	Q.ID,
				   |	Q.ID_МХ,
				   |	Q.Поставщик,
				   |	Q.Договор,
				   |	Q.Склад,
				   |	Номенклатура.Ссылка КАК Товар,
				   |	ЕСТЬNULL(Номенклатура.Наименование, Q.Товар) КАК НаименованиеТовара,
				   |	Q.КодТовараПоставщика,
				   |	Q.Заказ,
				   |	Q.КлючСвязи,
				   |	Q.Потребность,
				   |	Q.Заказано,
				   |	Q.Кратность,
				   |	Q.Цена,
//				   |	Q.ЦенаРознРасч,
				   |	Q.СрокГодности_Прайс,
				   |	Q.НЕ_Распределено,
				   |	Q.ПодЗаказ,
				   |	Q.New,
				   |	Q.КоэфДеления,
				   |	Q.ТипПрайса,
				   |	Q.СрокГодности,
				   |	ЕСТЬNULL(ОстаткиТовара.Количество, 0) КАК Остаток
				   |ИЗ
				   |	(ВЫБРАТЬ
				   |		Автозаказ.ID КАК ID,
				   |		Автозаказ.ID_МХ КАК ID_МХ,
				   |		Автозаказ.Поставщик КАК Поставщик,
				   |		Автозаказ.Договор КАК Договор,
				   |		Автозаказ.Склад КАК Склад,
				   |		Автозаказ.Товар КАК Товар,
				   |		Автозаказ.КодТовараПоставщика КАК КодТовараПоставщика,
				   |		Автозаказ.Заказ КАК Заказ,
				   |		Автозаказ.КлючСвязи КАК КлючСвязи,
				   |		Автозаказ.Потребность КАК Потребность,
				   |		Автозаказ.Заказано КАК Заказано,
				   |		Автозаказ.Кратность КАК Кратность,
				   |		Автозаказ.Цена КАК Цена,
//				   |		Автозаказ.ЦенаРознРасч КАК ЦенаРознРасч,
				   |		Автозаказ.СрокГодности_Прайс КАК СрокГодности_Прайс,
				   |		Автозаказ.НЕ_Распределено КАК НЕ_Распределено,
				   |		Автозаказ.ПодЗаказ КАК ПодЗаказ,
				   |		0 КАК New,
				   |		Автозаказ.КоэфДеления КАК КоэфДеления,
				   |		Автозаказ.ТипПрайса КАК ТипПрайса,
				   |		Автозаказ.СрокГодности_Прайс КАК СрокГодности
				   |	ИЗ
				   |		Автозаказ КАК Автозаказ
				   |	
				   |	ОБЪЕДИНИТЬ ВСЕ
				   |	
				   |	ВЫБРАТЬ
				   |		""######"",
				   |		"""",
				   |		ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
				   |		ЗНАЧЕНИЕ(Справочник.Договоры.ПустаяСсылка),
				   |		РегДефектуры.Склад,
				   |		РегДефектуры.Товар,
				   |		"""",
				   |		РегДефектуры.Заказ,
				   |		РегДефектуры.КлючСвязи,
				   |		РегДефектуры.ВсегоДефектура,
				   |		0,
				   |		0,
				   |		0,
//				   |		0,
				   |		"""",
				   |		РегДефектуры.НЕ_Распределено,
				   |		РегДефектуры.ПодЗаказ,
				   |		1,
				   |		1,
				   |		0,
				   |		РегДефектуры.СрокГодности
				   |	ИЗ
				   |		РегДефектуры КАК РегДефектуры
				   |) КАК Q
				   |" + ?(фУчестьABS, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦеныЗакупки ПО ЦеныЗакупки.Склад = Q.Склад И ЦеныЗакупки.Товар = Q.Товар", "") + "
				   |" + ?(фТоварыВОстатке, "ВНУТРЕННЕЕ", "ЛЕВОЕ") + " СОЕДИНЕНИЕ ОстаткиТовара КАК ОстаткиТовара
				   |	ПО Q.Товар = ОстаткиТовара.Товар
				   |	И Q.Склад = ОстаткиТовара.Склад
				   |ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
				   |	ПО Q.Товар = Номенклатура.Ссылка
				   |ГДЕ
				   |	НЕ(Номенклатура.Наименование ЕСТЬ NULL И Q.Заказ = ЗНАЧЕНИЕ(Документ.Заказ.ПустаяСсылка))
				   |	" + ?(фТоварыВОстатке, "И ОстаткиТовара.Количество > " + Формат(фКоличествоТовара, "ЧГ="), "") + "
//				   |	" + ?(фУчестьМаржу = Ложь, "", "И isNULL(Q.Цена, 0) > 0 AND ((isNULL(Q.ЦенаРознРасч, 0) - (isNULL(Q.Цена, 0)))" + ?(фУчестьМаржуПоТовару = Ложь, "", "* Q.Потребность") + ") between  " + Формат(фМинМаржа, "ЧГ=") + " И " + Формат(фМаксМаржа, "ЧГ=")) + "
				   |	" + ?(фУчестьЦеныЗакупки = Ложь, "", "И isNULL(Q.Цена, 0) between " + Формат(фМинЦенаЗакупки, "ЧН=0; ЧГ=") + " И " + Формат(фМаксЦенаЗакупки, "ЧН=0; ЧГ=")) + "
				   |	" + ?(фУчестьABS = Ложь, "", "
				   |	И ВЫБОР 
				   |		КОГДА ЦеныЗакупки.Цена = 0 ТОГДА 0
				   |		ИНАЧЕ
				   |			ВЫБОР 
				   |				КОГДА ЦеныЗакупки.Цена - Q.Цена < 0 ТОГДА Q.Цена - ЦеныЗакупки.Цена
				   |				ИНАЧЕ ЦеныЗакупки.Цена - Q.Цена
				   |			КОНЕЦ / ЦеныЗакупки.Цена * 100
				   |		КОНЕЦ >= " + Формат(фОтклоненияABS, "ЧГ=") + "
				   |	И Q.Цена > 0") + "
				   |";

	Тт = Запрос.Выполнить().Выгрузить();
	Отбор = Новый Структура;
	Отбор.Вставить("ID", "######");
	Строки = Тт.НайтиСтроки(Отбор);
	Для каждого СтрокаТЧ Из Строки Цикл
		СтрокаТЧ.ID = Строка(Новый УникальныйИдентификатор);
	КонецЦикла;

	Запрос.УстановитьПараметр("ИтоговаяТаблица", Тт);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Q.ID КАК ID,
				   |	Q.ID_МХ КАК ID_МХ,
				   |	Q.Поставщик,
				   |	Q.Договор,
	               |	Q.Склад КАК Склад,
	               |	Q.Товар,
	               |	Q.КодТовараПоставщика,
	               |	Q.Заказ,
	               |	Q.КлючСвязи,
	               |	Q.Потребность,
	               |	Q.Заказано,
	               |	Q.Кратность,
	               |	Q.Цена,
//	               |	Q.ЦенаРознРасч,
	               |	Q.СрокГодности_Прайс,
	               |	Q.НЕ_Распределено,
	               |	Q.ПодЗаказ,
	               |	Q.New,
	               |	Q.КоэфДеления,
	               |	Q.ТипПрайса,
	               |	Q.СрокГодности,
	               |	Q.Остаток,
	               |	Q.НаименованиеТовара
	               |ПОМЕСТИТЬ ИтоговаяТаблица
	               |ИЗ
	               |	&ИтоговаяТаблица КАК Q
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Склад,
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	pc1.Поставщик,
				   |	pc1.Договор,
				   |	pc1.МестоХранения,
				   |	pc1.ТипПрайса,
				   |	pc1.ТипПоставки,
				   |	pc1.ЦенаУпаковки КАК Цена_1,
	               |	МИНИМУМ(ЕСТЬNULL(pc2.ЦенаУпаковки, 999999999)) - 0.01 КАК Цена_2,
	               |	pc1.Коэффициент
	               |ПОМЕСТИТЬ ВТ_ТабКоэффициентовКратности
	               |ИЗ
	               |	РегистрСведений.ПроцентДозаказаУпаковка КАК pc1
	               |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентДозаказаУпаковка КАК pc2
	               |		ПО pc1.Поставщик = pc2.Поставщик
				   |			И pc1.Договор = pc2.Договор
				   |			И pc1.МестоХранения = pc2.МестоХранения
				   |			И pc1.ТипПрайса = pc2.ТипПрайса
				   |			И pc1.ТипПоставки = pc2.ТипПоставки
	               |			И pc1.ЦенаУпаковки < pc2.ЦенаУпаковки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	pc1.Поставщик,
				   |	pc1.Договор,
				   |	pc1.МестоХранения,
				   |	pc1.ТипПрайса,
				   |	pc1.ТипПоставки,
	               |	pc1.ЦенаУпаковки,
	               |	pc1.Коэффициент
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
				   |	ТабПоставщиковНаСклад.ID_МХ КАК ID_МХ,
	               |	ВТ_ТабКоэффициентовКратности.Поставщик,
				   |	ВТ_ТабКоэффициентовКратности.Договор,
				   |	ВТ_ТабКоэффициентовКратности.МестоХранения,
				   |	ВТ_ТабКоэффициентовКратности.ТипПрайса,
				   |	ВТ_ТабКоэффициентовКратности.ТипПоставки,
				   |	ВТ_ТабКоэффициентовКратности.Цена_1,
	               |	ВТ_ТабКоэффициентовКратности.Цена_2,
	               |	ВТ_ТабКоэффициентовКратности.Коэффициент
	               |ПОМЕСТИТЬ ТабКоэффициентовКратности
	               |ИЗ ВТ_ТабКоэффициентовКратности
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабПоставщиковНаСклад КАК ТабПоставщиковНаСклад
	               |		ПО ТабПоставщиковНаСклад.Поставщик = ВТ_ТабКоэффициентовКратности.Поставщик
				   |		И ТабПоставщиковНаСклад.Договор = ВТ_ТабКоэффициентовКратности.Договор
				   |		И ТабПоставщиковНаСклад.Склад = ВТ_ТабКоэффициентовКратности.МестоХранения
				   |		И ТабПоставщиковНаСклад.ТипПрайса = ВТ_ТабКоэффициентовКратности.ТипПрайса
				   |		И ТабПоставщиковНаСклад.ТипПоставки = ВТ_ТабКоэффициентовКратности.ТипПоставки
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID_МХ
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИтоговаяТаблица.ID,
//				   |	ИтоговаяТаблица.ID_МХ,
				   |	ИтоговаяТаблица.Поставщик,
				   |	ИтоговаяТаблица.Договор,
	               |	ИтоговаяТаблица.Склад КАК Склад,
				   |	ИтоговаяТаблица.Товар КАК Товар,
				   |	ИтоговаяТаблица.НаименованиеТовара КАК НаименованиеТовара,
	               |	ИтоговаяТаблица.КодТовараПоставщика,
	               |	ИтоговаяТаблица.Заказ КАК Заказ,
	               |	ИтоговаяТаблица.КлючСвязи,
	               |	ИтоговаяТаблица.Остаток,
	               |	ИтоговаяТаблица.Потребность КАК Потребность,
	               |	ИтоговаяТаблица.Заказано,
	               |	ИтоговаяТаблица.НЕ_Распределено,
	               |	ИтоговаяТаблица.ПодЗаказ,
	               |	ИтоговаяТаблица.Кратность,
	               |	ИтоговаяТаблица.Цена,
//	               |	ИтоговаяТаблица.ЦенаРознРасч,
	               |	ИтоговаяТаблица.СрокГодности_Прайс,
	               |	ЕСТЬNULL(ЦеныЗакупки.Цена, 0) КАК ЦенаЗакупки,
	               |	ЕСТЬNULL(ТабКоэффициентовКратности.Коэффициент, 1) КАК КоэфКратностиУпаковки,
	               |	ИтоговаяТаблица.New,
				   //|	ВЫБОР
				   //|		КОГДА ИтоговаяТаблица.Цена = 0
				   //|			ТОГДА 0
				   //|		ИНАЧЕ (ИтоговаяТаблица.ЦенаРознРасч - ИтоговаяТаблица.Цена) * 100 / ИтоговаяТаблица.Цена
				   //|	КОНЕЦ КАК Наценка,
	               |	0 КАК Наценка,
	               |	ИтоговаяТаблица.КоэфДеления,
	               |	ИтоговаяТаблица.ТипПрайса
	               |ПОМЕСТИТЬ TT1
	               |ИЗ
	               |	ИтоговаяТаблица КАК ИтоговаяТаблица
	               |	ЛЕВОЕ СОЕДИНЕНИЕ ЦеныЗакупки КАК ЦеныЗакупки
	               |		ПО ИтоговаяТаблица.Товар = ЦеныЗакупки.Товар
	               |			И ИтоговаяТаблица.Склад = ЦеныЗакупки.Склад
	               |	ЛЕВОЕ СОЕДИНЕНИЕ ТабКоэффициентовКратности КАК ТабКоэффициентовКратности
	               |		ПО ИтоговаяТаблица.ID_МХ = ТабКоэффициентовКратности.ID_МХ
	               |			И ИтоговаяТаблица.Цена >= ТабКоэффициентовКратности.Цена_1
	               |			И ИтоговаяТаблица.Цена <= ТабКоэффициентовКратности.Цена_2
	               |;
	               |
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	TT1.ID,
	               |	TT1.Поставщик,
	               |	TT1.Поставщик КАК ПоставщикСтарый,
				   |	TT1.Договор,
	               |	TT1.Склад,
				   |	TT1.НаименованиеТовара,
	               |	TT1.Товар,
	               |	TT1.КодТовараПоставщика,
	               |	TT1.Заказ,
	               |	TT1.КлючСвязи,
	               |	TT1.Остаток,
	               |	TT1.Потребность,
	               |	TT1.Заказано КАК КоличествоЗаказано,
	               |	TT1.НЕ_Распределено КАК КолНераспредДеф,
	               |	TT1.ПодЗаказ,
	               |	ВЫБОР
	               |		КОГДА TT1.Заказ = ЗНАЧЕНИЕ(Документ.Заказ.ПустаяСсылка)
	               |			ТОГДА TT1.Потребность
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ПодЗаявку,
	               |	ЕСТЬNULL(РегДефектурыВПути.ВПути, 0) КАК КолВПути,
	               |	TT1.Кратность * TT1.КоэфДеления КАК Кратность,
	               |	TT1.Цена КАК ЦенаПоставщикаСНДС,
//	               |	TT1.ЦенаРознРасч КАК ЦенаРозничнаяРасчетная,
	               |	TT1.Цена * TT1.Заказано КАК СуммаЗаказа,
	               |	ВЫБОР
	               |		КОГДА TT1.СрокГодности_Прайс < &ПустаяДата
	               |			ТОГДА """"
	               |		ИНАЧЕ TT1.СрокГодности_Прайс
	               |	КОНЕЦ КАК СрокГодности,
	               |	TT1.ЦенаЗакупки,
	               |	TT1.КоэфКратностиУпаковки,
	               |	0 КАК КрасимПоНаценке,
	               |	TT1.КоэфДеления,
	               |	TT1.ТипПрайса,
	               |	ВЫРАЗИТЬ("""" КАК СТРОКА(200)) КАК ТоварПоставщик,
	               |	ВЫРАЗИТЬ("""" КАК СТРОКА(200)) КАК id_ТоварСклад,
	               |	"""" КАК ДатаДоставки,
	               |	ЛОЖЬ КАК ЕстьПроблема
	               |ПОМЕСТИТЬ ВТ_Результат
	               |ИЗ
	               |TT1 КАК TT1
	               |ЛЕВОЕ СОЕДИНЕНИЕ РегДефектурыВПути КАК РегДефектурыВПути
	               |	ПО (РегДефектурыВПути.Товар = TT1.Товар)
	               |	И (РегДефектурыВПути.Склад = TT1.Склад)
	               |ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	               |	ПО TT1.Товар = Номенклатура.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Результат.ID,
				   |	ВТ_Результат.Склад,
	               |	ВТ_Результат.Поставщик,
	               |	ВТ_Результат.ПоставщикСтарый,
				   |	ВТ_Результат.Договор,
	               |	ВТ_Результат.Товар,
	               |	ВТ_Результат.КодТовараПоставщика,
	               |	ВТ_Результат.id_ТоварСклад,
				   |	ВТ_Результат.НаименованиеТовара,
	               |	ВТ_Результат.КоличествоЗаказано,
	               |	ВТ_Результат.Заказ,
	               |	ВТ_Результат.КлючСвязи,
	               |	ВТ_Результат.ДатаДоставки,
	               |	ВТ_Результат.Кратность,
	               |	ВТ_Результат.ЦенаПоставщикаСНДС,
	               |	0 КАК РасчетнаяНаценка,
//	               |	ВТ_Результат.ЦенаРозничнаяРасчетная,
	               |	ВТ_Результат.Остаток,
	               |	ВТ_Результат.Потребность,
	               |	ВТ_Результат.КолВПути,
	               |	ВТ_Результат.ПодЗаказ,
	               |	ВТ_Результат.ПодЗаявку,
	               |	ВТ_Результат.КолНераспредДеф,
	               |	ВТ_Результат.СуммаЗаказа,
	               |	ВТ_Результат.КоэфКратностиУпаковки,
	               |	ВТ_Результат.ТоварПоставщик,
	               |	ВТ_Результат.КрасимПоНаценке,
	               |	ВТ_Результат.КоэфДеления,
	               |	ВТ_Результат.ЦенаЗакупки,
	               |	ВТ_Результат.ТипПрайса,
	               |	ВТ_Результат.СрокГодности,
	               |	ВТ_Результат.ЕстьПроблема
	               |ИЗ
	               |	ВТ_Результат КАК ВТ_Результат";
				   

	ТабДанныхКопи = Запрос.Выполнить().Выгрузить();
	Запрос.Текст = "ВЫБРАТЬ
	               |	TT1.ID,
	               |	TT1.Склад,
	               |	TT1.Товар,
	               |	TT1.Заказ,
	               |	TT1.КлючСвязи,
	               |	TT1.Потребность,
	               |	TT1.ТипПрайса,
				   |	&Сотрудник КАК Сотрудник
	               |ИЗ
	               |	TT1 КАК TT1
	               |ГДЕ
	               |	TT1.New = 1";
	Запрос.УстановитьПараметр("Сотрудник", ПараметрыСеанса.ТекущийПользователь);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(РезультатЗапроса);
	НаборЗаписей.Записать(Ложь);
	НаборЗаписей = "";

	Запрос.Текст = "
		|ВЫБРАТЬ
		|	TT1.ID
		|ИЗ
		|	TT1 КАК TT1
		|ГДЕ
		|	TT1.New = 0";

	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		НаборЗапией = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
		НаборЗапией.Отбор.ID.Установить(РезультатЗапроса.ID);
		НаборЗапией.Прочитать();
		Если НаборЗапией.Количество() > 0 Тогда
			НаборЗапией[0].Сотрудник = ПараметрыСеанса.ТекущийПользователь;
			НаборЗапией.Записать();
		КонецЕсли; 
		НаборЗапией = "";
	КонецЦикла; 

	Для каждого СтрокаТЧ Из ТабДанныхКопи Цикл
		СтрокаТЧ.id_ТоварСклад = СтрокаТЧ.НаименованиеТовара + "_" + СокрЛП(Строка(СтрокаТЧ.Товар)) + "_" + СтрокаТЧ.Склад.Код + "_" + Строка(СтрокаТЧ.ТипПрайса);
		СтрокаТЧ.ТоварПоставщик = СтрокаТЧ.НаименованиеТовара + "_" + СокрЛП(Строка(СтрокаТЧ.Товар)) + "_" + СтрокаТЧ.Поставщик.Код + "_" + Строка(СтрокаТЧ.ТипПрайса) + "_" + Строка(СтрокаТЧ.КрасимПоНаценке) + "_" + ?(ЗначениеЗаполнено(СтрокаТЧ.Договор), СтрокаТЧ.Договор.Код, "###");
	КонецЦикла; 
	ТабДанныхКопи.Сортировать("ТоварПоставщик");

	ТемпТабДанныхКопи = ТабДанныхКопи.Скопировать();
	ТемпТабДанныхКопи.Свернуть("ID, ТоварПоставщик, НаименованиеТовара, Товар, Склад, КодТовараПоставщика, Поставщик, Договор, ПоставщикСтарый, Кратность, ЦенаПоставщикаСНДС, РасчетнаяНаценка,
	// ЦенаРозничнаяРасчетная,
		|КоэфКратностиУпаковки, КрасимПоНаценке, Остаток, КолВПути, КоэфДеления, id_ТоварСклад, ТипПрайса, СрокГодности", 
		"Потребность, КоличествоЗаказано, КолНераспредДеф, ПодЗаказ, ПодЗаявку, СуммаЗаказа");
	ТемпТабДанныхКопи.Сортировать("НаименованиеТовара, Товар, Склад, КоличествоЗаказано, Поставщик, Договор");
	ЕстьПроблема__ = Ложь;
	
	Для каждого СтрокаТЧ_Копи Из ТемпТабДанныхКопи Цикл

		ЕстьПроблема = Ложь;
		КоличествоЗаказано = СтрокаТЧ_Копи.КоличествоЗаказано;
		ЗаказатьУПоставщикаПоКратности = ?(СтрокаТЧ_Копи.Кратность = 0, 0, КоличествоЗаказано);

		Если СтрокаТЧ_Копи.Кратность <> 1 И СтрокаТЧ_Копи.Кратность <> 0 Тогда
			
			Если ЗначениеЗаполнено(СтрокаТЧ_Копи.Поставщик) Тогда
				Если СтрокаТЧ_Копи.ТипПрайса = 1 Тогда

					Если (КоличествоЗаказано - Цел(КоличествоЗаказано / СтрокаТЧ_Копи.Кратность) * СтрокаТЧ_Копи.Кратность) >= (Цел(СтрокаТЧ_Копи.Кратность * СтрокаТЧ_Копи.КоэфКратностиУпаковки) + 1) Тогда
						ЗаказатьУПоставщикаПоКратности = СтрокаТЧ_Копи.Кратность;
						ЕстьПроблема = 0;
					Иначе
						ЗаказатьУПоставщикаПоКратности = КоличествоЗаказано - Цел(КоличествоЗаказано / СтрокаТЧ_Копи.Кратность) * СтрокаТЧ_Копи.Кратность;
						ЕстьПроблема = Истина;
					КонецЕсли;

				Иначе
					
					Если (КоличествоЗаказано - Цел(КоличествоЗаказано / СтрокаТЧ_Копи.Кратность) * СтрокаТЧ_Копи.Кратность) >= (Цел(СтрокаТЧ_Копи.Кратность * СтрокаТЧ_Копи.КоэфКратностиУпаковки) + 1) Тогда
						ЗаказатьУПоставщикаПоКратности = СтрокаТЧ_Копи.Кратность;
						ЕстьПроблема = 0;
					Иначе
						ЗаказатьУПоставщикаПоКратности = КоличествоЗаказано - Цел(КоличествоЗаказано / СтрокаТЧ_Копи.Кратность) * СтрокаТЧ_Копи.Кратность;
						ЕстьПроблема = Истина;
					КонецЕсли;

				КонецЕсли; 
				
				ЗаказатьУПоставщикаПоКратности = ЗаказатьУПоставщикаПоКратности + Цел(КоличествоЗаказано / СтрокаТЧ_Копи.Кратность) * СтрокаТЧ_Копи.Кратность;
			
			КонецЕсли; 
		КонецЕсли; 
		
		Если фКолЗаказаМеньшеКратностиУпак И ЕстьПроблема__ = Ложь Тогда

			НаборЗапией = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
			НаборЗапией.Отбор.ID.Установить(СтрокаТЧ_Копи.ID);
			НаборЗапией.Прочитать();
			Если НаборЗапией.Количество() > 0 Тогда
				Если НЕ ЗначениеЗаполнено(НаборЗапией[0].Поставщик) И НаборЗапией[0].Сотрудник = ПараметрыСеанса.ТекущийПользователь Тогда
					del_НаборЗапией = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
					del_НаборЗапией.Отбор.ID.Установить(СтрокаТЧ_Копи.ID);
					del_НаборЗапией.Записать(Истина);
				Иначе
					НаборЗапией[0].Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
					НаборЗапией.Записать();
				КонецЕсли; 
			КонецЕсли; 
			НаборЗапией = "";

			ЕстьПроблема__ = Истина;
			Продолжить;

		КонецЕсли;

		СтрокаТД = фТабДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТД, СтрокаТЧ_Копи);
		СтрокаТД.ЕстьПроблема = ЕстьПроблема;
		СтрокаТД.Таб_ID = Строка(Новый УникальныйИдентификатор);
		СтрокаТД.КоличествоЗаказано = ЗаказатьУПоставщикаПоКратности;
		Если ЗначениеЗаполнено(СтрокаТД.Товар) Тогда
			СтрокаТД.ЭтоТовар = Истина;
		КонецЕсли;

		Отбор = Новый Структура;
		Отбор.Вставить("ТоварПоставщик", СтрокаТЧ_Копи.ТоварПоставщик);
		Строки = ТабДанныхКопи.НайтиСтроки(Отбор);
		Для каждого СтрокаТЧ Из Строки Цикл
			СтрокаРасшифровки = фТабРасшифровки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТЧ);
			СтрокаРасшифровки.Таб_ID = СтрокаТД.Таб_ID;
		КонецЦикла;

	КонецЦикла;

	фТабДанных.Сортировать("ЭтоТовар, НаименованиеТовара");

КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьТоварыПоГруппеЗакупки(Команда)

	Если Объект.табТовары.Количество() > 0 Тогда
		Если Вопрос("Очистить таблицу товаров?", РежимДиалогаВопрос.ДаНет, 20) = КодВозвратаДиалога.Да Тогда
			Объект.табТовары.Очистить();
		КонецЕсли; 
	КонецЕсли;

	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("НачальныеДанные", Объект.ТабГруппыЗакупки);
	ОткрытьФорму("Справочник.ГруппаЗакупки.Форма.ФормаПодбора", СтруктураПараметров, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ГруппаЗакупки.Форма.ФормаПодбора" Тогда
		ОбработкаЗаполненияТоваровПоГруппеЗакупкиНоменклатуры(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Концерны.Форма.ФормаПодбора" Тогда
		ОбработкаЗаполненияТоваровПоКонцерну(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Вендор.Форма.ФормаПодбора" Тогда
		ОбработкаЗаполненияТоваровПоПроизводителям(ВыбранноеЗначение);

	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ОбработкаЗаполненияТоваровПоГруппеЗакупкиНоменклатуры(ВыбранноеЗначение)

	Объект.ТабГруппыЗакупки.Загрузить(ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранногоВХранилище));
	Если Объект.ТабГруппыЗакупки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаГрупп", Объект.ТабГруппыЗакупки.выгрузить());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаГрупп.ГруппаЗакупки
		|ПОМЕСТИТЬ ВТ_ГруппыЗакупки
		|ИЗ
		|	&ТаблицаГрупп КАК ТаблицаГрупп
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГруппыЗакупкиНоменклатуры.Ссылка
		|ПОМЕСТИТЬ ВТ_Группы
		|ИЗ
		|	ВТ_ГруппыЗакупки КАК ВТ_ГруппыЗакупки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыЗакупкиНоменклатуры КАК ГруппыЗакупкиНоменклатуры
		|		ПО ВТ_ГруппыЗакупки.ГруппаЗакупки = ГруппыЗакупкиНоменклатуры.ГруппаЗакупки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Товар
		|ИЗ
		|	ВТ_Группы КАК ВТ_Группы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО ВТ_Группы.Ссылка = Номенклатура.ОсновнаяГруппаЗакупки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура.Наименование";
	РезультатЗапроса = Запрос.Выполнить();
	Если Объект.табТовары.Количество() = 0 Тогда
		Объект.табТовары.Загрузить(РезультатЗапроса.Выгрузить());
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаТЧ = Объект.табТовары.Добавить();
			СтрокаТЧ.Товар = ВыборкаДетальныеЗаписи.Товар;
		КонецЦикла;
		
		ТЧ = Объект.табТовары.Выгрузить();
		ТЧ.Свернуть("Товар", );
		Объект.табТовары.Загрузить(ТЧ);

	КонецЕсли; 

КонецПроцедуры // ОбработкаЗаполненияТоваровПоГруппеЗакупкиНоменклатуры()
&НаСервере
Процедура ОбработкаЗаполненияТоваровПоКонцерну(ВыбранноеЗначение)

	Объект.ТабКонцернов.Загрузить(ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранногоВХранилище));
	Если Объект.ТабКонцернов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаКонцернов", Объект.ТабКонцернов.выгрузить());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаКонцернов.Концерн
		|ПОМЕСТИТЬ ВТ_Концерны
		|ИЗ
		|	&ТаблицаКонцернов КАК ТаблицаКонцернов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Товар
		|ИЗ
		|	ВТ_Концерны КАК ВТ_Концерны
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО ВТ_Концерны.Концерн = Номенклатура.Концерн
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура.Наименование";
	РезультатЗапроса = Запрос.Выполнить();
	Если Объект.табТовары.Количество() = 0 Тогда
		Объект.табТовары.Загрузить(РезультатЗапроса.Выгрузить());
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаТЧ = Объект.табТовары.Добавить();
			СтрокаТЧ.Товар = ВыборкаДетальныеЗаписи.Товар;
		КонецЦикла;
		
		ТЧ = Объект.табТовары.Выгрузить();
		ТЧ.Свернуть("Товар", );
		Объект.табТовары.Загрузить(ТЧ);

	КонецЕсли; 

КонецПроцедуры // ОбработкаЗаполненияТоваровПоГруппеЗакупкиНоменклатуры()
&НаСервере
Процедура ОбработкаЗаполненияТоваровПоПроизводителям(ВыбранноеЗначение)

	Объект.ТабПроизводители.Загрузить(ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранногоВХранилище));
	Если Объект.ТабПроизводители.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПроизводителей", Объект.ТабПроизводители.выгрузить());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПроизводителей.Производитель
		|ПОМЕСТИТЬ ВТ_Производители
		|ИЗ
		|	&ТаблицаПроизводителей КАК ТаблицаПроизводителей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Товар
		|ИЗ
		|	ВТ_Производители КАК ВТ_Производители
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО ВТ_Производители.Производитель = Номенклатура.Производитель
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура.Наименование";
	РезультатЗапроса = Запрос.Выполнить();
	Если Объект.табТовары.Количество() = 0 Тогда
		Объект.табТовары.Загрузить(РезультатЗапроса.Выгрузить());
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаТЧ = Объект.табТовары.Добавить();
			СтрокаТЧ.Товар = ВыборкаДетальныеЗаписи.Товар;
		КонецЦикла;
		
		ТЧ = Объект.табТовары.Выгрузить();
		ТЧ.Свернуть("Товар", );
		Объект.табТовары.Загрузить(ТЧ);

	КонецЕсли; 

КонецПроцедуры // ОбработкаЗаполненияТоваровПоГруппеЗакупкиНоменклатуры()
&НаКлиенте
Процедура ЗаполнитьТоварыПоКонцерну(Команда)

	Если Объект.табТовары.Количество() > 0 Тогда
		Если Вопрос("Очистить таблицу товаров?", РежимДиалогаВопрос.ДаНет, 20) = КодВозвратаДиалога.Да Тогда
			Объект.табТовары.Очистить();
		КонецЕсли; 
	КонецЕсли;

	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("НачальныеДанные", Объект.ТабКонцернов);
	
	ОткрытьФорму("Справочник.Концерны.Форма.ФормаПодбора", СтруктураПараметров, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьТоварыПоПроизводителю(Команда)
	
	Если Объект.табТовары.Количество() > 0 Тогда
		Если Вопрос("Очистить таблицу товаров?", РежимДиалогаВопрос.ДаНет, 20) = КодВозвратаДиалога.Да Тогда
			Объект.табТовары.Очистить();
		КонецЕсли; 
	КонецЕсли;

	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("НачальныеДанные", Объект.ТабПроизводители);
	
	ОткрытьФорму("Справочник.Вендор.Форма.ФормаПодбора", СтруктураПараметров, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры
&НаКлиенте
Процедура фТоварыВОстаткеПриИзменении(Элемент)

	Элементы.фКоличествоТовара.Доступность = фТоварыВОстатке;

КонецПроцедуры
&НаКлиенте
Процедура фУчестьМаржуПриИзменении(Элемент)

	Элементы.ГруппаИнтервал.Доступность = фУчестьМаржу;

КонецПроцедуры
&НаКлиенте
Процедура фУчестьЦеныЗакупкиПриИзменении(Элемент)
	
	Элементы.ГруппаИнтервалЗакупки.Доступность = фУчестьЦеныЗакупки;
	
КонецПроцедуры
&НаКлиенте
Процедура фУчестьABSПриИзменении(Элемент)

	Элементы.ГруппаОтклонениеЦеныДанные.Доступность = фУчестьABS;

КонецПроцедуры


&НаКлиенте
Процедура Автозаказ(Команда)

	Если НЕ ПроверитьЗаполнениеСклада() Тогда
		Возврат;
	КонецЕсли;

	АвтозаказНаСервере();
	ПолучитьРаспределенныеДанные(Неопределено);


КонецПроцедуры
&НаСервере
Процедура АвтозаказНаСервере()
	
	УдалитьАвтораспределениеНаСервере();

	ОтборПоТовару = ?((МетодАвтораспределения = 1 И Объект.табТовары.Количество() > 0), Истина, Ложь);
	ОтборПоПоставщику = ?((МетодАвтораспределения = 1 И Объект.табПоставщики.Количество() > 0), Истина, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сотрудник", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ВыбСклады", Объект.табСклады.Выгрузить());
	Запрос.УстановитьПараметр("ВыбТовары", Объект.табТовары.Выгрузить());
	Запрос.УстановитьПараметр("ВыбПоставщики", Объект.табПоставщики.Выгрузить());
	Запрос.УстановитьПараметр("ТекДата", НачалоДня(ТекущаяДата()));

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВыбСклады.Склад КАК Склад
	               |ПОМЕСТИТЬ ВТ_Склады
	               |ИЗ
	               |	&ВыбСклады КАК ВыбСклады
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Склад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВыбТовары.Товар КАК Товар
	               |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	&ВыбТовары КАК ВыбТовары
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Товар
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВыбПоставщики.Поставщик КАК Поставщик
	               |ПОМЕСТИТЬ ВТ_Поставщики
	               |ИЗ
	               |	&ВыбПоставщики КАК ВыбПоставщики
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Поставщик
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	МестаХраненияПоДоговору.Поставщик КАК Поставщик,
	               |	МестаХраненияПоДоговору.Договор КАК Договор,
	               |	МестаХраненияПоДоговору.МестоХранения КАК Склад,
	               |	МестаХраненияПоДоговору.ТипПрайса КАК ТипПрайса,
				   |	МестаХраненияПоДоговору.ДатаОжидаемойПоставки КАК ДатаОжидаемойПоставки,
				   |	МестаХраненияПоДоговору.КратностьУпаковки КАК КратностьУпаковки,
				   |	Договора.МинСрокГодности КАК МинСрокГодности
				   |ПОМЕСТИТЬ ТабПоставщиковНаСклад
	               |ИЗ
	               |	ВТ_Склады КАК ВТ_Склады
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияПоДоговору КАК МестаХраненияПоДоговору
	               |		ПО ВТ_Склады.Склад = МестаХраненияПоДоговору.МестоХранения
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Поставщики КАК Поставщики
	               |		ПО (Поставщики.Поставщик = МестаХраненияПоДоговору.Поставщик)
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Договоры КАК Договора
	               |		ПО Договора.Ссылка = МестаХраненияПоДоговору.Договор

				   |	" + ?(ОтборПоПоставщику, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Поставщики КАК ВТ_Поставщики ПО (ВТ_Поставщики.Поставщик = Поставщики.Поставщик)", "") + "
	               |ГДЕ
	               |	МестаХраненияПоДоговору.Активный = ИСТИНА
	               |	И Договора.ПометкаУдаления = ЛОЖЬ
	               |	И Поставщики.Активно = ИСТИНА
	               |ИНДЕКСИРОВАТЬ ПО
	               |	МестаХраненияПоДоговору.Поставщик,
	               |	МестаХраненияПоДоговору.Договор,
	               |	МестаХраненияПоДоговору.МестоХранения,
	               |	МестаХраненияПоДоговору.ТипПрайса
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТемпАвтозаказ.Склад КАК Склад,
	               |	ТемпАвтозаказ.Товар КАК Товар,
	               |	ТемпАвтозаказ.Заказ КАК Заказ,
	               |	ТемпАвтозаказ.КлючСвязи КАК КлючСвязи,
	               |	СУММА(ТемпАвтозаказ.Потребность) КАК Потребность
	               |ПОМЕСТИТЬ Автозаказ
	               |ИЗ
	               |	РегистрСведений.ТемпАвтозаказ КАК ТемпАвтозаказ
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Склады КАК ВТ_Склады
	               |		ПО (ВТ_Склады.Склад = ТемпАвтозаказ.Склад)
				   |	" + ?(ОтборПоТовару, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары ПО (ВТ_Товары.Товар = ТемпАвтозаказ.Товар)", "") +  "
	               |СГРУППИРОВАТЬ ПО
	               |	ТемпАвтозаказ.Склад,
	               |	ТемпАвтозаказ.Товар,
	               |	ТемпАвтозаказ.Заказ,
	               |	ТемпАвтозаказ.КлючСвязи
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Склад,
	               |	Заказ,
	               |	КлючСвязи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДефектураОстатки.Склад КАК Склад,
	               |	ДефектураОстатки.Товар КАК Товар,
	               |	ДефектураОстатки.Заказ,
	               |	ДефектураОстатки.КлючСвязи,
	               |	СУММА(ДефектураОстатки.КоличествоОстаток) КАК Потребность
	               |ПОМЕСТИТЬ ОстаткиДефектуры_1
	               |ИЗ
	               |	РегистрНакопления.Дефектура.Остатки(
	               |			,
	               |			Склад В
	               |					(ВЫБРАТЬ
	               |						ВТ_Склады.Склад
	               |					ИЗ
	               |						ВТ_Склады КАК ВТ_Склады)
	               |				И Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
				   |" + ?(ОтборПоТовару, "
	               |				И Товар В
	               |					(ВЫБРАТЬ
	               |						ВТ_Товары.Товар
	               |					ИЗ
	               |						ВТ_Товары КАК ВТ_Товары)", "") + ") КАК ДефектураОстатки
	               |ГДЕ
	               |	ДефектураОстатки.КоличествоОстаток <> 0
	               |СГРУППИРОВАТЬ ПО
	               |	ДефектураОстатки.Склад,
	               |	ДефектураОстатки.Товар,
	               |	ДефектураОстатки.Заказ,
	               |	ДефектураОстатки.КлючСвязи
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Склад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОстаткиДефектуры_1.Товар,
	               |	ОстаткиДефектуры_1.Склад
	               |ПОМЕСТИТЬ ВТ_Дефектура
	               |ИЗ
	               |	ОстаткиДефектуры_1 КАК ОстаткиДефектуры_1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	               |		ПО ОстаткиДефектуры_1.Товар = Номенклатура.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОстаткиДефектуры_1.Склад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабПоставщиковНаСклад.Склад,
	               |	supplier_price.Поставщик КАК Поставщик,
	               |	supplier_price.Договор,
	               |	supplier_price.Товар КАК Товар,
	               |	supplier_price.Наименование,
	               |	supplier_price.Производитель,
	               |	supplier_price.price,
	               |	supplier_price.price_corr КАК КорректЦенаПоставщика,
	               |	supplier_price.cnt,
	               |	supplier_price.expiration,
	               |	supplier_price.КодПоставщика,
	               |	supplier_price.cnt_pack,
	               |	1 КАК КоэфДеления,
	               |	supplier_price.ТипПрайса,
	               |	ТабПоставщиковНаСклад.ДатаОжидаемойПоставки,
	               |	ТабПоставщиковНаСклад.МинСрокГодности,
	               |	ТабПоставщиковНаСклад.КратностьУпаковки
	               |ПОМЕСТИТЬ suppliers
	               |ИЗ
	               |	ТабПоставщиковНаСклад КАК ТабПоставщиковНаСклад
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.supplier_price КАК supplier_price
	               |		ПО ТабПоставщиковНаСклад.Поставщик = supplier_price.Поставщик
	               |			И ТабПоставщиковНаСклад.Договор = supplier_price.Договор
	               |			И ТабПоставщиковНаСклад.ТипПрайса = supplier_price.ТипПрайса
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БлокированныеПоставщики КАК БлокированныеПоставщики
	               |		ПО ТабПоставщиковНаСклад.Поставщик = БлокированныеПоставщики.Поставщик
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Дефектура КАК ВТ_Дефектура
	               |		ПО (ВТ_Дефектура.Товар = supplier_price.Товар)
	               |			И (ВТ_Дефектура.Склад = ТабПоставщиковНаСклад.Склад)
	               |ГДЕ
	               |	БлокированныеПоставщики.Разрешен = ИСТИНА
	               |	И НЕ supplier_price.Товар ЕСТЬ NULL
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТабПоставщиковНаСклад.Склад,
	               |	supplier_price.Поставщик,
	               |	supplier_price.Договор,
	               |	supplier_price.Товар,
	               |	supplier_price.Наименование,
	               |	supplier_price.Производитель,
	               |	ВЫРАЗИТЬ(supplier_price.price / Деление.Коэффициент КАК ЧИСЛО(12, 2)),
	               |	ВЫРАЗИТЬ(supplier_price.price_corr / Деление.Коэффициент КАК ЧИСЛО(12, 2)),
	               |	supplier_price.cnt * Деление.Коэффициент,
	               |	supplier_price.expiration,
	               |	supplier_price.КодПоставщика,
	               |	ВЫРАЗИТЬ(supplier_price.cnt_pack * Деление.Коэффициент КАК ЧИСЛО(12, 2)),
	               |	Деление.Коэффициент,
	               |	supplier_price.ТипПрайса,
	               |	ТабПоставщиковНаСклад.ДатаОжидаемойПоставки,
	               |	supplier_price.Договор.МинСрокГодности,
	               |	ТабПоставщиковНаСклад.КратностьУпаковки
	               |ИЗ
	               |	ВТ_Дефектура КАК ВТ_Дефектура
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Деление КАК Деление
	               |		ПО (Деление.ТоварПолучаемый = ВТ_Дефектура.Товар)
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.supplier_price КАК supplier_price
	               |		ПО ВТ_Дефектура.Товар = supplier_price.Товар
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабПоставщиковНаСклад КАК ТабПоставщиковНаСклад
	               |		ПО (ТабПоставщиковНаСклад.Поставщик = supplier_price.Поставщик)
	               |			И (ТабПоставщиковНаСклад.Договор = supplier_price.Договор)
	               |			И (ТабПоставщиковНаСклад.ТипПрайса = supplier_price.ТипПрайса)
	               |			И ВТ_Дефектура.Склад = ТабПоставщиковНаСклад.Склад
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БлокированныеПоставщики КАК БлокированныеПоставщики
	               |		ПО (ТабПоставщиковНаСклад.Поставщик = БлокированныеПоставщики.Поставщик)
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураДеленный
	               |		ПО (Деление.Владелец = НоменклатураДеленный.Ссылка)
	               |ГДЕ
	               |	Деление.ПометкаУдаления = ЛОЖЬ
	               |	И НЕ supplier_price.Товар ЕСТЬ NULL
	               |	И Деление.Коэффициент <> 0
	               |	И БлокированныеПоставщики.Разрешен = ИСТИНА
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Поставщик
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОстаткиДефектуры_1.Склад КАК Склад,
				   |	suppliers.Поставщик КАК Поставщик,
				   |	suppliers.Договор КАК Договор,
	               |	ОстаткиДефектуры_1.Товар КАК Товар,
	               |	suppliers.КодПоставщика КАК КодТовараПоставщика,
	               |	suppliers.Производитель,
	               |	ОстаткиДефектуры_1.Заказ КАК Заказ,
	               |	ОстаткиДефектуры_1.КлючСвязи КАК КлючСвязи,
	               |	suppliers.price КАК Цена,
	               |	suppliers.КорректЦенаПоставщика,
	               |	suppliers.cnt КАК ОстатокУ_Поставщика,
	               |	ОстаткиДефектуры_1.Потребность,
	               |	ВЫБОР
	               |		КОГДА suppliers.КратностьУпаковки = 1
	               |				ИЛИ suppliers.ТипПрайса = 1
	               |			ТОГДА ЕСТЬNULL(suppliers.cnt_pack, 1)
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Кратность,
	               |	suppliers.ДатаОжидаемойПоставки,
	               |	suppliers.expiration КАК СрокГодности_Прайс,
	               |	suppliers.КоэфДеления,
	               |	suppliers.ТипПрайса
	               |ПОМЕСТИТЬ ОстаткиДефектуры_темп
	               |ИЗ
	               |	ОстаткиДефектуры_1 КАК ОстаткиДефектуры_1
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ suppliers КАК suppliers
	               |		ПО ОстаткиДефектуры_1.Склад = suppliers.Склад
				   |		И ОстаткиДефектуры_1.Товар = suppliers.Товар
	               |ГДЕ
	               |	(suppliers.expiration ЕСТЬ NULL
	               |			ИЛИ suppliers.МинСрокГодности ЕСТЬ НЕ NULL 
	               |				И suppliers.expiration >= ДОБАВИТЬКДАТЕ(&ТекДата, ДЕНЬ, suppliers.МинСрокГодности)
	               |			ИЛИ suppliers.МинСрокГодности ЕСТЬ NULL
	               |				И suppliers.expiration >= ДОБАВИТЬКДАТЕ(&ТекДата, ДЕНЬ, 6))
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Склад,
	               |	Поставщик,
	               |	Заказ,
	               |	КлючСвязи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОстаткиДефектуры_темп.Склад КАК Склад,
				   |	ОстаткиДефектуры_темп.Поставщик КАК Поставщик,
				   |	ОстаткиДефектуры_темп.Договор КАК Договор,
	               |	ОстаткиДефектуры_темп.Товар КАК Товар,
	               |	ОстаткиДефектуры_темп.КодТовараПоставщика,
	               |	ОстаткиДефектуры_темп.Производитель,
	               |	ОстаткиДефектуры_темп.Заказ КАК Заказ,
	               |	ОстаткиДефектуры_темп.КлючСвязи КАК КлючСвязи,
	               |	ОстаткиДефектуры_темп.Цена,
	               |	ОстаткиДефектуры_темп.КорректЦенаПоставщика,
	               |	ОстаткиДефектуры_темп.ОстатокУ_Поставщика,
	               |	ОстаткиДефектуры_темп.Потребность - ЕСТЬNULL(Автозаказ.Потребность, 0) КАК Потребность,
	               |	ОстаткиДефектуры_темп.Кратность,
	               |	ОстаткиДефектуры_темп.ДатаОжидаемойПоставки,
	               |	ОстаткиДефектуры_темп.СрокГодности_Прайс,
	               |	ОстаткиДефектуры_темп.КоэфДеления,
	               |	ОстаткиДефектуры_темп.ТипПрайса
	               |ПОМЕСТИТЬ ОстаткиДефектуры
	               |ИЗ
	               |	ОстаткиДефектуры_темп КАК ОстаткиДефектуры_темп
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Автозаказ КАК Автозаказ
	               |		ПО ОстаткиДефектуры_темп.Склад = Автозаказ.Склад
	               |			И ОстаткиДефектуры_темп.Товар = Автозаказ.Товар
	               |			И ОстаткиДефектуры_темп.Заказ = Автозаказ.Заказ
	               |			И ОстаткиДефектуры_темп.КлючСвязи = Автозаказ.КлючСвязи
	               |ГДЕ
	               |	ОстаткиДефектуры_темп.Потребность - ЕСТЬNULL(Автозаказ.Потребность, 0) > 0
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Склад,
	               |	Поставщик,
	               |	Заказ,
	               |	КлючСвязи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОстаткиДефектуры.Склад,
	               |	ОстаткиДефектуры.Поставщик,
				   |	ОстаткиДефектуры.Договор,
	               |	ОстаткиДефектуры.Товар,
	               |	ОстаткиДефектуры.КодТовараПоставщика,
	               |	ОстаткиДефектуры.Заказ,
	               |	ОстаткиДефектуры.КлючСвязи,
	               |	ОстаткиДефектуры.Потребность,
	               |	ОстаткиДефектуры.Цена,
	               |	ОстаткиДефектуры.КорректЦенаПоставщика,
	               |	ОстаткиДефектуры.ОстатокУ_Поставщика,
	               |	ОстаткиДефектуры.СрокГодности_Прайс,
	               |	ОстаткиДефектуры.ДатаОжидаемойПоставки,
	               |	ОстаткиДефектуры.КоэфДеления,
	               |	ОстаткиДефектуры.ТипПрайса
	               |ПОМЕСТИТЬ ВТ_РезультатЗапроса
	               |ИЗ
	               |	ОстаткиДефектуры КАК ОстаткиДефектуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_РезультатЗапроса.Склад,
				   |	ВТ_РезультатЗапроса.Поставщик,
				   |	ВТ_РезультатЗапроса.Договор,
	               |	ВТ_РезультатЗапроса.Товар,
	               |	ВТ_РезультатЗапроса.КодТовараПоставщика,
	               |	ВТ_РезультатЗапроса.Заказ,
	               |	ВТ_РезультатЗапроса.КлючСвязи,
	               |	ВТ_РезультатЗапроса.Потребность,
	               |	ВТ_РезультатЗапроса.Цена,
	               |	ВТ_РезультатЗапроса.КорректЦенаПоставщика,
	               |	ВТ_РезультатЗапроса.ОстатокУ_Поставщика,
	               |	ВТ_РезультатЗапроса.СрокГодности_Прайс,
	               |	ВТ_РезультатЗапроса.ДатаОжидаемойПоставки,
	               |	ВТ_РезультатЗапроса.КоэфДеления,
	               |	ВТ_РезультатЗапроса.ТипПрайса
	               |ИЗ
	               |	ВТ_РезультатЗапроса КАК ВТ_РезультатЗапроса
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВТ_РезультатЗапроса.Склад,
	               |	ВТ_РезультатЗапроса.Товар,
	               |	ВТ_РезультатЗапроса.КорректЦенаПоставщика,
	               |	ВТ_РезультатЗапроса.Цена,
	               |	ВТ_РезультатЗапроса.СрокГодности_Прайс";
	ТабПредЗаказа = Запрос.Выполнить().Выгрузить();

	Запрос.Текст = "
		|ВЫБРАТЬ Различные
		|	ВТ_РезультатЗапроса.Склад,
		|	ВТ_РезультатЗапроса.Товар,
		|	ВТ_РезультатЗапроса.Заказ,
		|	ВТ_РезультатЗапроса.КлючСвязи,
		|	ВТ_РезультатЗапроса.Потребность КАК Потребность
		|Из ВТ_РезультатЗапроса
		|";
	ТабТоварыЗаказы = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТовар Из ТабТоварыЗаказы Цикл
		
		ПотребностьОсталосьРазобрать = СтрокаТовар.Потребность;
		ДатаДоставкиЗаказа = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТовар.Заказ) Тогда
			ДатаДоставкиЗаказа = СтрокаТовар.Заказ.ДатаДоставки;
		КонецЕсли; 

		Отбор = Новый Структура;
		Отбор.Вставить("Товар", СтрокаТовар.Товар);
		Отбор.Вставить("Склад", СтрокаТовар.Склад);
		Отбор.Вставить("Заказ", СтрокаТовар.Заказ);
		Отбор.Вставить("КлючСвязи", СтрокаТовар.КлючСвязи);

		Строки = ТабПредЗаказа.НайтиСтроки(Отбор);
		Для каждого СтрокаТЧ Из Строки Цикл
			
			Если СтрокаТЧ.ОстатокУ_Поставщика = 0 Тогда
				Продолжить;
			КонецЕсли;

			Если ДатаДоставкиЗаказа <> Неопределено Тогда
				Если СтрокаТЧ.ДатаОжидаемойПоставки > ДатаДоставкиЗаказа Тогда
					// Товар от поставщика будет доставлен позже даты доставки. такой не нужен
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 

			колПотребность = Мин(ПотребностьОсталосьРазобрать, СтрокаТЧ.ОстатокУ_Поставщика);

			НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьМенеджерЗаписи();
			НаборЗаписей.ID = Новый УникальныйИдентификатор;
			НаборЗаписей.Склад = СтрокаТовар.Склад;
			НаборЗаписей.Товар = СтрокаТовар.Товар;
			НаборЗаписей.Поставщик = СтрокаТЧ.Поставщик;
			НаборЗаписей.Договор = СтрокаТЧ.Договор;
			НаборЗаписей.КодТовараПоставщика = СтрокаТЧ.КодТовараПоставщика;
			НаборЗаписей.Цена = СтрокаТЧ.Цена;
			НаборЗаписей.Потребность = колПотребность;
			НаборЗаписей.Заказано = колПотребность;
			НаборЗаписей.Заказ = СтрокаТовар.Заказ;
			НаборЗаписей.КлючСвязи = СтрокаТовар.КлючСвязи;
			НаборЗаписей.КоэфДеления = СтрокаТЧ.КоэфДеления;
			НаборЗаписей.ТипПрайса = СтрокаТЧ.ТипПрайса;
			НаборЗаписей.Записать();

			СтрокаТЧ.ОстатокУ_Поставщика = СтрокаТЧ.ОстатокУ_Поставщика - колПотребность;
			ПотребностьОсталосьРазобрать = ПотребностьОсталосьРазобрать - колПотребность;
			Если ПотребностьОсталосьРазобрать <= 0 Тогда
				Прервать;
			КонецЕсли;

		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура фТабПрайсПоставщикаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура фТабДанныхПриАктивизацииСтроки(Элемент)

	Если Элементы.фТабДанных.ТекущиеДанные = Неопределено Тогда
		фТекущийТовар = "";
		Возврат;
	КонецЕсли;
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиТаблТоваров", 0.001, Истина);

КонецПроцедуры
&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиТаблТоваров()

	фТекущийТовар = Элементы.фТабДанных.ТекущиеДанные.НаименованиеТовара;
	ЗаполнитьДанныеПрайсаПоставщикаНаКлиенте(Элементы.фТабДанных.ТекущиеДанные.Таб_ID);
	
	Элементы.фТабДанныхПоставщик.СписокВыбора.Очистить();
	Элементы.фТабДанныхПоставщик.СписокВыбора.Добавить("", "<< УДАЛИТЬ поставщика >>");
	Элементы.фТабДанныхПоставщик.СписокВыбора.Добавить("ПоНаименованиюТовара", "Выбрать по наименованию товара");
	Если фТабПрайсПоставщика.Количество() > 0 Тогда
		Для каждого СтрокаТЧ Из фТабПрайсПоставщика Цикл
			Элементы.фТабДанныхПоставщик.СписокВыбора.Добавить(СтрокаТЧ.ID, Строка(СтрокаТЧ.Поставщик) + " (Крат. = " + Строка(СтрокаТЧ.КратностьУпаковки) + ")");
		КонецЦикла;
	КонецЕсли;
	ЗаполнитьДанныеИсточникиДефектуры(Элементы.фТабДанных.ТекущиеДанные.Таб_ID);

КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьДанныеПрайсаПоставщикаНаКлиенте(Таб_ID);

	фТабПрайсПоставщика.Очистить();
	Если НЕ Элементы.ГруппаДанныеПрайса.Видимость Тогда
		Возврат ;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Таб_ID", Таб_ID);

	Отбор = Новый Структура;
	Отбор.Вставить("Таб_ID", Таб_ID);
	Строки = фТабДанных.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы.Вставить("слкТовар", Строки[0].Товар);
	ПараметрыФормы.Вставить("слкСклад", Строки[0].Склад);
	ПараметрыФормы.Вставить("УникальныйИдентификатор", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы.Вставить("фТабПрайсПоставщика", фТабПрайсПоставщика);

	ЗаполнитьДанныеПрайсаПоставщика(ПараметрыФормы, АдресХранилища);
	Если фТабПрайсПоставщика.Количество() > 0 Тогда
		Элементы.фТабПрайсПоставщика.ТекущаяСтрока = 0;
		ЭтаФорма.Элементы.фТабПрайсПоставщика.ТекущаяСтрока = 1;
	КонецЕсли; 

КонецПроцедуры
&НаСервере
Процедура ЗаполнитьДанныеПрайсаПоставщика(ПараметрыФормы, АдресХранилища)

	Таб_ID = ПараметрыФормы.Таб_ID;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата", Дата(2000, 1, 1));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("слкТовар", ПараметрыФормы.слкТовар);
	Запрос.УстановитьПараметр("слкСклад", ПараметрыФормы.слкСклад);

	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Деление.ТоварПолучаемый КАК Товар,
		|	Деление.Коэффициент КАК Коэффициент
		|ПОМЕСТИТЬ ТабТоваров
		|ИЗ
		|	Справочник.Деление КАК Деление
		|ГДЕ
		|	Деление.ПометкаУдаления = ЛОЖЬ
		|	И Деление.Владелец = &слкТовар
		|	И Деление.ТоварПолучаемый <> &слкТовар
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	1
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &слкТовар
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	pc1.Поставщик,
		|	pc1.Договор,
		|	pc1.ТипПрайса,
		|	pc1.ТипПоставки,
		|	pc1.ЦенаУпаковки КАК Цена_1,
		|	МИНИМУМ(ЕСТЬNULL(pc2.ЦенаУпаковки, 999999999)) - 0.01 КАК Цена_2,
		|	pc1.Коэффициент
		|ПОМЕСТИТЬ ТабКоэффициентовКратности
		|ИЗ
		|	РегистрСведений.ПроцентДозаказаУпаковка КАК pc1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентДозаказаУпаковка КАК pc2
		|		ПО pc1.Поставщик = pc2.Поставщик
		|			И pc1.Договор = pc2.Договор
		|			И pc1.МестоХранения = pc2.МестоХранения
		|			И pc1.ТипПрайса = pc2.ТипПрайса
		|			И pc1.ТипПоставки = pc2.ТипПоставки
		|			И pc1.ЦенаУпаковки < pc2.ЦенаУпаковки
		|ГДЕ
		|	pc1.МестоХранения = &слкСклад
		|	И pc2.МестоХранения = &слкСклад
		|
		|СГРУППИРОВАТЬ ПО
		|	pc1.Поставщик,
		|	pc1.Договор,
		|	pc1.ТипПрайса,
		|	pc1.ТипПоставки,
		|	pc1.ЦенаУпаковки,
		|	pc1.Коэффициент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МестаХраненияПоДоговору.Поставщик КАК Поставщик,
		|	МестаХраненияПоДоговору.Договор КАК Договор,
		|	МестаХраненияПоДоговору.КратностьУпаковки КАК КратностьУпаковки,
		|	МестаХраненияПоДоговору.ТипПрайса КАК ТипПрайса,
		|	МестаХраненияПоДоговору.ТипПоставки КАК ТипПоставки
		|ПОМЕСТИТЬ ТабПоставщиковНаСклад
		|ИЗ
		|	РегистрСведений.МестаХраненияПоДоговору КАК МестаХраненияПоДоговору
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Поставщики КАК Поставщики
		|		ПО (Поставщики.Поставщик = МестаХраненияПоДоговору.Поставщик)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Договоры КАК Договора
		|		ПО (Договора.Ссылка = МестаХраненияПоДоговору.Договор)
		|ГДЕ
		|	МестаХраненияПоДоговору.Активный = ИСТИНА
		|	И Договора.ПометкаУдаления = ЛОЖЬ
		|	И Поставщики.Активно = ИСТИНА
		|	И МестаХраненияПоДоговору.МестоХранения = &слкСклад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	supplier_price.Поставщик КАК Поставщик,
		|	supplier_price.Договор,
		|	supplier_price.Товар КАК Товар,
		|	ВЫРАЗИТЬ(supplier_price.cnt * ТабТоваров.Коэффициент КАК ЧИСЛО(15, 3)) КАК КолВНаличии,
		|	ВЫРАЗИТЬ(supplier_price.cnt_pack * ТабТоваров.Коэффициент КАК ЧИСЛО(5, 0)) КАК КратностьУпаковки,
		|	ВЫБОР
		|		КОГДА supplier_price.expiration > &ПустаяДата
		|			ТОГДА supplier_price.expiration
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, 3)
		|	КОНЕЦ КАК СрокГодности,
		|	ВЫРАЗИТЬ(supplier_price.price / ТабТоваров.Коэффициент КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ВЫРАЗИТЬ(supplier_price.price_corr / ТабТоваров.Коэффициент КАК ЧИСЛО(15, 2)) КАК ЦенаКратности,
		|	supplier_price.КодПоставщика КАК КодТовараПоставщика,
		|	ТабТоваров.Коэффициент КАК КоэфДеления,
		|	supplier_price.ТипПрайса,
		|	supplier_price.Производитель КАК Производитель,
		|	supplier_price.Наименование КАК НаименованиеТовараПоставщика,
		|	0 КАК РасчетнаяНаценка
		|ИЗ
		|	ТабТоваров КАК ТабТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.supplier_price КАК supplier_price
		|		ПО ТабТоваров.Товар = supplier_price.Товар
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабПоставщиковНаСклад КАК ТабПоставщиковНаСклад
		|		ПО (supplier_price.Поставщик = ТабПоставщиковНаСклад.Поставщик)
		|			И (supplier_price.Договор = ТабПоставщиковНаСклад.Договор)
		|			И (supplier_price.ТипПрайса = ТабПоставщиковНаСклад.ТипПрайса)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабКоэффициентовКратности КАК ТабКоэффициентовКратности
		|			ПО (supplier_price.price МЕЖДУ ТабКоэффициентовКратности.Цена_1 И ТабКоэффициентовКратности.Цена_2)
		|			И (supplier_price.Поставщик = ТабКоэффициентовКратности.Поставщик)
		|			И (supplier_price.Договор = ТабКоэффициентовКратности.Договор)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Цена,
		|	СрокГодности,
		|	КолВНаличии";

//	фТабПрайсПоставщика.Загрузить(Запрос.Выполнить().Выгрузить());
	фТабПрайсПоставщика.Очистить();
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		
		СтрокаТЧ = фТабПрайсПоставщика.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, РезультатЗапроса);
		СтрокаТЧ.ID = Строка(Новый УникальныйИдентификатор);

	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоставщиковПоНаименованиюТовара(ПараметрыФормы)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата", Дата(2000, 1, 1));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

	Запрос.УстановитьПараметр("ЧастьНаименования", "%" + СокрЛП(СтрЗаменить(СокрЛП(ПараметрыФормы.ЧастьНаименования), " ", "%")) + "%");
	Запрос.УстановитьПараметр("слкСклад", ПараметрыФормы.слкСклад);

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	МестаХраненияПоДоговору.Поставщик КАК Поставщик,
	               |	МестаХраненияПоДоговору.Договор КАК Договор,
	               |	МестаХраненияПоДоговору.КратностьУпаковки КАК КратностьУпаковки,
	               |	МестаХраненияПоДоговору.ТипПрайса КАК ТипПрайса,
	               |	МестаХраненияПоДоговору.ТипПоставки КАК ТипПоставки
	               |ПОМЕСТИТЬ ТабПоставщиковНаСклад
	               |ИЗ
	               |	РегистрСведений.МестаХраненияПоДоговору КАК МестаХраненияПоДоговору
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Поставщики КАК Поставщики
	               |		ПО (Поставщики.Поставщик = МестаХраненияПоДоговору.Поставщик)
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Договоры КАК Договора
	               |		ПО (Договора.Ссылка = МестаХраненияПоДоговору.Договор)
	               |ГДЕ
	               |	МестаХраненияПоДоговору.Активный = ИСТИНА
	               |	И Договора.ПометкаУдаления = ЛОЖЬ
	               |	И Поставщики.Активно = ИСТИНА
	               |	И МестаХраненияПоДоговору.МестоХранения = &слкСклад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	supplier_price.Поставщик КАК Поставщик,
	               |	supplier_price.Договор,
	               |	supplier_price.Товар КАК Товар,
	               |	ВЫРАЗИТЬ(supplier_price.cnt КАК ЧИСЛО(15, 3)) КАК КолВНаличии,
	               |	ВЫРАЗИТЬ(supplier_price.cnt_pack КАК ЧИСЛО(5, 0)) КАК КратностьУпаковки,
	               |	ВЫБОР
	               |		КОГДА supplier_price.expiration > &ПустаяДата
	               |			ТОГДА supplier_price.expiration
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, 3)
	               |	КОНЕЦ КАК СрокГодности,
	               |	ВЫРАЗИТЬ(supplier_price.price КАК ЧИСЛО(15, 2)) КАК Цена,
	               |	ВЫРАЗИТЬ(supplier_price.price_corr КАК ЧИСЛО(15, 2)) КАК ЦенаКратности,
	               |	supplier_price.КодПоставщика КАК КодТовараПоставщика,
	               |	1 КАК КоэфДеления,
	               |	supplier_price.ТипПрайса,
	               |	supplier_price.Производитель КАК Производитель,
	               |	supplier_price.Наименование КАК НаименованиеТовараПоставщика,
	               |	0 КАК РасчетнаяНаценка
	               |ИЗ
	               |	РегистрСведений.supplier_price КАК supplier_price
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабПоставщиковНаСклад КАК ТабПоставщиковНаСклад
	               |		ПО supplier_price.Поставщик = ТабПоставщиковНаСклад.Поставщик
	               |			И supplier_price.Договор = ТабПоставщиковНаСклад.Договор
	               |			И supplier_price.ТипПрайса = ТабПоставщиковНаСклад.ТипПрайса
	               |ГДЕ
	               |	supplier_price.Наименование ПОДОБНО &ЧастьНаименования
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Цена,
	               |	СрокГодности,
	               |	КолВНаличии";

	фТабПрайсПоставщика.Очистить();
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл

		СтрокаТЧ = фТабПрайсПоставщика.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, РезультатЗапроса);
		СтрокаТЧ.ID = Строка(Новый УникальныйИдентификатор);

	КонецЦикла; 

КонецПроцедуры



&НаСервере
Процедура ЗаполнитьДанныеИсточникиДефектуры(Таб_ID)

	фТабЗаказыТовараПодЗаказ.Очистить();

	Отбор = Новый Структура;
	Отбор.Вставить("Таб_ID", Таб_ID);
	Строки = фТабРасшифровки.НайтиСтроки(Отбор);
	Для каждого СтрокаРасшифровки Из Строки Цикл
	
		СтрокаИсточника = фТабЗаказыТовараПодЗаказ.Добавить();
		СтрокаИсточника.Таб_ID = Таб_ID;
		СтрокаИсточника.Заказ = ?(ЗначениеЗаполнено(СтрокаРасшифровки.Заказ), СтрокаРасшифровки.Заказ, "Заявка");
		СтрокаИсточника.Потребность = СтрокаРасшифровки.Потребность;
		СтрокаИсточника.КоличествоЗаказано = СтрокаРасшифровки.КоличествоЗаказано;

	КонецЦикла; 

КонецПроцедуры // ЗаполнитьДанныеИсточникиДефектуры(Элементы.фТабДанных.ТекущиеДанные.Таб_ID)()
 

&НаКлиенте
Процедура фТабПрайсПоставщикаПриАктивизацииСтроки(Элемент)

	Если Элементы.фТабПрайсПоставщика.ТекущиеДанные = Неопределено Тогда
		фТекущийТоварПоставщика = "";
		Возврат;
	КонецЕсли;

	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиТоваровПоставщика", 0.001, Истина);

КонецПроцедуры
&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиТоваровПоставщика()

	фТекущийТоварПоставщика = "";
	Если НЕ Элементы.фТабПрайсПоставщика.ТекущиеДанные = Неопределено Тогда

		фТекущийТоварПоставщика = Элементы.фТабПрайсПоставщика.ТекущиеДанные.НаименованиеТовараПоставщика;

	КонецЕсли; 

КонецПроцедуры


&НаКлиенте
Процедура фТабДанныхПередУдалением(Элемент, Отказ)

	Если Элементы.фТабДанных.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Текущий_Таб_ID = Элементы.фТабДанных.ТекущиеДанные.Таб_ID;
	ПодключитьОбработчикОжидания("ОбработатьТабДанныхПередУдалением", 0.0001, Истина);
	фТабПрайсПоставщика.Очистить();
	
	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура _ОбработатьТабДанныхПередУдалением()

	фТабДанныхПередУдалениемНаСервере(Текущий_Таб_ID);

КонецПроцедуры
&НаСервере
Процедура фТабДанныхПередУдалениемНаСервере(Таб_ID)

	Отбор = Новый Структура;
	Отбор.Вставить("Таб_ID", Таб_ID);
	Строки = фТабРасшифровки.НайтиСтроки(Отбор);
	Для каждого СтрокаТЧ Из Строки Цикл

		НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(ПараметрыСеанса.ТекущийПользователь);
		НаборЗаписей.Отбор.Поставщик.Установить(Справочники.Контрагенты.ПустаяСсылка());
		НаборЗаписей.Отбор.ID.Установить(СтрокаТЧ.ID);
		НаборЗаписей.Записать();
		НаборЗаписей = "";

		НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ID.Установить(СтрокаТЧ.ID);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей[0].Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
			НаборЗаписей.Записать();
		КонецЕсли;
		НаборЗаписей = "";
		
		фТабРасшифровки.Удалить(СтрокаТЧ);

	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьТабДанныхПередУдалением()

	Отбор = Новый Структура;
	ВыделенныеСтроки = Элементы.фТабДанных.ВыделенныеСтроки;
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТЧ = фТабДанных.НайтиПоИдентификатору(ТекущаяСтрока);
		Таб_ID = СтрокаТЧ.Таб_ID;
		фТабДанныхПередУдалениемНаСервере(Таб_ID);
		фТабДанных.Удалить(СтрокаТЧ);

		
		//Таб_ID = Элементы.фТабДанных.ДанныеСтроки(ТекущаяСтрока).Таб_ID;
		//
		//
		//фТабДанныхПередУдалениемНаСервере(Таб_ID);

		//Отбор.Вставить("Таб_ID", Таб_ID);
		//Строки = фТабДанных.НайтиСтроки(Отбор);
		//Для каждого СтрокаТЧ Из Строки Цикл
		//	фТабДанных.Удалить(СтрокаТЧ);
		//КонецЦикла;
		//Отбор.Очистить();

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура фТабПрайсПоставщикаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если Элементы.фТабДанных.ТекущиеДанные = Неопределено ИЛИ Элементы.фТабПрайсПоставщика.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	фЗаменитьПоставщика(Элементы.фТабПрайсПоставщика.ТекущиеДанные.ID, Элементы.фТабДанных.ТекущиеДанные.Таб_ID);
	ЗаполнитьДанныеИсточникиДефектуры(Элементы.фТабДанных.ТекущиеДанные.Таб_ID);

	Если НЕ ЗначениеЗаполнено(Элементы.фТабПрайсПоставщика.ТекущиеДанные.Товар) Тогда

		стрСообщение = "Хотите произвести согласование товара '" + СокрЛП(Элементы.фТабДанных.ТекущиеДанные.НаименованиеТовара) + "' с товаром поставщика '" + СокрЛП(Элементы.фТабПрайсПоставщика.ТекущиеДанные.НаименованиеТовараПоставщика) + "' ?";
		ПараметрыСогласования = Новый Структура;
		ПараметрыСогласования.Вставить("Поставщик", Элементы.фТабПрайсПоставщика.ТекущиеДанные.Поставщик);
		ПараметрыСогласования.Вставить("Договор", Элементы.фТабДанных.ТекущиеДанные.Договор);
		ПараметрыСогласования.Вставить("КодТовараПоставщика", Элементы.фТабПрайсПоставщика.ТекущиеДанные.КодТовараПоставщика);
		ПараметрыСогласования.Вставить("НаименованиеТовараПоставщика", Элементы.фТабПрайсПоставщика.ТекущиеДанные.НаименованиеТовараПоставщика);
		ПараметрыСогласования.Вставить("Товар", Элементы.фТабДанных.ТекущиеДанные.Товар);
		ПоказатьВопрос(Новый ОписаниеОповещения("СогласоватьТоварПоставщика", ЭтаФорма, ПараметрыСогласования), стрСообщение, РежимДиалогаВопрос.ДаНет, 20);

	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура СогласоватьТоварПоставщика(Результат, ПараметрыСогласования) Экспорт

    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	СогласоватьТоварПоставщикаНаСервере(ПараметрыСогласования);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СогласоватьТоварПоставщикаНаСервере(ПараметрыСогласования)

	НаборЗаписей = РегистрыСведений.ТоварыПоставщика.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Поставщик.Установить(ПараметрыСогласования.Поставщик);
	НаборЗаписей.Отбор.КодТовараПоставщика.Установить(ПараметрыСогласования.КодТовараПоставщика);
	НаборЗаписей.Отбор.Товар.Установить(ПараметрыСогласования.Товар);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда

		Запись = РегистрыСведений.ТоварыПоставщика.СоздатьМенеджерЗаписи();
		Запись.Поставщик = ПараметрыСогласования.Поставщик;
		Запись.КодТовараПоставщика = ПараметрыСогласования.КодТовараПоставщика;
		Запись.Наименование = ПараметрыСогласования.НаименованиеТовараПоставщика;
		Запись.Товар = ПараметрыСогласования.Товар;
		Запись.Записать();
		Запись = "";

	КонецЕсли; 
	НаборЗаписей = "";

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПрайсЛистПоставщика.Поставщик,
		|	ПрайсЛистПоставщика.Договор,
		|	ПрайсЛистПоставщика.КодПоставщика,
		|	ПрайсЛистПоставщика.Товар,
		|	ПрайсЛистПоставщика.ТипПрайса,
		|	ПрайсЛистПоставщика.Цена КАК price,
		|	ПрайсЛистПоставщика.Цена КАК price_corr,
		|	ПрайсЛистПоставщика.Остаток КАК cnt,
		|	ПрайсЛистПоставщика.СрокГодности КАК expiration,
		|	ПрайсЛистПоставщика.Наименование,
		|	ПрайсЛистПоставщика.Производитель,
		|	ПрайсЛистПоставщика.КолВУпаковке КАК cnt_pack
		|ИЗ
		|	РегистрСведений.ПрайсЛистПоставщика КАК ПрайсЛистПоставщика
		|ГДЕ
		|	ПрайсЛистПоставщика.Поставщик = &Поставщик
		|	И ПрайсЛистПоставщика.Договор = &Договор
		|	И ПрайсЛистПоставщика.Товар = &Товар
		|	И ПрайсЛистПоставщика.КодПоставщика = &КодПоставщика";

	Запрос.УстановитьПараметр("Договор", ПараметрыСогласования.Договор);
	Запрос.УстановитьПараметр("КодПоставщика", ПараметрыСогласования.КодТовараПоставщика);
	Запрос.УстановитьПараметр("Поставщик", ПараметрыСогласования.Поставщик);
	Запрос.УстановитьПараметр("Товар", ПараметрыСогласования.Товар);

	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если НЕ РезультатЗапроса.Следующий() Тогда
	
		НаборЗаписей = РегистрыСведений.supplier_price.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Поставщик.Установить(ПараметрыСогласования.Поставщик);
		НаборЗаписей.Отбор.Договор.Установить(ПараметрыСогласования.Договор);
		НаборЗаписей.Отбор.КодПоставщика.Установить(ПараметрыСогласования.КодТовараПоставщика);
		НаборЗаписей.Отбор.Товар.Установить(ПараметрыСогласования.Товар);
		
		НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
		НаборЗаписей.Записать();
		НаборЗаписей = "";
	
	КонецЕсли; 
	

	//
	//НаборЗаписей = РегистрыСведений.supplier_price.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Поставщик.Установить(ПараметрыСогласования.Поставщик);
	//НаборЗаписей.Отбор.Поставщик.Установить(ПараметрыСогласования.Поставщик);
	//
	//НаборЗаписей.Прочитать();
	//Если НаборЗаписей.Количество() > 0 Тогда
	//	НаборЗаписей[0].Заказано = СтрокаРасшифровки.КоличествоЗаказано;
	//	НаборЗаписей[0].Поставщик = Справочники.Контрагенты.ПустаяСсылка();
	//	НаборЗаписей[0].Договор = Справочники.Договоры.ПустаяСсылка();
	//	НаборЗаписей[0].Заказ = Документы.Заказ.ПустаяСсылка();
	//	НаборЗаписей[0].КлючСвязи = "";
	//	НаборЗаписей[0].Цена = 0;
	//	НаборЗаписей[0].КоэфДеления = 0;
	//	НаборЗаписей[0].ТипПрайса = 0;
	//	НаборЗаписей[0].КодТовараПоставщика = "";
	//	НаборЗаписей.Записать();
	//КонецЕсли; 
	//НаборЗаписей = "";
	
	
	
КонецПроцедуры


&НаСервере
Процедура УстановитьНовоеКоличествоЗаказано(ТекЗнач, Строка_ТабДанных)

	Отбор = Новый Структура;
	Отбор.Вставить("Таб_ID", Строка_ТабДанных.Таб_ID);
	Строки = фТабРасшифровки.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	староеЗначение = 0;
	ВсегоПотребность = 0;
	Для каждого СтрокаРасшифровки Из Строки Цикл
		староеЗначение = староеЗначение + СтрокаРасшифровки.КоличествоЗаказано;
		ВсегоПотребность = ВсегоПотребность + СтрокаРасшифровки.Потребность;
	КонецЦикла;

	Если ТекЗнач = староеЗначение Тогда
		Возврат;
	КонецЕсли; 

//	староеЗначение = Строка_ТабДанных.КоличествоЗаказано;
	Если ТекЗнач < староеЗначение Тогда
		// Новое значение меньше чем было
		// 1. уменьшаем свободную дефектуру (заявки), при пустом количестве удаляем запись
		// 2. если останется нераспределенное количество - разбиваем строку

		Если ТекЗнач = 0 Тогда
			// Очищаем все до нуля

			Для каждого СтрокаРасшифровки Из Строки Цикл
				Если СтрокаРасшифровки.Потребность = 0 Тогда

					НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ID.Установить(СтрокаРасшифровки.ID);
					НаборЗаписей.Записать();
					НаборЗаписей = "";
					фТабРасшифровки.Удалить(СтрокаРасшифровки);

				Иначе
					
					СтрокаРасшифровки.КоличествоЗаказано = 0;
					СтрокаРасшифровки.КолНераспредДеф = СтрокаРасшифровки.ПодЗаявку - ?(СтрокаРасшифровки.ПодЗаказ <> 0, СтрокаРасшифровки.ПодЗаявку, СтрокаРасшифровки.КоличествоЗаказано);
					
					НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ID.Установить(СтрокаРасшифровки.ID);
					НаборЗаписей.Прочитать();
					Если НаборЗаписей.Количество() > 0 Тогда
						НаборЗаписей[0].Заказано = СтрокаРасшифровки.КоличествоЗаказано;
						НаборЗаписей[0].Поставщик = Справочники.Контрагенты.ПустаяСсылка();
						НаборЗаписей[0].Договор = Справочники.Договоры.ПустаяСсылка();
						НаборЗаписей[0].Заказ = Документы.Заказ.ПустаяСсылка();
						НаборЗаписей[0].КлючСвязи = "";
						НаборЗаписей[0].Цена = 0;
						НаборЗаписей[0].КоэфДеления = 0;
						НаборЗаписей[0].ТипПрайса = 0;
						НаборЗаписей[0].КодТовараПоставщика = "";
						НаборЗаписей.Записать();
					КонецЕсли; 
					НаборЗаписей = "";
				КонецЕсли; 
			КонецЦикла;

			Строка_ТабДанных.КоличествоЗаказано = 0;
			Строка_ТабДанных.КолНераспредДеф = Строка_ТабДанных.Потребность;
			Строка_ТабДанных.Поставщик = 0;
			Строка_ТабДанных.Договор = 0;
			Строка_ТабДанных.Кратность = 0;
			Строка_ТабДанных.СрокГодности = 0;
			Строка_ТабДанных.ЦенаПоставщикаСНДС = 0;
			Строка_ТабДанных.РасчетнаяНаценка = 0;
//			Строка_ТабДанных.ЦенаРозничнаяРасчетная = 0;
			Строка_ТабДанных.Остаток = 0;
			Строка_ТабДанных.СуммаЗаказа = 0;
			Строка_ТабДанных.КодТовараПоставщика = "";
			Строка_ТабДанных.ЕстьПроблема = Ложь;
			Строка_ТабДанных.КоэфКратностиУпаковки = 0;
			Строка_ТабДанных.КоэфДеления = 1;
			Строка_ТабДанных.ТипПрайса = 0;

		Иначе
			Если ВсегоПотребность <= ТекЗнач Тогда
				// Новое значение меньше чем было, но больше потребности
				// меняем количество заказанного, не добавляя/удаляя новых строк
				ОсталосьРаспределить = ТекЗнач;
				Для каждого СтрокаРасшифровки Из Строки Цикл
					Если СтрокаРасшифровки.Потребность = 0 Тогда
						СтрокаРасшифровки.КоличествоЗаказано = ОсталосьРаспределить;
					Иначе
						СтрокаРасшифровки.КоличествоЗаказано = Мин(СтрокаРасшифровки.Потребность, ОсталосьРаспределить);
					КонецЕсли;
					СтрокаРасшифровки.КолНераспредДеф = СтрокаРасшифровки.ПодЗаявку - ?(СтрокаРасшифровки.ПодЗаказ <> 0, СтрокаРасшифровки.ПодЗаявку, СтрокаРасшифровки.КоличествоЗаказано);
					ОсталосьРаспределить = ОсталосьРаспределить - СтрокаРасшифровки.КоличествоЗаказано;
				КонецЦикла;

				Если ОсталосьРаспределить > 0 Тогда
					СтрокаРасшифровки = Строки[Строки.Количество()-1];
					СтрокаРасшифровки.КоличествоЗаказано = СтрокаРасшифровки.КоличествоЗаказано + ОсталосьРаспределить;
					СтрокаРасшифровки.КолНераспредДеф = СтрокаРасшифровки.ПодЗаявку - ?(СтрокаРасшифровки.ПодЗаказ <> 0, СтрокаРасшифровки.ПодЗаявку, СтрокаРасшифровки.КоличествоЗаказано);
				КонецЕсли;
				
				// удалим строки с нулевым заказаным количеством
				Для каждого СтрокаРасшифровки Из Строки Цикл
					Если (СтрокаРасшифровки.КоличествоЗаказано = 0) И (СтрокаРасшифровки.Потребность = 0) Тогда
						// на удаление
						НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.ID.Установить(СтрокаРасшифровки.ID);
						НаборЗаписей.Записать();
						НаборЗаписей = "";
					Иначе
						// на корректировку
						НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.ID.Установить(СтрокаРасшифровки.ID);
						НаборЗаписей.Прочитать();
						НаборЗаписей[0].Заказано = СтрокаРасшифровки.КоличествоЗаказано;
						НаборЗаписей.Записать();
						НаборЗаписей = "";
					КонецЕсли; 
				КонецЦикла;
				
			Иначе
			
				// Новое количество меньше потребностей, предлагаем самостоятельно разделить
				Если Строки.Количество() = 1 Тогда

					// Одна строка в расшифровке. Дробим её самостоятельно
					Строка_ТабДанных.КоличествоЗаказано = ТекЗнач;
					Строка_ТабДанных.Потребность = ТекЗнач;
					Строка_ТабДанных.СуммаЗаказа = ТекЗнач * Строка_ТабДанных.ЦенаПоставщикаСНДС;

					СтрокаРасшифровки = Строки[Строки.Количество()-1];
					СтрокаРасшифровки_2 = фТабРасшифровки.Добавить();
					СтрокаРасшифровки_2.ID = Новый УникальныйИдентификатор;
					СтрокаРасшифровки_2.Таб_ID = Новый УникальныйИдентификатор;
					СписокСвойств = "Товар, Заказ, КлючСвязи, Потребность, ПодЗаказ, ПодЗаявку, КолНераспредДеф";
					ЗаполнитьЗначенияСвойств(СтрокаРасшифровки_2, СтрокаРасшифровки, СписокСвойств);

					СтрокаРасшифровки.КоличествоЗаказано = ТекЗнач;
					СтрокаРасшифровки.Потребность = ТекЗнач;
					СтрокаРасшифровки.ПодЗаказ = Мин(СтрокаРасшифровки.ПодЗаказ, ТекЗнач);
					СтрокаРасшифровки.ПодЗаявку = Мин(СтрокаРасшифровки.ПодЗаявку, ТекЗнач);
					СтрокаРасшифровки.КолНераспредДеф = СтрокаРасшифровки.ПодЗаявку - ?(СтрокаРасшифровки.ПодЗаказ <> 0, СтрокаРасшифровки.ПодЗаявку, СтрокаРасшифровки.КоличествоЗаказано);

					НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ID.Установить(СтрокаРасшифровки.ID);
					НаборЗаписей.Прочитать();
					НаборЗаписей[0].Заказано = СтрокаРасшифровки.КоличествоЗаказано;
					НаборЗаписей[0].Потребность = СтрокаРасшифровки.Потребность;
					НаборЗаписей.Записать();
					НаборЗаписей = "";


					СтрокаРасшифровки_2.КоличествоЗаказано = 0;
					СтрокаРасшифровки_2.Потребность = СтрокаРасшифровки_2.Потребность - СтрокаРасшифровки.Потребность;
					СтрокаРасшифровки_2.ПодЗаказ    = СтрокаРасшифровки_2.ПодЗаказ - СтрокаРасшифровки.ПодЗаказ;
					СтрокаРасшифровки_2.ПодЗаявку   = СтрокаРасшифровки_2.ПодЗаявку - СтрокаРасшифровки.ПодЗаявку;
					СтрокаРасшифровки_2.КолНераспредДеф = СтрокаРасшифровки_2.ПодЗаявку - ?(СтрокаРасшифровки_2.ПодЗаказ <> 0, СтрокаРасшифровки_2.ПодЗаявку, СтрокаРасшифровки_2.КоличествоЗаказано);

					Строка_ТабДанных_2 = фТабДанных.Добавить();
					ЗаполнитьЗначенияСвойств(Строка_ТабДанных_2, СтрокаРасшифровки_2);
					ЗаполнитьЗначенияСвойств(Строка_ТабДанных_2, Строка_ТабДанных, "Товар, Склад, НаименованиеТовара, Акционный, КолВПути");

					Строка_ТабДанных_2.Пометка = Ложь;
					Строка_ТабДанных_2.НаименованиеТовара = Строка_ТабДанных.НаименованиеТовара;

					НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьМенеджерЗаписи();
					НаборЗаписей.ID = СтрокаРасшифровки_2.ID;
					НаборЗаписей.Склад = Строка_ТабДанных_2.Склад;
					НаборЗаписей.Товар = Строка_ТабДанных_2.Товар;
					НаборЗаписей.Поставщик = Строка_ТабДанных_2.Поставщик;
					НаборЗаписей.Договор = Строка_ТабДанных_2.Договор;
					НаборЗаписей.КодТовараПоставщика = Строка_ТабДанных_2.КодТовараПоставщика;
					НаборЗаписей.Цена = Строка_ТабДанных_2.ЦенаПоставщикаСНДС;
					НаборЗаписей.Потребность = СтрокаРасшифровки_2.Потребность;
					НаборЗаписей.Заказано = СтрокаРасшифровки_2.КоличествоЗаказано;
					НаборЗаписей.Заказ = СтрокаРасшифровки_2.Заказ;
					НаборЗаписей.КлючСвязи = СтрокаРасшифровки_2.КлючСвязи;
					НаборЗаписей.КоэфДеления = Строка_ТабДанных_2.КоэфДеления;
					НаборЗаписей.ТипПрайса = Строка_ТабДанных_2.ТипПрайса;
					НаборЗаписей.Сотрудник = ПараметрыСеанса.ТекущийПользователь;
					НаборЗаписей.Записать();

				КонецЕсли; 
			КонецЕсли;

			Строка_ТабДанных.КоличествоЗаказано = ТекЗнач;
			Строка_ТабДанных.СуммаЗаказа = Строка_ТабДанных.КоличествоЗаказано * Строка_ТабДанных.ЦенаПоставщикаСНДС;
			Строка_ТабДанных.КолНераспредДеф = Строка_ТабДанных.Потребность - Строка_ТабДанных.КоличествоЗаказано;

		КонецЕсли; 

	Иначе

		// Новое значение больше старого
		Строка_ТабДанных.КоличествоЗаказано = ТекЗнач;
		Строка_ТабДанных.СуммаЗаказа = Строка_ТабДанных.КоличествоЗаказано * Строка_ТабДанных.ЦенаПоставщикаСНДС;
		Строка_ТабДанных.КолНераспредДеф = Строка_ТабДанных.Потребность - Строка_ТабДанных.КоличествоЗаказано;

		// Установили большее значение, разницу ставим на строку без СтрТПЗ, если такого нет создаем.
		// ОсталосьРаспределить = ТекЗнач - староеЗначение;
		Отбор = Новый Структура;
		Отбор.Вставить("Таб_ID", Строка_ТабДанных.Таб_ID);
		Строки = фТабРасшифровки.НайтиСтроки(Отбор);
		ОсталосьРаспределить = ТекЗнач;
		Для каждого СтрокаРасшифровки Из Строки Цикл
			// первым делом распределяем заказ

			Если СтрокаРасшифровки.КоличествоЗаказано = СтрокаРасшифровки.Потребность Тогда
				ОсталосьРаспределить = ОсталосьРаспределить - СтрокаРасшифровки.КоличествоЗаказано;
				// заказ полностью заказан
				Продолжить;
			КонецЕсли;

			СтрокаРасшифровки.КоличествоЗаказано = Мин(СтрокаРасшифровки.Потребность, ОсталосьРаспределить);
			СтрокаРасшифровки.КолНераспредДеф = СтрокаРасшифровки.ПодЗаявку - ?(СтрокаРасшифровки.ПодЗаказ <> 0, СтрокаРасшифровки.ПодЗаявку, СтрокаРасшифровки.КоличествоЗаказано);
			ОсталосьРаспределить = ОсталосьРаспределить - СтрокаРасшифровки.КоличествоЗаказано;

			НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ID.Установить(СтрокаРасшифровки.ID);
			НаборЗаписей.Прочитать();
			НаборЗаписей[0].Заказано = СтрокаРасшифровки.КоличествоЗаказано;
			НаборЗаписей.Записать();
			НаборЗаписей = "";

		КонецЦикла;

		Если ОсталосьРаспределить > 0 Тогда
			// осталось не распределенное количество, найдем заявку и увеличим ее

			Для каждого СтрокаРасшифровки Из Строки Цикл
				// первым делом распределяем заказ
				Если ПустаяСтрока(СтрокаРасшифровки.КлючСвязи) Тогда
					// По заявке
					СтрокаРасшифровки.КоличествоЗаказано = СтрокаРасшифровки.КоличествоЗаказано + ОсталосьРаспределить;
					ОсталосьРаспределить = 0;
					СтрокаРасшифровки.КолНераспредДеф = СтрокаРасшифровки.ПодЗаявку - ?(СтрокаРасшифровки.ПодЗаказ <> 0, СтрокаРасшифровки.ПодЗаявку, СтрокаРасшифровки.КоличествоЗаказано);

					НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ID.Установить(СтрокаРасшифровки.ID);
					НаборЗаписей.Прочитать();
					НаборЗаписей[0].Заказано = СтрокаРасшифровки.КоличествоЗаказано;
					НаборЗаписей.Записать();
					НаборЗаписей = "";

				КонецЕсли; 


				Если ОсталосьРаспределить > 0 Тогда
					// Не все распределили - создаем заявку на дефектуру и заполняем её количеством
					// Добавим строку
					СтрокаТабРасшифровки = фТабРасшифровки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабРасшифровки, Строка_ТабДанных);

					СтрокаТабРасшифровки.Заказ = Документы.Заказ.ПустаяСсылка();
					СтрокаТабРасшифровки.КлючСвязи = "";
					СтрокаТабРасшифровки.Потребность = 0;
					СтрокаТабРасшифровки.КоличествоЗаказано = ОсталосьРаспределить;
					СтрокаТабРасшифровки.ПодЗаказ = 0;
					СтрокаТабРасшифровки.КолНераспредДеф = -СтрокаТабРасшифровки.КоличествоЗаказано;
					СтрокаТабРасшифровки.ДатаДоставки = ДобавитьМесяц(ТекущаяДата(), 24);
					СтрокаТабРасшифровки.ID = Новый УникальныйИдентификатор;

					НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьМенеджерЗаписи();
					НаборЗаписей.ID = СтрокаТабРасшифровки.ID;
					НаборЗаписей.Склад = Строка_ТабДанных.Склад;
					НаборЗаписей.Товар = Строка_ТабДанных.Товар;
					НаборЗаписей.Поставщик = Строка_ТабДанных.Поставщик;
					НаборЗаписей.Договор = Строка_ТабДанных.Договор;
					НаборЗаписей.КодТовараПоставщика = Строка_ТабДанных.КодТовараПоставщика;
					НаборЗаписей.Цена = Строка_ТабДанных.ЦенаПоставщикаСНДС;
					НаборЗаписей.Потребность = 0;
					НаборЗаписей.Заказано = СтрокаТабРасшифровки.КоличествоЗаказано;
					НаборЗаписей.Заказ = СтрокаТабРасшифровки.Заказ;
					НаборЗаписей.КлючСвязи = СтрокаТабРасшифровки.КлючСвязи;
					НаборЗаписей.КоэфДеления = Строка_ТабДанных.КоэфДеления;
					НаборЗаписей.ТипПрайса = Строка_ТабДанных.ТипПрайса;
					НаборЗаписей.Сотрудник = ПараметрыСеанса.ТекущийПользователь;
					НаборЗаписей.Записать();

				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
 

&НаСервере
Процедура фЗаменитьПоставщика(ID_ТабПрайсПоставщика, ID_ТабДанных)
	
	Если ПустаяСтрока(ID_ТабПрайсПоставщика) И ПустаяСтрока(ID_ТабДанных) Тогда
		Возврат;
	КонецЕсли; 

	Если ПустаяСтрока(ID_ТабДанных) Тогда
		// ХЗ где менять
		Возврат;
	КонецЕсли; 

	Отбор = Новый Структура;
	Отбор.Вставить("Таб_ID", ID_ТабДанных);
	Строки = фТабДанных.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Строка_ТабДанных = Строки[0];

	Если ПустаяСтрока(ID_ТабПрайсПоставщика) Тогда

		УстановитьНовоеКоличествоЗаказано(0, Строка_ТабДанных);

	Иначе
		
		Отбор.Очистить();
		Отбор.Вставить("ID", ID_ТабПрайсПоставщика);
		Строки = фТабПрайсПоставщика.НайтиСтроки(Отбор);
		Если Строки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		СтрокаТЧ = Строки[0];
		Строка_ТабДанных.Поставщик			= СтрокаТЧ.Поставщик;
		Строка_ТабДанных.Договор			= СтрокаТЧ.Договор;
		Строка_ТабДанных.Кратность			= СтрокаТЧ.КратностьУпаковки;
		Строка_ТабДанных.СрокГодности		= СтрокаТЧ.СрокГодности;
		Строка_ТабДанных.ЦенаПоставщикаСНДС	= СтрокаТЧ.Цена;
		Строка_ТабДанных.РасчетнаяНаценка	= СтрокаТЧ.РасчетнаяНаценка;
//		Строка_ТабДанных.Остаток			= СтрокаТЧ.КолВНаличии;
		Строка_ТабДанных.КоэфДеления		= СтрокаТЧ.КоэфДеления;
		Строка_ТабДанных.ТипПрайса			= СтрокаТЧ.ТипПрайса;
		Строка_ТабДанных.КодТовараПоставщика	= СтрокаТЧ.КодТовараПоставщика;
		Строка_ТабДанных.КоэфКратностиУпаковки	 = СтрокаТЧ.КратностьУпаковки;
//		Строка_ТабДанных.ЦенаРозничнаяРасчетная = СтрокаТЧ.ЦенаКратности;

		УстановитьНовоеКоличествоЗаказано(Строка_ТабДанных.Потребность, Строка_ТабДанных);

		КоличествоЗаказано = Строка_ТабДанных.КоличествоЗаказано;
		КратныйПоставщик = Истина;
		ЕстьПроблема = Ложь;
		КоэфКратностиУпаковки = 0;
		
		слкПоставщик = Строка_ТабДанных.Поставщик;
		Если НЕ ЗначениеЗаполнено(слкПоставщик.ОсновнойПрофильПоставщика) Тогда
			КратныйПоставщик = Ложь;
		Иначе
			Если слкПоставщик.ОсновнойПрофильПоставщика.КратностьУпаковки = 0 Тогда
				КратныйПоставщик = Ложь;
			Иначе
				Если слкПоставщик.ОсновнойПрофильПоставщика.ПроцентДозаказаУпаковка.Количество() > 0 Тогда

					ТабКоэффициентов = слкПоставщик.ОсновнойПрофильПоставщика.ПроцентДозаказаУпаковка.Выгрузить();
					ТабКоэффициентов.Сортировать("ЦенаУпаковки");
					
					Для каждого СтрокаТК Из ТабКоэффициентов Цикл
						Если Строка_ТабДанных.ЦенаПоставщикаСНДС <= СтрокаТК.ЦенаУпаковки Тогда
							КоэфКратностиУпаковки = СтрокаТК.Коэффициент;
						Иначе
							Прервать;
						КонецЕсли; 
					КонецЦикла; 

				КонецЕсли; 

			КонецЕсли; 
		КонецЕсли; 

		Если КратныйПоставщик И ((КоличествоЗаказано % Строка_ТабДанных.Кратность) <> 0) Тогда
			Если Строка_ТабДанных.ТипПрайса = 1 Тогда

				Если (КоличествоЗаказано - Цел(КоличествоЗаказано / Строка_ТабДанных.Кратность) * Строка_ТабДанных.Кратность) >= (Цел(Строка_ТабДанных.Кратность * КоэфКратностиУпаковки) + 1) Тогда
					ЗаказатьУПоставщикаПоКратности = Строка_ТабДанных.Кратность;
					ЕстьПроблема = Ложь;
				Иначе
					ЗаказатьУПоставщикаПоКратности = КоличествоЗаказано - Цел(КоличествоЗаказано / Строка_ТабДанных.Кратность) * Строка_ТабДанных.Кратность;
					ЕстьПроблема = Истина;
				КонецЕсли;

			Иначе
			
				Если (КоличествоЗаказано - Цел(КоличествоЗаказано / Строка_ТабДанных.Кратность) * Строка_ТабДанных.Кратность) >= (Цел(Строка_ТабДанных.Кратность * КоэфКратностиУпаковки) + 1) Тогда
					ЗаказатьУПоставщикаПоКратности = Строка_ТабДанных.Кратность;
					ЕстьПроблема = Ложь;
				Иначе
					ЗаказатьУПоставщикаПоКратности = КоличествоЗаказано - Цел(КоличествоЗаказано / Строка_ТабДанных.Кратность) * Строка_ТабДанных.Кратность;
					ЕстьПроблема = Истина;
				КонецЕсли;

			КонецЕсли; 
			
			ЗаказатьУПоставщикаПоКратности = ЗаказатьУПоставщикаПоКратности + Цел(КоличествоЗаказано / Строка_ТабДанных.Кратность) * Строка_ТабДанных.Кратность;
			МожноЗаказать = Мин(ЗаказатьУПоставщикаПоКратности, СтрокаТЧ.КолВНаличии);

			Если Строка_ТабДанных.ТипПрайса = 1 Тогда

				стрСообщения = "У поставщика можно заказать ТОЛЬКО по кратности : " + Формат(МожноЗаказать, "ЧГ=") + " ед. товара, (заказано: " + Формат(Строка_ТабДанных.КоличествоЗаказано, "ЧГ=") + ").
				|Установлено расчетное (кратное) количество заказываемого товара.";
				Сообщить(стрСообщения);
				УстановитьНовоеКоличествоЗаказано(МожноЗаказать, Строка_ТабДанных);
				ЕстьПроблема = Ложь;

			Иначе
				
				Если Строка_ТабДанных.КоличествоЗаказано <> МожноЗаказать Тогда
					
					стрСообщения = "У поставщика можно заказать ТОЛЬКО по кратности : " + Формат(МожноЗаказать, "ЧГ=") + " ед. товара, (заказано: " + Формат(Строка_ТабДанных.КоличествоЗаказано, "ЧГ=") + ").
					|Установлено расчетное (кратное) количество заказываемого товара.";
					Сообщить(стрСообщения);
					УстановитьНовоеКоличествоЗаказано(МожноЗаказать, Строка_ТабДанных);
					ЕстьПроблема = Ложь;

				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		
		Строка_ТабДанных.ЕстьПроблема = ЕстьПроблема;
		Строка_ТабДанных.СуммаЗаказа = Строка_ТабДанных.ЦенаПоставщикаСНДС * Строка_ТабДанных.КоличествоЗаказано;

	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Таб_ID", Строка_ТабДанных.Таб_ID);
	Строки = фТабРасшифровки.НайтиСтроки(Отбор);
	Для каждого СтрокаРасшифровки Из Строки Цикл

		НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ID.Установить(СтрокаРасшифровки.ID);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей[0].Заказано	= СтрокаРасшифровки.КоличествоЗаказано;
			НаборЗаписей[0].Поставщик	= Строка_ТабДанных.Поставщик;
			НаборЗаписей[0].Договор		= Строка_ТабДанных.Договор;
			НаборЗаписей[0].Заказ		= СтрокаРасшифровки.Заказ;
			НаборЗаписей[0].КлючСвязи	= СтрокаРасшифровки.КлючСвязи;
			НаборЗаписей[0].Цена		= Строка_ТабДанных.ЦенаПоставщикаСНДС;
			НаборЗаписей[0].КоэфДеления	= Строка_ТабДанных.КоэфДеления;
			НаборЗаписей[0].ТипПрайса	= Строка_ТабДанных.ТипПрайса;
			НаборЗаписей[0].КодТовараПоставщика = Строка_ТабДанных.КодТовараПоставщика;
			НаборЗаписей.Записать();
		КонецЕсли; 
		НаборЗаписей = "";

	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура фТабДанныхПоставщикОчистка(Элемент, СтандартнаяОбработка)

	фЗаменитьПоставщика("", Элементы.фТабДанных.ТекущиеДанные.Таб_ID);
	ЗаполнитьДанныеИсточникиДефектуры(Элементы.фТабДанных.ТекущиеДанные.Таб_ID);

КонецПроцедуры

&НаКлиенте
Процедура фТабДанныхКоличествоЗаказаноПриИзменении(Элемент)

	фТабДанныхКоличествоЗаказаноПриИзмененииНаСервере(Элементы.фТабДанных.ТекущиеДанные.КоличествоЗаказано, Элементы.фТабДанных.ТекущиеДанные.Таб_ID);
	ЗаполнитьДанныеИсточникиДефектуры(Элементы.фТабДанных.ТекущиеДанные.Таб_ID);
	
КонецПроцедуры

&НаСервере
Процедура фТабДанныхКоличествоЗаказаноПриИзмененииНаСервере(КоличествоЗаказано, Таб_ID)

	Отбор = Новый Структура;
	Отбор.Вставить("Таб_ID", Таб_ID);
	Строки = фТабДанных.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Строка_ТабДанных = Строки[0];

	УстановитьНовоеКоличествоЗаказано(КоличествоЗаказано, Строка_ТабДанных);

КонецПроцедуры
&НаКлиенте
Процедура фТабДанныхПоставщикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = "ПоНаименованиюТовара" Тогда

		ЧастьНаименования = СокрЛП(Элементы.фТабДанных.ТекущиеДанные.НаименованиеТовара);
		Если ВвестиСтроку(ЧастьНаименования, "Часть строки наименования товара поставщика", 250) Тогда
			ЗаполнитьПоставщиковПоНаименованиюТовара(Новый Структура("ЧастьНаименования, слкСклад", ЧастьНаименования, Элементы.фТабДанных.ТекущиеДанные.Склад));
		КонецЕсли;
		Возврат;

	КонецЕсли; 
	
	фЗаменитьПоставщика(ВыбранноеЗначение, Элементы.фТабДанных.ТекущиеДанные.Таб_ID);
	ЗаполнитьДанныеИсточникиДефектуры(Элементы.фТабДанных.ТекущиеДанные.Таб_ID);
	Элементы.фТабДанных.ЗакончитьРедактированиеСтроки(Ложь);

КонецПроцедуры


&НаКлиенте
Процедура СоздатьЗаказПоставщику(Команда)

	Если фТабДанных.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Нет данных для создания документа", 15);
		Возврат;
	КонецЕсли; 


	Если НЕ ЗначениеЗаполнено(фТипПоставки) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан тип поставки";
		Сообщение.Поле = "фТипПоставки";
		Сообщение.Сообщить(); 
		
		Возврат;
	КонецЕсли; 

	СтрСообщения = ПроверкаМинСуммыЗаказа(Новый Структура("ТипПоставки", фТипПоставки));
	Если СтрСообщения <> "" Тогда
		СтрСообщения = "Итоговая сумма заказов поставщикам за текущий день меньше минимально допустимой суммы:
		|" + СтрСообщения + "
		|Вы действительно хотите создать заказ поставщику?";
		Если НЕ Вопрос(СтрСообщения, РежимДиалогаВопрос.ДаНет, 50) = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 

	ЕстьВНаличииУПоставщика = ПроверкаОстатковПоставщиков(ЭтаФорма.УникальныйИдентификатор);
	Если ЕстьВНаличииУПоставщика = ЛОЖЬ Тогда
		// Заказано больше чем есть в наличии у поставщиков
		стрПараметры = Новый Структура;
		стрПараметры.Вставить("АдресХранилища_НЕ_Хватило", АдресХранилища_НЕ_Хватило);
		стрПараметры.Вставить("РезультатЗакрытия", 2);
//		ОткрытьФорму("ВнешняяОбработка.ОбработкаДефектуры.Форма.НеХватилоУПоставщика", стрПараметры, ЭтаФорма,,,,Новый ОписаниеОповещения("ПослеВыбораВариантаСозданияЗаказаПоставщику", ЭтаФорма));
		ОткрытьФорму("Обработка.ОбработкаДефектуры.Форма.НеХватилоУПоставщика", стрПараметры, ЭтаФорма,,,,Новый ОписаниеОповещения("ПослеВыбораВариантаСозданияЗаказаПоставщику", ЭтаФорма));
	Иначе
		стрПараметров = Новый Структура;
		стрПараметров.Вставить("АдресХранилища_ТД", АдресХранилища_ТД);
		стрПараметров.Вставить("АдресХранилища_Расшифровка", АдресХранилища_Расшифровка);
		стрПараметров.Вставить("АдресХранилища_НЕ_Хватило", АдресХранилища_НЕ_Хватило);
		стрПараметров.Вставить("ПоставщикЗамены", фПоставщикЗамены);
		стрПараметров.Вставить("ТипПоставки", фТипПоставки);
		СоздатьЗаказыПоставщикуНаСервере(стрПараметров);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Функция ПроверкаМинСуммыЗаказа(стрПараметров)

	_ТабДанных = фТабДанных.Выгрузить();
	ТабДанных = _ТабДанных.СкопироватьКолонки();
	Отбор = Новый Структура;
	Отбор.Вставить("Пометка", Истина);
	Отбор.Вставить("ЭтоТовар", Истина);
	Строки = _ТабДанных.НайтиСтроки(Отбор);
	Для каждого Строка_М Из Строки Цикл
		Если НЕ ЗначениеЗаполнено(Строка_М.Поставщик) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТЧ = ТабДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Строка_М);
	КонецЦикла;
	_ТабДанных = "";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабДанных", ТабДанных);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТипПоставки", стрПараметров.ТипПоставки);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабДанных.Поставщик КАК Клиент,
		|	ТабДанных.Склад КАК Склад,
		|	ТабДанных.ЦенаПоставщикаСНДС КАК Цена,
		|	ТабДанных.КоличествоЗаказано КАК КоличествоЗаказано
		|ПОМЕСТИТЬ ВТ_ТабДанных
		|ИЗ
		|	&ТабДанных КАК ТабДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТабДанных.Клиент КАК Клиент,
		|	ВТ_ТабДанных.Склад КАК Склад,
		|	СУММА(ВТ_ТабДанных.Цена * ВТ_ТабДанных.КоличествоЗаказано) КАК СуммаТекущегоЗаказа
		|ПОМЕСТИТЬ ВТ_СуммаЗаказа
		|ИЗ
		|	ВТ_ТабДанных КАК ВТ_ТабДанных
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТабДанных.Клиент,
		|	ВТ_ТабДанных.Склад
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Клиент,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СуммаЗаказа.Клиент КАК Клиент,
		|	Контрагенты.Наименование КАК Поставщик,
		|	ВТ_СуммаЗаказа.Склад КАК Склад,
		|	ВТ_СуммаЗаказа.СуммаТекущегоЗаказа,
		|	ЛимитыПоставки.Сумма КАК МинСуммаЗаказа
		|ПОМЕСТИТЬ ВТ_ТекущийЗаказ
		|ИЗ
		|	ВТ_СуммаЗаказа КАК ВТ_СуммаЗаказа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ВТ_СуммаЗаказа.Клиент = Контрагенты.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛимитыПоставки КАК ЛимитыПоставки
		|		ПО ВТ_СуммаЗаказа.Клиент = ЛимитыПоставки.Поставщик
		|			И ВТ_СуммаЗаказа.Склад = ЛимитыПоставки.Склад
		|ГДЕ
		|	ЛимитыПоставки.ТипПоставки = &ТипПоставки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Клиент,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СуммаЗаказа.Клиент КАК Клиент,
		|	ВТ_СуммаЗаказа.Склад КАК Склад,
		|	СУММА(ЗаказПоставщикуТовары.Сумма) КАК СуммаЗаказаноРанее
		|ПОМЕСТИТЬ ВТ_РанееЗаказано
		|ИЗ
		|	ВТ_СуммаЗаказа КАК ВТ_СуммаЗаказа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|		ПО (ЗаказПоставщику.Клиент = ВТ_СуммаЗаказа.Клиент)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|		ПО (ЗаказПоставщику.Ссылка = ЗаказПоставщикуТовары.Ссылка)
		|			И ВТ_СуммаЗаказа.Склад = ЗаказПоставщикуТовары.Склад
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ЗаказПоставщику.Дата, ДЕНЬ) = &ТекущаяДата
		|	И ЗаказПоставщику.ТипПоставки = &ТипПоставки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_СуммаЗаказа.Клиент,
		|	ВТ_СуммаЗаказа.Склад
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Клиент,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТекущийЗаказ.Поставщик,
		|	ВТ_ТекущийЗаказ.Склад,
		|	ВТ_ТекущийЗаказ.МинСуммаЗаказа,
		|	ВТ_ТекущийЗаказ.СуммаТекущегоЗаказа + ЕСТЬNULL(ВТ_РанееЗаказано.СуммаЗаказаноРанее, 0) КАК СуммаВсегоЗаказано
		|ИЗ
		|	ВТ_ТекущийЗаказ КАК ВТ_ТекущийЗаказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РанееЗаказано КАК ВТ_РанееЗаказано
		|		ПО ВТ_ТекущийЗаказ.Клиент = ВТ_РанееЗаказано.Клиент
		|			И ВТ_ТекущийЗаказ.Склад = ВТ_РанееЗаказано.Склад
		|ГДЕ
		|	ВТ_ТекущийЗаказ.СуммаТекущегоЗаказа + ЕСТЬNULL(ВТ_РанееЗаказано.СуммаЗаказаноРанее, 0) < ВТ_ТекущийЗаказ.МинСуммаЗаказа";

	СтрСообщения = "";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		СтрСообщения = СтрСообщения + ?(СтрСообщения = "", "", Символы.ПС) + "  >> " + СокрЛП(РезультатЗапроса.Поставщик) + " (склад """ + СокрЛП(РезультатЗапроса.Склад.Наименование) + """)  - мин. сумма заказа: " + Строка(РезультатЗапроса.МинСуммаЗаказа) + " Руб., всего заказано (включая текущий) на сумму: " + Строка(РезультатЗапроса.СуммаВсегоЗаказано) + " Руб.";
	КонецЦикла; 

	Возврат СтрСообщения;

КонецФункции

&НаСервере
Функция ПроверкаОстатковПоставщиков(парУникальныйИдентификатор)

	// Проверим хватит ли заказываемых товаров у поставщика
	ТабДанных = фТабДанных.Выгрузить();
	_ТабДанных = ТабДанных.СкопироватьКолонки();
	Отбор = Новый Структура;
	Отбор.Вставить("Пометка", Истина);
	Отбор.Вставить("ЭтоТовар", Истина);
	Строки = ТабДанных.НайтиСтроки(Отбор);
	Для каждого Строка_М Из Строки Цикл
		Если НЕ ЗначениеЗаполнено(Строка_М.Поставщик) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТЧ = _ТабДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Строка_М);
	КонецЦикла;
	АдресХранилища_ТД = ПоместитьВоВременноеХранилище(_ТабДанных, парУникальныйИдентификатор);
	АдресХранилища_Расшифровка = ПоместитьВоВременноеХранилище(фТабРасшифровки.Выгрузить(), парУникальныйИдентификатор);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабДанных", _ТабДанных);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабДанных.Поставщик КАК Поставщик,
		|	ТабДанных.Товар КАК Товар,
		|	ТабДанных.КоличествоЗаказано КАК Заказано,
		|	ТабДанных.ЦенаПоставщикаСНДС КАК Цена,
		|	ТабДанных.КодТовараПоставщика КАК КодТовараПоставщика,
		|	ТабДанных.КоэфДеления КАК КоэфДеления,
		|	ТабДанных.Склад КАК Склад,
		|	ТабДанных.СрокГодности КАК СрокГодности,
		|	ТабДанных.Таб_ID КАК Таб_ID,
		|	ТабДанных.ТипПрайса КАК ТипПрайса
		|ПОМЕСТИТЬ ВТ_ТабДанных
		|ИЗ
		|	&ТабДанных КАК ТабДанных
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Таб_ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТабДанных.Таб_ID,
		|	ВТ_ТабДанных.Товар,
		|	ВТ_ТабДанных.Склад,
		|	ВТ_ТабДанных.Поставщик,
		|	ВТ_ТабДанных.КодТовараПоставщика,
		|	ВТ_ТабДанных.Заказано,
		|	ВТ_ТабДанных.Цена,
		|	ВТ_ТабДанных.КоэфДеления,
		|	ВТ_ТабДанных.СрокГодности,
		|	ВТ_ТабДанных.ТипПрайса,
		|	supplier_price.cnt КАК ОстатокПоставщика,
		|	ВТ_ТабДанных.Заказано / ВТ_ТабДанных.КоэфДеления - ЕСТЬNULL(supplier_price.cnt, 0) КАК НеХватило
		|ИЗ
		|	ВТ_ТабДанных КАК ВТ_ТабДанных
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресХранения КАК спрАдресХранения
		|		ПО ВТ_ТабДанных.Склад = спрАдресХранения.ОсновнойСклад
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.supplier_price КАК supplier_price
		|		ПО ВТ_ТабДанных.Поставщик = supplier_price.Поставщик
//		|		И ВТ_ТабДанных.Товар = supplier_price.Товар
		|		И ВТ_ТабДанных.КодТовараПоставщика = supplier_price.КодПоставщика
		|		И ВТ_ТабДанных.ТипПрайса = supplier_price.ТипПрайса
		|ГДЕ
		|	ЕСТЬNULL(supplier_price.cnt, 0) < ВТ_ТабДанных.Заказано / ВТ_ТабДанных.КоэфДеления";

	ТабНеХватило = Запрос.Выполнить().Выгрузить();
	АдресХранилища_НЕ_Хватило = ПоместитьВоВременноеХранилище(ТабНеХватило, парУникальныйИдентификатор);

	Если ТабНеХватило.Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораВариантаСозданияЗаказаПоставщику(Результат, Параметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	стрПараметров = Новый Структура;
	стрПараметров.Вставить("АдресХранилища_ТД", АдресХранилища_ТД);
	стрПараметров.Вставить("АдресХранилища_Расшифровка", АдресХранилища_Расшифровка);
	стрПараметров.Вставить("АдресХранилища_НЕ_Хватило", АдресХранилища_НЕ_Хватило);
	стрПараметров.Вставить("ПоставщикЗамены", фПоставщикЗамены);
	стрПараметров.Вставить("ТипПоставки", фТипПоставки);

	Если Результат = 1 Тогда
		// ни чего не делать
		Возврат;
		
	ИначеЕсли Результат = 2 Тогда
		// сформировать на все, что есть
		СоздатьЗаказыПоставщикуНаСервере(стрПараметров);
		
	ИначеЕсли Результат = 3 Тогда
		// сформировать только на наличие
		СоздатьЗаказыПоставщику_НаНаличие(стрПараметров);

	КонецЕсли; 

КонецПроцедуры


&НаСервере
Процедура СоздатьЗаказыПоставщикуНаСервере(стрПараметров)

	стрСообщенияОбОшибках = "";
	АдресХранилища = СоздатьДокументыЗаказПоставщику(стрПараметров, стрСообщенияОбОшибках);
	Если стрСообщенияОбОшибках <> "" Тогда
		Сообщить(стрСообщенияОбОшибках);
	КонецЕсли; 

	табДанных_ID = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если табДанных_ID.Количество() > 0 Тогда
		Для каждого СтрокаТЧ Из табДанных_ID Цикл

			Отбор = Новый Структура;
			Отбор.Вставить("Таб_ID", СтрокаТЧ.Таб_ID);
			Строки = фТабДанных.НайтиСтроки(Отбор);
			Для каждого Строка_М Из Строки Цикл
				фТабДанных.Удалить(Строка_М);
			КонецЦикла;

		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура СоздатьЗаказыПоставщику_НаНаличие(стрПараметров)

	стрСообщенияОбОшибках = "";
	АдресХранилища = СоздатьДокументыЗаказПоставщику(стрПараметров, стрСообщенияОбОшибках);
	Если стрСообщенияОбОшибках <> "" Тогда
		Сообщить(стрСообщенияОбОшибках);
	КонецЕсли; 

	табДанных_ID = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если табДанных_ID.Количество() > 0 Тогда
		Для каждого СтрокаТЧ Из табДанных_ID Цикл

			Отбор = Новый Структура;
			Отбор.Вставить("Таб_ID", СтрокаТЧ.Таб_ID);
			Строки = фТабДанных.НайтиСтроки(Отбор);
			Для каждого Строка_М Из Строки Цикл
				фТабДанных.Удалить(Строка_М);
			КонецЦикла;

		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьДокументыЗаказПоставщику(стрПараметров, стрСообщенияОбОшибках)

	ТабДанных = ПолучитьИзВременногоХранилища(стрПараметров.АдресХранилища_ТД);
	ТабРасшифровки = ПолучитьИзВременногоХранилища(стрПараметров.АдресХранилища_Расшифровка);
	УдалитьИзВременногоХранилища(стрПараметров.АдресХранилища_ТД);
	УдалитьИзВременногоХранилища(стрПараметров.АдресХранилища_Расшифровка);

	Если ПустаяСтрока(стрПараметров.АдресХранилища_НЕ_Хватило) Тогда

		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(36));

		Массив.Очистить();
		Массив.Добавить(Тип("Число"));
		ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,Новый КвалификаторыЧисла(12,2));

		ТабНеХватило = Новый ТаблицаЗначений;
		ТабНеХватило.Колонки.Добавить("Таб_ID", ОписаниеТиповС);
		ТабНеХватило.Колонки.Добавить("НеХватило", ОписаниеТиповЧ);

	Иначе	
		ТабНеХватило = ПолучитьИзВременногоХранилища(стрПараметров.АдресХранилища_НЕ_Хватило);
		УдалитьИзВременногоХранилища(стрПараметров.АдресХранилища_НЕ_Хватило);
	КонецЕсли; 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабДанных", ТабДанных);
	Запрос.УстановитьПараметр("ТабРасшифровки", ТабРасшифровки);
	Запрос.УстановитьПараметр("ТабНеХватило", ТабНеХватило);
	Запрос.УстановитьПараметр("ТипПоставки", стрПараметров.ТипПоставки);

	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабДанных.Склад,
		|	ТабДанных.Договор,
		|	ТабДанных.Поставщик,
		|	ТабДанных.Товар,
		|	ТабДанных.ЦенаПоставщикаСНДС КАК Цена,
		|	ТабДанных.КодТовараПоставщика,
		|	ТабДанных.КоэфДеления,
		|	ТабДанных.СрокГодности КАК СрокГодности,
		|	ТабДанных.Таб_ID КАК Таб_ID,
		|	ТабДанных.ТипПрайса КАК ТипПрайса,
		|	&ТипПоставки КАК ТипПоставки
		|ПОМЕСТИТЬ ВТ_ТабДанных
		|ИЗ
		|	&ТабДанных КАК ТабДанных
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Таб_ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабРасшифровки.КоличествоЗаказано КАК Количество,
		|	ТабРасшифровки.Заказ КАК Заказ,
		|	ТабРасшифровки.КлючСвязи КАК КлючСвязи,
		|	ТабРасшифровки.Таб_ID КАК Таб_ID,
		|	ТабРасшифровки.ID КАК ID,
		|	ВЫБОР
		|		КОГДА ТабРасшифровки.Заказ = ЗНАЧЕНИЕ(документ.заказ.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПодЗаказ
		|ПОМЕСТИТЬ ВТ_ТабРасшифровки
		|ИЗ
		|	&ТабРасшифровки КАК ТабРасшифровки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Таб_ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабНеХватило.Таб_ID,
		|	ТабНеХватило.НеХватило
		|ПОМЕСТИТЬ ВТ_ТабНеХватило
		|ИЗ
		|	&ТабНеХватило КАК ТабНеХватило
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТабНеХватило.Таб_ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТабДанных.Склад,
		|	ВТ_ТабДанных.Поставщик,
		|	ВТ_ТабДанных.Договор,
		|	ВТ_ТабДанных.Товар,
		|	ВТ_ТабДанных.Цена,
		|	ВТ_ТабДанных.КодТовараПоставщика,
		|	ВТ_ТабДанных.КоэфДеления,
		|	ВТ_ТабДанных.СрокГодности,
		|	ВТ_ТабДанных.Таб_ID,
		|	ВТ_ТабДанных.ТипПрайса,
		|	ВТ_ТабРасшифровки.Количество,
		|	ВТ_ТабРасшифровки.Заказ,
		|	ВТ_ТабРасшифровки.КлючСвязи,
		|	МестаХраненияПоДоговору.ДатаОжидаемойПоставки,
		|	ВТ_ТабРасшифровки.ID,
		|	ВТ_ТабРасшифровки.ПодЗаказ,
		|	ЕСТЬNULL(ВТ_ТабНеХватило.НеХватило, 0) КАК НеХватило
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	ВТ_ТабДанных КАК ВТ_ТабДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТабРасшифровки КАК ВТ_ТабРасшифровки
		|		ПО ВТ_ТабДанных.Таб_ID = ВТ_ТабРасшифровки.Таб_ID
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияПоДоговору КАК МестаХраненияПоДоговору
		|		ПО (МестаХраненияПоДоговору.Поставщик = ВТ_ТабДанных.Поставщик)
		|			И (МестаХраненияПоДоговору.Договор = ВТ_ТабДанных.Договор)
		|			И (МестаХраненияПоДоговору.МестоХранения = ВТ_ТабДанных.Склад)
		|			И (МестаХраненияПоДоговору.ТипПрайса = ВТ_ТабДанных.ТипПрайса)
		|			И (МестаХраненияПоДоговору.ТипПоставки = ВТ_ТабДанных.ТипПоставки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТабНеХватило КАК ВТ_ТабНеХватило
		|		ПО ВТ_ТабДанных.Таб_ID = ВТ_ТабНеХватило.Таб_ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Данные.Поставщик КАК Поставщик,
		|	ВТ_Данные.Договор КАК Договор,
		|	ВТ_Данные.Товар,
		|	ВТ_Данные.Количество КАК Количество,
		|	ВТ_Данные.Цена,
		|	ВТ_Данные.Цена * ВТ_Данные.Количество КАК Сумма,
		|	ВТ_Данные.КодТовараПоставщика,
		|	ВТ_Данные.КоэфДеления,
		|	ВТ_Данные.Склад КАК Склад,
		|	ВТ_Данные.СрокГодности,
		|	ВТ_Данные.Таб_ID,
		|	ВТ_Данные.Заказ,
		|	ВТ_Данные.КлючСвязи,
		|	ВТ_Данные.ДатаОжидаемойПоставки,
		|	ВТ_Данные.ID,
		|	ВТ_Данные.ТипПрайса КАК ТипПрайса,
		|	ВТ_Данные.ПодЗаказ КАК ПодЗаказ,
		|	ВТ_Данные.НеХватило КАК НеХватило
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|
		|УПОРЯДОЧИТЬ ПО
		|	Склад,
		|	ВТ_Данные.Поставщик,
		|	ВТ_Данные.Договор,
		|	ПодЗаказ,
		|	ТипПрайса
		|ИТОГИ
		|	СУММА(Количество),
		|	СУММА(НеХватило)
		|ПО
		|	Склад,
		|	Поставщик,
		|	Договор,
		|	ПодЗаказ,
		|	ТипПрайса";

	РезультатЗапроса = Запрос.Выполнить();
	// ID записей из регистра сведений ТемпАвтозаказ - для очистки регистра
	таб_ID = Новый ТаблицаЗначений;
	таб_ID.Колонки.Добавить("ID");

	// ID записей фТабДанных - для удаления заказанных товаров
	табДанных_ID = Новый ТаблицаЗначений;
	табДанных_ID.Колонки.Добавить("Флаг");
	табДанных_ID.Колонки.Добавить("Таб_ID");

	Флаг = 0;
	ВыборкаСклад = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСклад.Следующий() Цикл
		
		ВыборкаКлиент = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКлиент.Следующий() Цикл
			
			ВыборкаДоговор = ВыборкаКлиент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДоговор.Следующий() Цикл
				
				ВыборкаПодЗаказ = ВыборкаДоговор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПодЗаказ.Следующий() Цикл
					
					ВыборкаТипПрайса = ВыборкаПодЗаказ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаТипПрайса.Следующий() Цикл
						
						таб_ID.Очистить();
						
						Флаг = Флаг + 1;
						обДокумент = Документы.ЗаказПоставщику.СоздатьДокумент();
						обДокумент.Дата = ТекущаяДата();
						обДокумент.УстановитьНовыйНомер();
						обДокумент.Клиент = ВыборкаТипПрайса.Поставщик;
						обДокумент.Договор = ВыборкаТипПрайса.Договор;
						обДокумент.ТипПоставки = стрПараметров.ТипПоставки;
						обДокумент.КонтрагентПрайса = обДокумент.Клиент;
						обДокумент.ПодЗаказ = ВыборкаТипПрайса.ПодЗаказ;
						обДокумент.ТипПрайса = ВыборкаТипПрайса.ТипПрайса;
						
						Если ЗначениеЗаполнено(стрПараметров.ПоставщикЗамены) Тогда
							обДокумент.Клиент = стрПараметров.ПоставщикЗамены;
							обДокумент.КонтрагентПрайса = ВыборкаТипПрайса.Поставщик;
							обДокумент.Комментарий = обДокумент.Комментарий + ", "+СокрЛП(ВыборкаТипПрайса.Поставщик.Наименование);
						КонецЕсли;
						
						тчЗаказы = обДокумент.Заказы.ВыгрузитьКолонки();
						ВыборкаДетальныеЗаписи = ВыборкаТипПрайса.Выбрать();
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							
							обДокумент.ДатаДоставки = ВыборкаДетальныеЗаписи.ДатаОжидаемойПоставки;
							строкаТЧ = обДокумент.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(строкаТЧ, ВыборкаДетальныеЗаписи);
							
							Если ВыборкаДетальныеЗаписи.ПодЗаказ Тогда
								СтрокаЗаказы = тчЗаказы.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаЗаказы, ВыборкаДетальныеЗаписи);
							КонецЕсли; 
							
							СтрокаID = таб_ID.Добавить();
							СтрокаID.ID = ВыборкаДетальныеЗаписи.ID;
							
							СтрокаID_ = табДанных_ID.Добавить();
							СтрокаID_.Флаг = Флаг;
							СтрокаID_.Таб_ID = ВыборкаДетальныеЗаписи.Таб_ID;
							
						КонецЦикла;
					КонецЦикла;
					
					Если тчЗаказы.Количество() > 0 Тогда
						тчЗаказы.Свернуть("Заказ, Товар, КлючСвязи", "Количество");
						обДокумент.Заказы.Загрузить(тчЗаказы);
					КонецЕсли;
					тчЗаказы = "";
					обДокумент.СуммаДокумента = обДокумент.Товары.Итог("Сумма");
					
					Попытка
						обДокумент.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						стрСообщенияОбОшибках = стрСообщенияОбОшибках + "Ошибка записи документа по складу - " + Строка(ВыборкаКлиент.Склад) + ", поставщику - " + ВыборкаКлиент.Поставщик + "
						|";
						
						// Документ не записали, значит нечего и удалять в таблице
						Отбор = Новый Структура;
						Отбор.Вставить("Флаг", Флаг);
						Строки = табДанных_ID.НайтиСтроки(Отбор);
						Для каждого Строка_М Из Строки Цикл
							табДанных_ID.Удалить(Строка_М);
						КонецЦикла;
						Продолжить;
					КонецПопытки; 
					
					Попытка
						обДокумент.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						стрСообщенияОбОшибках = стрСообщенияОбОшибках + "Ошибка проведения документа " + Строка(обДокумент.Ссылка) + " по складу - " + Строка(ВыборкаКлиент.Склад) + ", поставщику - " + ВыборкаКлиент.Поставщик + "
						|";
					КонецПопытки; 
					
					Для каждого Строка_ID Из таб_ID Цикл
						НаборЗаписей = РегистрыСведений.ТемпАвтозаказ.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.ID.Установить(Строка_ID.ID);
						НаборЗаписей.Записать();
						НаборЗаписей = "";
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	табДанных_ID.Свернуть("Таб_ID", "");
	Возврат ПоместитьВоВременноеХранилище(табДанных_ID);

КонецФункции

&НаКлиенте
Процедура фТабДанныхНаименованиеТовараНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.фТабДанных.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Товар) Тогда
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Товар));
		Возврат;
	КонецЕсли;

	ПараметрфВыбора = Новый Структура;
	ПараметрфВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрфВыбора.Вставить("ИскомыйТовар", СокрЛП(ТекущиеДанные.НаименованиеТовара));
	ПараметрфВыбора.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрфВыбора.Вставить("РазрешитьВыборКорня", Ложь);
	ПараметрфВыбора.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Обработка.ОбработкаДефектуры.Форма.ФормаПоискаАналогаТовара", ПараметрфВыбора,,,,,Новый ОписаниеОповещения("ОбработкаВыбораАналогаТовара", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьТоварНаАналог(Команда)

	ТекущиеДанные = Элементы.фТабДанных.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	// Проверим есть ли Заказы в качестве источника дефектуры, товар можно менять ТОЛЬКО в заказах
	фЕстьЗаказ = Ложь;
	Отбор = Новый Структура;
	Отбор.Вставить("Таб_ID", ТекущиеДанные.Таб_ID);
	Строки = фТабРасшифровки.НайтиСтроки(Отбор);
	Для каждого СтрокаРасшифровки Из Строки Цикл
		Если ЗначениеЗаполнено(СтрокаРасшифровки.Заказ) Тогда
			фЕстьЗаказ = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 

	Если НЕ фЕстьЗаказ Тогда
		ПоказатьПредупреждение(, "Заменить на аналог можно только товары под заказ.", 20);
		Возврат;
	КонецЕсли; 

	ПараметрфВыбора = Новый Структура;
	ПараметрфВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрфВыбора.Вставить("ИскомыйТовар", СокрЛП(ТекущиеДанные.НаименованиеТовара));
	ПараметрфВыбора.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрфВыбора.Вставить("РазрешитьВыборКорня", Ложь);
	ПараметрфВыбора.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Обработка.ОбработкаДефектуры.Форма.ФормаПоискаАналогаТовара", ПараметрфВыбора,,,,,Новый ОписаниеОповещения("ОбработкаВыбораАналогаТовара", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораАналогаТовара(РезультатВыбора, Параметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ТекущиеДанные = Элементы.фТабДанных.ТекущиеДанные;
	НаименованиеТовараБыло = ТекущиеДанные.НаименованиеТовара;
	ТоварБыло = ТекущиеДанные.Товар;

	ТекущиеДанные.Товар = РезультатВыбора;
	ТекущиеДанные.НаименованиеТовара = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РезультатВыбора, "Наименование"));
	ТекущиеДанные.ЭтоТовар = Истина;

	СтрДокумент = "";
	РезультатЗамены = ОбработкаВыбораАналогаТовараВЗаказе(Новый Структура("Таб_ID, Товар", ТекущиеДанные.Таб_ID, РезультатВыбора), СтрДокумент);
	Если НЕ РезультатЗамены Тогда

		Если РезультатЗамены = Неопределено Тогда

			//ТекущиеДанные.Товар = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			ТекущиеДанные.Товар = ТоварБыло;
			ТекущиеДанные.НаименованиеТовара = НаименованиеТовараБыло;
			ТекущиеДанные.ЭтоТовар = Ложь;

			Предупреждение("НЕ удалось записать источник дефектуры (" + СтрДокумент + ").
			|Повторите попытку замены товара");

		Иначе

			Предупреждение("НЕ удалось перепровести источник дефектуры (" + СтрДокумент + ").
			|Обязательно перепроведите документ самостоятельно");

		КонецЕсли; 

	КонецЕсли; 

КонецПроцедуры

&НаСервере
Функция ОбработкаВыбораАналогаТовараВЗаказе(стрПараметры, Знач СтрДокумент)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Таб_ID", стрПараметры.Таб_ID);
	Строки = фТабРасшифровки.НайтиСтроки(Отбор);
	Для каждого СтрокаРасшифровки Из Строки Цикл
	
		Если ЗначениеЗаполнено(СтрокаРасшифровки.Заказ) Тогда
			
			СтрДокумент = Строка(СтрокаРасшифровки.Заказ);

			обДокумент = СтрокаРасшифровки.Заказ.ПолучитьОбъект();
			Отбор.Очистить();
			Отбор.Вставить("КлючСвязи", СтрокаРасшифровки.КлючСвязи);
			
			СтрокиПодЗаказ = обДокумент.ПодЗаказ.НайтиСтроки(Отбор);
			Для каждого СтрокаЗ Из СтрокиПодЗаказ Цикл
				СтрокаЗ.Товар = стрПараметры.Товар;
				СтрокаЗ.Наименование = СокрЛП(стрПараметры.Товар.Наименование);
			КонецЦикла;
			
			Попытка
				обДокумент.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Возврат Неопределено;
			КонецПопытки; 

			Попытка
				обДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Возврат Ложь;
			КонецПопытки; 

		КонецЕсли; 
	КонецЦикла; 

	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура УдалитьСвязкуПоставщикаСТоваром(Команда)

	ТД = Элементы.фТабПрайсПоставщика.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Вопрос("Вы действительно хотите удалить связь поставщика """ + СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТД.Поставщик, "Наименование")) + """ с товаром """ + СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТД.Товар, "Наименование")) + """ ?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ТД.Поставщик) Тогда
		ПоказатьПредупреждение(, "Не указан поставщик", 20);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТД.КодТовараПоставщика) Тогда
		ПоказатьПредупреждение(, "Не указан код товара поставщика", 20);
		Возврат;
	КонецЕсли;

	УдалитьСвязкуПоставщикаСТоваромНаСервере(ТД.ID);

КонецПроцедуры
&НаСервере
Процедура УдалитьСвязкуПоставщикаСТоваромНаСервере(ID)
	
	Строки = фТабПрайсПоставщика.НайтиСтроки(Новый Структура("ID", ID));
	Для каждого СтрокаТЧ Из Строки Цикл

		НаборЗаписей = РегистрыСведений.supplier_price.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Поставщик.Установить(СтрокаТЧ.Поставщик);
		НаборЗаписей.Отбор.Договор.Установить(СтрокаТЧ.Договор);
//		НаборЗаписей.Отбор.Товар.Установить(СтрокаТЧ.Товар);
		НаборЗаписей.Отбор.КодПоставщика.Установить(СтрокаТЧ.КодТовараПоставщика);
		НаборЗаписей.Записать();
		НаборЗаписей = "";

		НаборЗаписей = РегистрыСведений.ТоварыПоставщика.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Поставщик.Установить(СтрокаТЧ.Поставщик);
//		НаборЗаписей.Отбор.Товар.Установить(СтрокаТЧ.Товар);
		НаборЗаписей.Отбор.КодТовараПоставщика.Установить(СтрокаТЧ.КодТовараПоставщика);
		НаборЗаписей.Записать();
		НаборЗаписей = "";

		НаборЗаписей = РегистрыСведений.ПрайсЛистПоставщика.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Поставщик.Установить(СтрокаТЧ.Поставщик);
		НаборЗаписей.Отбор.Договор.Установить(СтрокаТЧ.Договор);
		НаборЗаписей.Отбор.КодПоставщика.Установить(СтрокаТЧ.КодТовараПоставщика);
		
		НаборЗаписей.Записать();
		НаборЗаписей = "";

		фТабПрайсПоставщика.Удалить(СтрокаТЧ);

	КонецЦикла;

КонецПроцедуры



&НаКлиенте
Процедура ЗаблокироватьПоставщикТовар(Команда)
	
	ТД = Элементы.фТабПрайсПоставщика.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Вопрос("Вы действительно хотите заблокировать торговое предложение поставщика """ + СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТД.Поставщик, "Наименование")) + """ по товару """ + СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТД.Товар, "Наименование")) + """ ?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ТД.Поставщик) Тогда
		ПоказатьПредупреждение(, "Не указан поставщик", 20);
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ТД.КодТовараПоставщика) Тогда
		ПоказатьПредупреждение(, "Не указан код товара поставщика", 20);
		Возврат;
	КонецЕсли;

	ЗаблокироватьПоставщикТоварНаСервере(ТД.ID);

КонецПроцедуры
&НаСервере
Процедура ЗаблокироватьПоставщикТоварНаСервере(ID)
	
	Строки = фТабПрайсПоставщика.НайтиСтроки(Новый Структура("ID", ID));
	Для каждого СтрокаТЧ Из Строки Цикл

		НаборЗаписей = РегистрыСведений.БлокированныеТоварыПоставщиков.СоздатьМенеджерЗаписи();
		НаборЗаписей.Поставщик = СтрокаТЧ.Поставщик;
		НаборЗаписей.КодТовараПоставщика = СтрокаТЧ.КодТовараПоставщика;
		НаборЗаписей.Цена = СтрокаТЧ.Цена;
		НаборЗаписей.Остаток = СтрокаТЧ.КолВНаличии;
		НаборЗаписей.ДатаУстановки = ТекущаяДата();
		НаборЗаписей.Активно = Истина;
		НаборЗаписей.Записать();

		фТабПрайсПоставщика.Удалить(СтрокаТЧ);

	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Процедура ПоместитьТоварВФильтр(Команда)
	
	ТД = Элементы.фТабДанных.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		ПоказатьПредупреждение(, "Не выбран товар", 20);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТД.Товар) Тогда
		ПоказатьПредупреждение(, "В текущей строке товар не заполнен", 20);
		Возврат;
	КонецЕсли;

	ПоместитьТоварВФильтрНаСервере(ТД.Товар);

КонецПроцедуры
&НаСервере
Процедура ПоместитьТоварВФильтрНаСервере(слкТовар)
	
	Если Объект.табТовары.НайтиСтроки(Новый Структура("Товар", слкТовар)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ = Объект.табТовары.Добавить();
	СтрокаТЧ.Товар = слкТовар;

КонецПроцедуры


&НаКлиенте
Процедура РассчитатьСуммыТабЛимитыПоставки(Команда)
	РассчитатьСуммыТабЛимитыПоставкиНаСервере();
КонецПроцедуры
&НаСервере
Процедура РассчитатьСуммыТабЛимитыПоставкиНаСервере()

	фТабЛимитыПоставки.Очистить();

	_ТабДанных = фТабДанных.Выгрузить();
	ТабДанных = _ТабДанных.СкопироватьКолонки();
	Отбор = Новый Структура;
	Отбор.Вставить("Пометка", Истина);
	Отбор.Вставить("ЭтоТовар", Истина);
	Строки = _ТабДанных.НайтиСтроки(Отбор);
	Для каждого Строка_М Из Строки Цикл
		Если НЕ ЗначениеЗаполнено(Строка_М.Поставщик) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТЧ = ТабДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Строка_М);
	КонецЦикла;
	_ТабДанных = "";
	ТабДанных.Свернуть("Поставщик, Склад", "СуммаЗаказа");

	стрУсловиеПоставщика = ?(Объект.табПоставщики.Количество() = 0, "", "И НЕ ВТ_Поставщики.Поставщик ЕСТЬ NULL");
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВыбПоставщики", Объект.табПоставщики.Выгрузить());
	Запрос.УстановитьПараметр("ВыбСклады", Объект.табСклады.Выгрузить());
	Запрос.УстановитьПараметр("ДатаНачЗакупки", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаКонЗакупки", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТабЗаказано", ТабДанных);

	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыбСклады.Склад КАК Склад
		|ПОМЕСТИТЬ ВТ_Склады
		|ИЗ
		|	&ВыбСклады КАК ВыбСклады
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыбПоставщики.Поставщик КАК Поставщик
		|ПОМЕСТИТЬ ВТ_Поставщики
		|ИЗ
		|	&ВыбПоставщики КАК ВыбПоставщики
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Поставщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабЗаказано.Поставщик КАК Поставщик,
		|	ТабЗаказано.Склад КАК Склад,
		|	ТабЗаказано.СуммаЗаказа КАК СуммаЗаказа
		|ПОМЕСТИТЬ ВТ_ТекЗаказ
		|ИЗ
		|	&ТабЗаказано КАК ТабЗаказано
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Поставщик,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказПоставщикуТовары.Склад,
		|	ЗаказПоставщикуТовары.Ссылка.КонтрагентПрайса,
		|	ЗаказПоставщикуТовары.Ссылка.ТипПоставки,
		|	ЗаказПоставщикуТовары.Ссылка.СуммаДокумента КАК СуммаДокумента
		|ПОМЕСТИТЬ ВТ_ТекущиеЗаказы
		|ИЗ
		|	ВТ_Склады КАК ВТ_Склады
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|		ПО ВТ_Склады.Склад = ЗаказПоставщикуТовары.Склад
		|	" + ?(Объект.табПоставщики.Количество() = 0, "", "ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Поставщики КАК ВТ_Поставщики ПО (ВТ_Поставщики.Поставщик = ЗаказПоставщикуТовары.Ссылка.КонтрагентПрайса)") + "
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка.Дата МЕЖДУ &ДатаНачЗакупки И &ДатаКонЗакупки
		|	И ЗаказПоставщикуТовары.Ссылка.Проведен = Истина
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Q.Поставщик, ВТ_ТекЗаказ.Поставщик) КАК Поставщик,
		|	ЕСТЬNULL(Q.Склад, ВТ_ТекЗаказ.Склад) КАК Склад,
		|	Q.ТипПоставки,
		|	isNull(ВТ_ТекЗаказ.СуммаЗаказа, 0) КАК СуммаЗаказа,
		|	СУММА(Q.Лимит) КАК ЛимитОтгрузки,
		|	СУММА(Q.СуммаДокумента) КАК СуммаРанееЗаказано
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЛимитыПоставки.Склад КАК Склад,
		|		ЛимитыПоставки.Поставщик КАК Поставщик,
		|		ЛимитыПоставки.ТипПоставки КАК ТипПоставки,
		|		МАКСИМУМ(ЛимитыПоставки.Сумма) КАК Лимит,
		|		0 КАК СуммаДокумента
		|	ИЗ
		|		ВТ_Склады КАК ВТ_Склады
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛимитыПоставки КАК ЛимитыПоставки ПО ЛимитыПоставки.Склад = ВТ_Склады.Склад
		|		" + ?(Объект.табПоставщики.Количество() = 0, "", "ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Поставщики КАК ВТ_Поставщики ПО ЛимитыПоставки.Поставщик = ВТ_Поставщики.Поставщик") + "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияПоДоговору КАК МестаХраненияПоДоговору
		|			ПО ЛимитыПоставки.Поставщик = МестаХраненияПоДоговору.Поставщик
		|			И ЛимитыПоставки.Склад = МестаХраненияПоДоговору.МестоХранения
		|			И ЛимитыПоставки.ТипПоставки = МестаХраненияПоДоговору.ТипПоставки
		|	ГДЕ
		|		МестаХраненияПоДоговору.Активный = ИСТИНА
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЛимитыПоставки.Поставщик,
		|		ЛимитыПоставки.Склад,
		|		ЛимитыПоставки.ТипПоставки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_ТекущиеЗаказы.Склад,
		|		ВТ_ТекущиеЗаказы.КонтрагентПрайса,
		|		ВТ_ТекущиеЗаказы.ТипПоставки,
		|		0,
		|		ВТ_ТекущиеЗаказы.СуммаДокумента
		|	ИЗ
		|		ВТ_ТекущиеЗаказы КАК ВТ_ТекущиеЗаказы) КАК Q
		|	ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ТекЗаказ КАК ВТ_ТекЗаказ
		|		ПО Q.Поставщик = ВТ_ТекЗаказ.Поставщик
		|			И Q.Склад = ВТ_ТекЗаказ.Склад
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Q.Склад, ВТ_ТекЗаказ.Склад),
		|	ЕСТЬNULL(Q.Поставщик, ВТ_ТекЗаказ.Поставщик),
		|	Q.ТипПоставки,
		|	ВТ_ТекЗаказ.СуммаЗаказа
		|order by 
		|	ЕСТЬNULL(Q.Поставщик, ВТ_ТекЗаказ.Поставщик),
		|	ЕСТЬNULL(Q.Склад, ВТ_ТекЗаказ.Склад),
		|	Q.ТипПоставки";

	фТабЛимитыПоставки.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры


&НаСервере
Процедура ОтчетКтоЗахватилТоварыСкладаНаСервере()
	
	ТабличныйДокумент.Очистить();
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	Макет = ЭтаОбработка.ПолучитьМакет("МакетКтоЗахватилТовары");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ТабличныйДокумент.Вывести(ОбластьШапка);
	ТабличныйДокумент.ФиксацияСверху = 4;
	ТабличныйДокумент.ФиксацияСлева = 1;
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВыбСклады", Объект.табСклады.Выгрузить());
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыбСклады.Склад КАК Склад
		|ПОМЕСТИТЬ ВТ_Склады
		|ИЗ
		|	&ВыбСклады КАК ВыбСклады
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТемпАвтозаказ.Склад КАК Склад,
		|	ТемпАвтозаказ.Сотрудник КАК Сотрудник,
		|	ТемпАвтозаказ.Товар КАК Товар,
		|	ТемпАвтозаказ.Поставщик,
		|	ТемпАвтозаказ.Заказано
		|ИЗ
		|	ВТ_Склады КАК ВТ_Склады
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТемпАвтозаказ КАК ТемпАвтозаказ
		|		ПО ВТ_Склады.Склад = ТемпАвтозаказ.Склад
		|ГДЕ
		|	ТемпАвтозаказ.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Склад,
		|	Сотрудник,
		|	Товар";

	Ном = 1;
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл

		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, РезультатЗапроса);
		ОбластьСтрока.Параметры.Ном = Ном;
		ТабличныйДокумент.Вывести(ОбластьСтрока);

		Ном = Ном + 1;

	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ОтчетКтоЗахватилТоварыСклада(Команда)
	
	Состояние("Выполняется построение отчета ....");
	ОтчетКтоЗахватилТоварыСкладаНаСервере();
	Если Элементы.СтраницаОтчет.Видимость Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОтчет;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура фТабДанныхПометкаПриИзменении(Элемент)
	
	ЗначПометка = Элементы.фТабДанных.ТекущиеДанные.Пометка;
	Отбор = Новый Структура;
	ВыделенныеСтроки = Элементы.фТабДанных.ВыделенныеСтроки;
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		СтрокаТЧ = фТабДанных.НайтиПоИдентификатору(ТекущаяСтрока);
		СтрокаТЧ.Пометка = ЗначПометка;
	КонецЦикла;

КонецПроцедуры


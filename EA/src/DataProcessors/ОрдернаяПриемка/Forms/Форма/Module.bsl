
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Товары.Параметры.УстановитьЗначениеПараметра("Документы",Новый Массив);
	КоличествоСимволовФильтра = 10;
	ТолькоТребующиеСогласования = Истина;
	
	ИспользоватьПодключаемоеОборудование = МенеджерОборудованияВызовСервераПереопределяемый.ИспользоватьПодключаемоеОборудование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЭтаФорма.Элементы.Страницы.ПодчиненныеЭлементы.ПриемныйАкт.Видимость = Ложь;
	ЭтаФорма.Элементы.Страницы.ПодчиненныеЭлементы.СканированиеТовара.Видимость = Истина;
	//ПодключитьОбработчикОжидания("ОбновитьСписокНакладныхОбработчик",5);
	
	// ПодключаемоеОборудование
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещенияПриПодключении, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ЗаголовокИнформации = НСтр("ru = 'При подключении оборудования произошла ошибка: '; en = 'An error occurred while connecting the equipment: '");
		ТекстСообщения     = РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЗаголовокИнформации + ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	ОповещенияПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект); 
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещенияПриОтключении, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
   
   Если Не РезультатВыполнения.Результат Тогда
      ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
      ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
      Сообщить(ТекстСообщения);
   //Иначе
   //   ТекстСообщения = НСтр("ru = 'Оборудование отключено.'" );
   //   Сообщить(ТекстСообщения);
   КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область КомандыФормы

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере() 
	ОбновитьСписокНакладных();
КонецПроцедуры

&НаКлиенте
Процедура Просканировано(Команда)
	Элементы.Товары.Обновить();	
КонецПроцедуры

&НаКлиенте
Процедура СбросСканера(Команда)
// ЕМ		Scan.ПосылкаДанных = 1;
КонецПроцедуры

&НаСервере 
Функция ПолучитьСписокСканируемыхПриходов()
	
	Таблица =  ТЗДокументы.Выгрузить(,"ДокументСсылка,Флаг");
	Строки = Таблица.НайтиСтроки(Новый Структура("Флаг", Истина));
	Доки = Таблица.Скопировать(Строки).ВыгрузитьКолонку("ДокументСсылка");
	
	Возврат Доки
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуТоваровПоОборабатываемымНакладным()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходнаяТовары.Ссылка.Клиент КАК Поставщик,
	|	ПриходнаяТовары.Ссылка.НомерОснования КАК Номер,
	|	ПриходнаяТовары.Товар,
	|	ПриходнаяТовары.Партия.Серия КАК Серия,
	|	ПриходнаяТовары.Партия.ГоденДо КАК Годен,
	|	ПриходнаяТовары.Количество,
	|	ПриходнаяТовары.Ссылка,
	|	ПриходнаяТовары.Партия
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.Приходная.Товары КАК ПриходнаяТовары
	|ГДЕ
	|	ПриходнаяТовары.Ссылка В(&Документы)
	|	И ПриходнаяТовары.Товар.Обязательный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТовары.Ссылка.Поставщик,
	|	ПеремещениеТовары.Ссылка.Номер,
	|	ПеремещениеТовары.Товар,
	|	ПеремещениеТовары.Партия.Серия,
	|	ПеремещениеТовары.Партия.ГоденДо,
	|	ПеремещениеТовары.Количество,
	|	ПеремещениеТовары.Ссылка,
	|	ПеремещениеТовары.Партия
	|ИЗ
	|	Документ.Перемещение.Товары КАК ПеремещениеТовары
	|ГДЕ
	|	ПеремещениеТовары.Ссылка В(&Документы)
	|	И ПеремещениеТовары.Товар.Обязательный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Поставщик,
	|	втТовары.Номер КАК Номер,
	|	втТовары.Товар КАК Товар,
	|	втТовары.Серия,
	|	втТовары.Годен,
	|	втТовары.Количество,
	|	СУММА(ЕСТЬNULL(Приемка_ТоварыВРаботе.Количество, 0)) КАК Сканирование,
	|	втТовары.Партия,
	|	втТовары.Ссылка КАК Документ
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Приемка_ТоварыВРаботе КАК Приемка_ТоварыВРаботе
	|		ПО (Приемка_ТоварыВРаботе.Документ = втТовары.Ссылка)
	|			И (Приемка_ТоварыВРаботе.Товар = втТовары.Товар)
	|			И (Приемка_ТоварыВРаботе.Партия = втТовары.Партия)
	|
	|СГРУППИРОВАТЬ ПО
	|	втТовары.Поставщик,
	|	втТовары.Серия,
	|	втТовары.Партия,
	|	втТовары.Годен,
	|	втТовары.Товар,
	|	втТовары.Номер,
	|	втТовары.Количество,
	|	втТовары.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер,
	|	втТовары.Товар.Наименование";
	Запрос.УстановитьПараметр("Документы", ПолучитьСписокСканируемыхПриходов());
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат ПоместитьВоВременноеХранилище(Таблица);
	
	
КонецФункции

&НаКлиенте
Процедура ПозицияБезШК(Команда)
	
	АдресТаблицы = ПолучитьТаблицуТоваровПоОборабатываемымНакладным();
	
	СтруктураПараметровФормыВыбора = Новый Структура;
	СтруктураПараметровФормыВыбора.Вставить("АдресТаблицы",АдресТаблицы);
	СтруктураПараметровФормыВыбора.Вставить("ИмяСобытияВыбора", "ОрдернаяПриемка_ПозицияБезШК");
	СтруктураПараметровФормыВыбора.Вставить("Заголовок", "Выбор номенклатуры без штрих-кода");
	СписокКолонок = Новый СписокЗначений;
	//СписокКолонок.Добавить("Номер","Номер"); // Захар 13-11-2017
	СписокКолонок.Добавить("Документ", "Документ"); // Захар 13-11-2017
	СписокКолонок.Добавить("Товар","Товар");
	СписокКолонок.Добавить("Серия","Серия");
	СписокКолонок.Добавить("Годен","Годен");
	СписокКолонок.Добавить("Количество","Количество");
	СписокКолонок.Добавить("Сканирование","Сканирование");
	СписокКолонок.Добавить("Партия","Партия");
	СтруктураПараметровФормыВыбора.Вставить("СписокКолонок",СписокКолонок);	
	ОткрытьФорму("ОбщаяФорма.ФормаВыборИзТаблицыЗначений",СтруктураПараметровФормыВыбора,ЭтаФорма,Истина,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);		
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПриемныеОрдера(Команда)
	
	Если ЕстьОтсканированныеТовары() тогда
		Оповещение = Новый ОписаниеОповещения("СформироватьПриемныеОрдераОповещение",ЭтаФорма);
		ПоказатьВопрос(Оповещение,"Сформировать документы ""Ордерный прием"" по просканированной номенклатуре?",РежимДиалогаВопрос.ДаНет);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нет отсканированных товаров!!!";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область КомандаОбновить

&НаСервере
Процедура ОбновитьСписокНакладных() Экспорт
	ТаблицаЗаполнено = ТЗДокументы.Выгрузить(,"Флаг,ДокументСсылка,ЗавершитьСканирование");
	
	ТЗДокументы.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	// Захар 13-11-2017 {
	//"ВЫБРАТЬ
	//|	ТЗ.Флаг,
	//|	ТЗ.ДокументСсылка,
	//|	ТЗ.ЗавершитьСканирование
	//|ПОМЕСТИТЬ ВТ_Флаги
	//|ИЗ
	//|	&ТЗ КАК ТЗ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Приходная.Ссылка,
	//|	Приходная.НомерОснования,
	//|	Приходная.Клиент
	//|ПОМЕСТИТЬ ВТ_Приходная
	//|ИЗ
	//|	Документ.Приходная КАК Приходная
	//|ГДЕ
	//|	Приходная.РазрешенаПриемка
	//|	И Приходная.Проведен
	//|	И НЕ Приходная.ВычНП
	//|	И Приходная.ОрдернаяСхема = 1
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	СУММА(Приемка_ТоварыВРаботе.Количество) КАК Количество,
	//|	Приемка_ТоварыВРаботе.Документ
	//|ПОМЕСТИТЬ втКоличествоОтсканированных
	//|ИЗ
	//|	РегистрСведений.Приемка_ТоварыВРаботе КАК Приемка_ТоварыВРаботе
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Приходная КАК ВТ_Приходная
	//|		ПО Приемка_ТоварыВРаботе.Документ = ВТ_Приходная.Ссылка
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Приемка_ТоварыВРаботе.Документ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_Приходная.НомерОснования КАК Номер,
	//|	ЕСТЬNULL(ВТ_Флаги.Флаг, ВЫБОР
	//|			КОГДА Приемка_ДокументыВРаботе.Документ ЕСТЬ NULL 
	//|				ТОГДА ЛОЖЬ
	//|			ИНАЧЕ ИСТИНА
	//|		КОНЕЦ) КАК Флаг,
	//|	ВТ_Приходная.Ссылка КАК ДокументСсылка,
	//|	ВТ_Приходная.Клиент КАК Поставщик,
	//|	ЕСТЬNULL(СУММА(ПриходнаяТовары.Количество), 0) КАК КоличествоПриход,
	//|	ЕСТЬNULL(втКоличествоОтсканированных.Количество, 0) КАК КоличествоОтсканированно,
	//|	ЕСТЬNULL(ВТ_Флаги.ЗавершитьСканирование, ВЫБОР
	//|			КОГДА ЕСТЬNULL(СУММА(ПриходнаяТовары.Количество), 0) = ЕСТЬNULL(втКоличествоОтсканированных.Количество, 0)
	//|					И ЕСТЬNULL(ВТ_Флаги.Флаг, ВЫБОР
	//|							КОГДА Приемка_ДокументыВРаботе.Документ ЕСТЬ NULL 
	//|								ТОГДА ЛОЖЬ
	//|							ИНАЧЕ ИСТИНА
	//|						КОНЕЦ)
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ) КАК ЗавершитьСканирование
	//|ИЗ
	//|	ВТ_Приходная КАК ВТ_Приходная
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Приемка_ДокументыВРаботе КАК Приемка_ДокументыВРаботе
	//|		ПО ВТ_Приходная.Ссылка = Приемка_ДокументыВРаботе.Документ
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Приходная.Товары КАК ПриходнаяТовары
	//|		ПО ВТ_Приходная.Ссылка = ПриходнаяТовары.Ссылка
	//|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоОтсканированных КАК втКоличествоОтсканированных
	//|		ПО ВТ_Приходная.Ссылка = втКоличествоОтсканированных.Документ
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Флаги КАК ВТ_Флаги
	//|		ПО ВТ_Приходная.Ссылка = ВТ_Флаги.ДокументСсылка
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВТ_Приходная.НомерОснования,
	//|	ВТ_Приходная.Ссылка,
	//|	ВТ_Приходная.Клиент,
	//|	ЕСТЬNULL(втКоличествоОтсканированных.Количество, 0),
	//|	втКоличествоОтсканированных.Количество,
	//|	ЕСТЬNULL(ВТ_Флаги.Флаг, ВЫБОР
	//|			КОГДА Приемка_ДокументыВРаботе.Документ ЕСТЬ NULL 
	//|				ТОГДА ЛОЖЬ
	//|			ИНАЧЕ ИСТИНА
	//|		КОНЕЦ),
	//|	ВТ_Флаги.ЗавершитьСканирование,
	//|	ВТ_Флаги.Флаг,
	//|	Приемка_ДокументыВРаботе.Документ
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Поставщик,
	//|	Номер";
	"ВЫБРАТЬ
	|	ТЗ.Флаг,
	|	ТЗ.ДокументСсылка,
	|	ТЗ.ЗавершитьСканирование
	|ПОМЕСТИТЬ ВТ_Флаги
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приходная.Ссылка,
	|	Приходная.НомерОснования,
	|	Приходная.Клиент
	|ПОМЕСТИТЬ ВТ_Приходная
	|ИЗ
	|	Документ.Приходная КАК Приходная
	|ГДЕ
	//|	Приходная.РазрешенаПриемка и
	|	 Приходная.Проведен
	|	И НЕ Приходная.ВычНП
	|	И Приходная.ОрдернаяСхема = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Перемещение.Ссылка,
	|	"""" КАК НомерОснования,
	|	Перемещение.Поставщик КАК Клиент
	|ПОМЕСТИТЬ ВТ_Перемещение
	|ИЗ
	|	Документ.Перемещение КАК Перемещение
	|ГДЕ
	|	Перемещение.Проведен
	|	И НЕ Перемещение.РазрешитьПродажу
	|	И Перемещение.ВводЗавершен
	|	И Перемещение.Поставщик В
	|			(ВЫБРАТЬ
	|				АдресХранения.ОсновнойСклад КАК ОсновнойСклад
	|			ИЗ
	|				Справочник.АдресХранения КАК АдресХранения
	|			ГДЕ
	|				НЕ АдресХранения.ОсновнойСклад = ЗНАЧЕНИЕ(Справочник.АдресХранения.ПустаяСсылка))
	|	И Перемещение.Получатель В
	|			(ВЫБРАТЬ
	|					АдресХраненияТекущейБазы.Значение.ОсновнойСклад КАК ОсновнойСклад
	|				ИЗ
	|					Константа.АдресХраненияТекущейБазы КАК АдресХраненияТекущейБазы)
	|	И НЕ Перемещение.Поставщик В
	|				(ВЫБРАТЬ
	|					АдресХраненияТекущейБазы.Значение.ОсновнойСклад КАК ОсновнойСклад
	|				ИЗ
	|					Константа.АдресХраненияТекущейБазы КАК АдресХраненияТекущейБазы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Приходная.Ссылка КАК Ссылка,
	|	ВТ_Приходная.НомерОснования КАК НомерОснования,
	|	ВТ_Приходная.Клиент КАК Клиент
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	ВТ_Приходная КАК ВТ_Приходная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Перемещение.Ссылка,
	|	ВТ_Перемещение.НомерОснования,
	|	ВТ_Перемещение.Клиент
	|ИЗ
	|	ВТ_Перемещение КАК ВТ_Перемещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяТовары.Ссылка,
	|	ПриходнаяТовары.Товар,
	|	ПриходнаяТовары.Партия,
	|	ПриходнаяТовары.Количество
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.Приходная.Товары КАК ПриходнаяТовары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТовары.Ссылка,
	|	ПеремещениеТовары.Товар,
	|	ПеремещениеТовары.Партия,
	|	ПеремещениеТовары.Количество
	|ИЗ
	|	Документ.Перемещение.Товары КАК ПеремещениеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Приемка_ТоварыВРаботе.Количество) КАК Количество,
	|	Приемка_ТоварыВРаботе.Документ
	|ПОМЕСТИТЬ втКоличествоОтсканированных
	|ИЗ
	|	РегистрСведений.Приемка_ТоварыВРаботе КАК Приемка_ТоварыВРаботе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО Приемка_ТоварыВРаботе.Документ = ВТ_Документы.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Приемка_ТоварыВРаботе.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТ_Документы.Ссылка ССЫЛКА Документ.Приходная
	|			ТОГДА ВТ_Документы.НомерОснования
	|		КОГДА ВТ_Документы.Ссылка ССЫЛКА Документ.Перемещение
	|			ТОГДА ВТ_Документы.Ссылка.Номер
	|	КОНЕЦ КАК Номер,
	|	ЕСТЬNULL(ВТ_Флаги.Флаг, ВЫБОР
	|			КОГДА Приемка_ДокументыВРаботе.Документ ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ Приемка_ДокументыВРаботе.Флаг
	|		КОНЕЦ) КАК Флаг,
	|	ВТ_Документы.Ссылка КАК ДокументСсылка,
	|	ВТ_Документы.Клиент КАК Поставщик,
	|	ЕСТЬNULL(СУММА(ВТ_Товары.Количество), 0) КАК КоличествоПриход,
	|	ЕСТЬNULL(втКоличествоОтсканированных.Количество, 0) КАК КоличествоОтсканированно,
	//|	ЕСТЬNULL(ВТ_Флаги.ЗавершитьСканирование, 
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СУММА(ВТ_Товары.Количество), 0) = ЕСТЬNULL(втКоличествоОтсканированных.Количество, 0)
	|				И ЕСТЬNULL(ВТ_Флаги.Флаг, ВЫБОР
	|						КОГДА Приемка_ДокументыВРаботе.Документ ЕСТЬ NULL 
	|							ТОГДА ЛОЖЬ
	|						ИНАЧЕ Приемка_ДокументыВРаботе.Флаг
	|					КОНЕЦ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗавершитьСканирование,
	|	ВЫБОР
	|		КОГДА ВТ_Документы.Ссылка ССЫЛКА Документ.Приходная
	|			ТОГДА ""Накладная""
	|		КОГДА ВТ_Документы.Ссылка ССЫЛКА Документ.Перемещение
	|			ТОГДА ""Перемещение""
	|	КОНЕЦ КАК ВидПоступления,
	|	ВЫБОР
	|		КОГДА ВТ_Документы.Ссылка ССЫЛКА Документ.Приходная
	|			ТОГДА ВТ_Документы.Ссылка.СуммаНДС10
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНДС10,
	|	ВЫБОР
	|		КОГДА ВТ_Документы.Ссылка ССЫЛКА Документ.Приходная
	|			ТОГДА ВТ_Документы.Ссылка.СуммаНДС20
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНДС20,
	|	ВЫБОР
	|		КОГДА ВТ_Документы.Ссылка ССЫЛКА Документ.Приходная
	|			ТОГДА ВТ_Документы.Ссылка.СуммаПоставщика
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаПоставщика
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Приемка_ДокументыВРаботе КАК Приемка_ДокументыВРаботе
	|		ПО ВТ_Документы.Ссылка = Приемка_ДокументыВРаботе.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоОтсканированных КАК втКоличествоОтсканированных
	|		ПО ВТ_Документы.Ссылка = втКоличествоОтсканированных.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Флаги КАК ВТ_Флаги
	|		ПО ВТ_Документы.Ссылка = ВТ_Флаги.ДокументСсылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
	|		ПО ВТ_Документы.Ссылка = ВТ_Товары.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(Приемка_ДокументыВРаботе.ЗавершениеПриемки, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Документы.Ссылка,
	|	ВТ_Документы.Клиент,
	|	ЕСТЬNULL(втКоличествоОтсканированных.Количество, 0),
	|	втКоличествоОтсканированных.Количество,
	|	ВТ_Флаги.ЗавершитьСканирование,
	|	ВТ_Флаги.Флаг,
	|	Приемка_ДокументыВРаботе.Документ,
	|	ВЫБОР
	|		КОГДА ВТ_Документы.Ссылка ССЫЛКА Документ.Приходная
	|			ТОГДА ВТ_Документы.НомерОснования
	|		КОГДА ВТ_Документы.Ссылка ССЫЛКА Документ.Перемещение
	|			ТОГДА ВТ_Документы.Ссылка.Номер
	|	КОНЕЦ,
	|	ЕСТЬNULL(ВТ_Флаги.Флаг, ВЫБОР
	|			КОГДА Приемка_ДокументыВРаботе.Документ ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ Приемка_ДокументыВРаботе.Флаг
	|		КОНЕЦ),
	|	Приемка_ДокументыВРаботе.Флаг,
	|	ВЫБОР
	|		КОГДА ВТ_Документы.Ссылка ССЫЛКА Документ.Приходная
	|			ТОГДА ВТ_Документы.Ссылка.СуммаНДС10
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_Документы.Ссылка ССЫЛКА Документ.Приходная
	|			ТОГДА ВТ_Документы.Ссылка.СуммаНДС20
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_Документы.Ссылка ССЫЛКА Документ.Приходная
	|			ТОГДА ВТ_Документы.Ссылка.СуммаПоставщика
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Поставщик,
	|	Номер";
	// } Захар
	Запрос.УстановитьПараметр("ТЗ",ТаблицаЗаполнено);
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() тогда
		ТЗДокументы.Загрузить(РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
	ОбновитьСписокПросканированного();	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПросканированного()
	
	Доки = ПолучитьСписокСканируемыхПриходов();
	Товары.Параметры.УстановитьЗначениеПараметра("Документы",Доки);
	ЭтаФорма.Элементы.Товары.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФормы

&НаКлиенте
Процедура ДокументыФлагПриИзменении(Элемент)
	
	ТекСтрока = Элемент.Родитель.ТекущиеДанные;
	ПереводДокументаИЗ_ВРаботу(ТекСтрока.ДокументСсылка, ТекСтрока.Флаг);
	ОбновитьСписокПросканированного();
	Если НЕ ТекСтрока.Флаг тогда
		ТекСтрока.ЗавершитьСканирование = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПереводДокументаИЗ_ВРаботу(Ссылка,Флаг)
	
	МенеджерЗаписи_Приемка_ДокументыВРаботе = РегистрыСведений.Приемка_ДокументыВРаботе.СоздатьМенеджерЗаписи();
	МенеджерЗаписи_Приемка_ДокументыВРаботе.Документ = Ссылка;
	МенеджерЗаписи_Приемка_ДокументыВРаботе.НачалоПриемки = ТекущаяДата();
	МенеджерЗаписи_Приемка_ДокументыВРаботе.Флаг = Флаг;
	МенеджерЗаписи_Приемка_ДокументыВРаботе.Записать();
	
	ПриходнаяОбъект = Ссылка.ПолучитьОбъект();
	ПриходнаяОбъект.РазрешенаПриемка = Флаг;
	ПриходнаяОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Захар 13-11-2017 {
	//ОткрытьФорму("Документ.Приходная.Форма.ФормаДокумента",Новый Структура("Ключ",Элемент.ТекущиеДанные.ДокументСсылка));
	
	НазваниеФормыДокумента = "";
	
	Если ТипЗнч(Элемент.ТекущиеДанные.ДокументСсылка) = Тип("ДокументСсылка.Приходная") Тогда
		НазваниеФормыДокумента = "Документ.Приходная.Форма.ФормаДокумента";
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.ДокументСсылка) = Тип("ДокументСсылка.Перемещение") Тогда
		НазваниеФормыДокумента = "Документ.Перемещение.Форма.ФормаДокумента";
	КонецЕсли;
	
	ОткрытьФорму(НазваниеФормыДокумента, Новый Структура("Ключ", Элемент.ТекущиеДанные.ДокументСсылка));
	// } Захар
	
КонецПроцедуры

&НаКлиенте
Процедура ШКВручнуюПриИзменении(Элемент)
	
	ОбработатьВводШтрихкодаВручную(ШКВручную);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСканированияШтрихКода

&НаКлиенте
Процедура ОбработатьВводШтрихкодаВручную(ШК)
	
	ШК = СокрЛП(ШК);
	Если СтрДлина(ШК) < 4 тогда
		СообщениеПользователю = новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Для поиска штрихкода необходимо ввести мимимум 4 цифры!";
		СообщениеПользователю.Сообщить();
		Возврат;
	ИначеЕсли не ОбщиеФункцииКлиент.ВСтрокеТолькоЦифры(ШК) тогда
		СообщениеПользователю = новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Штрих-код может состоять только из цифр!";
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	АдресТаблицы = Неопределено;
	Если ПолучитьТаблицуТоваровПоШтрихКоду(ШК,АдресТаблицы) тогда
		СтруктураПараметровФормыВыбора = Новый Структура;
		СтруктураПараметровФормыВыбора.Вставить("АдресТаблицы",АдресТаблицы);
		СтруктураПараметровФормыВыбора.Вставить("ИмяСобытияВыбора", "ОрдернаяПриемка_ВыборТовараРучнойВводШК");
		СтруктураПараметровФормыВыбора.Вставить("Заголовок", "Выбор товара");
		СписокКолонок = Новый СписокЗначений;
		СписокКолонок.Добавить("Товар","Товар");
		СписокКолонок.Добавить("ШтрихКод","Штрих-код");
		СтруктураПараметровФормыВыбора.Вставить("СписокКолонок",СписокКолонок);
		Форма = ПолучитьФорму("ОбщаяФорма.ФормаВыборИзТаблицыЗначений",СтруктураПараметровФормыВыбора,ЭтаФорма,"ОрдернаяПриемка_ВыборТовараРучнойВводШК");
		ОткрытьФорму(Форма);	
	Иначе
		СообщениеПользователю = новый СообщениеПользователю;
		СообщениеПользователю.Текст = "По введенному штрих-коду товаров не найденно!";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуТоваровПоШтрихКоду(ШК,АдресТаблицы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаводскиеШК.Владелец КАК Товар,
	|	ЗаводскиеШК.Наименование КАК ШтрихКод
	|ИЗ
	|	Справочник.ЗаводскиеШК КАК ЗаводскиеШК
	|ГДЕ
	|	ЗаводскиеШК.Наименование ПОДОБНО &ШтрихКод";
	Запрос.УстановитьПараметр("ШтрихКод","%"+ШК+"%");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат Ложь;
	Иначе
		АдресТаблицы = ПоместитьВоВременноеХранилище(Результат.Выгрузить());
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВводШтрихкода(ШтрихКод)
	
	Товар = ПолучитьТоварПоШК(ШтрихКод);
	Если Не ЗначениеЗаполнено(Товар) тогда
		Товар = ПолучитьТоварПоШКПоПриходуSQL(ШтрихКод);
		Если НЕ ЗначениеЗаполнено(Товар) тогда
			ПоказатьПредупреждение(,"Неопознанный ШК! "+ШтрихКод,15);	
			Возврат
		Иначе
			ПараметрыОповещения = Новый Структура("Номенклатура,ШКСтрока",Товар,ШтрихКод);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопроса",ЭтаФорма,ПараметрыОповещения);
			ПоказатьВопрос(ОписаниеОповещения,"Это "+СокрЛП(Строка(Товар))+"?",РежимДиалогаВопрос.ДаНет);			
		КонецЕсли;
	Иначе
		ДобавитьТоварВТЗТовары(Товар);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварВТЗТовары(Товар)
	
	УстановитьНаименованиеТовара(Новый Структура("Товар,Партия",Товар,ПредопределенноеЗначение("Справочник.Партии.ПустаяСсылка")));
	
	ПартияИКоличество = ПолучитьПартиюИКоличествоТовара(Товар);
	Если ТипЗнч(ПартияИКоличество) = Тип("Структура") тогда
		ОбработатьПартию(ПартияИКоличество);
	Иначе
		СтруктураПараметровФормыВыбора = Новый Структура;
		СтруктураПараметровФормыВыбора.Вставить("АдресТаблицы",ПартияИКоличество);
		СтруктураПараметровФормыВыбора.Вставить("ИмяСобытияВыбора", "ОрдернаяПриемка_ВыборПартии");
		СтруктураПараметровФормыВыбора.Вставить("Заголовок", "Выбор партии");
		СписокКолонок = Новый СписокЗначений;
		СписокКолонок.Добавить("Документ","Документ"); // Захар 13-11-2017
		СписокКолонок.Добавить("Серия","Серия");
		СписокКолонок.Добавить("ГоденДо","Годен до");
		СписокКолонок.Добавить("Товар","Товар");
		СтруктураПараметровФормыВыбора.Вставить("СписокКолонок",СписокКолонок);
		Форма = ПолучитьФорму("ОбщаяФорма.ФормаВыборИзТаблицыЗначений",СтруктураПараметровФормыВыбора,ЭтаФорма,"ОрдернаяПриемка_ВыборПартии");
		ОткрытьФорму(Форма);
		//ОткрытьФорму("ОбщаяФорма.ФормаВыборИзТаблицыЗначений",СтруктураПараметровФормыВыбора,ЭтаФорма,Истина,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПартию(ПартияИКоличество)
	
	//УстановитьНаименованиеТовара(Новый Структура("Товар,Партия",ПартияИКоличество.Партия.Владелец,ПартияИКоличество.Партия));
	УстановитьНаименованиеТовара(ПартияИКоличество);
	
	Если не ЗначениеЗаполнено(ПартияИКоличество.Партия) тогда
		ПоказатьПредупреждение(,"Товар не найден в накладной!",10);
		Возврат;
	Иначе
		Осталось = ПартияИКоличество.Количество - ПолучитьКоличествоУжеПринятоеПоПартии(ПартияИКоличество.Партия);
		Если Осталось < 0 тогда
			Осталось = 0;
		КонецЕсли;
		ПроверитьПартиюНаБрак(ПартияИКоличество);
		ПараметрыОповещения = Новый Структура("ПартияИКоличество",ПартияИКоличество);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВводаКоличества",ЭтаФорма,ПараметрыОповещения);
		
		Если ТипЗнч(ПартияИКоличество.Документ) = Тип("ДокументСсылка.Приходная") тогда
			Если не ПроверитьЗаполнениеСерииИСрокаГодностиПартии(ПартияИКоличество) тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ПоказатьВводЧисла(ОписаниеОповещения,Осталось,
			?(ПартияИКоличество.БракованнаяСерия
			,"БРАК СЕРИИ!!!"+Символы.ПС+"По данной партии при завершении приемки будет создана претензия с видом брак"+ символы.ПС,"")
			+"Введите количество упаковок",5,0);
	КонецЕсли;	
	
КонецПроцедуры



&НаКлиенте
Функция ПроверитьЗаполнениеСерииИСрокаГодностиПартии(ПартияИКоличество)
	
	Партия = ПартияИКоличество.Партия;
	Если НЕ (ЗначениеЗаполнено(ПартияИКоличество.Партия) и ЗначениеЗаполнено(ПартияИКоличество.Документ)) тогда
		Возврат Ложь;
	КонецЕсли;
	
	СерияИСрокПартии = ПроверитьСериюИСрокНаСервере(Партия);
	Если не (ЗначениеЗаполнено(СерияИСрокПартии.Серия) и ЗначениеЗаполнено(СерияИСрокПартии.ГоденДо)) тогда
		ОткрытьФорму("Обработка.ОрдернаяПриемка.Форма.ФормаЗаполненияСерииИСрокаГодности",Новый Структура("ПартияИКоличество",ПартияИКоличество),ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПроверитьСериюИСрокНаСервере(Партия)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Партии.Серия,
	|	Партии.ГоденДо
	|ИЗ
	|	Справочник.Партии КАК Партии
	|ГДЕ
	|	Партии.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",Партия);
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураРеквизитовПартии = Новый Структура("Серия,ГоденДо","",Дата(1,1,1));
	Пока Выборка.Следующий() цикл
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитовПартии,Выборка);	
	КонецЦикла;
	
	Возврат СтруктураРеквизитовПартии;
	
КонецФункции

&НаСервере
Процедура ПроверитьПартиюНаБрак(ПартияИКоличество)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Партии.Владелец.Код КАК ТоварКод,
	|	Партии.Серия
	|ПОМЕСТИТЬ втПартии
	|ИЗ
	|	Справочник.Партии КАК Партии
	|ГДЕ
	|	Партии.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	t_defect_series.code,
	|	t_defect_series.series
	|ИЗ
	|	РегистрСведений.t_defect_series КАК t_defect_series
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПартии КАК втПартии
	|		ПО t_defect_series.code = втПартии.ТоварКод
	|			И t_defect_series.series = втПартии.Серия";
	Запрос.УстановитьПараметр("Ссылка",ПартияИКоличество.Партия); 
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		ПартияИКоличество.Вставить("БракованнаяСерия",Ложь);
	Иначе
		ПартияИКоличество.Вставить("БракованнаяСерия",Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоУжеПринятоеПоПартии(Партия)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Приемка_ТоварыВРаботе.Количество), 0) КАК Количество
	|ИЗ
	|	РегистрСведений.Приемка_ТоварыВРаботе КАК Приемка_ТоварыВРаботе
	|ГДЕ
	|	Приемка_ТоварыВРаботе.Партия = &Партия";
	
	Запрос.УстановитьПараметр("Партия", Партия);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Количество;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеЗаполненияПоПартии(Партия)
	
	Структура = Новый Структура("Товар,Партия,Документ");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Партия.Владелец КАК Товар,
	|	Партия.Ссылка КАК Партия,
	|	Партия.Документ
	|ИЗ
	|	Справочник.Партии КАК Партия
	|ГДЕ
	|	Партия.Ссылка = &Партия
	|
	|СГРУППИРОВАТЬ ПО
	|	Партия.Ссылка,
	|	Партия.Владелец,
	|	Партия.Документ";
	
	Запрос.УстановитьПараметр("Партия",Партия);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		ЗаполнитьЗначенияСвойств(Структура,Выборка);
	КонецЦикла;
	
	Возврат Структура
	
КонецФункции

&НаСервере
Функция ПолучитьТоварПоШК(ШтрихКод)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаводскиеШК.Владелец как Товар
	|ИЗ
	|	Справочник.ЗаводскиеШК КАК ЗаводскиеШК
	|ГДЕ
	|	ЗаводскиеШК.Наименование = &ШтрихКод";
	Запрос.УстановитьПараметр("ШтрихКод", ШтрихКод);
	Результат = Запрос.Выполнить();
	Если не Результат.Пустой() тогда
		Выборка = Результат.Выбрать();	
		Пока Выборка.Следующий() цикл
			Возврат Выборка.Товар; 	
		КонецЦикла;
	КонецЕсли;
	
	Возврат Справочники.Номенклатура.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ПолучитьТоварПоШКПоПриходуSQL(ШтрихКод)
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходнаяТовары.Товар
	|ИЗ
	|	РегистрСведений.Приемка_ДокументыВРаботе КАК Приемка_ДокументыВРаботе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Приходная.Товары КАК ПриходнаяТовары
	|		ПО Приемка_ДокументыВРаботе.Документ = ПриходнаяТовары.Ссылка
	|			И (ПриходнаяТовары.ШК_Ovh_list ПОДОБНО &ШтрихКод)
	|ГДЕ
	|	ПриходнаяТовары.Ссылка В(&ДокументыВТаблице)
	|	И Приемка_ДокументыВРаботе.Флаг";
	
	Запрос.УстановитьПараметр("ДокументыВТаблице",ПолучитьСписокСканируемыхПриходов());
	Запрос.УстановитьПараметр("ШтрихКод",ШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если не РезультатЗапроса.Пустой() тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() цикл
			Возврат Выборка.Товар;
		КонецЦикла;
	КонецЕсли;
	//ТаблицаТоварКод = РезультатЗапроса.Выгрузить();
	//
	//СтрокаПеречислениеУсловие = "";
	//Для каждого строка из ТаблицаТоварКод цикл
	//	Если ЗначениеЗаполнено(Строка.КодСтроки) тогда
	//		Если ЗначениеЗаполнено(Строка.КодСтроки) тогда
	//			СтрокаПеречислениеУсловие = СтрокаПеречислениеУсловие + СокрЛП(Формат(Строка.КодСтроки,"ЧРД=.; ЧРГ=; ЧН=0; ЧГ=")) + ",";
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	//СтрокаПеречислениеУсловие = Лев(СтрокаПеречислениеУсловие,СтрДлина(СтрокаПеречислениеУсловие)-1);
	//
	//УсловиеСформированно = Ложь; 
	//
	//Если ЗначениеЗаполнено(СтрокаПеречислениеУсловие) тогда
	//	УсловиеСформированно = Истина;
	//	СтрокаПеречислениеУсловие = "("+СтрокаПеречислениеУсловие;
	//	СтрокаПеречислениеУсловие = СтрокаПеречислениеУсловие + ")";
	//КонецЕсли;
	//
	//Если УсловиеСформированно тогда
	//	ЗапросSQL = 
	//	"SELECT TOP 1 id
	//	|      ,ean13
	//	|FROM ea5..overhead_list
	//	|WHERE id IN "+СтрокаПеречислениеУсловие+" AND ean13 = "+ШтрихКод;
	//	
	//	Результат = РаботаСSQL.ВыполнитьЗапросSQL(ЗапросSQL,,Справочники.НастройкиПодключения.БазаCourierDS,Истина);
	//	
	//	Если Результат <> неопределено тогда
	//		Для каждого Строка из Результат цикл
	//			ТоварСтрока = ТаблицаТоварКод.Найти(СтрЗаменить(Строка(Строка.id),Символы.НПП,""),"КодСтроки");
	//			Если ТоварСтрока <> неопределено тогда
	//				Возврат ТоварСтрока.Товар;
	//			КонецЕсли;  			
	//		КонецЦикла;
	//	КонецЕсли;
	//	
	//КонецЕсли;	
	
	Возврат справочники.Номенклатура.ПустаяСсылка();
	
КонецФункции

&НаСервере
Процедура СоздатьШКДляНоменклатуры(Номенклатура,ШКСтрока)
	
	ЗаводскойШК = Справочники.ЗаводскиеШК.СоздатьЭлемент();
	ЗаводскойШК.Наименование = ШКСтрока;
	ЗаводскойШК.Владелец = Номенклатура;
	ЗаводскойШК.Записать();
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьПартиюИКоличествоТовара(Товар)
	
	ТаблицаПартий = ПолучитьТаблицуПартийТовара(Товар);
	Если ТаблицаПартий.Количество() = 0 тогда
		Возврат Новый Структура("Товар,Партия,Количество,Документ",Товар,ПредопределенноеЗначение("Справочник.Партии.ПустаяСсылка"),0,Неопределено);
	ИначеЕсли ТаблицаПартий.Количество() = 1 тогда
		Возврат Новый Структура("Товар,Партия,Количество,Документ",Товар,ТаблицаПартий[0].Партия,ТаблицаПартий[0].Количество,ТаблицаПартий[0].Документ);
	Иначе
		Возврат ПоместитьВоВременноеХранилище(ТаблицаПартий);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуПартийТовара(Товар)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// Захар 13-11-2017 {
	//"ВЫБРАТЬ
	//|	ПриходнаяТовары.Партия.Серия КАК Серия,
	//|	ПриходнаяТовары.Партия.ГоденДо КАК ГоденДо,
	//|	ПриходнаяТовары.Партия,
	//|	ПриходнаяТовары.Товар КАК Товар,
	//|	ПриходнаяТовары.Количество
	//|ИЗ
	//|	Документ.Приходная.Товары КАК ПриходнаяТовары
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Приемка_ДокументыВРаботе КАК Приемка_ДокументыВРаботе
	//|		ПО ПриходнаяТовары.Ссылка = Приемка_ДокументыВРаботе.Документ
	//|			И (Приемка_ДокументыВРаботе.Документ В (&Документы))
	//|ГДЕ
	//|	ПриходнаяТовары.Товар = &Товар";
	"ВЫБРАТЬ
	|	ПриходнаяТовары.Партия.Серия,
	|	ПриходнаяТовары.Партия.ГоденДо,
	|	ПриходнаяТовары.Партия,
	|	ПриходнаяТовары.Товар,
	|	ПриходнаяТовары.Количество,
	|	ПриходнаяТовары.Ссылка КАК Документ
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	РегистрСведений.Приемка_ДокументыВРаботе КАК Приемка_ДокументыВРаботе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Приходная.Товары КАК ПриходнаяТовары
	|		ПО (Приемка_ДокументыВРаботе.Документ В (&Документы))
	|			И Приемка_ДокументыВРаботе.Документ = ПриходнаяТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТовары.Партия.Серия,
	|	ПеремещениеТовары.Партия.ГоденДо,
	|	ПеремещениеТовары.Партия,
	|	ПеремещениеТовары.Товар,
	|	ПеремещениеТовары.Количество,
	|	ПеремещениеТовары.Ссылка
	|ИЗ
	|	РегистрСведений.Приемка_ДокументыВРаботе КАК Приемка_ДокументыВРаботе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Перемещение.Товары КАК ПеремещениеТовары
	|		ПО (Приемка_ДокументыВРаботе.Документ В (&Документы))
	|			И Приемка_ДокументыВРаботе.Документ = ПеремещениеТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Документы.Партия.Серия КАК Серия,
	|	ВТ_Документы.Партия.ГоденДо КАК ГоденДо,
	|	ВТ_Документы.Партия,
	|	ВТ_Документы.Товар КАК Товар,
	|	ВТ_Документы.Количество,
	|	ВТ_Документы.Документ
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы,
	|	РегистрСведений.Приемка_ДокументыВРаботе КАК Приемка_ДокументыВРаботе
	|ГДЕ
	|	ВТ_Документы.Товар = &Товар
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Документы.Партия,
	|	ВТ_Документы.Товар,
	|	ВТ_Документы.Документ,
	|	ВТ_Документы.Партия.Серия,
	|	ВТ_Документы.Партия.ГоденДо,
	|	ВТ_Документы.Количество";
	// } Захар
	
	МассивОбрабатываемыхПриходов = ТЗДокументы.Выгрузить().ВыгрузитьКолонку("ДокументСсылка");
	Запрос.УстановитьПараметр("Документы", МассивОбрабатываемыхПриходов);
	Запрос.УстановитьПараметр("Товар", Товар);
	ТаблицаПартий = Запрос.Выполнить().Выгрузить();
	//Для каждого строка из ТаблицаПартий цикл
	//	Строка.ГоденДо = Формат(Строка.ГоденДо,"ДФ=dd.MM.yyyy");
	//КонецЦикла;
	
	Возврат ТаблицаПартий;
	
КонецФункции

#КонецОбласти

#Область Оповещения

&НаКлиенте
Процедура ВыбранаПартияИзСписка(ВыбранныйЭлемент,ПараметрыОповещения) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда 
		ОбработатьПартию(ВыбранныйЭлемент.Значение);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	СоздатьШКДляНоменклатуры(ПараметрыОповещения.Номенклатура,ПараметрыОповещения.ШКСтрока);
	ДобавитьТоварВТЗТовары(ПараметрыОповещения.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаКоличества(Количество,ДопПараметры) Экспорт
	
	Если не ЗначениеЗаполнено(Количество) тогда
		Возврат
	КонецЕсли;
	ПартияИКоличество = ДопПараметры.ПартияИКоличество;
	Партия = ПартияИКоличество.Партия;
	КоличествоПоПриходу = ПартияИКоличество.Количество;
	КоличествоУжеПринятое = ПолучитьКоличествоУжеПринятоеПоПартии(Партия);
	КоличествоДопустимое = КоличествоПоПриходу-КоличествоУжеПринятое; 
	Проверка = КоличествоПоПриходу-КоличествоУжеПринятое-Количество;
	Если Проверка < 0 тогда
		ПоказатьПредупреждение(,"У вас перебор по позиции на "+(-Проверка)+?(КоличествоДопустимое > 0,". Введите количество не более "+КоличествоДопустимое+".","."));
		Возврат
	Иначе
		ДанныеЗаполнения = ПолучитьДанныеЗаполненияПоПартии(Партия);
		// Захар 13-11-2017 {
		ДанныеЗаполнения.Документ = ДопПараметры.ПартияИКоличество.Документ;
		//Если ДопПараметры.ПартияИКоличество.Свойство("Документ") Тогда
		//	ДанныеЗаполнения.Документ = ДопПараметры.ПартияИКоличество.Документ;
		//Иначе
		//	ДанныеЗаполнения.Документ = ПолучитьДокументПеремещениеПоПартии(Партия);
		//КонецЕсли;
		// } Захар
		ДанныеЗаполнения.Вставить("Количество",Количество);
		ДанныеЗаполнения.Вставить("БракованнаяСерия",ПартияИКоличество.БракованнаяСерия);
		ЗафиксироватьСканированиеТовара(ДанныеЗаполнения);
		ЭтаФорма.Элементы.Товары.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьСканированиеТовара(ДанныеЗаполнения)
	
	Менедежер_ТоварыВРаботе = РегистрыСведений.Приемка_ТоварыВРаботе.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Менедежер_ТоварыВРаботе,ДанныеЗаполнения);
	Менедежер_ТоварыВРаботе.Сборщик = ПараметрыСеанса.ТекущийПользователь;
	Менедежер_ТоварыВРаботе.Период = ТекущаяДата();
	Менедежер_ТоварыВРаботе.Записать();
	
	СтрокиТЗДокументы = ТЗДокументы.НайтиСтроки(Новый Структура("ДокументСсылка",ДанныеЗаполнения.Документ));
	Для каждого СтрокаТЗДокументы из СтрокиТЗДокументы цикл
		СтрокаТЗДокументы.КоличествоОтсканированно = СтрокаТЗДокументы.КоличествоОтсканированно + ДанныеЗаполнения.Количество;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОрдернаяПриемка_ВыборПартии" и источник = ЭтаФорма тогда
		ОбработатьПартию(Параметр);
	ИначеЕсли ИмяСобытия = "ОрдернаяПриемка_ПозицияБезШК" и Источник = ЭтаФорма тогда	
		// Захар 13-11-2017 {
		//ПартияИКоличество = Новый Структура("Товар,Партия,Количество",Параметр.Товар,Параметр.Партия,Параметр.Количество);
		ПартияИКоличество = Новый Структура("Документ, Товар, Партия, Количество", Параметр.Документ, Параметр.Товар, Параметр.Партия, Параметр.Количество);
		// } Захар
		ОбработатьПартию(ПартияИКоличество);
		
	ИначеЕсли ИмяСобытия = "ОрдернаяПриемка_ВыборТовараРучнойВводШК" и Источник = ЭтаФорма тогда
		ДобавитьТоварВТЗТовары(Параметр.Товар);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПриемныеОрдераОповещение(Результат, ПараметрыОповещения) Экспорт
	Если Результат = КодВозвратаДиалога.Нет тогда
		Возврат;
	КонецЕсли;
	СформироватьПриемныеОрдераНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьПриемныеОрдераНаСервере() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// Захар 13-11-2017 {
	//"ВЫБРАТЬ
	//|	РегистрСведенийПриемка_ТоварыВРаботе.Документ КАК Документ,
	//|	РегистрСведенийПриемка_ТоварыВРаботе.Товар,
	//|	СУММА(ВЫБОР
	//|			КОГДА t_defect_series.code ЕСТЬ NULL 
	//|				ТОГДА РегистрСведенийПриемка_ТоварыВРаботе.Количество
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК Количество,
	//|	РегистрСведенийПриемка_ТоварыВРаботе.Партия,
	//|	ВЫБОР
	//|		КОГДА РегистрСведенийПриемка_ТоварыВРаботе.ПриемныйОрдер = ЗНАЧЕНИЕ(Документ.ПриемныйОрдер.ПустаяСсылка)
	//|				И t_defect_series.code ЕСТЬ NULL 
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК Формировать,
	//|	РегистрСведенийПриемка_ТоварыВРаботе.Документ.РасчетОтСуммы КАК РасчетОтСуммы,
	//|	РегистрСведенийПриемка_ТоварыВРаботе.Документ.ДатаОплаты КАК ДатаОплаты,
	//|	ДОБАВИТЬКДАТЕ(РегистрСведенийПриемка_ТоварыВРаботе.Документ.ДатаОснования, ДЕНЬ, ЕСТЬNULL(РегистрСведенийПриемка_ТоварыВРаботе.Документ.Клиент.ОсновнойПрофильПоставщика.Отсрочка, 0)) КАК ДатаОплатыПлан,
	//|	РегистрСведенийПриемка_ТоварыВРаботе.Документ.Клиент.ОсновнойПрофильПоставщика.Отсрочка КАК Отсрочка,
	//|	ВЫБОР
	//|		КОГДА t_defect_series.code ЕСТЬ NULL 
	//|			ТОГДА ЛОЖЬ
	//|		ИНАЧЕ ИСТИНА
	//|	КОНЕЦ КАК БракованнаяСерия,
	//|	СУММА(ВЫБОР
	//|			КОГДА НЕ t_defect_series.code ЕСТЬ NULL 
	//|				ТОГДА РегистрСведенийПриемка_ТоварыВРаботе.Количество
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК Брак
	//|ИЗ
	//|	РегистрСведений.Приемка_ТоварыВРаботе КАК РегистрСведенийПриемка_ТоварыВРаботе
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.t_defect_series КАК t_defect_series
	//|		ПО РегистрСведенийПриемка_ТоварыВРаботе.Партия.Серия = t_defect_series.series
	//|			И РегистрСведенийПриемка_ТоварыВРаботе.Товар.Код = t_defect_series.code
	//|ГДЕ
	//|	РегистрСведенийПриемка_ТоварыВРаботе.Документ В(&Документы)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	РегистрСведенийПриемка_ТоварыВРаботе.Товар,
	//|	РегистрСведенийПриемка_ТоварыВРаботе.Партия,
	//|	РегистрСведенийПриемка_ТоварыВРаботе.Документ,
	//|	РегистрСведенийПриемка_ТоварыВРаботе.Документ.РасчетОтСуммы,
	//|	РегистрСведенийПриемка_ТоварыВРаботе.Документ.ДатаОплаты,
	//|	ВЫБОР
	//|		КОГДА t_defect_series.code ЕСТЬ NULL 
	//|			ТОГДА ЛОЖЬ
	//|		ИНАЧЕ ИСТИНА
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА РегистрСведенийПриемка_ТоварыВРаботе.ПриемныйОрдер = ЗНАЧЕНИЕ(Документ.ПриемныйОрдер.ПустаяСсылка)
	//|				И t_defect_series.code ЕСТЬ NULL 
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ,
	//|	ДОБАВИТЬКДАТЕ(РегистрСведенийПриемка_ТоварыВРаботе.Документ.ДатаОснования, ДЕНЬ, ЕСТЬNULL(РегистрСведенийПриемка_ТоварыВРаботе.Документ.Клиент.ОсновнойПрофильПоставщика.Отсрочка, 0)),
	//|	РегистрСведенийПриемка_ТоварыВРаботе.Документ.Клиент.ОсновнойПрофильПоставщика.Отсрочка
	//|ИТОГИ
	//|	МАКСИМУМ(Формировать),
	//|	МАКСИМУМ(РасчетОтСуммы),
	//|	МАКСИМУМ(ДатаОплаты),
	//|	МАКСИМУМ(ДатаОплатыПлан),
	//|	МАКСИМУМ(Отсрочка)
	//|ПО
	//|	Документ";
	"ВЫБРАТЬ
	|	t_defect_series.code КАК code,
	|	t_defect_series.series КАК series
	|ПОМЕСТИТЬ вт1
	|ИЗ
	|	РегистрСведений.t_defect_series КАК t_defect_series
	|
	|СГРУППИРОВАТЬ ПО
	|	t_defect_series.code,
	|	t_defect_series.series
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	code,
	|	series
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведенийПриемка_ТоварыВРаботе.Документ КАК Документ,
	|	РегистрСведенийПриемка_ТоварыВРаботе.Товар,
	|	СУММА(ВЫБОР
	|			КОГДА вт1.code ЕСТЬ NULL 
	|				ТОГДА РегистрСведенийПриемка_ТоварыВРаботе.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Количество,
	|	РегистрСведенийПриемка_ТоварыВРаботе.Партия,
	|	ВЫБОР
	|		КОГДА РегистрСведенийПриемка_ТоварыВРаботе.ПриемныйОрдер = ЗНАЧЕНИЕ(Документ.ПриемныйОрдер.ПустаяСсылка)
	|				И вт1.code ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Формировать,
	|	ВЫБОР
	|		КОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ ССЫЛКА Документ.Приходная
	|			ТОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ.РасчетОтСуммы
	|		КОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ ССЫЛКА Документ.Перемещение
	|			ТОГДА ЛОЖЬ
	|	КОНЕЦ КАК РасчетОтСуммы,
	|	ВЫБОР
	|		КОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ ССЫЛКА Документ.Приходная
	|			ТОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ.ДатаОплаты
	|		КОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ ССЫЛКА Документ.Перемещение
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ДатаОплаты,
	|	ДОБАВИТЬКДАТЕ(ВЫБОР
	|			КОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ ССЫЛКА Документ.Приходная
	|				ТОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ.ДатаОснования
	|			КОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ ССЫЛКА Документ.Перемещение
	|				ТОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ.Дата
	|		КОНЕЦ, ДЕНЬ, ЕСТЬNULL(РегистрСведенийПриемка_ТоварыВРаботе.Документ.Клиент.ОсновнойПрофильПоставщика.Отсрочка, 0)) КАК ДатаОплатыПлан,
	|	ЕСТЬNULL(РегистрСведенийПриемка_ТоварыВРаботе.Документ.Клиент.ОсновнойПрофильПоставщика.Отсрочка, 0) КАК Отсрочка,
	|	ВЫБОР
	|		КОГДА вт1.code ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК БракованнаяСерия,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ вт1.code ЕСТЬ NULL 
	|				ТОГДА РегистрСведенийПриемка_ТоварыВРаботе.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Брак
	|ИЗ
	|	РегистрСведений.Приемка_ТоварыВРаботе КАК РегистрСведенийПриемка_ТоварыВРаботе
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт1 КАК вт1
	|		ПО РегистрСведенийПриемка_ТоварыВРаботе.Партия.Серия = вт1.series
	|			И РегистрСведенийПриемка_ТоварыВРаботе.Товар.Код = вт1.code
	|ГДЕ
	|	РегистрСведенийПриемка_ТоварыВРаботе.Документ В(&Документы)
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрСведенийПриемка_ТоварыВРаботе.Товар,
	|	РегистрСведенийПриемка_ТоварыВРаботе.Партия,
	|	РегистрСведенийПриемка_ТоварыВРаботе.Документ,
	|	ВЫБОР
	|		КОГДА вт1.code ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РегистрСведенийПриемка_ТоварыВРаботе.ПриемныйОрдер = ЗНАЧЕНИЕ(Документ.ПриемныйОрдер.ПустаяСсылка)
	|				И вт1.code ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДОБАВИТЬКДАТЕ(ВЫБОР
	|			КОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ ССЫЛКА Документ.Приходная
	|				ТОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ.ДатаОснования
	|			КОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ ССЫЛКА Документ.Перемещение
	|				ТОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ.Дата
	|		КОНЕЦ, ДЕНЬ, ЕСТЬNULL(РегистрСведенийПриемка_ТоварыВРаботе.Документ.Клиент.ОсновнойПрофильПоставщика.Отсрочка, 0)),
	|	ВЫБОР
	|		КОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ ССЫЛКА Документ.Приходная
	|			ТОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ.РасчетОтСуммы
	|		КОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ ССЫЛКА Документ.Перемещение
	|			ТОГДА ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ ССЫЛКА Документ.Приходная
	|			ТОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ.ДатаОплаты
	|		КОГДА РегистрСведенийПриемка_ТоварыВРаботе.Документ ССЫЛКА Документ.Перемещение
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ,
	|	ЕСТЬNULL(РегистрСведенийПриемка_ТоварыВРаботе.Документ.Клиент.ОсновнойПрофильПоставщика.Отсрочка, 0)
	|ИТОГИ
	|	МАКСИМУМ(Формировать),
	|	МАКСИМУМ(РасчетОтСуммы),
	|	МАКСИМУМ(ДатаОплаты),
	|	МАКСИМУМ(ДатаОплатыПлан),
	|	МАКСИМУМ(Отсрочка)
	|ПО
	|	Документ";
	// } Захар
	Запрос.УстановитьПараметр("Документы", ПолучитьСписокСканируемыхПриходов());
	ВыборкаДокумент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Партия");
	ТаблицаТоваров.Колонки.Добавить("БракованнаяСерия");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Брак");
	// Захар 13-11-2017 {
	ТаблицаТоваров.Колонки.Добавить("Недовоз");
	ТаблицаТоваров.Колонки.Добавить("Перевоз");
	// } Захар
	ДокументыДляСканирования = ТЗДокументы.Выгрузить(ТЗДокументы.НайтиСтроки(Новый Структура("ЗавершитьСканирование",Истина)),"ДокументСсылка").ВыгрузитьКолонку("ДокументСсылка");
	Пока ВыборкаДокумент.Следующий() цикл
		НачатьТранзакцию();
		Попытка
			Если ВыборкаДокумент.Формировать тогда			
				ПриемныйОрдер = Документы.ПриемныйОрдер.СоздатьДокумент();
				ПриемныйОрдер.ДокументОснование = ВыборкаДокумент.Документ;
				Выборка = ВыборкаДокумент.Выбрать();
				ТаблицаТоваров.Очистить();
				Пока Выборка.Следующий() цикл
					Если Выборка.Формировать тогда
						СтрокаПТовар = ПриемныйОрдер.ПринятыйТовар.Добавить();			
						ЗаполнитьЗначенияСвойств(СтрокаПТовар,Выборка);
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(ТаблицаТоваров.Добавить(),Выборка);
				КонецЦикла;
				ПриемныйОрдер.Дата = ТекущаяДата();
				Если ПриемныйОрдер.ПринятыйТовар.Количество() > 0 тогда
					ПриемныйОрдер.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.Приемка_ТоварыВРаботе.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Значение = ВыборкаДокумент.Документ;
				НаборЗаписей.Отбор.Документ.Использование = Истина;
				НаборЗаписей.Прочитать();
				Для каждого Запись из НаборЗаписей цикл
					Если НЕ ЗначениеЗаполнено(Запись.ПриемныйОрдер) тогда 
						Запись.ПриемныйОрдер = ПриемныйОрдер.Ссылка;
					КонецЕсли;
				КонецЦикла;
				НаборЗаписей.Записать();
				
				ТаблицаТоваров.Свернуть("Партия, БракованнаяСерия","Количество, Брак, Недовоз, Перевоз"); // Захар 13-11-2017
				
				//Если ТипЗнч(ВыборкаДокумент.Документ) = Тип("ДокументСсылка.Приходная") Тогда // Захар 13-11-2017 //Хортюк С.Б. 20171120
					Приходная = ВыборкаДокумент.Документ.ПолучитьОбъект();
					ТЧПриходнаяТовары = Приходная.Товары;
					Для каждого строка из ТЧПриходнаяТовары цикл
						//Для каждого строка из ТаблицаТоваров цикл
						СтрокаПоПартии =  ТаблицаТоваров.Найти(Строка.Партия,"Партия");
						Если СтрокаПоПартии <> неопределено тогда
							строка.Недовоз = строка.Количество - СтрокаПоПартии.Количество - СтрокаПоПартии.Брак;
							строка.Брак = СтрокаПоПартии.Брак;
							строка.БракованнаяСерия = СтрокаПоПартии.БракованнаяСерия;
						Иначе
							строка.Недовоз = строка.Количество;
						КонецЕсли;				
					КонецЦикла;
					Приходная.ОбменДанными.Загрузка = Истина;
					Приходная.Записать(РежимЗаписиДокумента.Запись);
				//КонецЕсли; // Захар 13-11-2017 //Хортюк С.Б. 20171120
			КонецЕсли;
			
			//Если ТипЗнч(ВыборкаДокумент.Документ) = Тип("ДокументСсылка.Приходная") Тогда // Захар 13-11-2017  //Хортюк С.Б. 20171120
				Если Приходная  = Неопределено тогда
					Приходная = ВыборкаДокумент.Документ;
				    ТЧПриходнаяТовары = ВыборкаДокумент.Документ.Товары;				
				КонецЕсли;
				Если ДокументыДляСканирования.Найти(Приходная.Ссылка) <> Неопределено Тогда
					СтрокаТЗ = ТЗДокументыДляЗавершенияСканирования.Добавить();
					СтрокаТЗ.ДокументСсылка = ВыборкаДокумент.Документ;
					СтрокаТЗ.Отсрочка = ВыборкаДокумент.Отсрочка;
					СтрокаТЗ.РасчетОтСуммы = ВыборкаДокумент.РасчетОтСуммы;
					СтрокаТЗ.ДатаОплаты = ВыборкаДокумент.ДатаОплаты;
					СтрокаТЗ.ДатаОплатыПлан = ВыборкаДокумент.ДатаОплатыПлан;
					Всего = ТЧПриходнаяТовары.Итог("Количество");  
					Недовоз = ТЧПриходнаяТовары.Итог("Недовоз") + ТЧПриходнаяТовары.Итог("Перевоз");
					СтрокаТЗ.КоличествоОтсканированно = Всего-Недовоз;
					СтрокаТЗ.КоличествоПриход = Всего;
					Если Недовоз = 0 тогда
						СтрокаТЗ.РазрешитьПродажу = (Недовоз = 0 и СтрокаТЗ.ДатаОплаты >=СтрокаТЗ.ДатаОплатыПлан);
					КонецЕсли;
					Если ТипЗнч(ВыборкаДокумент.Документ) = Тип("ДокументСсылка.Приходная") тогда
						СтрокаТЗ.ВидПоступления = "Накладная";
						СтрокаТЗ.Клиент = ВыборкаДокумент.Документ.Клиент;
						СтрокаТЗ.Номер = ВыборкаДокумент.Документ.НомерОснования;
						СтрокаТЗ.ПриемныйАкт.Загрузить(ТЧПриходнаяТовары.Выгрузить(,"Товар,Серия,ГоденДо,Партия,Цена,Количество,Недовоз,Перевоз,Брак,Сумма,БракованнаяСерия"));
					ИначеЕсли ТипЗнч(ВыборкаДокумент.Документ) = Тип("ДокументСсылка.Перемещение") тогда
						СтрокаТЗ.ВидПоступления = "Перемещение";
						СтрокаТЗ.Клиент = ВыборкаДокумент.Документ.Поставщик;
						СтрокаТЗ.Номер = ВыборкаДокумент.Документ.Номер;
						СтрокаТЗ.ПриемныйАкт.Загрузить(ТЧПриходнаяТовары.Выгрузить(,"Товар,Партия,Цена,Количество,Недовоз,Перевоз,Брак,Сумма,БракованнаяСерия"));
						Для каждого строка из СтрокаТЗ.ПриемныйАкт цикл
							Строка.Серия = Строка.Партия.Серия;
							Строка.ГоденДо = Строка.Партия.ГоденДо;
						КонецЦикла;
					КонецЕсли;

					Для каждого строкаПА из СтрокаТЗ.ПриемныйАкт цикл
						СтрокаПА.ИтогоПретензий = СтрокаПА.Недовоз + СтрокаПА.Перевоз + СтрокаПА.Брак;
					КонецЦикла;
					СтрокаТЗ.ПриемныйАкт.Сортировать("ИтогоПретензий Убыв");
				КонецЕсли;   
			//КонецЕсли; // Захар 13-11-2017  //Хортюк С.Б. 20171120
			
			// Захар 13-11-2017 {
			//Если ТипЗнч(ВыборкаДокумент.Документ) = Тип("ДокументСсылка.Перемещение") Тогда
			//	Если Приходная = Неопределено Тогда
			//		Приходная = ВыборкаДокумент.Документ;
			//	КонецЕсли;
			//	//Если Не ДокументыДляСканирования.Найти(Приходная.Ссылка) Тогда
			//	Если ДокументыДляСканирования.Найти(Приходная.Ссылка) <> Неопределено Тогда
			//		СтрокаТЗ = ТЗДокументыДляЗавершенияСканирования.Добавить();
			//		СтрокаТЗ.ВидПоступления = "Перемещение";
			//		СтрокаТЗ.ДокументСсылка = ВыборкаДокумент.Документ;
			//		СтрокаТЗ.Отсрочка = 0;
			//		СтрокаТЗ.РасчетОтСуммы = ВыборкаДокумент.РасчетОтСуммы;
			//		СтрокаТЗ.ДатаОплаты = ВыборкаДокумент.ДатаОплаты;
			//		СтрокаТЗ.ДатаОплатыПлан = ВыборкаДокумент.ДатаОплатыПлан;
			//		КоличествоВсего = ВыборкаДокумент.Документ.Товары.Итог("Количество");
			//		НедовозВсего = ТаблицаТоваров.Итог("Недовоз");
			//		КоличествоОтсканировано = ТаблицаТоваров.Итог("Количество");
			//		
			//		Для Каждого СтрокаТЧ Из ВыборкаДокумент.Документ.Товары Цикл
			//			НоваяСтрока = СтрокаТЗ.ПриемныйАкт.Добавить();
			//			НоваяСтрока.Товар = СтрокаТЧ.Товар;
			//			НоваяСтрока.Серия = СтрокаТЧ.Партия.Серия;
			//			НоваяСтрока.ГоденДо = СтрокаТЧ.Партия.ГоденДо;
			//			НоваяСтрока.Партия = СтрокаТЧ.Партия;
			//			НоваяСтрока.Цена = СтрокаТЧ.Партия.ЗакупочнаяЦена;
			//			
			//			СтрокаПоПартии = ТаблицаТоваров.Найти(СтрокаТЧ.Партия,"Партия");
			//			Если СтрокаПоПартии <> неопределено тогда
			//				НедовозПоПартии = СтрокаТЧ.Количество - СтрокаПоПартии.Количество - СтрокаПоПартии.Брак;
			//				БракПоПартии = СтрокаПоПартии.Брак;
			//				НоваяСтрока.БракованнаяСерия = СтрокаПоПартии.БракованнаяСерия;
			//			Иначе
			//				БракПоПартии = 0;
			//				НедовозПоПартии = СтрокаТЧ.Количество;
			//				НоваяСтрокаТаблицаТоваров = ТаблицаТоваров.Добавить();
			//				НоваяСтрокаТаблицаТоваров.Партия = СтрокаТЧ.Партия;
			//				НоваяСтрокаТаблицаТоваров.Количество = СтрокаТЧ.Количество;
			//				НоваяСтрокаТаблицаТоваров.Недовоз = СтрокаТЧ.Количество;
			//			КонецЕсли;
			//			
			//			НоваяСтрока.Количество = СтрокаТЧ.Количество;
			//			НоваяСтрока.Недовоз = НедовозПоПартии;
			//			НоваяСтрока.Брак = БракПоПартии;
			//			НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
			//		КонецЦикла;
			//		
			//		СтрокаТЗ.КоличествоОтсканированно = КоличествоОтсканировано;
			//		СтрокаТЗ.КоличествоПриход = КоличествоВсего;
			//		СтрокаТЗ.Клиент = ВыборкаДокумент.Документ.Поставщик;
			//		СтрокаТЗ.Номер = ВыборкаДокумент.Документ.Номер;
			//		СтрокаТЗ.РазрешитьПродажу = Истина;
			//		Для Каждого СтрокаПА Из СтрокаТЗ.ПриемныйАкт Цикл
			//			СтрокаПА.ИтогоПретензий = СтрокаПА.Недовоз + СтрокаПА.Перевоз + СтрокаПА.Брак;
			//		КонецЦикла;
			//		СтрокаТЗ.ПриемныйАкт.Сортировать("ИтогоПретензий Убыв");
			//	КонецЕсли;
			//КонецЕсли;
			// } Захар
			
			Приходная = неопределено;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	Если ТЗДокументыДляЗавершенияСканирования.Количество() > 0 тогда
		ЭтаФорма.Элементы.Страницы.ПодчиненныеЭлементы.ПриемныйАкт.Видимость = Истина;
		ЭтаФорма.Элементы.Страницы.ПодчиненныеЭлементы.СканированиеТовара.Видимость = Ложь;
	КонецЕсли;
	//ОбновитьСписокНакладных();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьСтрокуНаСервере(КлючЗаписи)
	
	МенеджерЗаписи = РегистрыСведений.Приемка_ТоварыВРаботе.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи,КлючЗаписи);
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеОтсканированногоТовара(Результат, ПараметрыОповещениея) Экспорт
	Если Результат = КодВозвратаДиалога.Нет тогда
		Возврат
	КонецЕсли;
	УдалитьСтрокуНаСервере(ПараметрыОповещениея);
	Элементы.Товары.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	Если Элементы.Товары.ТекущаяСтрока <> неопределено тогда
		Если не ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.ПриемныйОрдер) тогда
			Оповещение = Новый ОписаниеОповещения("УдалениеОтсканированногоТовара",ЭтаФорма,Элементы.Товары.ТекущаяСтрока);
			ПоказатьВопрос(Оповещение,"Вы уверены, что хотите удалить сканирование?",РежимДиалогаВопрос.ДаНет);
		Иначе
			ПоказатьПредупреждение(,"Невозможно удалить выбранную строку, по ней сформирован приходный ордер!",,"Ошибка");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.Товары.ТекущаяСтрока;
	Если ТекСтрока <> Неопределено Тогда
		УстановитьНаименованиеТовараПриАктивизации(Элементы.Товары.ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьНаименованиеТовараПриАктивизации(ТекСтрока)
	
	СтруктураОписания = Новый Структура;
	СтруктураОписания.Вставить("Товар", ТекСтрока.Товар);
	СтруктураОписания.Вставить("Партия", ТекСтрока.Партия);
	УстановитьНаименованиеТовара(СтруктураОписания);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНаименованиеТовара(СтруктураОписания)
	
	Если не СтруктураОписания.Свойство("Количество") Тогда
		СтруктураОписания.Вставить("Количество",ПолучитьКоличествоТовараВНакладной(СтруктураОписания.Товар,СтруктураОписания.Партия));
	КонецЕсли;
	СканируемаяПозиция = ПолучитьОписаниеПозиции(СтруктураОписания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеПозиции(СтруктураОписания)
	Если Не СтруктураОписания.Свойство("Товар") тогда
		Возврат "";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтруктураОписания.Товар)Тогда
		Возврат "";
	КонецЕсли;
	Товар = СтруктураОписания.Товар;
	Если СтруктураОписания.Свойство("Партия") тогда
		Партия = СтруктураОписания.Партия;
	Иначе
		Партия = Справочники.Партии.ПустаяСсылка()
	КонецЕсли;
	Если СтруктураОписания.Свойство("Количество") тогда
		Количество = СтруктураОписания.Количество;
	Иначе
		Количество = 0;
	КонецЕсли;
	НаименованиеТовара = Лев(Партия.Владелец.Наименование,48);
	Если ЗначениеЗаполнено(Партия) Тогда
		НаименованиеТовара = НаименованиеТовара + Символы.ПС
		+ СокрЛП(Партия.Серия) + " / " + Формат(Партия.ГоденДо,"ДФ=dd.MM.yyyy");
	КонецЕсли;
	Если ЗначениеЗаполнено(Количество) Тогда
		НаименованиеТовара = НаименованиеТовара + Символы.ПС
		+ "Всего в накладной: " + Формат(Количество,"ЧДЦ=; ЧН=0; ЧГ=0"); 
	КонецЕсли;       
	НаименованиеТовара = НаименованиеТовара + Символы.ПС
	+ ?(Товар.Холод,"ХОЛОД","");
	
	Возврат НаименованиеТовара
КонецФункции

&НаСервере
Функция ПолучитьКоличествоТовараВНакладной(Товар, Партия)
	
	Если НЕ ЗначениеЗаполнено(Товар) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// Захар 13-11-2017 {
	//"ВЫБРАТЬ
	//|	ЕСТЬNULL(СУММА(ПриходнаяТовары.Количество),0) КАК Количество
	//|ИЗ
	//|	Документ.Приходная.Товары КАК ПриходнаяТовары
	//|ГДЕ
	//|	ПриходнаяТовары.Товар = &Товар
	//|	И ВЫБОР
	//|			КОГДА &Партия = ЗНАЧЕНИЕ(Справочник.Партии.ПустаяСсылка)
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ПриходнаяТовары.Партия = &Партия
	//|		КОНЕЦ
	//|	И ПриходнаяТовары.Ссылка В(&СписокДокументов)";
	"ВЫБРАТЬ
	|	ПриходнаяТовары.Товар,
	|	ПриходнаяТовары.Партия,
	|	ПриходнаяТовары.Количество
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	Документ.Приходная.Товары КАК ПриходнаяТовары
	|ГДЕ
	|	ПриходнаяТовары.Ссылка В(&СписокДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТовары.Товар,
	|	ПеремещениеТовары.Партия,
	|	ПеремещениеТовары.Количество
	|ИЗ
	|	Документ.Перемещение.Товары КАК ПеремещениеТовары
	|ГДЕ
	|	ПеремещениеТовары.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВТ_Документы.Количество), 0) КАК Количество
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы
	|ГДЕ
	|	ВТ_Документы.Товар = &Товар
	|	И ВЫБОР
	|			КОГДА &Партия = ЗНАЧЕНИЕ(Справочник.Партии.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВТ_Документы.Партия = &Партия
	|		КОНЕЦ";
	// } Захар
	Запрос.УстановитьПараметр("Товар",Товар);
	Запрос.УстановитьПараметр("Партия", Партия);
	Запрос.УстановитьПараметр("СписокДокументов",ПолучитьСписокСканируемыхПриходов());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Количество;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	//Если Источник = "BarCodeScaner" тогда
	//Если Событие = "ScanData" Тогда
	Если Событие = "Штрихкод" Тогда
// ЕМ		Scan.ПосылкаДанных = 1;
			Если ЭтаФорма.ВводДоступен() тогда
				ОбработатьВводШтрихкода(Данные);	
			КонецЕсли;
	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Функция ЕстьОтсканированныеТовары()
	
	Запрос = Новый Запрос;
	Запрос.Текст = Товары.ТекстЗапроса;
	Для каждого Параметр из Товары.Параметры.Элементы цикл
		Запрос.УстановитьПараметр(Параметр.Параметр,Параметр.Значение);
	КонецЦикла;
	Возврат НЕ Запрос.Выполнить().Пустой();
	
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокНакладныхОбработчик() Экспорт
	ОбновитьСписокНакладных();	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСканированиюКоманда(Команда)
	ПерейтиКСканированию()	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСканированию()
	
	ТЗДокументыДляЗавершенияСканирования.Очистить();
	ПриемныйАкт.Очистить();
	ЭтаФорма.Элементы.Страницы.ПодчиненныеЭлементы.ПриемныйАкт.Видимость = Ложь;
	ЭтаФорма.Элементы.Страницы.ПодчиненныеЭлементы.СканированиеТовара.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьПродажу(Команда)
	
	ОписаниеОповещение = Новый ОписаниеОповещения("РазрашитьПродажуОповещение",ЭтаФорма);
	Если ТЗДокументыДляЗавершенияСканирования.НайтиСтроки(Новый Структура("РазрешитьПродажу",Истина)).Количество() > 0 тогда
		ПоказатьВопрос(ОписаниеОповещение,"Перевести отмеченные документы в продажу?",РежимДиалогаВопрос.ДаНет);
	Иначе
		Сообщить("Нет документов отмеченных для размещения в продажу!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрашитьПродажуОповещение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет тогда
		Возврат;
	КонецЕсли;
	РазрешитьПродажуНаСервере();
	ПерейтиКСканированию();
	ОбновитьСписокНакладных();
	
КонецПроцедуры

&НаСервере
Процедура РазрешитьПродажуНаСервере()
	
	Для каждого строка из ТЗДокументыДляЗавершенияСканирования цикл
		Если строка.РазрешитьПродажу тогда	
			НачатьТранзакцию();
			Попытка
				ПриемныйАктТЗ = строка.ПриемныйАкт.Выгрузить();
				МенеджерЗаписиРС= РегистрыСведений.Приемка_ДокументыВРаботе.СоздатьМенеджерЗаписи();
				МенеджерЗаписиРС.Документ = строка.ДокументСсылка;
				МенеджерЗаписиРС.Флаг = Ложь;
				МенеджерЗаписиРС.ЗавершениеПриемки = ТекущаяДата();
				МенеджерЗаписиРС.Записать();
				Приход = Строка.ДокументСсылка.ПолучитьОбъект();
				Если ТипЗнч(Строка.ДокументСсылка) = Тип("ДокументСсылка.Приходная") Тогда // Захар 13-11-2017
					Приход.ДатаОплаты = Строка.ДатаОплаты;
					Приход.ВычНП = Истина;
					Приход.ВремяПускаВПродажу = Формат(ТекущаяДата(),"ДФ='гггг-ММ-дд ЧЧ:мм:сс'");
					Приход.АвторПускаВПродажу = Строка(ПараметрыСеанса.ТекущийПользователь);
					//Для каждого СтрокаТЧ из Приход.Товары цикл
					//	СтрокаПартии = ПриемныйАктТЗ.Найти(СтрокаТЧ.Партия,"Партия"); 	
					//	Если СтрокаПартии <> неопределено тогда
					//		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаПартии,"Недовоз,Перевоз,Брак");
					//		//Документы.Приходная.РасчитатьСтрокуТЗТовары(СтрокаТЧ,Приход.РасчетОтСуммы);
					//		ОбщиеФункцииСервер.РасчитатьСтрокуТЗТоварыСервер(СтрокаТЧ,Приход.РасчетОтСуммы);
					//	КонецЕсли;
					//КонецЦикла;
				КонецЕсли; // Захар 13-11-2017
				// Захар 13-11-2017 {
				Если ТипЗнч(Строка.ДокументСсылка) = Тип("ДокументСсылка.Перемещение") Тогда
					Приход.РазрешитьПродажу = Истина;
				КонецЕсли;
				// } Захар
				Для каждого СтрокаТЧ из Приход.Товары цикл
					СтрокаПартии = ПриемныйАктТЗ.Найти(СтрокаТЧ.Партия,"Партия"); 	
					Если СтрокаПартии <> неопределено тогда
						ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаПартии,"Недовоз,Перевоз,Брак");
						//Документы.Приходная.РасчитатьСтрокуТЗТовары(СтрокаТЧ,Приход.РасчетОтСуммы);
						Если ТипЗнч(Строка.ДокументСсылка) = Тип("ДокументСсылка.Приходная") тогда
							ОбщиеФункцииСервер.РасчитатьСтрокуТЗТоварыСервер(СтрокаТЧ,Приход.РасчетОтСуммы);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Приход.Записать(РежимЗаписиДокумента.Проведение);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
			КонецПопытки;
			Если ТипЗнч(Приход.Ссылка) = Тип("ДокументСсылка.Приходная") тогда
				Если Приход.ОрдернаяСхема = 1 и Приход.ТипНакладной <> перечисления.ТипыПрихНакл.ВводОстатков тогда
					СоединениеSQL = РаботаСSQL.ПодключениеКСерверуSQLПоНастройке(справочники.НастройкиПодключения.БазаCourierDS);
					Если СоединениеSQL = неопределено тогда 
						Возврат
					КонецЕсли;
					СтруктураВозврата = Новый Структура;
					ПользовательСтрока = ПараметрыСеанса.ТекущийПользователь.Наименование;
					Для каждого строка из Приход.Товары цикл
						Если Строка.КодСтроки = 0 тогда 
							Продолжить;
						КонецЕсли;
						СтруктураВозврата.Вставить("ТоварКод", СокрЛП(строка.Товар.Код));
						СтруктураВозврата.Вставить("КодСтроки", Формат(Строка.КодСтроки,"ЧРД=; ЧРГ=; ЧГ="));
						СтруктураВозврата.Вставить("Пользователь", ПользовательСтрока);
						ВыполнитьЗаменуСоответствияТовара(СтруктураВозврата,СоединениеSQL);
					КонецЦикла;				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Захар 13-11-2017 {
	//Для Каждого СтрокаДокумент Из ТЗДокументыДляЗавершенияСканирования Цикл
	//	Если ТипЗнч(СтрокаДокумент.ДокументСсылка) = Тип("ДокументСсылка.Перемещение") Тогда
	//		Запрос = Новый Запрос("ВЫБРАТЬ
	//		                      |	АдресХранения.СкладПретензий
	//		                      |ИЗ
	//		                      |	Справочник.АдресХранения КАК АдресХранения
	//		                      |ГДЕ
	//		                      |	АдресХранения.ОсновнойСклад = &Склад");
	//		Запрос.УстановитьПараметр("Склад", СтрокаДокумент.ДокументСсылка.Поставщик);
	//		РезультатЗапроса = Запрос.Выполнить();
	//		Если Не РезультатЗапроса.Пустой() Тогда
	//			Выборка = РезультатЗапроса.Выбрать();
	//			Пока Выборка.Следующий() Цикл
	//				СкладПретензий = Выборка.СкладПретензий;
	//				Прервать;
	//			КонецЦикла;
	//		Иначе
	//			Возврат;
	//		КонецЕсли;
	//		НачатьТранзакцию();
	//		Попытка
	//			ДокПретензия = Документы.Претензия.СоздатьДокумент();
	//			ДокПретензия.Дата = ТекущаяДата();
	//			ДокПретензия.Отдел = СкладПретензий;
	//			ДокПретензия.ДокументОснование = СтрокаДокумент.ДокументСсылка;
	//			Для Каждого СтрокаАкта Из СтрокаДокумент.ПриемныйАкт Цикл
	//				Если СтрокаАкта.Недовоз > 0 Тогда
	//					НоваяСтрока = ДокПретензия.Товары.Добавить();
	//					НоваяСтрока.Товар = СтрокаАкта.Товар;
	//					НоваяСтрока.Партия = СтрокаАкта.Партия;
	//					НоваяСтрока.Цена = СтрокаАкта.Партия.ЗакупочнаяЦена;
	//					НоваяСтрока.Количество = СтрокаАкта.Недовоз;
	//					НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
	//					НоваяСтрока.Претензия = Справочники.Претензии.Недовоз;
	//					НоваяСтрока.Поставщик = СкладПретензий;
	//				КонецЕсли;
	//				Если СтрокаАкта.Перевоз > 0 Тогда
	//					НоваяСтрока = ДокПретензия.Товары.Добавить();
	//					НоваяСтрока.Товар = СтрокаАкта.Товар;
	//					НоваяСтрока.Партия = СтрокаАкта.Партия;
	//					НоваяСтрока.Цена = СтрокаАкта.Партия.ЗакупочнаяЦена;
	//					НоваяСтрока.Количество = СтрокаАкта.Перевоз;
	//					НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
	//					НоваяСтрока.Претензия = Справочники.Претензии.Перевоз;
	//					НоваяСтрока.Поставщик = СкладПретензий;
	//				КонецЕсли;
	//				Если СтрокаАкта.Брак > 0 Тогда
	//					НоваяСтрока = ДокПретензия.Товары.Добавить();
	//					НоваяСтрока.Товар = СтрокаАкта.Товар;
	//					НоваяСтрока.Партия = СтрокаАкта.Партия;
	//					НоваяСтрока.Цена = СтрокаАкта.Партия.ЗакупочнаяЦена;
	//					НоваяСтрока.Количество = СтрокаАкта.Брак;
	//					НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
	//					НоваяСтрока.Претензия = Справочники.Претензии.Брак;
	//					НоваяСтрока.Поставщик = СкладПретензий;
	//				КонецЕсли;
	//			КонецЦикла;
	//			ДокПретензия.Записать(РежимЗаписиДокумента.Проведение);
	//			ЗафиксироватьТранзакцию();
	//		Исключение
	//			ОтменитьТранзакцию();
	//		КонецПопытки;
	//	КонецЕсли;
	//КонецЦикла;
	// } Захар
	
	ТЗДокументыДляЗавершенияСканирования.Очистить();
	ЭтаФорма.Элементы.Страницы.ПодчиненныеЭлементы.ПриемныйАкт.Видимость = Ложь;
	ЭтаФорма.Элементы.Страницы.ПодчиненныеЭлементы.СканированиеТовара.Видимость = Истина;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ТаблицаПриемныйАктПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекСтрока = Элемент.ТекущиеДанные; 
	СохраненнаяСтрока = Элементы.ТЗДокументыДляЗавершенияСканирования.ТекущиеДанные.ПриемныйАкт.Получить(ПриемныйАкт.Индекс(ТекСтрока));
	Если ТекСтрока <> Неопределено тогда
		Если ТекСтрока.ИтогоПретензий - ТекСтрока.Брак - ТекСтрока.Перевоз >= 0 и не ОтменаРедактирования тогда  
			ТекСтрока.Недовоз = ТекСтрока.ИтогоПретензий  - ТекСтрока.Брак - ТекСтрока.Перевоз;
			ЗаполнитьЗначенияСвойств(СохраненнаяСтрока,ТекСтрока);
		Иначе
			ЗаполнитьЗначенияСвойств(ТекСтрока,СохраненнаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПриемныйАкт(ПриемныйАктТЗ)
		
	ПриемныйАкт.Очистить();
	Для каждого строка из ПриемныйАктТЗ цикл
		Если Строка.Недовоз+Строка.Перевоз + Строка.Брак > 0 тогда
			СтрокаНовая = ПриемныйАкт.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовая,Строка);
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ТЗДокументыДляЗавершенияСканированияРазрешитьПродажуПриИзменении(Элемент)
	Строка = Элементы.ТЗДокументыДляЗавершенияСканирования.ТекущиеДанные;
	Если Строка <> НЕОПРЕДЕЛЕНО тогда
		Если ТипЗнч(Строка.ДокументСсылка) = Тип("ДокументСсылка.Приходная") Тогда // Захар 13-11-2017
			Если Строка.ДатаОплаты < Строка.ДатаОплатыПлан тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Поле = "ТЗДокументыДляЗавершенияСканирования["+ТЗДокументыДляЗавершенияСканирования.Индекс(Строка)+"].ДатаОплаты";
				Сообщение.Текст = "Некорректная дата оплаты, острочка поставщика "+Строка.Отсрочка+" дней;"+Символы.ПС+"Исправте дату оплаты!";
				Сообщение.Сообщить();
				Строка.РазрешитьПродажу = ложь;
				Возврат;
			КонецЕсли;
		КонецЕсли; // Захар 13-11-2017
		Если Строка.РазрешитьПродажу тогда
			ЗаполнитьПриемныйАкт(Строка.ПриемныйАкт);
		Иначе
			ПриемныйАкт.Очистить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЗДокументыДляЗавершенияСканированияПриАктивизацииСтроки(Элемент)
	
	Строка = Элементы.ТЗДокументыДляЗавершенияСканирования.ТекущиеДанные;
	Если Строка <> НЕОПРЕДЕЛЕНО тогда
		Если Строка.РазрешитьПродажу тогда
			ЗаполнитьПриемныйАкт(Строка.ПриемныйАкт);
		Иначе
			ПриемныйАкт.Очистить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПриемныйАктПередНачаломИзменения(Элемент, Отказ)
	ТекСтрока = Элемент.ТекущиеДанные;
	Если ТекСтрока.БракованнаяСерия тогда
		ПоказатьПредупреждение(,"Невозможно изменить распределение для бракованной партии!!!");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры


#Область Согласование

&НаКлиенте
Процедура ТолькоТребующиеСогласованияПриИзменении(Элемент)
	ЗаполнитьТаблицуСогласованиеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСогласованиеНаСервере()
	
	//	
	Согласование.Очистить();
	//
	ТоварДляПодмены.Очистить();

	Если ПараметрыСеанса.ТекущийПрефикс = "AF" тогда
		Возврат;
	КонецЕсли;
	//
	//ТекущаяСтрока = Элементы.Документы.ТекущиеДанные;
	//ВыбранныйДокументСогласование = документы.Приходная.ПустаяСсылка();
	//Если ТекущаяСтрока = Неопределено или ТипЗнч(ВыбранныйДокументСогласование) <> Тип("ДокументСсылка.Приходная") тогда
	//	Возврат;
	//Иначе
	//	ВыбранныйДокументСогласование = ТекущаяСтрока.ДокументСсылка;
	//	Если не ЗначениеЗаполнено(ВыбранныйДокументСогласование) тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|   ТЗ.НомерСтроки,
	|	ТЗ.КодСтроки,
	|	ТЗ.Товар
	|ПОМЕСТИТЬ ВТТовар
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТовар.НомерСтроки,
	|	ВТТовар.КодСтроки,
	|	ВТТовар.Товар,
	|	ВТТовар.Товар.Наименование,
	|	ВТТовар.Товар.Код,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Деление.Ссылка ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК Деление
	|ИЗ
	|	ВТТовар КАК ВТТовар
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Деление КАК Деление
	|		ПО (Деление.Владелец = ВТТовар.Товар
	|				ИЛИ Деление.ТоварПолучаемый = ВТТовар.Товар)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТовар.НомерСтроки,
	|	ВТТовар.КодСтроки,
	|	ВТТовар.Товар";
	
	ТЗ = ВыбранныйДокументСогласование.Товары.Выгрузить(,"НомерСтроки,КодСтроки,Товар");

	Запрос.УстановитьПараметр("ТЗ",ТЗ);
	
	ТаблицаУсловие = Запрос.Выполнить().Выгрузить(); 
	
	СтрокаУсловие = "";
	Для каждого строка из ТаблицаУсловие цикл
		Если ЗначениеЗаполнено(строка.КодСтроки) тогда 
			СтрокаУсловие = СтрокаУсловие + "'" + Формат(строка.КодСтроки,"ЧГ=") + "'" + ",";
		КонецЕсли;
	КонецЦикла;
	ДлинаУсловия = СтрДлина(СтрокаУсловие);
	Если ДлинаУсловия = 0 тогда
		Возврат
	КонецЕсли;
	СтрокаУсловие = Лев(СтрокаУсловие,ДлинаУсловия-1); 
	СтрокаУсловие = "("+СтрокаУсловие+")";
	
	ТекстЗапроса = 
	"set nocount on 
	|
	|if object_id('tempdb..#ovh_l') is not null drop table #ovh_l
	|
	|select id, name, firm, cntr, codepst, id_supplier  
	|into #ovh_l 
	|from ea5..overhead_list (nolock) 
	|where id in "+СтрокаУсловие+"
	|
	|if object_id('courierDS.dbo.t_product_matching') is not null 
	|SELECT ovh_l.id, ovh_l.name, ovh_l.firm, ovh_l.cntr, ovh_l.codepst, ovh_l.id_supplier, pm.update_date,  pm.code, 1 as t_product_matching    
	|FROM #ovh_l ovh_l
	|LEFT JOIN courierDS.dbo.t_product_matching pm (NOLOCK) ON ovh_l.id_supplier = pm.id_supplier
	|	AND ovh_l.codepst = pm.code_pst
	|else
	|SELECT ovh_l.id, ovh_l.name, ovh_l.firm, ovh_l.cntr, ovh_l.codepst, ovh_l.id_supplier, null as update_date,  null as code, 0 as t_product_matching     
	|FROM #ovh_l ovh_l
	|
	|if object_id('tempdb..#ovh_l') is not null drop table #ovh_l";
	
	РезультатТЗ = РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапроса,,Справочники.НастройкиПодключения.БазаCourierDS,Истина); 
		
	Если РезультатТЗ = Неопределено тогда
		Возврат
	КонецЕсли;
	ПроверочнаяДата = ДобавитьМесяц(НачалоДня(ТекущаяДата()),-3);
	Для каждого строка из ТаблицаУсловие цикл
		СтрокаТЗ = РезультатТЗ.Найти(строка.КодСтроки,"id");
		Если СтрокаТЗ <> неопределено тогда
					
			ПоставщикТовар		=	СтрокаТЗ.name;
			ПоставщикЗавод		=	СтрокаТЗ.firm;
			ПоставщикСтрана		=	СтрокаТЗ.cntr;
			ДатаАктуальности	=  ?(СтрокаТЗ.update_date = null, Дата(1,1,1),НачалоДня(СтрокаТЗ.update_date));
			КодНоменклатуры 	=  ?(СтрокаТЗ.code = null,"",СтрокаТЗ.code);
			ОшибкаСогласования  =  ?((СокрЛП(строка.ТоварКод) <> СокрЛП(КодНоменклатуры) или ДатаАктуальности < ПроверочнаяДата) и СтрокаТЗ.t_product_matching = 1,Истина,Ложь);
		
			Если ТолькоТребующиеСогласования и не ОшибкаСогласования тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаСогласование = ЭтаФорма.Согласование.Добавить();
			
			СтрокаСогласование.КодСтроки 				= Строка.КодСтроки;
			СтрокаСогласование.НаименованиеПоставщика 	= НРег(ПоставщикТовар+?(СтрДлина(ПоставщикЗавод)=0,""," "+ПоставщикЗавод)+?(СтрДлина(ПоставщикСтрана)=0,""," "+ПоставщикСтрана));
			СтрокаСогласование.НаименованиеНаше 		= Строка.Товар;
			СтрокаСогласование.НаименованиеНашеСтрока   = НРег(Строка.ТоварНаименование);
			СтрокаСогласование.id_supplier              = Формат(СтрокаТЗ.id_supplier, "ЧДЦ=; ЧРД=; ЧРГ=; ЧГ=");  
			СтрокаСогласование.code_pst                 = СтрокаТЗ.codepst;
			СтрокаСогласование.ОшибкаСогласования		= ОшибкаСогласования;
			СтрокаСогласование.НомерСтроки 				= строка.НомерСтроки;			
		КонецЕсли;
	КонецЦикла;
	
	ЭтаФорма.Согласование.Сортировать("ОшибкаСогласования Убыв, НомерСтроки Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура СогласованиеТаблицаПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> неопределено тогда
		НаименованиеПоставщика = Элемент.ТекущиеДанные.НаименованиеПоставщика;
		НаименованиеНаше = Элемент.ТекущиеДанные.НаименованиеНаше;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СогласованиеТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТоварНаш = Элемент.ТекущиеДанные.НаименованиеНаше;
	ТоварПринимали = ПоТоваруБылиПриняты(ТоварНаш);
	Если ТоварПринимали тогда
		 Сообщение = Новый СообщениеПользователю;
		 Сообщение.Текст = "Редактирование согласования доступно только по непринятому товару!!!";
		 Сообщение.Сообщить();
	Иначе
		СогласованиеТаблицаВыборНаСервере(Элемент.ТекущиеДанные.НаименованиеПоставщика);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПриИзменении(Элемент)
	ФильтрПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ФильтрПриИзмененииНаСервере()
	ТоварДляПодмены.Очистить();
	Если СтрДлина(Фильтр) < 3 тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Для фильтра необходимо ввести минимум 3 символа!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка как Товар
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование ПОДОБНО ""%"" + &Наименование + ""%""
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.Наименование";
	Запрос.УстановитьПараметр("Наименование",Фильтр);
	ТоварДляПодмены.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаСервере
Функция ПоТоваруБылиПриняты(ТоварНаш)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Приемка_ТоварыВРаботе.Период КАК Период
	|ИЗ
	|	РегистрСведений.Приемка_ТоварыВРаботе КАК Приемка_ТоварыВРаботе
	|ГДЕ
	|	Приемка_ТоварыВРаботе.Документ = &Документ
	|	И Приемка_ТоварыВРаботе.Товар = &Товар";
	Запрос.УстановитьПараметр("Документ",ВыбранныйДокументСогласование.Ссылка);
	Запрос.УстановитьПараметр("Товар",ТоварНаш);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура СогласованиеТаблицаВыборНаСервере(СтрокаДляПоиска)
	
	Если КоличествоСимволовФильтра = 99 тогда
		НомерСимволаПробела = стрНайти(СтрокаДляПоиска," ")-1;
		Фильтр = Лев(СтрокаДляПоиска,НомерСимволаПробела);
	Иначе
		Фильтр = Лев(СтрокаДляПоиска,КоличествоСимволовФильтра);
	КонецЕсли;
	ФильтрПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварДляПодменыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТоварНаш = Элементы.СогласованиеТаблица.ТекущиеДанные.НаименованиеНаше;
	ТоварПринимали = ПоТоваруБылиПриняты(ТоварНаш);
	Если ТоварПринимали тогда
		 Сообщение = Новый СообщениеПользователю;
		 Сообщение.Текст = "Редактирование согласования доступно только по непринятому товару!!!";
		 Сообщение.Сообщить();
		 Возврат;
	КонецЕсли;

	ВыбраннаяНоменкалтура = Элемент.ТекущиеДанные.Товар;
	Если не ЗначениеЗаполнено(ВыбраннаяНоменкалтура) Тогда 
		Возврат;
	Иначе
		ПараметрыОповещения 	= Новый Структура("НоменклатураДляЗамены,КодСтроки",ВыбраннаяНоменкалтура,Элементы.СогласованиеТаблица.ТекущиеДанные.КодСтроки);
		Оповещение 	= Новый ОписаниеОповещения("ПослеЗакрытияВопросаСогласование", ЭтаФорма, ПараметрыОповещения);
		ПоказатьВопрос(Оповещение,"Вы уверены что хотите заменить позицию?",РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаСогласование(Результат, Параметр) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ПослеЗакрытияВопросаСогласованиеСервер(Параметр);
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаСогласованиеСервер(Параметр)
	
	ОбъектПриходная = ВыбранныйДокументСогласование.ПолучитьОбъект();
	Если НЕ Автоперебор Тогда
		Строки = ОбъектПриходная.Товары.НайтиСтроки(Новый Структура("КодСтроки",Параметр.КодСтроки));
		Для каждого строка из строки цикл
			строка.Товар = Параметр.НоменклатураДляЗамены;
			Если ЗначениеЗаполнено(Строка.Партия) тогда
				ЗаменитьВладельцаПартии(строка.Партия,Строка.Товар);
			КонецЕсли;
		КонецЦикла;
		Строки = Согласование.НайтиСтроки(Новый Структура("КодСтроки",Параметр.КодСтроки));
		Для каждого строка из строки цикл
			Строка.НаименованиеНаше = Параметр.НоменклатураДляЗамены; 
			Строка.НаименованиеНашеСтрока = Строка(Параметр.НоменклатураДляЗамены); 
		КонецЦикла;
		
	Иначе
		Строки = ОбъектПриходная.Товары.НайтиСтроки(Новый Структура("КодСтроки",Параметр.КодСтроки));
		ЗаменяемыйТовар = Строки[0].Товар;
		Строки = ОбъектПриходная.Товары.НайтиСтроки(Новый Структура("Товар",ЗаменяемыйТовар));
		Для Каждого Строка из Строки Цикл
			Строка.Товар = Параметр.НоменклатураДляЗамены;
			Если ЗначениеЗаполнено(Строка.Партия) тогда
				ЗаменитьВладельцаПартии(строка.Партия,Строка.Товар);
			КонецЕсли;
		КонецЦикла;
		Строки = Согласование.НайтиСтроки(Новый Структура("НаименованиеНаше",ЗаменяемыйТовар));
		Для Каждого Строка из Строки Цикл
			Строка.НаименованиеНаше = Параметр.НоменклатураДляЗамены;
			Строка.НаименованиеНашеСтрока = Строка(Параметр.НоменклатураДляЗамены); 
		КонецЦикла;		
	КонецЕсли;
	ОбъектПриходная.Записать(РежимЗаписиДокумента.Запись);

	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьЗаменуСоответствияТовара(СтруктураЗамены,Соединение)
	ТекстЗапросаSQL = 
	"set nocount on  
	|
	|DECLARE @Nom_Cod varchar(8), @string_num integer,  @code_pst varchar(32), @id_supplier integer 
	|SET @Nom_Cod = '" + СокрЛП(СтруктураЗамены.ТоварКод) +"'
	|SET @string_num = "+СтруктураЗамены.КодСтроки+"
	|
	|SELECT @id_supplier = id_supplier,@code_pst = codepst FROM ea5..overhead_list WHERE id = @string_num
	|
	|IF object_id('[courierDS].[dbo].[t_product_matching]') is not null 
	|	BEGIN 
	|		DELETE FROM	[courierDS].[dbo].[t_product_matching]
	|		WHERE code_pst = @code_pst AND id_supplier = @id_supplier 
	|		
	|		INSERT INTO [courierDS].[dbo].[t_product_matching]
	|	    VALUES(@Nom_Cod,@code_pst,@id_supplier,NULL,'"+СтруктураЗамены.Пользователь+"')	
	|	END
	|	";
	РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапросаSQL,,Справочники.НастройкиПодключения.БазаCourierDS);
КонецПроцедуры

&НаСервере
Процедура ЗаменитьВладельцаПартии(ПартияСсылка, НовыйТовар)
	
	Партия = ПартияСсылка.ПолучитьОбъект();
	Партия.Владелец = НовыйТовар;
	Партия.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПриАктивизацииСтроки(Элемент)
	
	Согласование.Очистить();
	
	ТоварДляПодмены.Очистить();
	
	ТекущаяСтрока = Элементы.Документы.ТекущиеДанные;
	ВыбранныйДокументСогласование = ПредопределенноеЗначение("Документ.Приходная.ПустаяСсылка");
	Если ТекущаяСтрока = Неопределено или ТипЗнч(ВыбранныйДокументСогласование) <> Тип("ДокументСсылка.Приходная") тогда
		Возврат;
	Иначе
		ВыбранныйДокументСогласование = ТекущаяСтрока.ДокументСсылка;
		Если не ЗначениеЗаполнено(ВыбранныйДокументСогласование) тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьТаблицуСогласованиеНаСервере();
КонецПроцедуры


#КонецОбласти
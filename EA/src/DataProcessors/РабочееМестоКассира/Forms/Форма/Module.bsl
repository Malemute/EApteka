&НаКлиенте
Перем Displ,ТерминалОплаты, IngenicoЭквайринговыйТерминал;

#Область ПоискТовара
&НаСервере
Функция НайтиТоварыСервере(ПоШК)
	
	ПоискТовара.Очистить();
	ПоискТовараАналог.Очистить();
	
	ШК = "";
	ШКЗаполнен = Ложь;
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("NumWord",			Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПоиска.Колонки.Добавить("mLikeWord",			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100,ДопустимаяДлина.Переменная)));
	ТаблицаПоиска.Колонки.Добавить("LikeWordМаска",		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100,ДопустимаяДлина.Переменная)));
	ТаблицаПоиска.Колонки.Добавить("mLikeWordМаска",	Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100,ДопустимаяДлина.Переменная)));
	
	Если не ПоШК тогда
		дСтрПоиск = СокрЛП(Объект.СтрокаПоиск);
		ИскомаяФраза = СокрЛП(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(дСтрПоиск, Символ(160), " "), "+", " "), "+", " "), "/", " "), "\", " "), ",", " "), ".", ""), "  ", " "), "  ", " "));
		стрИскомаяФраза = СтрЗаменить(ИскомаяФраза, " ", Символы.ПС);
		Если ПустаяСтрока(стрИскомаяФраза) Тогда
			Возврат Истина; 
		КонецЕсли;
		локКолСлов = ?(ПустаяСтрока(стрИскомаяФраза),0, СтрЧислоСтрок(стрИскомаяФраза));
		
		Если ПустаяСтрока(стрИскомаяФраза) Тогда
			Возврат Неопределено;
		Иначе
			Для СчСлов = 1 По СтрЧислоСтрок(стрИскомаяФраза) Цикл
				Слово 		= ВРЕГ(СтрПолучитьСтроку(стрИскомаяФраза, СчСлов));
				СловоФонетическийКод = справочники.Номенклатура.ПолучитьФонетическийКод(Слово);
				Если ЗначениеЗаполнено(СловоФонетическийКод) тогда
					НоваяСтрока 				= ТаблицаПоиска.Добавить();
					НоваяСтрока.NumWord 		= СчСлов;	
					НоваяСтрока.mLikeWord 		= СловоФонетическийКод;	
					НоваяСтрока.LikeWordМаска 	=  "%" + Слово + "%";
					НоваяСтрока.mLikeWordМаска 	= "%" + СловоФонетическийКод + "%";	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		ШКЗаполнен = ЗначениеЗаполнено(СокрЛП(Объект.СтрокаПоиск));
		Если ШКЗаполнен тогда
			ШК = "%"+Объект.СтрокаПоиск+"%";
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Слова.NumWord,
	|	Слова.mLikeWord,
	|	Слова.LikeWordМаска,
	|	Слова.mLikeWordМаска
	|ПОМЕСТИТЬ Слова
	|ИЗ
	|	&ТЗ КАК Слова
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Слова.NumWord,
	|	Слова.mLikeWord,
	|	Слова.LikeWordМаска,
	|	Слова.mLikeWordМаска
	|ПОМЕСТИТЬ втСловаСЗаполненнымФонетическимКодом
	|ИЗ
	|	Слова КАК Слова
	|ГДЕ
	|	Слова.mLikeWord <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиТовараОстатки.Товар КАК Ссылка,
	|	ОстаткиТовараОстатки.Товар.ФонетическийКодСтрока КАК ФонетическийКодСтрока
	|ПОМЕСТИТЬ НоменклатураСОстатками
	|ИЗ
	|	РегистрНакопления.ОстаткиТовара.Остатки(, Отдел = &Отдел) КАК ОстаткиТовараОстатки
	|ГДЕ
	|	ОстаткиТовараОстатки.ОстатокОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 100
	|	НоменклатураСОстатками.Ссылка КАК Номенклатура,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втСловаСЗаполненнымФонетическимКодом.NumWord) КАК NumWord
	|ПОМЕСТИТЬ втНайденныеБезМНН
	|ИЗ
	|	НоменклатураСОстатками КАК НоменклатураСОстатками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСловаСЗаполненнымФонетическимКодом КАК втСловаСЗаполненнымФонетическимКодом
	|		ПО (НоменклатураСОстатками.ФонетическийКодСтрока ПОДОБНО втСловаСЗаполненнымФонетическимКодом.mLikeWordМаска)
	|ГДЕ
	|	НЕ &ПоМНН
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураСОстатками.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втСловаСЗаполненнымФонетическимКодом.NumWord) >= &КоличествоСлов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаводскиеШК.Владелец,
	|	0
	|ИЗ
	|	Справочник.ЗаводскиеШК КАК ЗаводскиеШК
	|ГДЕ
	|	&ШтрихКодЗаполнен
	|	И ЗаводскиеШК.Наименование ПОДОБНО &ШтрихКод
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаводскиеШК.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 100
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	КОЛИЧЕСТВО(Слова.NumWord) КАК NumWord
	|ПОМЕСТИТЬ втНайденныеМНН
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МНН КАК МННСправочник
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Слова КАК Слова
	|			ПО (МННСправочник.Наименование ПОДОБНО Слова.LikeWordМаска)
	|		ПО Номенклатура.МНН = МННСправочник.Ссылка
	|ГДЕ
	|	&ПоМНН
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Слова.NumWord) >= &КоличествоСлов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНайденныеБезМНН.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втНеАналоги
	|ИЗ
	|	втНайденныеБезМНН КАК втНайденныеБезМНН
	|
	|СГРУППИРОВАТЬ ПО
	|	втНайденныеБезМНН.Номенклатура
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втНайденныеМНН.Номенклатура
	|ИЗ
	|	втНайденныеМНН КАК втНайденныеМНН
	|
	|СГРУППИРОВАТЬ ПО
	|	втНайденныеМНН.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНеАналоги.Номенклатура КАК Номенклатура,
	|	втНеАналоги.Номенклатура.МНН КАК АналогДля
	|ПОМЕСТИТЬ втНайденнаяНоменклатура
	|ИЗ
	|	втНеАналоги КАК втНеАналоги
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НоменклатураВся.Ссылка,
	|	НоменклатураВся.Ссылка.МНН
	|ИЗ
	|	втНеАналоги КАК втНеАналоги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураВся
	|		ПО втНеАналоги.Номенклатура.МНН = НоменклатураВся.МНН
	|			И (втНеАналоги.Номенклатура.МНН <> ЗНАЧЕНИЕ(Справочник.МНН.ПустаяСсылка))
	|ГДЕ
	|	НЕ НоменклатураВся.Ссылка В
	|				(ВЫБРАТЬ
	|					втНеАналоги.Номенклатура
	|				ИЗ
	|					втНеАналоги КАК втНеАналоги)
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураВся.Ссылка,
	|	НоменклатураВся.Ссылка.МНН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныПрайсЛиста.Ссылка
	|ПОМЕСТИТЬ ЦПЛ
	|ИЗ
	|	Справочник.ЦеныПрайсЛиста КАК ЦеныПрайсЛиста
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНайденнаяНоменклатура КАК втНайденнаяНоменклатура
	|		ПО ЦеныПрайсЛиста.Владелец = втНайденнаяНоменклатура.Номенклатура
	|ГДЕ
	|	ЦеныПрайсЛиста.ТипЦены = &ТипЦены
	|	И ЦеныПрайсЛиста.РегионРаботы = &РегионРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЦенаНоменклатурыСрезПоследних.СпецПредложение = 0
	|			ТОГДА ЦенаНоменклатурыСрезПоследних.Цена
	|		ИНАЧЕ ЦенаНоменклатурыСрезПоследних.СпецПредложение
	|	КОНЕЦ КАК Цена,
	|	ЦенаНоменклатурыСрезПоследних.ЦенаПрайсЛиста.Владелец КАК Товар
	|ПОМЕСТИТЬ втЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦенаНоменклатуры.СрезПоследних(
	|			&ТекущаяДата,
	|			ЦенаПрайсЛиста В
	|				(ВЫБРАТЬ
	|					ЦПЛ.Ссылка
	|				ИЗ
	|					ЦПЛ КАК ЦПЛ)) КАК ЦенаНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиТовараОстатки.Товар КАК Товар,
	|	ОстаткиТовараОстатки.Партия,
	|	ОстаткиТовараОстатки.Партия.ГоденДо КАК ГоденДо,
	|	ОстаткиТовараОстатки.ОстатокОстаток КАК Остаток,
	|	ВЫБОР
	|		КОГДА втЦеныНоменклатуры.Цена ЕСТЬ NULL 
	|				ИЛИ втЦеныНоменклатуры.Цена = 0
	|				ИЛИ РАЗНОСТЬДАТ(&ТекущаяДата, ОстаткиТовараОстатки.Партия.ГоденДо, ДЕНЬ) <= 60
	|					И ОстаткиТовараОстатки.Партия.ГоденДо <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЦеныПартии.Цена
	|		ИНАЧЕ втЦеныНоменклатуры.Цена
	|	КОНЕЦ КАК Цена
	|ПОМЕСТИТЬ втИтог
	|ИЗ
	|	РегистрНакопления.ОстаткиТовара.Остатки(
	|			&ТекущаяДата,
	|			Отдел = &Отдел
	|				И Товар В
	|					(ВЫБРАТЬ
	|						втНайденнаяНоменклатура.Номенклатура
	|					ИЗ
	|						втНайденнаяНоменклатура КАК втНайденнаяНоменклатура)) КАК ОстаткиТовараОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЦеныПартии КАК ЦеныПартии
	|		ПО ОстаткиТовараОстатки.Партия = ЦеныПартии.Владелец
	|			И (ЦеныПартии.ТипЦены = &ТипЦены)
	|			И (ЦеныПартии.РегионРаботы = &РегионРаботы)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЦеныНоменклатуры КАК втЦеныНоменклатуры
	|		ПО ОстаткиТовараОстатки.Товар = втЦеныНоменклатуры.Товар
	|ГДЕ
	|	НЕ ЕСТЬNULL(втЦеныНоменклатуры.Цена, ЦеныПартии.Цена) ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТовараОстатки.Товар,
	|	ОстаткиТовараОстатки.Партия,
	|	ОстаткиТовараОстатки.Партия.ГоденДо,
	|	ОстаткиТовараОстатки.ОстатокОстаток,
	|	ВЫБОР
	|		КОГДА втЦеныНоменклатуры.Цена ЕСТЬ NULL 
	|				ИЛИ втЦеныНоменклатуры.Цена = 0
	|				ИЛИ РАЗНОСТЬДАТ(&ТекущаяДата, ОстаткиТовараОстатки.Партия.ГоденДо, ДЕНЬ) <= 60
	|					И ОстаткиТовараОстатки.Партия.ГоденДо <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЦеныПартии.Цена
	|		ИНАЧЕ втЦеныНоменклатуры.Цена
	|	КОНЕЦ,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ОстаткиТовараОстатки.Партия.Владелец.Ячейка = 123
	|					ИЛИ ОстаткиТовараОстатки.Партия.Владелец.Наркотический
	|					ИЛИ ОстаткиТовараОстатки.Партия.Владелец.Психотропный
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ, ЛОЖЬ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтог.Товар КАК Товар,
	|	МАКСИМУМ(ЕСТЬNULL(БэкМаржаСрезПоследних.Процент, 0) / 100 * втИтог.Партия.ЗакупочнаяЦена + (втИтог.Цена - втИтог.Партия.ЗакупочнаяЦена)) КАК БэкИФронтМаржа
	|ПОМЕСТИТЬ втМаржа
	|ИЗ
	|	втИтог КАК втИтог
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БэкМаржа.СрезПоследних КАК БэкМаржаСрезПоследних
	|		ПО втИтог.Товар = БэкМаржаСрезПоследних.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтог.Товар
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтог.Товар КАК Товар,
	|	втИтог.Партия,
	|	втИтог.Остаток КАК Остаток,
	|	втИтог.Цена КАК Цена,
	|	ЕСТЬNULL(втМаржа.БэкИФронтМаржа, 0) КАК БэкИФронтМаржа,
	|	втНайденнаяНоменклатура.АналогДля КАК АналогДля,
	|	ВЫБОР
	|		КОГДА втНеАналоги.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НеАналог,
	|	втИтог.ГоденДо КАК ГоденДо,
	|	втИтог.Товар.Наименование
	|ИЗ
	|	втИтог КАК втИтог
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМаржа КАК втМаржа
	|		ПО втИтог.Товар = втМаржа.Товар
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНайденнаяНоменклатура КАК втНайденнаяНоменклатура
	|		ПО втИтог.Товар = втНайденнаяНоменклатура.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНеАналоги КАК втНеАналоги
	|		ПО втИтог.Товар = втНеАналоги.Номенклатура
	|ГДЕ
	|	втИтог.Цена <> 0
	|	И втИтог.Остаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НеАналог УБЫВ,
	|	БэкИФронтМаржа УБЫВ
	|ИТОГИ
	|	СУММА(Остаток),
	|	МАКСИМУМ(БэкИФронтМаржа),
	|	МАКСИМУМ(АналогДля),
	|	МАКСИМУМ(НеАналог),
	|	МАКСИМУМ(ГоденДо)
	|ПО
	|	Товар,
	|	Цена";
	Запрос.УстановитьПараметр("ТЗ",ТаблицаПоиска);
	Запрос.УстановитьПараметр("Отдел", ПараметрыСеанса.ОсновнойСклад);
	Запрос.УстановитьПараметр("КоличествоСлов",ТаблицаПоиска.Количество()); 
	Запрос.УстановитьПараметр("ТипЦены", Объект.ТипЦены);
	Запрос.УстановитьПараметр("РегионРаботы", Объект.РегионРаботы);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Запрос.УстановитьПараметр("Отдел", ПараметрыСеанса.ОсновнойСклад);
	Запрос.УстановитьПараметр("ШтрихКодЗаполнен",ШКЗаполнен);
	Запрос.УстановитьПараметр("ШтрихКод",ШК);
	Запрос.УстановитьПараметр("ПоМНН",Ложь);
	ВыборкаТовар = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТовар.Следующий() цикл
		ВыборкаЦена = ВыборкаТовар.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЦена.Следующий() цикл
			Если ВыборкаЦена.НеАналог тогда
				Строка = ПоискТовара.Добавить();
			Иначе
				Строка = ПоискТовараАналог.Добавить()
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Строка,ВыборкаЦена);
			Выборка = ВыборкаЦена.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтрокаПартия = Строка.ПартииИКоличество.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПартия,Выборка);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Элементы.ПоискТовараАналог.ОтборСтрок = Новый ФиксированнаяСтруктура("АналогДля",ПредопределенноеЗначение("Справочник.МНН.ПустаяСсылка"));
	Если ПоШК тогда
		Если ПоискТовара.Количество() > 0 тогда 
			СтрокаТовар = ПоискТовара[0];
			Для каждого СтрокаПартия из СтрокаТовар.ПартииИКоличество цикл
				ДобавитьТоварВЧек(Документы.Чеки.ПустаяСсылка(),СтрокаТовар.Товар,СтрокаПартия.Партия,СтрокаТовар.Цена,СтрокаПартия.Остаток);	
			КонецЦикла;
			ИзменитьКоличествоТовараВЧеке(Документы.Чеки.ПустаяСсылка(),СтрокаТовар.Товар,СтрокаТовар.Цена,1,Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции
#КонецОбласти

#Область РаботаССоставомЧека
&НаСервере
Процедура ОбновитьОтображениеЧека()
	
	Для каждого строка из Объект.ЧекВсе цикл
		Строка.Сумма = 0;
		Строка.Всего = 0;
		Строка.СуммаНДС = 0;
		Если Строка.Количество = 0 тогда
			Строка.Скидка = 0;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЧек = Объект.ЧекВсе.Выгрузить();
	
	ТаблицаЧекДляККМ = ТаблицаЧек.Скопировать();
	
	СтрокиС0Количеством = ТаблицаЧекДляККМ.НайтиСтроки(Новый Структура("Количество",0));
	
	Для каждого строка из СтрокиС0Количеством цикл
		ТаблицаЧекДляККМ.Удалить(строка);
	КонецЦикла;
	
	Объект.Чек.Загрузить(ТаблицаЧекДляККМ);
	
	Если ЕстьСкидкаАстраЗеника() тогда
		РассчитатьСуммуСкидкиАстраЗеникаПоЧеку();
	КонецЕсли; 	
	
	Фильтр = Новый Структура("Товар,Партия,Цена,Количество,Документ");
	Для каждого строка из Объект.Чек цикл
		Строка.Сумма = Строка.Количество * Строка.Цена;
		Строка.Скидка = ?(Строка.Скидка = 0,Строка.СкидкаНаЕдиницуТовара*Строка.Количество,Строка.Скидка);
		Строка.Всего = Макс(0,Строка.Сумма - Строка.Скидка);
		Строка.СуммаНДС = Строка.Всего/(100+Строка.СтавкаНДС.Код) * Строка.СтавкаНДС.Код;
		ЗаполнитьЗначенияСвойств(Фильтр,Строка);
		СтрокиЧекВсе = ТаблицаЧек.НайтиСтроки(Фильтр);
		Для каждого строкаЧекВсе из СтрокиЧекВсе цикл
			строкаЧекВсе.Сумма    = Строка.Сумма;	
			строкаЧекВсе.Скидка   = Строка.Скидка;
			строкаЧекВсе.СуммаНДС = Строка.СуммаНДС;
			строкаЧекВсе.Всего    = Строка.Всего;
		КонецЦикла;
	КонецЦикла;
	
	Объект.ЧекВсе.Загрузить(ТаблицаЧек);
	ТаблицаЧекОтображение = Объект.ЧекОтображение.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаЧек.Товар КАК Справочник.Номенклатура) КАК Товар,
	|	ТаблицаЧек.Партия,
	|	ТаблицаЧек.Цена,
	|	ТаблицаЧек.Количество,
	|	ТаблицаЧек.Скидка,
	|	ТаблицаЧек.Сумма,
	|	ТаблицаЧек.Документ,
	|	ТаблицаЧек.Всего,
	|	ТаблицаЧек.Порядок,
	|	ТаблицаЧек.Остаток,
	|	ТаблицаЧек.ПорядокДокумент,
	|	ТаблицаЧек.ТипКомплектацииЗаказа,
	|	ТаблицаЧек.Себестоимость,
	|	ТаблицаЧек.ТипЦены
	|ПОМЕСТИТЬ втТаблицаЧек
	|ИЗ
	|	&ТаблицаЧек КАК ТаблицаЧек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЧекОтображение.Товар,
	|	ТаблицаЧекОтображение.Цена,
	|	ТаблицаЧекОтображение.Документ
	|ПОМЕСТИТЬ втТаблицаЧекОтображение
	|ИЗ
	|	&ТаблицаЧекОтображение КАК ТаблицаЧекОтображение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаЧек.Товар,
	|	втТаблицаЧек.Цена,
	|	СУММА(втТаблицаЧек.Количество) КАК Количество,
	|	СУММА(втТаблицаЧек.Скидка) КАК Скидка,
	|	СУММА(втТаблицаЧек.Сумма) КАК Сумма,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА втТаблицаЧек.Товар.Ячейка = 123
	|					ИЛИ втТаблицаЧек.Товар.Наркотический
	|					ИЛИ втТаблицаЧек.Товар.Психотропный
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ, ЛОЖЬ) КАК НуженРецепт,
	|	втТаблицаЧек.Документ,
	|	СУММА(втТаблицаЧек.Всего) КАК Всего,
	|	МАКСИМУМ(втТаблицаЧек.ПорядокДокумент) КАК ПорядокДокумент,
	|	МИНИМУМ(ВЫРАЗИТЬ(втТаблицаЧек.Партия КАК Справочник.Партии).ГоденДо) КАК ГоденДо,
	|	втТаблицаЧек.Порядок КАК Порядок,
	|	СУММА(втТаблицаЧек.Остаток) КАК Остаток,
	|	ВЫБОР
	|		КОГДА втТаблицаЧек.Документ = НЕОПРЕДЕЛЕНО
	|				ИЛИ втТаблицаЧек.Документ = ЗНАЧЕНИЕ(Документ.Чеки.ПустаяСсылка)
	|			ТОГДА ""Чек""
	|		КОГДА втТаблицаЧек.Документ ССЫЛКА Документ.Чеки
	|			ТОГДА ""Чек "" + ВЫРАЗИТЬ(втТаблицаЧек.Документ КАК Документ.Чеки).Номер
	|		КОГДА втТаблицаЧек.Документ ССЫЛКА Документ.Заказ
	|			ТОГДА ""Заказ "" + ВЫРАЗИТЬ(втТаблицаЧек.Документ КАК Документ.Заказ).Номер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОтображениеДокумента
	|ПОМЕСТИТЬ ЧекОтображение
	|ИЗ
	|	втТаблицаЧек КАК втТаблицаЧек
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаЧек.Товар,
	|	втТаблицаЧек.Цена,
	|	втТаблицаЧек.Документ,
	|	втТаблицаЧек.Порядок,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА втТаблицаЧек.Товар.Ячейка = 123
	|					ИЛИ втТаблицаЧек.Товар.Наркотический
	|					ИЛИ втТаблицаЧек.Товар.Психотропный
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ, ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|				КОГДА втТаблицаЧек.Документ ССЫЛКА Документ.Заказ
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ), ЛОЖЬ) КАК РасшифровкаПоДокументам
	|ИЗ
	|	втТаблицаЧек КАК втТаблицаЧек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Естьnull(МАКСИМУМ(ВЫБОР
	|						КОГДА ЧекОтображение.Товар ЕСТЬ NULL 
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ),Истина)
	|				ИЛИ Естьnull(МАКСИМУМ(ВЫБОР
	|						КОГДА втТаблицаЧекОтображение.Товар ЕСТЬ NULL 
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ),Истина)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Перезаполнить
	|ИЗ
	|	ЧекОтображение КАК ЧекОтображение
	|		ПОЛНОЕ СОЕДИНЕНИЕ втТаблицаЧекОтображение КАК втТаблицаЧекОтображение
	|		ПО ЧекОтображение.Товар = втТаблицаЧекОтображение.Товар
	|			И ЧекОтображение.Документ = втТаблицаЧекОтображение.Документ
	|			И ЧекОтображение.Цена = втТаблицаЧекОтображение.Цена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекОтображение.Товар,
	|	ЧекОтображение.Цена,
	|	ЧекОтображение.Количество,
	|	ЧекОтображение.Скидка КАК Скидка,
	|	ЧекОтображение.НуженРецепт,
	|	ЧекОтображение.Документ КАК Документ,
	|	ЧекОтображение.Всего КАК Всего,
	|	ЧекОтображение.ПорядокДокумент КАК ПорядокДокумент,
	|	ЧекОтображение.ГоденДо,
	|	ЧекОтображение.Порядок КАК Порядок,
	|	ЧекОтображение.Сумма КАК Сумма,
	|	ЧекОтображение.Остаток КАК Остаток,
	|	ЧекОтображение.ОтображениеДокумента,
	|	ЧекОтображение.Товар.Наименование
	|ИЗ
	|	ЧекОтображение КАК ЧекОтображение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Документ,
	|	ПорядокДокумент УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекОтображение.Документ
	|ИЗ
	|	ЧекОтображение КАК ЧекОтображение
	|ГДЕ
	|	ЧекОтображение.Документ ССЫЛКА Документ.Заказ
	|	И ЧекОтображение.Документ <> ЗНАЧЕНИЕ(Документ.Заказ.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекОтображение.Документ";
	Запрос.УстановитьПараметр("ТаблицаЧек",ТаблицаЧек);
	Запрос.УстановитьПараметр("ТаблицаЧекОтображение",ТаблицаЧекОтображение);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаВидимость = МассивРезультатов[3].Выбрать();
	Пока ВыборкаВидимость.Следующий() цикл
		Элементы.ЧекОтображениеДокумент.Видимость = ВыборкаВидимость.РасшифровкаПоДокументам;
		Элементы.ЧекОтображениеОстаток.Видимость  = ВыборкаВидимость.РасшифровкаПоДокументам и не ЭтаФорма.ВозвратПродажи;
		Элементы.ЧекОтображениеНуженРецепт.Видимость = не ЭтаФорма.ВозвратПродажи;
		Элементы.СтраницаЗаказЗСЯ.Видимость = ВыборкаВидимость.РасшифровкаПоДокументам и не ЭтаФорма.ВозвратПродажи;
		ЭтаФорма.ЗСЯЗаказа = ПолучитьТекстовоеПредставлениеЗСЯЗаказа(МассивРезультатов[6].Выгрузить().ВыгрузитьКолонку("Документ"));
	КонецЦикла;
	ВыборкаПерезаполнить = МассивРезультатов[4].Выбрать();
	Перезаполнить = Истина;
	Пока ВыборкаПерезаполнить.Следующий() цикл
		Перезаполнить = ВыборкаПерезаполнить.Перезаполнить;
	КонецЦикла;
	ТаблицаОтображение = МассивРезультатов[5].Выгрузить();
	Если Перезаполнить тогда
		Объект.ЧекОтображение.Загрузить(ТаблицаОтображение);
	Иначе
		Для каждого СтрокаОтображение из Объект.ЧекОтображение цикл
			МассивСтрок = ТаблицаОтображение.НайтиСтроки(Новый Структура("Товар,Цена,Документ",СтрокаОтображение.Товар,СтрокаОтображение.Цена,СтрокаОтображение.Документ)); 
			Для каждого Строка из МассивСтрок цикл
				ЗаполнитьЗначенияСвойств(СтрокаОтображение,Строка);	  
			КонецЦикла;
		КонецЦикла;
		Объект.ЧекОтображение.Сортировать("Порядок,Документ,ПорядокДокумент УБЫВ");
	КонецЕсли;
	
	НоменклатураНуженРецепт = ТаблицаОтображение.Скопировать(,"Товар,НуженРецепт");
	НоменклатураНуженРецепт.Свернуть("Товар,НуженРецепт");
	Для каждого СтрокаНуженРецепт из НоменклатураНуженРецепт цикл 
		СтрокиЧекВсе = Объект.ЧекВсе.НайтиСтроки(Новый Структура("Товар",СтрокаНуженРецепт.Товар));
		СтрокиЧек = Объект.Чек.НайтиСтроки(Новый Структура("Товар",СтрокаНуженРецепт.Товар));
		Для каждого СтрокаЧекВсе из СтрокиЧекВсе цикл
			СтрокаЧекВсе.НуженРецепт = СтрокаНуженРецепт.НуженРецепт; 
		КонецЦикла;
		Для каждого СтрокаЧек из СтрокиЧек цикл
			СтрокаЧек.НуженРецепт = СтрокаНуженРецепт.НуженРецепт; 
		КонецЦикла;
	КонецЦикла;
	
	МассивЗаказов = ТаблицаОтображение.ВыгрузитьКолонку("Документ");
	Самовывозы.Параметры.УстановитьЗначениеПараметра("МассивЗаказовВЧеке",МассивЗаказов);
	
	Элементы.ПробитьЧек.Заголовок = ?(ЭтаФорма.ВозвратПродажи,"Пробить возврат (F12)","Пробить чек (F12)");
	Элементы.ГруппаЧек.Заголовок = ?(ЭтаФорма.ВозвратПродажи,"ВОЗВРАТ, ", "ПРОДАЖА, ")+?(ЭтаФорма.ОплатаКартой,"КАРТА","НАЛИЧНЫЕ");
	Элементы.ГруппаЧекСдача.Заголовок = ?(ЭтаФорма.ВозвратПродажи,"Возврат, ", "Оплата, ")+?(ЭтаФорма.ОплатаКартой,"КАРТА","НАЛИЧНЫЕ");
	Элементы.ОплатаКартойЧек.Доступность = Не ЭтаФорма.ВозвратПродажи;
	Элементы.ОплатаКартой.Доступность = НЕ ЭтаФорма.ВозвратПродажи;
	Элементы.СуммаПокупателя.Видимость = НЕ ЭтаФорма.ОплатаКартой;
	Элементы.СуммаПокупателя.Доступность = НЕ ЭтаФорма.ВозвратПродажи;
	Элементы.СуммаСдачи.Видимость = НЕ ЭтаФорма.ОплатаКартой;
	Элементы.СтрокаПоиска.ТолькоПросмотр = ЭтаФорма.ВозвратПродажи;
	Элементы.ПоискТовара.ТолькоПросмотр = ЭтаФорма.ВозвратПродажи;
	Элементы.ПоискТовараАналог.ТолькоПросмотр = ЭтаФорма.ВозвратПродажи;
	Элементы.СтраницаСамовывоз.Доступность = Не ЭтаФорма.ВозвратПродажи;
	Элементы.СтраницаОбслуживание.Доступность = Не ЭтаФорма.ВозвратПродажи;	
	Элементы.Очистить.Шрифт = Новый Шрифт(Элементы.Очистить.Шрифт,,,ЭтаФорма.ВозвратПродажи);
	Элементы.Очистить.Заголовок = ?(ЭтаФорма.ВозвратПродажи,"Очистка чека и отмена возврата (Ctrl-F8)","Очистка чека (Ctrl-F8)");
	Объект.СуммаСдачи=Макс(Объект.СуммаПокупателя-Объект.Чек.Итог("Сумма"),0);
	
	
КонецПроцедуры

&НаСервере
Функция ДобавитьТоварВЧек(Документ,Товар,Партия,Цена,Остаток,ЗСЯ = неопределено)
	
	СтрокиДокумент = Объект.ЧекВсе.Выгрузить(Объект.ЧекВсе.НайтиСтроки(Новый Структура("Документ",Документ)),"ПорядокДокумент");
	СтрокиДокумент.Сортировать("ПорядокДокумент Убыв");
	Если СтрокиДокумент.Количество() = 0 тогда
		ПорядокДокумент = 0;
	Иначе
		ПорядокДокумент = СтрокиДокумент[0].ПорядокДокумент+1;	
	КонецЕсли;
	СтрокаДобавлена = Ложь;	
	СтрокиЧека = Объект.ЧекВсе.НайтиСтроки(Новый Структура("Документ,Товар,Партия",Документ,Товар,Партия));
	Если СтрокиЧека.Количество() = 0 тогда	
		Строка = Объект.ЧекВсе.Добавить();
		Строка.Документ = Документ;
		Если ЗначениеЗаполнено(Строка.Документ) и ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.Заказ") тогда
			Строка.ТипКомплектацииЗаказа = Строка.Документ.ТипКомплектацииЗаказа;
			Строка.ТипЦены = Строка.Документ.ТипЦены;
		Иначе
			Строка.ТипЦены = Объект.ТипЦены;
		КонецЕсли;
		Строка.Партия = Партия;
		Строка.Товар = Товар;
		Строка.Цена = Цена;
		Строка.Себестоимость = 0;
		Строка.Остаток = Остаток;
		Строка.Скидка = 0;
		Если не ЗначениеЗаполнено(Документ) тогда
			Порядок = 1;
		ИначеЕсли ТипЗнч(Документ) = тип("ДокументСсылка.Чеки") тогда
			Порядок = 2;
		Иначе
			Порядок = 3;
		КонецЕсли;
		Строка.СтавкаНДС = РегистрыСведений.СтавкиНДСПоНоменклатуре.ВернутьСтавкуНДСПоНоменклатуре(Строка.Товар,ТекущаяДата());
		Строка.Порядок = Порядок;
		Строка.ПорядокДокумент = ПорядокДокумент;
		Строка.ЗСЯ = ЗСЯ;
		СтрокаДобавлена = Истина;
	Иначе
		Для каждого Строка из СтрокиЧека цикл
			Строка.Цена = Цена; 	
		КонецЦикла;
	КонецЕсли;     		
	Возврат СтрокаДобавлена;
КонецФункции	

&НаСервере
Процедура ИзменитьКоличествоТовараВЧеке(Документ,Товар,Цена,ИзмененноеКоличество,ДобавитьКоличество = Ложь,СкидкаНаЕдиницуТовара = неопределено,ОбновлятьОтражениеВЧеке = Истина,ЗСЯ = Неопределено)
	
	Количество = Число(ИзмененноеКоличество);
	Если ЗначениеЗаполнено(ЗСЯ) тогда
		СтрокиЧека = Объект.ЧекВсе.НайтиСтроки(Новый Структура("Документ,Товар,Цена,ЗСЯ",Документ,Товар,Цена,ЗСЯ));
	Иначе
		СтрокиЧека = Объект.ЧекВсе.НайтиСтроки(Новый Структура("Документ,Товар,Цена",Документ,Товар,Цена));
	КонецЕсли;
	
	Если СтрокиЧека.Количество() <> 0 тогда
		Если Количество = 0 тогда
			Если не ЗначениеЗаполнено(Документ) тогда
				Для каждого строка из СтрокиЧека цикл
					Объект.ЧекВсе.Удалить(Строка);
				КонецЦикла;
				ОбновлятьОтражениеВЧеке = Истина;
			Иначе
				Для каждого строка из СтрокиЧека цикл
					Строка.Количество = 0;
					Если ТипЗнч(Строка.Документ) = Тип("ДокументСсылка.Заказ") тогда
						Строка.Порядок = 5;
					Иначе
						Строка.Порядок = 4;
					КонецЕсли;
				КонецЦикла;		
			КонецЕсли;
		Иначе
			ОстатокВсего = 0;
			Для каждого СтрокаЧека из СтрокиЧека цикл     
				Если не ЗначениеЗаполнено(СтрокаЧека.Документ) тогда
					СтрокаЧека.Порядок = 1;
				ИначеЕсли ТипЗнч(СтрокаЧека.Документ) = тип("ДокументСсылка.Чеки") тогда
					СтрокаЧека.Порядок = 2;
				Иначе
					СтрокаЧека.Порядок = 3;
				КонецЕсли;
				//Если НЕ ЭтаФорма.ВозвратПродажи и не ЗначениеЗаполнено(Документ) тогда
				//	СтрокаЧека.Остаток = ПроверкаОстатковНаСервереПоПартии(СтрокаЧека.Партия);
				//КонецЕсли;
				Если ДобавитьКоличество тогда
					Количество = Количество + СтрокаЧека.Количество;
				КонецЕсли;
				ОстатокВсего = ОстатокВсего + СтрокаЧека.Остаток;	
			КонецЦикла;
			Если ОстатокВсего < Количество тогда
				Сообщить("Не хватает " + Формат(Количество-ОстатокВсего,"ЧГ=") + " """+ Товар.Наименование+"""");
				ОбновлятьОтражениеВЧеке = Истина;
			КонецЕсли;
			Для каждого СтрокаЧека из СтрокиЧека цикл
				КоличествоДляСтроки = Мин(СтрокаЧека.Остаток,Количество);
				СтрокаЧека.Количество = КоличествоДляСтроки;
				СтрокаЧека.Сумма = СтрокаЧека.Количество * СтрокаЧека.Цена;
				СтрокаЧека.Скидка = 0;
				СтрокаЧека.Себестоимость = СтрокаЧека.Количество*СтрокаЧека.Партия.ЗакупочнаяЦена; 
				Количество = Количество - КоличествоДляСтроки;
				Если СкидкаНаЕдиницуТовара <> неопределено тогда
					СтрокаЧека.СкидкаНаЕдиницуТовара = СкидкаНаЕдиницуТовара;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ОбновлятьОтражениеВЧеке тогда
		ОбновитьОтображениеЧека();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискТовараПриАктивизацииСтроки(Элемент)
	ТекСтрокаПоискаНоменклатуры = Элементы.ПоискТовара.ТекущиеДанные;
	Если ТекСтрокаПоискаНоменклатуры <> неопределено тогда
		Элементы.ПоискТовараАналог.ОтборСтрок = Новый ФиксированнаяСтруктура("АналогДля",ТекСтрокаПоискаНоменклатуры.АналогДля);
	Иначе
		Элементы.ПоискТовараАналог.ОтборСтрок = Новый ФиксированнаяСтруктура("АналогДля",ПредопределенноеЗначение("Справочник.МНН.ПустаяСсылка"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоискТовараВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено тогда
		Для каждого СтрокаПартии из ТекущиеДанные.ПартииИКоличество цикл
			ДобавитьТоварВЧек(ПредопределенноеЗначение("Документ.Чеки.ПустаяСсылка"),ТекущиеДанные.Товар,
			СтрокаПартии.Партия,ТекущиеДанные.Цена,СтрокаПартии.Остаток);
		КонецЦикла;
		ИзменитьКоличествоТовараВЧеке(ПредопределенноеЗначение("Документ.Чеки.ПустаяСсылка"),ТекущиеДанные.Товар,
		ТекущиеДанные.Цена,1,Истина);
		ПоказатьНаДисплее(Строка(ТекущиеДанные.Товар), СделатьСтрокуЦен(ТекущиеДанные.Цена, Объект.Чек.Итог("Всего")));
	КонецЕсли;
	ВывестиПредупреждение_ТоварыПоСкидкеАстразеникиВЧеке();	
КонецПроцедуры

&НаКлиенте
Процедура ЧекОтображениеКоличествоПриИзменении(Элемент)
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено тогда
		ИзменитьКоличествоТовараВЧеке(ТекущиеДанные.Документ,ТекущиеДанные.Товар,
		Число(ТекущиеДанные.Цена),Число(ТекущиеДанные.Количество));
		ПоказатьНаДисплее(Строка(ТекущиеДанные.Товар), СделатьСтрокуЦен(ТекущиеДанные.Цена, Объект.Чек.Итог("Всего")));
	КонецЕсли;
	ВывестиСуммуСдачи();
	Элементы.ПробитьЧек.Доступность = МожноПробитьЧек();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьФактОчисткиЧека(СтрокаИнд = неопределено)
	Попытка
		Период = ТекущаяДата();
		Если СтрокаИнд <> неопределено тогда
			Строка = Объект.ЧекВсе.НайтиПоИдентификатору(СтрокаИнд);
			Менеджер = РегистрыСведений.ОчищенныеЧеки.СоздатьМенеджерЗаписи();
			Менеджер.Период = Период;
			Менеджер.АдресХранения = ПараметрыСеанса.ТекущийАдресХранения;
			Менеджер.Сотрудник = Объект.СотрудникСсылка;
			Менеджер.Номенклатура = Строка.Товар;
			Менеджер.Количество = Строка.Количество;
			Менеджер.Цена = Строка.Цена;
			Менеджер.Сумма = строка.Сумма;
			Менеджер.Записать();
		Иначе
			Для каждого строка из Объект.ЧекВсе цикл
				Менеджер = РегистрыСведений.ОчищенныеЧеки.СоздатьМенеджерЗаписи();
				Менеджер.Период = Период;
				Менеджер.АдресХранения = ПараметрыСеанса.ТекущийАдресХранения;
				Менеджер.Сотрудник = Объект.СотрудникСсылка;
				Менеджер.Номенклатура = Строка.Товар;
				Менеджер.Количество = Строка.Количество;
				Менеджер.Цена = Строка.Цена;
				Менеджер.Сумма = Строка.Сумма;
				Менеджер.Записать();
			КонецЦикла;
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЧека(Команда)
	Если ЭтаФорма.ВозвратПродажи и ЭтаФорма.ОплатаКартой тогда
		ПоказатьПредупреждение(,"Нельзя удалять строки чека при возврате оплаты по карте!");
		Возврат;
	КонецЕсли;
	ТекСтрокаЧека = Элементы.ЧекОтображение.ТекущиеДанные;
	Если Объект.ЧекОтображение.Количество()>0 И ТекСтрокаЧека <> Неопределено Тогда
		ЗаписатьФактОчисткиЧека(Элементы.ЧекОтображение.ТекущиеДанные.ПолучитьИдентификатор());
		ИзменитьКоличествоТовараВЧеке(ТекСтрокаЧека.Документ,ТекСтрокаЧека.Товар,ТекСтрокаЧека.Цена,0);
	ИначеЕсли Элементы.ЧекОтображение.ТекущиеДанные = Неопределено И Объект.Чек.Количество() = 1 Тогда
		ЗаписатьФактОчисткиЧека();
		Объект.ЧекВсе.Очистить();
		Очистить(неопределено);
	КонецЕсли;
	ВывестиСуммуСдачи();
	Элементы.ПробитьЧек.Доступность = МожноПробитьЧек();
	
	ПоказатьНаДисплее("УДАЛЕНО",СделатьСтрокуЦен(0,Объект.Чек.Итог("Всего")));
	Если Объект.Чек.Количество() = 0 тогда
		ОтменитьСканированиеАстраЗеника();	
	КонецЕсли;
	ОбновитьОтображениеЧека();
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьОбработку()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("РабочееМесто") Тогда
		РабочееМесто = Параметры.РабочееМесто;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	КонецЕсли;
	
	ПечатьЦенниковНаПринтер = Истина;
	
	ПутьКФормам = ПолучитьОбработку().Метаданные().ПолноеИмя() + ".Форма.";
	
	услОформл = ЭтаФорма.УсловноеОформление.Элементы;
	
	Элементы.ПробитьЧек.СочетаниеКлавиш =новый СочетаниеКлавиш(Клавиша.F12,Ложь,Ложь,Ложь); //F9	
	Элементы.Очистить.СочетаниеКлавиш = новый СочетаниеКлавиш(Клавиша.F8,Ложь,Истина,Ложь);    //Ctrl-F8
	Элементы.ОплатаКартойЧек.СочетаниеКлавиш = новый СочетаниеКлавиш(Клавиша.F9,Ложь,Истина,Ложь); //Ctrl-F9
	Элементы.ОтчетБезГашения.СочетаниеКлавиш = новый СочетаниеКлавиш(Клавиша.X,Ложь, Истина, Ложь); //Ctrl-X
	Элементы.ОтчетСГашением.СочетаниеКлавиш = новый СочетаниеКлавиш(Клавиша.Z,Ложь, Истина, Ложь); //Ctrl-Z
	Элементы.Изъятие.СочетаниеКлавиш = новый СочетаниеКлавиш(Клавиша.F3,Ложь, Истина, Ложь); //Ctrl-F3
	Элементы.Внесение.СочетаниеКлавиш = новый СочетаниеКлавиш(Клавиша.F3,Ложь, Ложь, Истина); //Shft-F3
	Элементы.НайтиЧекПоКПК.СочетаниеКлавиш = новый СочетаниеКлавиш(Клавиша.F4, Ложь, Ложь, Истина); //Shift-F4
	
	СотрудникИд=ПараметрыСеанса.ТекущийПользователь.ID_77;
	
	ПодключениеСМС = ПроверитьПодключениеСМС();
	//КонечныеСтатусы = Новый СписокЗначений;
	//КонечныеСтатусы.Добавить(Справочники.СтатусыОбработкиЗаказа.Пробит);
	//КонечныеСтатусы.Добавить(Справочники.СтатусыОбработкиЗаказа.ПолныйВозврат);
	//Самовывозы.Параметры.УстановитьЗначениеПараметра("КонечныеСтатусы",КонечныеСтатусы);
	Самовывозы.Параметры.УстановитьЗначениеПараметра("ТочкаСамовывоза",Справочники.ТочкиСамовывоза.НайтиПоРеквизиту("АдресХранения",ПараметрыСеанса.ТекущийАдресХранения));
	Самовывозы.Параметры.УстановитьЗначениеПараметра("МассивЗаказовВЧеке",Новый Массив);
	
	ИспользоватьПодключаемоеОборудование = МенеджерОборудованияВызовСервераПереопределяемый.ИспользоватьПодключаемоеОборудование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	Если НЕ ПроверитьВозможностьРегистрацииПродаж(ПараметрыИнформации) Тогда
		ЗаголовокИнформации = ПараметрыИнформации.ЗаголовокИнформации;
		ТекстСообщения     = ПараметрыИнформации.ТекстИнформации;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЗаголовокИнформации + ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыИнформации = ОбщегоНазначенияКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	Если НЕ ЗаполнитьЭквайринговыйТерминал(ПараметрыИнформации) Тогда
		ЗаголовокИнформации = ПараметрыИнформации.ЗаголовокИнформации;
		ТекстСообщения     = ПараметрыИнформации.ТекстИнформации;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЗаголовокИнформации + ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	
	
	
	//Если Не ВнешниеКомпонентыЗагружены Тогда
	//	Элементы.Страницы.Видимость = Ложь;
	//	Элементы.ГруппаПоНаименованию.Видимость = Ложь;
	//	ЭтаФорма.Заголовок = "Чтение параметров ККМ";
	//Иначе
		Отказ = ИнициализироватьФорму();
	//КонецЕсли;
	
	ИД_РабочегоМеста = ЭтаФорма.УникальныйИдентификатор;
	ДобавитьЭлементыСкидочныхКарточныхПрограмм();
	ОбновитьОтображениеЧека();
	
	// ПодключаемоеОборудование
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	
	//МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещенияПриПодключении, ЭтотОбъект, "ККТ,СканерШтрихкода,ДисплейПокупателя,ЭквайринговыйТерминал");
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещенияПриПодключении, ЭтотОбъект, "ККТ,СканерШтрихкода,ЭквайринговыйТерминал");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ЗаголовокИнформации = НСтр("ru = 'При подключении оборудования произошла ошибка: '; en = 'An error occurred while connecting the equipment: '");
		ТекстСообщения     = РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЗаголовокИнформации + ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ИД_РабочегоМеста = ЭтаФорма.УникальныйИдентификатор Тогда
		ИД_РабочегоМеста = "";
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ОповещенияПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект); 
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещенияПриОтключении, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
   
   Если Не РезультатВыполнения.Результат Тогда
      ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
      ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
      Сообщить(ТекстСообщения);
   Иначе
      ТекстСообщения = НСтр("ru = 'Оборудование отключено.'" );
      Сообщить(ТекстСообщения);
   КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Смена(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ККТ", Объект.ККТ);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.УправлениеФискальнымУстройством", ПараметрыФормы, ЭтотОбъект,,,,, Режим);
	
КонецПроцедуры

&НаСервере
Процедура ККТПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ККТ) Тогда
		Объект.ККМ_ЗаводскойНомер = Объект.ККТ.СерийныйНомер;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ККТПриИзменении(Элемент)
	ККТПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СкидочныеПрограммы
&НаКлиенте
Процедура ДобавитьЭлементыСкидочныхКарточныхПрограмм()
	МассивПроектов = Новый Массив;
	ЗаполнитьТаблицуЭлементов(МассивПроектов);
	Для каждого Проект из МассивПроектов цикл
		СтрокиЭлементовПроекта = ЭлементыФормыСкидочныеПрограммы.НайтиСтроки(Новый Структура("project",Проект));
		Для каждого строкаЭлемента из СтрокиЭлементовПроекта цикл
			ДобавитьЭлементПоСтроке(строкаЭлемента.ПолучитьИдентификатор());
			ЭтаФорма.ОбновитьОтображениеДанных();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементПоСтроке(ИдентификаторСтрокиЭлементыФормыСкидочныеПрограммы)
	СтрокаЭлемента = ЭлементыФормыСкидочныеПрограммы.НайтиПоИдентификатору(ИдентификаторСтрокиЭлементыФормыСкидочныеПрограммы);
	Если строкаЭлемента.Роль = "Группа" тогда
		Элементы.Добавить(строкаЭлемента.ИмяЭлемента,Тип("ГруппаФормы"),Элементы[строкаЭлемента.Родитель]);
		Элемент = Элементы[строкаЭлемента.ИмяЭлемента];
		Элемент.Заголовок = строкаЭлемента.Заголовок;
		Если строкаЭлемента.Тип = "Страница" тогда
			Элемент.Вид = ВидГруппыФормы.Страница;
		КонецЕсли;
		Элемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элемент.Видимость = Ложь;
		Элемент.ВыравниваниеЭлементовИЗаголовков = Элементы.ШаблонБуклетКарта.ВыравниваниеЭлементовИЗаголовков;
		Элемент.РастягиватьПоГоризонтали = Ложь;
		Элемент.ГоризонтальноеПоложениеПодчиненных = Элементы.ШаблонБуклетКарта.ГоризонтальноеПоложениеПодчиненных;
	ИначеЕсли строкаЭлемента.Тип = "ПолеВвода" тогда
		МассивРеквизитов = Новый Массив();
		МассивРеквизитов.Добавить(Новый РеквизитФормы(строкаЭлемента.ИмяРеквизита,Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(10))));
		ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
		Элементы.Добавить(строкаЭлемента.ИмяЭлемента,Тип("ПолеФормы"),Элементы[строкаЭлемента.Родитель]);
		Элемент = Элементы[строкаЭлемента.ИмяЭлемента];
		Элемент.Заголовок = строкаЭлемента.Заголовок; 
		Элемент.ПутьКДанным = строкаЭлемента.ИмяРеквизита;
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.ТолькоПросмотр = Истина;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		Элемент.Вид = Элементы.ШаблонПоляВвода.Вид;
		Элемент.ШрифтЗаголовка = Элементы.ШаблонПоляВвода.ШрифтЗаголовка;
		Элемент.Шрифт = Элементы.ШаблонПоляВвода.Шрифт;
		Элемент.ЦветТекста = Элементы.ШаблонПоляВвода.ЦветТекста;
		Элемент.Доступность = строкаЭлемента.Доступность;
		Элемент.ГоризонтальноеПоложениеВГруппе = Элементы.ШаблонПоляВвода.ГоризонтальноеПоложениеВГруппе;
		Элемент.ГоризонтальноеПоложение = Элементы.ШаблонПоляВвода.ГоризонтальноеПоложение; 
	ИначеЕсли строкаЭлемента.Тип = "ПолеФлага" тогда
		МассивРеквизитов = Новый Массив();
		МассивРеквизитов.Добавить(Новый РеквизитФормы(строкаЭлемента.ИмяРеквизита,Новый ОписаниеТипов("Булево")));
		ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
		Элементы.Добавить(строкаЭлемента.ИмяЭлемента,Тип("ПолеФормы"),Элементы[строкаЭлемента.Родитель]);
		Элемент = Элементы[строкаЭлемента.ИмяЭлемента];
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.Заголовок = строкаЭлемента.Заголовок; 
		Элемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
		Элемент.ПутьКДанным = строкаЭлемента.ИмяРеквизита;
		Элемент.ВидФлажка = ВидФлажка.Флажок;
		Элемент.ТолькоПросмотр = Ложь;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		Элемент.ШрифтЗаголовка = Элементы.ШаблонПоляВвода.ШрифтЗаголовка;
		Элемент.Шрифт = Элементы.ШаблонПоляВвода.Шрифт;
		Элемент.ЦветТекста = Элементы.ШаблонПоляВвода.ЦветТекста;
		Элемент.Доступность = строкаЭлемента.Доступность;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЭлементов(МассивПроектов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""Страница"" КАК Тип,
	|	""СкидочныеПрограммы"" КАК Родитель,
	|	""Группа"" КАК Роль,
	|	""Группа"" КАК Заголовок,
	|	1 КАК ПорядокСоздания
	|ПОМЕСТИТЬ втЭлементы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ПолеВвода"",
	|	""Страница"",
	|	""Буклет"",
	|	""Буклет"",
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ПолеВвода"",
	|	""Страница"",
	|	""Карта"",
	|	""Карта"",
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ПолеФлага"",
	|	""Страница"",
	|	""ЭтоНоваяКарта"",
	|	""Это новая карта"",
	|	4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидочныеПрограммыПоКарте.Ссылка КАК project,
	|	втЭлементы.Тип,
	|	втЭлементы.Роль,
	|	втЭлементы.ПорядокСоздания КАК ПорядокСоздания,
	|	ВЫБОР
	|		КОГДА втЭлементы.Родитель = ""СкидочныеПрограммы""
	|			ТОГДА СкидочныеПрограммыПоКарте.Идентификатор + втЭлементы.Тип
	|		ИНАЧЕ СкидочныеПрограммыПоКарте.Идентификатор + втЭлементы.Роль + втЭлементы.Тип
	|	КОНЕЦ КАК ИмяЭлемента,
	|	СкидочныеПрограммыПоКарте.Идентификатор + втЭлементы.Роль КАК ИмяРеквизита,
	|	ВЫБОР
	|		КОГДА втЭлементы.Родитель = ""СкидочныеПрограммы""
	|			ТОГДА втЭлементы.Родитель
	|		ИНАЧЕ СкидочныеПрограммыПоКарте.Идентификатор + втЭлементы.Родитель
	|	КОНЕЦ КАК Родитель,
	|	ВЫБОР
	|		КОГДА втЭлементы.Родитель = ""СкидочныеПрограммы""
	|			ТОГДА СкидочныеПрограммыПоКарте.Наименование
	|		ИНАЧЕ втЭлементы.Заголовок
	|	КОНЕЦ КАК Заголовок,
	|	НЕОПРЕДЕЛЕНО КАК Элемент,
	|	ВЫБОР
	|		КОГДА СкидочныеПрограммыПоКарте.БезБуклета
	|			ТОГДА втЭлементы.Роль <> ""Буклет""
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Доступность
	|ИЗ
	|	Справочник.СкидочныеПрограммыПоКарте КАК СкидочныеПрограммыПоКарте,
	|	втЭлементы КАК втЭлементы
	|
	|УПОРЯДОЧИТЬ ПО
	|	project,
	|	ПорядокСоздания";
	ТабЭлементов = Запрос.Выполнить().Выгрузить();
	ЭлементыФормыСкидочныеПрограммы.Загрузить(ТабЭлементов);
	ТабЭлементов.Свернуть("project");
	МассивПроектов = ТабЭлементов.ВыгрузитьКолонку("project"); 
КонецПроцедуры
#КонецОбласти


&НаКлиенте
Функция ИнициализироватьФорму()
	Перем НомерККМ, Отказ;
	Отказ = Ложь;
	
	
	Объект.ККМ_ЗаводскойНомер = "";
	Объект.ТипЦены = ПредопределенноеЗначение("Справочник.ТипЦены.ПустаяСсылка");
	Объект.ФлагСтарший = Ложь;
	
// ЕМ *****************************************	
	//ПолучитьДанныеККМ(НомерККМ);
	НомерККМ = ПолучитьСерийныйНомерККТ();
//***************************************** ЕМ 	
	// ККМ не подключен или не нестроены параметры
	
	Если ПустаяСтрока(НомерККМ) Или СокрЛП(НомерККМ) = "0" или Объект.ТипККМ = ПредопределенноеЗначение("Перечисление.ТипККМ.ШТРИХ_М") и ТекущаяДата() > Дата(2017,7,1) Тогда
		Если Объект.ТипККМ = ПредопределенноеЗначение("Перечисление.ТипККМ.ШТРИХ_М") тогда
			ПоказатьПредупреждение(,"С 1 илюя 2017 года поддерживается только ККМ АТОЛ",,"Ошибка");
		КонецЕсли;
		Отказ = Истина;
		Возврат Отказ;
		//НомерККМ = "01051521";
	КонецЕсли;
	
	ЭтаФорма.ВозвратПродажи=Ложь; //Продажа	
	
	ПоискККМ(НомерККМ);
	
	
	Если НЕ ЗначениеЗаполнено(ККМСсылка) Тогда
		Сообщить("ККМ не обнаружена в справочниках!");
		Отказ = Истина;
	КонецЕсли;
	Объект.ККМ_ЗаводскойНомер = НомерККМ;
	Элементы.ТекстНомерККМ.Заголовок = Строка(НомерККМ)+"  /  "+ИмяКомпьютера();
	Если не ЗначениеЗаполнено(Объект.ТипЦены) Тогда
		Сообщить("Складу нет сопоставления с типом цены!");
		Отказ = Истина;
	КонецЕсли;
	
	
// ЕМ *****************************************	
	
	Объект.ТерминалОткрыт = Истина;
	
	ЭтаФорма.Заголовок = "Рабочее место кассира";

	Возврат Отказ;
	
	// отсюда - старый код без обращения к БСП
//***************************************** ЕМ 	
	
	
	
	
	Если Объект.ЕстьДисплей Тогда
		Displ = Новый COMОбъект("DrvDspl.v1_2");
		Displ.InitialDispl();
		Displ.Enable=1; 
		Displ.ClearDispl();
		Displ.EnterStr(0, Left("Добро пожаловать!", 20));
		Displ.EnterStr(20, Left("", 20));
	КонецЕсли;
	
	Если ЭтаФорма.TerminalID<>"" Тогда 
		Если TerminalDriverID = "AddIn.UCS_EFTPOS" Тогда
			
			ТерминалОплаты=Новый COMОбъект("AddIn.UCS_EFTPOS");
			
			ТерминалОплаты.PathToDataBase="C:\UCS\";
			ТерминалОплаты.ArchPeriod=1;
			ТерминалОплаты.ConnectionType=1;
			ТерминалОплаты.Currency=810;
			ТерминалОплаты.HeadLn1="";
			ТерминалОплаты.HeadLn2="";
			ТерминалОплаты.HeadLn3="";
			ТерминалОплаты.HeadLn4="";
			ТерминалОплаты.InitTimeout=3;
			ТерминалОплаты.LogFileName="c:\ucs_com.log";
			ТерминалОплаты.PostOperTimeout=10;
			ТерминалОплаты.RcpWidth=47;
			ТерминалОплаты.RSPort=9;
			ТерминалОплаты.RSSpeed=2;
			ТерминалОплаты.RSTimeout=3200;
			ТерминалОплаты.TCPTimeout=5000;
			ТерминалОплаты.WriteLog=Истина;
			ТерминалОплаты.UseCommit=Ложь;
			ТерминалОплаты.TCPIP=ЭтаФорма.TCPIP;
			ТерминалОплаты.TCPPort=ЭтаФорма.TCPPort;
			ТерминалОплаты.TerminalID=ЭтаФорма.TerminalID;
			
			Объект.ТерминалОткрыт=ТерминалОплаты.Open("");
			Если НЕ Объект.ТерминалОткрыт Тогда
				Сообщить("Не удалось получить ответ от терминала");	
				GetLastError();
			КонецЕсли;
			
		ИначеЕсли TerminalDriverID = "AddIn.IngenicoDriver1C" Тогда
			
			Попытка
				РезультатПодключения = ПодключитьВнешнююКомпоненту("Addin.IngenicoDriver1C"); //Компонента должна быть предварительно зарегистрирована командой regsvr32
				
				Если Не РезультатПодключения Тогда
					Сообщить("Не удалось подключить внешнюю компоненту Addin.IngenicoDriver1C. Компонента должна быть предварительно зарегистрирована командой regsvr32.");
					//Отказ = Истина;
					//Возврат Отказ;
				КонецЕсли;
				
				IngenicoЭквайринговыйТерминал = Новый("Addin.IngenicoDriver1C");
			Исключение
				Сообщить(ОписаниеОшибки());
				//Отказ = Истина;
				//Возврат Отказ;
			КонецПопытки;
		КонецЕсли;
	Иначе
		//ЭтаФорма.Элементы.ОплатаКартойЧек.Доступность=Ложь;
		//ЭтаФорма.Элементы.ОплатаКартой.Доступность=Ложь;
		ЭтаФорма.Элементы.ТестТерминалаОплаты.Доступность=Ложь;
	КонецЕсли;
	
	Объект.ТерминалОткрыт = Истина;
	
	ЭтаФорма.Заголовок = "Рабочее место кассира";
	
	РасчетСуммаНаличныеКасса();
	
	Возврат Отказ;
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "КомпонентыДляРаботыТОЗагружены" И Источник = "ГлобальныйМодуль" Тогда
		Если ВнешниеКомпонентыЗагружены Тогда
			ИнициализироватьФорму();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Область Мусор

&НаКлиенте
Процедура СменаТипаОплаты(Команда)
	
	ОплатаКартойЧек(Неопределено);	
	Элементы.ПробитьЧек.Доступность = МожноПробитьЧек();
	
КонецПроцедуры


&НаСервере
Процедура ПоискККМ(ЗаводскойНомер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ККМ.Ссылка КАК ККМ,
	|	ККМ.Код КАК КодККМ,
	|	ККМ.РазрешитьПодЗаказ,
	|	ККМ.ЕстьДисплей,
	|	ККМ.ЕстьТерминалОплаты,
	|	МестаХранения.Код КАК ОсновнойСклад,
	|	ТипЦеныСправочник.Ссылка КАК ТипЦены,
	|	РегионРаботы.Ссылка КАК РегионРаботы,
	|	ККМ.Фирма
	|ИЗ
	|	Справочник.ККМ КАК ККМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.t_rr_sklad КАК t_rr_sklad
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.t_tc КАК t_tc
	|			ПО t_rr_sklad.tc = t_tc.id
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.t_rr КАК t_rr
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.t_rr КАК t_rr_main
	|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаХранения КАК МестаХранения
	|					ПО t_rr_main.sklad = МестаХранения.Код
	|				ПО t_rr.id_rr_main = t_rr_main.id_rr
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегионРаботы КАК РегионРаботы
	|				ПО t_rr.id = РегионРаботы.Код
	|			ПО t_rr_sklad.id_rr = t_rr.id
	|		ПО ККМ.Отдел.ID_77 = t_rr_sklad.id_sklad
	|			И (t_rr_sklad.is_own)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипЦены КАК ТипЦеныСправочник
	|		ПО ККМ.ТипЦены = ТипЦеныСправочник.Ссылка
	|ГДЕ
	|	ККМ.ЗаводскойНомер = &ЗаводскойНомер";
	
	Запрос.УстановитьПараметр("ЗаводскойНомер",ЗаводскойНомер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл                         
		ФлагТерминал = Выборка.ЕстьТерминалОплаты;
		ККМСсылка = Выборка.ККМ; 
		ККМФирма = Выборка.Фирма;
		Объект.ЕстьДисплей = Выборка.ЕстьДисплей;
		Объект.ТипЦены = Выборка.ТипЦены;
		Объект.РегионРаботы = Выборка.РегионРаботы;
	КонецЦикла;
	
	
	Если ФлагТерминал=1 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	t_ucs.TCPIP,
		|	t_ucs.TCPPort,
		|	t_ucs.TerminalID,
		|	t_ucs.TerminalDriverID
		|ИЗ
		|	РегистрСведений.t_ucs КАК t_ucs
		|ГДЕ
		|	t_ucs.kkm = &kkm";
		Запрос.УстановитьПараметр("kkm", ЗаводскойНомер);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл    
			ЭтаФорма.TCPIP				= Выборка.TCPIP;
			ЭтаФорма.TCPPort			= Выборка.TCPPort;
			ЭтаФорма.TerminalID			= Выборка.TerminalID;
			ЭтаФорма.TerminalDriverID	= СокрЛП(Выборка.TerminalDriverID); //Идентификатор драйвера эквайрингового терминала 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры	// ПоискККМ

#КонецОбласти

#Область Дисплей
&НаКлиенте
Процедура ПоказатьНаДисплее(Строка1,Строка2)
	Если Объект.ЕстьДисплей Тогда
		//Displ.ClearDispl();
		//Displ.EnterStr(0, Left(Строка1, 20));
		//Displ.EnterStr(20, Left(Строка2, 20));
		
	// ЕМ ********************************************
      
	    СтрокиТекста = Строка1 + Символы.ПС + Строка2; 

	    ИдентификаторУстройства = Неопределено; //Если ИдентификаторУстройства = Неопределено, будут очищены все подключенные дисплеи покупателя.
	    ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВыводТекстаНаДисплейПокупателяЗавершение", ЭтотОбъект);
	    МенеджерОборудованияКлиент.НачатьВыводИнформацииНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, СтрокиТекста);
	//******************************************** ЕМ 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводТекстаНаДисплейПокупателяЗавершение(РезультатВыполнения, Параметры) Экспорт

    Если НЕ РезультатВыполнения.Результат Тогда
       ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
       ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
       Сообщить(ТекстСообщения);
    КонецЕсли;

КонецПроцедуры		

&НаКлиенте
Функция СделатьСтрокуЦен(Знач Цена, Знач Итого)
	Пробелы="                    ";
	Цена=Формат(Цена,"ЧРД=.; ЧРГ=' '; ЧН=");
	Итого=Формат(Итого,"ЧРД=.; ЧРГ=' '; ЧН=");
	КолПробелов=20-(СтрДлина(Цена)+1+СтрДлина(Итого));
	Возврат Цена+Прав(Пробелы,КолПробелов)+"="+Итого;
КонецФункции

#КонецОбласти

#Область СканерШК

&НаСервере
Функция ПолучитьСотрудникаПоШК(Данные)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка,
	|	Сотрудники.Наименование,
	|	Сотрудники.ФИО
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ШтрихКод ПОДОБНО &ШК";
	Запрос.УстановитьПараметр("ШК","%"+Данные+"%");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Объект.СотрудникСсылка = Выборка.Ссылка;
		Объект.Сотрудник = Выборка.Наименование;
		Объект.СотрудникФИО = Выборка.ФИО;
		ЭтаФорма.Элементы.ДекорацияФИО.Заголовок="Сотрудник: " + Выборка.Наименование;
		//ЭтаФорма.Элементы.ДекорацияФИО.ЦветТекста = 
		Прервать;
	КонецЦикла;
КонецФункции

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	//Если Событие = "BarCodeValue" Тогда	
	Если Событие = "Штрихкод" Тогда    // ЕМ
		//Хортюк	
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбслуживание и Элементы.ТоварыДляПечатиЦенников.Видимость = Истина тогда
			ДобавитьТоварВПечатьЧеков(Данные);
			//Scan.ПосылкаДанных=1;   // ЕМ
			Возврат;	
		КонецЕсли;	
		//Хортюк
		Если Не ЗначениеЗаполнено(Объект.СотрудникСсылка) Тогда
			ПолучитьСотрудникаПоШК(Данные);
			Если Не ЗначениеЗаполнено(Объект.СотрудникСсылка) тогда
				Сообщить("Не выбран сотрудник");
// ЕМ				Scan.ПосылкаДанных=1;	
				Возврат;
			Иначе
// ЕМ				Scan.ПосылкаДанных=1;	
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		
		Если СтрДлина(Данные)= 19 тогда
			Если ЭтаФорма.ВозвратПродажи тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Сканировать карту астразеника можно только во время продажи!";
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
			Если АлгоритмЛуна(Данные) тогда
				БезБуклета = Ложь;
				ИмяРеквизитаЭтоНоваяКарта = "";
				ПолучитьСтруктуруОписанияКартыАстаЗеник(Данные,БезБуклета,ИмяРеквизитаЭтоНоваяКарта);	
				Если БезБуклета тогда
					Если Вопрос("Это новая карта?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
						ЭтаФорма[ИмяРеквизитаЭтоНоваяКарта] = Истина;
					Иначе
						ЭтаФорма[ИмяРеквизитаЭтоНоваяКарта] = Ложь;
					КонецЕсли;
				КонецЕсли;
				ОбновитьОтображениеЧека();
				ВидимостьАстразеник();
			Иначе
				Сообщить("Карта не прошла проверку!");
			КонецЕсли;			
		Иначе
			Если СтрДлина(Данные)=12 Тогда
				Данные="0"+Данные;
			КонецЕсли;	
			Объект.СтрокаПоиск=СокрЛП(Данные);
			Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЧек  Тогда
				НайтиТоварыСервере(Истина);				
			КонецЕсли;	
		КонецЕсли;	
// ЕМ		Scan.ПосылкаДанных=1;	
	КонецЕсли;
	Элементы.ПробитьЧек.Доступность = МожноПробитьЧек();
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура РасчетСуммаНаличныеКасса()
	
	//>>Хортюк С.Б. 20.02.2018
	//Если Объект.ТипККМ = ПредопределенноеЗначение("Перечисление.ТипККМ.ШТРИХ_М") тогда
	//	FR.НомерЛУ=1;
	//	FR.УстановитьАктивноеЛУ();
	//	FR.Connect();
	//	FR.Password = 30;
	//	FR.RegisterNumber = 241; 	
	//	FR.GetCashReg();
	//	Элементы.СуммаВКассе.Заголовок = "Сумма в кассе: " + Строка(Формат(FR.ContentsOfCashRegister,"ЧДЦ=2")) + " руб.";	
	//Иначе
	//	FR_atol.Password = 30;
	//	FR_atol.RegisterNumber = 10;
	//	FR_atol.GetRegister();
	//	Элементы.СуммаВКассе.Заголовок = "Сумма в кассе: " + Строка(Формат(FR_atol.Summ,"ЧДЦ=2")) + " руб.";	
	//КонецЕсли;
	//<<Хортюк С.Б. 20.02.2018

КонецПроцедуры

&НаСервере
Функция ПроверкаОстатковНаСервереПоПартии(Партия)
	
	Если ЭтаФорма.ВозвратПродажи Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(РеализацияОбороты.СуммаОборот - РеализацияОбороты.СкидкаОборот) КАК Остаток
		|ИЗ
		|	РегистрНакопления.Реализация.Обороты(
		|			,
		|			,
		|			,
		|			Партия = &Партия
		|				И Отдел = &Отдел) КАК РеализацияОбороты";
		Запрос.УстановитьПараметр("Партия", Партия);
		Запрос.УстановитьПараметр("Отдел", ПараметрыСеанса.ОсновнойСклад);
	Иначе	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиТовараОстатки.ОстатокОстаток КАК Остаток
		|ИЗ
		|	РегистрНакопления.ОстаткиТовара.Остатки(
		|			,
		|			Партия = &Партия
		|				И Отдел = &Отдел) КАК ОстаткиТовараОстатки";
		Запрос.УстановитьПараметр("Партия",Партия);
		Запрос.УстановитьПараметр("Отдел", ПараметрыСеанса.ОсновнойСклад);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Остаток=0;
	Пока Выборка.Следующий() Цикл        
		Остаток = Выборка.Остаток;
	КонецЦикла; 
	
	Возврат Остаток;
	
КонецФункции

&НаСервере
Функция ПроверкаОстатковНаСервере()
	Флаг=0;
	
	Запрос = Новый Запрос;
	
	Если ЭтаФорма.ВозвратПродажи Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Реализация.Партия,
		|	СУММА(Реализация.Количество) КАК Остаток
		|ИЗ
		|	РегистрНакопления.Реализация КАК Реализация
		|ГДЕ
		|	Реализация.Регистратор = &Чек
		|	И Реализация.Отдел = &Отдел
		|	И Реализация.Партия В(&Партия)
		|
		|СГРУППИРОВАТЬ ПО
		|	Реализация.Партия";	
		Запрос.УстановитьПараметр("Отдел", ПараметрыСеанса.ОсновнойСклад);
		Запрос.УстановитьПараметр("Партия", Объект.Чек.Выгрузить(,"Партия").ВыгрузитьКолонку("Партия"));
		Запрос.УстановитьПараметр("Чек", ЧекВозвратСсылка);
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиТовараОстатки.Партия,
		|	ОстаткиТовараОстатки.ОстатокОстаток КАК Остаток
		|ИЗ
		|	РегистрНакопления.ОстаткиТовара.Остатки(
		|			,
		|			Отдел = &Отдел
		|				И Партия В (&Партия)) КАК ОстаткиТовараОстатки";	
		Запрос.УстановитьПараметр("Отдел", ПараметрыСеанса.ОсновнойСклад);
		Запрос.УстановитьПараметр("Партия", Объект.Чек.Выгрузить(Новый Структура("Документ",Документы.Чеки.ПустаяСсылка()),"Партия").ВыгрузитьКолонку("Партия"));
		
		
	КонецЕсли;
	
	Партии = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из Объект.Чек Цикл	
		Остаток = Партии.Найти(СтрокаТЧ.Партия,"Партия");
		Если Остаток <> неопределено тогда
			Остаток = Остаток.Остаток;
		Иначе
			Остаток = 0;
		КонецЕсли;
		Попытка
			Если  СтрокаТЧ.Документ <> Документы.Чеки.ПустаяСсылка() тогда
				Продолжить;
			КонецЕсли;
			Если Остаток < СтрокаТЧ.Количество Тогда
				Если ЭтаФорма.ВозвратПродажи Тогда
					Сообщить("Товар "+СокрЛП(СтрокаТЧ.Товар)+" в чеке "+Строка(СтрокаТЧ.Количество)+" продано "+Строка(Остаток));
				Иначе 
					Сообщить("Товар "+СокрЛП(СтрокаТЧ.Товар)+" в чеке "+Строка(СтрокаТЧ.Количество)+" на остатке "+Строка(Остаток));
				КонецЕсли;	
				
				Флаг=1;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла; 
	
	Возврат Флаг;
КонецФункции

//&НаКлиенте
//Процедура НапечататьСтроку(Стр,Реж=0,Отрезать = Ложь)
//	
//	
//	
//	
//	//Если Объект.ТипККМ = ПредопределенноеЗначение("Перечисление.ТипККМ.ШТРИХ_М") тогда
//	//	FR.Password=30;
//	//	FR.StringForPrinting=Стр;  
//	//	
//	//	Если Реж=0 Тогда
//	//		FR.PrintString();
//	//	Иначе
//	//		FR.PrintWideString();
//	//	КонецЕсли;	
//	//	Код=FR.ResultCode;
//	//	Пока Код <> 0 Цикл		
//	//		Если Код=107 Тогда
//	//			ПоказатьПредупреждение(,"Ошибка кассы нет бумаги! Вставьте бумагу.",5);
//	//		ИначеЕсли Код=108 Тогда
//	//			ПоказатьПредупреждение(,"Ошибка кассы нет контрольной ленты! Вставьте бумагу.",5);
//	//		ИначеЕсли Код=80 Тогда	//Идет печать предыдущей команды                   
//	//			Состояние("Идет печать предыдущей команды");
//	//		ИначеЕсли Код=6 Тогда	//ФП в режиме ввода данных
//	//			Состояние("ФП в режиме ввода данных");
//	//		ИначеЕсли Код=163 Тогда	//
//	//			FR.EKLZInterrupt();
//	//			Состояние("Режим вывода отчета из ЭКЛЗ");
//	//		ИначеЕсли Код=88 Тогда
//	//			FR.ContinuePrint();
//	//		Иначе                   
//	//			ПоказатьПредупреждение(,"Ошибка кассы: "+FR.ResultCodeDescription+"! Код ошибки "+Строка(Код),5);
//	//		КонецЕсли;
//	//		PaperStatus();
//	//		FR.Password = 30;
//	//		Если Реж=0 Тогда
//	//			FR.PrintString();
//	//		Иначе
//	//			FR.PrintWideString();
//	//		КонецЕсли;	
//	//		Код=FR.ResultCode;
//	//	КонецЦикла;
//	//	PaperStatus();
//	//	Если Отрезать тогда
//	//		FR.Password=30;
//	//		FR.CutType=0; 
//	//		FR.CutCheck();
//	//	КонецЕсли;
//	//Иначе
//	//	FR_atol.Password = 30;
//	//	FR_atol.Caption = Стр;
//	//	Если Реж = 0 тогда
//	//		FR_atol.FontBold = Истина;
//	//	ИначеЕсли Реж = 2 тогда
//	//		FR_atol.RecFont = 3;
//	//		FR_atol.TextWrap = 0;
//	//		FR_atol.Alignment = 0;
//	//		FR_atol.RecBrightness = 14;
//	//		FR_atol.RecFontHeight = 1;
//	//		КСимволов = СтрДлина(Стр);
//	//		НоваяСтр = "";
//	//		Для ит = 1 по КСимволов цикл
//	//			НоваяСтр = НоваяСтр +  Символ(9) + Сред(Стр,ит,1);
//	//		КонецЦикла;
//	//		FR_atol.Caption = НоваяСтр;			
//	//	КонецЕсли;
//	//	КодОшибки = FR_atol.PrintField();
//	//	СчетчикПопыток = 0;
//	//	Пока КодОшибки <> 0 цикл
//	//		Если КодОшибки = -3807 тогда
//	//			Предупреждение("Ошибка кассы нет бумаги! Вставьте бумагу.",5);	
//	//		КонецЕсли;
//	//		КодОшибки = FR_atol.PrintField();	
//	//		СчетчикПопыток = СчетчикПопыток + 1;
//	//		Если СчетчикПопыток = 5 тогда
//	//			Предупреждение("Не удалось напечатать строку, код ошибки : """+Строка(КодОшибки)+Символы.ПС + FR_atol.ResultDescription);
//	//			Возврат;
//	//		КонецЕсли;
//	//	КонецЦикла;	
//	//	Если Отрезать тогда
//	//		FR_atol.Password=30;
//	//		FR_atol.FullCut();
//	//	КонецЕсли;
//	//КонецЕсли;
//КонецПроцедуры	

&НаКлиенте
Процедура ПроставитьФлагТЧ(Команда)
	
	Если Объект.ФлагТЧ = 1 Тогда 
		Объект.ФлагТЧ = 0;
	ИначеЕсли  Объект.ФлагТЧ = 0 Тогда
		Объект.ФлагТЧ = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДокументЧекПоБезналу(ЧекСсылка, rrn, authcode, НомерКарты)
	Попытка
		ДокументЧек = ЧекСсылка.ПолучитьОбъект();
		
		ДокументЧек.RRN = rrn;
		ДокументЧек.authcode = authcode;
		ДокументЧек.НомерКарты = НомерКарты;
		
		ДокументЧек.ОбменДанными.Загрузка = Истина;
		ДокументЧек.Записать(РежимЗаписиДокумента.Запись);
		Успех = Истина;
	Исключение
		Сообщить("Данные по безналичной оплате не записанны в чек!!!");
		Сообщить("Запишите номер чека и ошибку!");
		Сообщить(ОписаниеОшибки());
		Сообщить("RNN " + Строка(rrn));
		Сообщить("authcode " + Строка(authcode));
		Сообщить("НомерКарты " + Строка(НомерКарты));		
		Успех = Ложь;
	КонецПопытки;
	
	Возврат Успех;
	
КонецФункции

&НаСервере
Функция ЗаписатьДокументЧек(ЗаводскойНомер,НомерЧека,НомерСмены,rrn,authcode,НомерКарты)
	
	//Хортюк С.Б.  22.03.2017 АстраЗенника(	
	ТекущаяДата = ТекущаяДата();
	
	СсылкаЧек = Документы.Чеки.ПолучитьСсылку(Новый УникальныйИдентификатор());
	
	ДокументЧек = Документы.Чеки.СоздатьДокумент();
	ДокументЧек.УстановитьСсылкуНового(СсылкаЧек);
	ДокументЧек.Организация = ККМФирма;
	ДокументЧек.Дата = ТекущаяДата;
	ДокументЧек.ККМ = ККМСсылка;
	ДокументЧек.Отдел = ПараметрыСеанса.ОсновнойСклад;
	ДокументЧек.ТипЦены = Объект.ТипЦены;
	ДокументЧек.RRN = rrn;
	ДокументЧек.authcode = authcode;
	ДокументЧек.НомерКарты = НомерКарты;
	ДокументЧек.ОплатаПоКарте = ЭтаФорма.ОплатаКартой;
	Если ЭтаФорма.ОплатаКартой тогда
		ДокументЧек.ТипОплаты = Перечисления.ТипОплаты.БК;
	Иначе
		ДокументЧек.ТипОплаты = Перечисления.ТипОплаты.Наличные;
	КонецЕсли;
	ДокументЧек.КПК = "";
	ДокументЧек.Кассир = Объект.СотрудникСсылка;
	ДокументЧек.НомерЧека = НомерЧека;
	ДокументЧек.НомерСмены = НомерСмены;
	Если  ЭтаФорма.ВозвратПродажи тогда
		ДокументЧек.ВидОперации = перечисления.ТорговыеОперации.ВозвратОтПокупателя; 
	Иначе
		ДокументЧек.ВидОперации = перечисления.ТорговыеОперации.Продажа;
	КонецЕсли;

	
	Если ЗначениеЗаполнено(ЭтаФорма.ЧекВозвратСсылка) тогда
		ДокументЧек.ДокументОснование = ЭтаФорма.ЧекВозвратСсылка;
	КонецЕсли;
	Для каждого строка из Объект.Чек цикл
		Если строка.Количество <= 0 тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ДокументЧек.Реализация.Добавить();
		НоваяСтрока.Партия = Строка.Партия;
		НоваяСтрока.Товар = Строка.Товар;
		НоваяСтрока.Количество = Строка.Количество;
		НоваяСтрока.Цена = Строка.Цена;
		НоваяСтрока.Сумма = Строка.Сумма;
		НоваяСтрока.Скидка = Строка.Скидка;
		НоваяСтрока.Всего = Строка.Всего; 
		НоваяСтрока.Документ = ?(ЗначениеЗаполнено(Строка.Документ),Строка.Документ,СсылкаЧек);
		НоваяСтрока.СтавкаНДС = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНДС = Строка.СуммаНДС;
		НоваяСтрока.ЗСЯ = Строка.ЗСЯ;
		НоваяСтрока.ТипКомплектацииЗаказа = Строка.ТипКомплектацииЗаказа;
		НоваяСтрока.ТипЦены = Строка.ТипЦены;
		НоваяСтрока.НуженРецепт = Строка.НуженРецепт;
		НоваяСтрока.Себестоимость = Строка.Себестоимость;
	КонецЦикла;
	ДокументЧек.СуммаДокумента = ДокументЧек.Реализация.Итог("Всего");
	
	СтрокиКартКарты = ЭлементыФормыСкидочныеПрограммы.НайтиСтроки(Новый Структура("Роль","ЭтоНоваяКарта"));
	Для каждого строка из СтрокиКартКарты цикл
		Если ЭтаФорма[строка.ИмяРеквизита] тогда
			НоваяСтрока = ДокументЧек.Реализация.Добавить();
			НоваяСтрока.Товар = Строка.Project.ТоварКарта;
			НоваяСтрока.Партия = ПолучитьПартиюОстатка(НоваяСтрока.Товар);
			НоваяСтрока.Количество = 1;
			НоваяСтрока.Цена = 0;
			НоваяСтрока.Сумма = 0;
		КонецЕсли;
	КонецЦикла;	
	
	Если ТаблицаСкидкиАстраЗеника.Количество() > 0 тогда
		Если ЭтаФорма.ВозвратПродажи тогда
			НомерДокументаЧек = ЭтаФорма.ЧекВозвратСсылка.Номер;
			ДатаЧекаВозврата = ЭтаФорма.ЧекВозвратСсылка.Дата;
			Для каждого строка из ТаблицаСкидкиАстраЗеника цикл
				СтрокаСкидочныеПрограммы = ДокументЧек.ТаблицаСкидочныеПрограммы.Добавить();
				СтрокаСкидочныеПрограммы.OPERDATE = ДатаЧекаВозврата;
				СтрокаСкидочныеПрограммы.CARDNUMBER = строка.НомерКарты;
				СтрокаСкидочныеПрограммы.ПроцентСкидки = строка.ПроцентСкидки;
				СтрокаСкидочныеПрограммы.line = строка.НомерСтрокиЧека;
				СтрокаСкидочныеПрограммы.lineDoc = строка.НомерСтроки;
				СтрокаСкидочныеПрограммы.id_Товар = строка.idТовара;
				СтрокаСкидочныеПрограммы.Количество = Строка.Количество;
				СтрокаСкидочныеПрограммы.Сумма = Строка.Сумма;
				СтрокаСкидочныеПрограммы.СуммаСкидки = Формат(Строка.Скидка,"ЧГ=");
				СтрокаСкидочныеПрограммы.Цена = Строка.Цена;
				СтрокаСкидочныеПрограммы.СтавкаНДС = Строка.СтавкаНДС;
				СтрокаСкидочныеПрограммы.PRODUCTCODE = Строка.ШтрихКод;
				СтрокаСкидочныеПрограммы.НомерДокумента = НомерДокументаЧек;
				СтрокаСкидочныеПрограммы.project = Строка.project;
			КонецЦикла;
			СтрокиБуклета = ТаблицаСкидкиАстраЗеника.НайтиСтроки(Новый Структура("Буклет",Истина));
			НомерБуклеат = "";
			Для каждого строка из СтрокиБуклета цикл
				НомерБуклета = Строка.НомерКарты;
			КонецЦикла;
			Если ЗначениеЗаполнено(НомерБуклета) тогда
				СтрокаИспользованныеБуклеты = ДокументЧек.ИспользованныеБуклеты.Добавить();
				СтрокаИспользованныеБуклеты.booklet_barcode = НомерБуклета;
				СтрокаИспользованныеБуклеты.check_date = ДатаЧекаВозврата;
				СтрокаИспользованныеБуклеты.t_check_h_id = ЭтаФорма.ЧекВозвратСсылка.НомерЧека;	
			КонецЕсли;
		Иначе
			Для каждого строка из ТаблицаСкидкиАстраЗеника цикл
				СтрокаСкидочныеПрограммы = ДокументЧек.ТаблицаСкидочныеПрограммы.Добавить();
				СтрокаСкидочныеПрограммы.OPERDATE = ДокументЧек.Дата;
				СтрокаСкидочныеПрограммы.CARDNUMBER = строка.НомерКарты;
				СтрокаСкидочныеПрограммы.ПроцентСкидки = строка.ПроцентСкидки;
				СтрокаСкидочныеПрограммы.line = строка.НомерСтрокиЧека;
				СтрокаСкидочныеПрограммы.lineDoc = строка.НомерСтроки;
				СтрокаСкидочныеПрограммы.id_Товар = строка.idТовара;
				СтрокаСкидочныеПрограммы.Количество = Строка.Количество;
				СтрокаСкидочныеПрограммы.Сумма = Строка.Сумма;
				СтрокаСкидочныеПрограммы.СуммаСкидки = Формат(Строка.Скидка,"ЧГ=");
				СтрокаСкидочныеПрограммы.Цена = Строка.Цена;
				СтрокаСкидочныеПрограммы.СтавкаНДС = Строка.СтавкаНДС;
				СтрокаСкидочныеПрограммы.PRODUCTCODE = Строка.ШтрихКод;
				СтрокаСкидочныеПрограммы.project = Строка.project;
				
				Если Строка.Буклет тогда	
					СтрокаИспользованныеБуклеты = ДокументЧек.ИспользованныеБуклеты.Добавить();
					СтрокаИспользованныеБуклеты.booklet_barcode = НомерБуклета;
					СтрокаИспользованныеБуклеты.check_date = ДокументЧек.Дата;
					СтрокаИспользованныеБуклеты.t_check_h_id = ЭтаФорма.ЧекВозвратСсылка.НомерЧека;	
				КонецЕсли; 
			КонецЦикла;			
		КонецЕсли;
		ТаблицаСкидкиАстраЗеника.Очистить();
		
	КонецЕсли; 
	
	ДокументЧек.ЗаполнитьТЧСписаниеПакетов();
	
	ДокументЧек.ОбменДанными.Загрузка = Истина;
	ДокументЧек.Записать(РежимЗаписиДокумента.Запись);
	Возврат ДокументЧек.Ссылка;
	
	
КонецФункции

&НаСервере
Функция ПолучитьПартиюОстатка(Товар)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиТовараОстатки.Партия
	|ИЗ
	|	РегистрНакопления.ОстаткиТовара.Остатки(
	|			,
	|			Товар = &Товар
	|				И Отдел = &Отдел) КАК ОстаткиТовараОстатки
	|ГДЕ
	|	ОстаткиТовараОстатки.ОстатокОстаток > 0";
	Запрос.УстановитьПараметр("Товар",Товар);
	Запрос.УстановитьПараметр("Отдел",ПараметрыСеанса.ОсновнойСклад);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Возврат Выборка.Партия;
	КонецЦикла;	
	Возврат Справочники.Партии.ПустаяСсылка();
КонецФункции

&НаСервере
Процедура ПровестиДокументЧек(ЧекСсылка,ТекНомерКПК)
	
	ДатаПродажи = ТекущаяДата();
	ДокументЧек = ЧекСсылка.ПолучитьОбъект();
	ДокументЧек.Дата = ДатаПродажи;
	
	ДокументЧек.НомерСмены = НомерСмены;
	ДокументЧек.НомерЧека = НомерЧека;
	
	ДокументЧек.СуммаДокумента = ДокументЧек.Реализация.Итог("Всего");
	
	ДокументЧек.КПК = СтрЗаменить(СтрЗаменить(ТекНомерКПК,символы.НПП,"")," ","");	
	
	Попытка
		ДокументЧек.ОбменДанными.Загрузка = Истина;
		ДокументЧек.Записать(РежимЗаписиДокумента.Запись);
	Исключение
	КонецПопытки;
	
	Попытка
		ДокументЧек.ОбменДанными.Загрузка = Ложь;
		ДокументЧек.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
	КонецПопытки;
	
	ВозвратОтПокупателя = документы.ВозвратОтПокупателя.СоздатьДокумент();
	ВозвратОтПокупателя.Заполнить(ДокументЧек.Ссылка);
	Если ВозвратОтПокупателя.Возвраты.Количество()=0 тогда
		Возврат;	
	КонецЕсли;
	
	Попытка
		ВозвратОтПокупателя.ОбменДанными.Загрузка = Истина;
		ВозвратОтПокупателя.Записать(РежимЗаписиДокумента.Запись);
	Исключение
	КонецПопытки;
	
	Попытка
		ВозвратОтПокупателя.ОбменДанными.Загрузка = Ложь;
		ВозвратОтПокупателя.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧек(Команда)
	Перем Slip, MustCommit,VoicePay,ЗаводскойНомер;
	
	//Если Не ЗначениеЗаполнено(TerminalDriverID) И ЭтаФорма.ОплатаКартой Тогда
	//	Сообщить("Прежде необходимо настроить эквайринговый терминал.");
	//	Возврат
	//КонецЕсли;
	
	// ЕМ ***************************************
	Если Не ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) И ЭтаФорма.ОплатаКартой Тогда
		Сообщить("Прежде необходимо выбрать эквайринговый терминал.");
		Возврат;
	КонецЕсли;
	//*************************************** ЕМ 
	
	Если Объект.Чек.Количество()=0 Тогда 
		Сообщить("Нечего печатать");
		Возврат
	КонецЕсли;	
	
	Если СтрДлина(СокрЛП(Объект.Сотрудник))=0 Тогда
		Сообщить("Не выбран сотрудник");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтаФорма.ВозвратПродажи Тогда
		ЧекВозвратСсылка = ПредопределенноеЗначение("Документ.Чеки.ПустаяСсылка");
		Если Объект.Чек.НайтиСтроки(Новый Структура("НуженРецепт",Истина)).Количество() > 0 тогда
			Если Вопрос("Обязательно попросите клиента предъявить рецепт на официальный бланке. В противном случае штраф 30 000 рублей. 
				|Печатаем чек?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверкаОстатковНаСервере()=1 Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаТЧ Из Объект.Чек Цикл
		Если СтрокаТЧ.Количество=0 Тогда
			Сообщить(СтрокаТЧ.Товар+" количество 0");
			Возврат;
		КонецЕсли;	
	КонецЦикла;
	
	Если НЕ МожноПробитьЧек() Тогда
		Сообщить("Недостаточно внесенных денег!");
		Возврат;
	КонецЕсли; 
	
	//Если НЕ ЗаполнитьЧекККМФискальныйРегистратор(НомерЧека,ЗаводскойНомер,НомерСмены) тогда
	//	ФискальныйРегистраторАннулировать();
	//	ПоказатьПредупреждение(,"Не удалось заполнить чек!!!");
	//	Возврат;
	//КонецЕсли;
	//
	Попытка
		Объект.ЧекСсылка = ЗаписатьДокументЧек(ЗаводскойНомер, НомерЧека, НомерСмены, 
								Объект.СсылочныйНомер, КодАвторизации, НомерКарты);
	Исключение
		ПоказатьПредупреждение(,"Не удалось записать чек " + символы.ПС + ОписаниеОшибки(),,"ОШИБКА!");
	КонецПопытки;
	
	Если не ЗначениеЗаполнено(Объект.ЧекСсылка) тогда
		Возврат;	
	КонецЕсли;	
	
	
// Эквайринг  ******************
	Если ЭтаФорма.ОплатаКартой Тогда
		Slip="";
		ПоказатьНаДисплее("ЗАКРЫТИЕ ЧЕКА","ОПЛАТА КАРТОЙ");
		
		ТипТранзакции = ?(ЭтаФорма.ВозвратПродажи, "AuthorizeRefund", "AuthorizeSales");
		//НомерКарты = card_id;
		//Объект.СсылочныйНомер = rrn;
		//КодАвторизации = authcode;
		
		Объект.СуммаПокупателя = Объект.Чек.Итог("Всего");
		
		ВыполнитьОперациюПоПлатежнойКарте(
		НомерКарты
		,Объект.СуммаПокупателя //Сумма
		,НомерЧека
		,Объект.СсылочныйНомер //КодRRN
		,КодАвторизации
		,ТипТранзакции
		);
		
		Возврат;
// ****************** Эквайринг 
	
		
	Иначе   // Наличные ******************

		ФУ_НапечататьЧекПоШаблону();
		
		Возврат;
			// ****************** Наличные 
	КонецЕсли;	
	
	
	
	//// декорация СуммаВКассе
	//РасчетСуммаНаличныеКасса();
	//ЭтаФорма.ОплатаКартой = Ложь;
	//
	//Элементы.ГруппаАстраЗеника.Видимость = Ложь;
	//
	//ЭтаФорма.ЧекВозвратСсылка = ПредопределенноеЗначение("Документ.Чеки.ПустаяСсылка");
	//ОтменитьСканированиеАстраЗеника();
	//Очистить(Команда);
	
	
КонецПроцедуры

&НаСервере 
Функция ПроверитьПодключениеСМС()
	
	Подключение = ОбщийМодульВебСервисы.ПодключитьсяКВебСервису(ПредопределенноеЗначение("Справочник.НастройкиПодключенийКВебСервисам.ЦентральнаяБазаDataRequests"),,20);
	Если Подключение = Неопределено тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ОтправитьСМСПромоВФоне(ЧекСсылка,Телефон,СотрудникСсылка)
	
	Данные = Новый Структура;
	Данные.Вставить("Дата", ЧекСсылка.Дата);
	Данные.Вставить("Документ", ЧекСсылка);
	Данные.Вставить("Аптека", ЧекСсылка.Отдел.АдресХранения);
	Данные.Вставить("Телефон", Телефон);
	Данные.Вставить("Сотрудник", СотрудникСсылка);
	
	
	ПараметрыОтправкиСМС = Новый Массив;
	ПараметрыОтправкиСМС.Добавить(Данные);
	ФоновыеЗадания.Выполнить("ОбщиеФоновыеЗадания.ОтправитьСМСПромоВФоне",ПараметрыОтправкиСМС);
	
КонецФункции

&НаКлиенте
Процедура PaperStatus()
	FR.GetShortECRStatus();
	Пока FR.ECRAdvancedMode <> 0 Цикл
		Состояние(FR.ECRAdvancedModeDescription+"  "+FR.ECRModeDescription);
		Если (FR.ECRAdvancedMode=1) ИЛИ (FR.ECRAdvancedMode=2) Тогда
			Сообщить(FR.ECRAdvancedModeDescription);
		ИначеЕсли FR.ECRAdvancedMode=3 Тогда
			FR.ContinuePrint();
		КонецЕсли;
		FR.GetShortECRStatus();
	КонецЦикла;
КонецПроцедуры	   

//&НаКлиенте
//Процедура ОтчетБезГашения(Команда)
//	Если Объект.ТипККМ = ПредопределенноеЗначение("Перечисление.ТипККМ.ШТРИХ_М") тогда
//		FR.Password=30;
//		FR.PrintReportWithoutCleaning();
//		PaperStatus();
//		Если Объект.ТерминалОткрыт Тогда
//			Slip = "";
//			ВсегоСтрок = 0;
//			Если Не ТерминалОплаты.PrintReport("", 3, Slip) Тогда
//				GetLastError();
//			Иначе
//				ВсегоСтрок = СтрЧислоСтрок(Slip);
//				Для Сч = 1 По ВсегоСтрок Цикл
//					Стр = СтрПолучитьСтроку(Slip, Сч);
//					НапечататьСтроку(Стр);
//				КонецЦикла;
//				FR.Password=30;
//				FR.CutType=0; //Признак типа отрезки чека: TRUE – неполная отрезка, FALSE – полная отрезка.
//				FR.CutCheck();
//			КонецЕсли;
//		КонецЕсли;
//	Иначе
//		FR_atol.Password = 30;
//		FR_atol.Mode = 2;
//		FR_atol.ReportType = 2;
//		FR_atol.NewDocument();
//		КодОшибки = FR_atol.Report();
//		Если КодОшибки <> 0 тогда
//			ПоказатьПредупреждение(,"Произошла ошибка ККМ "+Строка(КодОшибки)+" сообщите IT");
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры

&НаКлиенте
Процедура Внесение(Команда)
	Если Число(ЭтаФорма.Элементы.СуммаВнесения.ТекстРедактирования)>0 Тогда
		//Если Объект.ТипККМ = ПредопределенноеЗначение("Перечисление.ТипККМ.ШТРИХ_М") тогда
		//	FR.Password=30;
		//	FR.Summ1=Число(ЭтаФорма.Элементы.СуммаВнесения.ТекстРедактирования);
		//	FR.CashIncome();
		//	PaperStatus();
		//	FR.Summ1=0;
		//Иначе
		//	FR_atol.Password = 30;
		//	FR_atol.Mode = 1;
		//	FR_atol.NewDocument();
		//	FR_atol.Summ=Число(ЭтаФорма.Элементы.СуммаВнесения.ТекстРедактирования);
		//	FR_atol.CashIncome();
		//	FR_atol.Summ=0	
		//КонецЕсли;
	
		//ФискальноеУстройство = ПолучитьФискальноеУстройство();
		ФискальноеУстройство = Объект.ККТ;
		Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
			Возврат;
		КонецЕсли;
		
		//Элементы.ФискальноеУстройство.Доступность = Ложь;
		
		ПараметрыОперации = Новый Структура("ТипИнкассации, Сумма", 1, СуммаИнкассации);
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_ДопКомандаВыполнитьЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство);
	
	КонецЕсли;
	
	РасчетСуммаНаличныеКасса();
	
КонецПроцедуры   // Внесение

&НаКлиенте
Процедура Изъятие(Команда)
	//Если Число(ЭтаФорма.Элементы.СуммаВнесения.ТекстРедактирования)>0 Тогда
	Если СуммаИнкассации > 0 Тогда
		//Если Объект.ТипККМ = ПредопределенноеЗначение("Перечисление.ТипККМ.ШТРИХ_М") тогда	
		//	FR.Password=30;
		//	FR.Summ1=Число(ЭтаФорма.Элементы.СуммаВнесения.ТекстРедактирования);
		//	FR.CashOutCome();
		//	PaperStatus();
		//	FR.Summ1=0;
		//Иначе
		//	FR_atol.Password = 30;
		//	FR_atol.Mode = 1;
		//	FR_atol.NewDocument();
		//	FR_atol.Summ = Число(ЭтаФорма.Элементы.СуммаВнесения.ТекстРедактирования);
		//	FR_atol.CashOutcome();
		//	FR_atol.Summ=0;				
		//КонецЕсли;
		
		//ФискальноеУстройство = ПолучитьФискальноеУстройство();
		ФискальноеУстройство = Объект.ККТ;
		Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
			Возврат;
		КонецЕсли;
		
		//Элементы.ФискальноеУстройство.Доступность = Ложь;
		
		ПараметрыОперации = Новый Структура("ТипИнкассации, Сумма", 0, СуммаИнкассации);
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_ДопКомандаВыполнитьЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство);
		
	КонецЕсли;
	
	РасчетСуммаНаличныеКасса();
	
КонецПроцедуры    //  Изъятие

&НаКлиенте
Процедура Очистить(Команда)
	
	ОчиститьЧек();   // ЕМ
	
КонецПроцедуры

&НаКлиенте
Процедура СбросСканера(Команда)
	// ЕМ Scan.ПосылкаДанных=1;	
КонецПроцедуры

&НаСервере
Функция ИтогДняНаСервере()
	
	Структура = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РеализацияОбороты.СуммаОборот > 0
	|				ТОГДА РеализацияОбороты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Продажи,
	|	СУММА(ВЫБОР
	|			КОГДА РеализацияОбороты.СуммаОборот < 0
	|				ТОГДА -РеализацияОбороты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Возвраты
	|ИЗ
	|	РегистрНакопления.Реализация.Обороты(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), Запись, ККМ = &ККМ) КАК РеализацияОбороты";
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Запрос.УстановитьПараметр("ККМ", ККМСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Структура.Вставить("Продажи",Выборка.Продажи);
		Структура.Вставить("Возвраты", Выборка.Возвраты);
	КонецЦикла;
	
	Возврат Структура;	
	
КонецФункции

&НаКлиенте
Процедура ИтогДня(Команда)
	СтруктураИтоговДня=ИтогДняНаСервере();
	
	Если СтруктураИтоговДня.Количество()=0 Тогда 
		Сообщить("Нет итогов");
	Иначе
		Сообщить("Продажи "+СтруктураИтоговДня.Продажи+" Возвраты "+СтруктураИтоговДня.Возвраты);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЧекВозврат(Команда)
	Если не ЭтаФорма.ВозвратПродажи Тогда 
		ЭтаФорма.ВозвратПродажи = Истина;
	Иначе
		ЭтаФорма.ВозвратПродажи = Ложь;
	КонецЕсли;	
	Объект.ЧекВсе.Очистить();
	Объект.Чек.Очистить();
	Объект.ЧекОтображение.Очистить();
	
	Объект.СуммаПокупателя=0;
	ВывестиСуммуСдачи();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	Перем Текст, МассивСтрок;
	
	Текст = СокрЛП(Элемент.ТекстРедактирования);
	ДлинаСтроки = СтрДлина(СокрЛП(Текст));
	ФлагТекст = 0;
	Если ДлинаСтроки = 0 Тогда
		ФлагТекст = -1;
	Иначе
		Для к=1 По ДлинаСтроки Цикл
			Симв = Сред(Текст,к,1);
			Если Найти("1234567890",Симв)=0 Тогда	// Это строка
				ФлагТекст=1;
				Прервать;	
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;	
	Если ФлагТекст=0 Тогда
		НайтиТоварыСервере(Истина);
	Иначе
		//Если не ЗначениеЗаполнено(ККМСсылка) Тогда
		Если не ЗначениеЗаполнено(Объект.ККТ) Тогда   // ЕМ
			Сообщить("Не определена ККМ");
			Возврат;
		ИначеЕсли СтрДлина(Текст) < 3 Тогда  
			Сообщить("Слишком маленький фильтр!!!(3 буквы надо)");
			Возврат;
		Иначе
			НайтиТоварыСервере(Ложь);				
		КонецЕсли;  
	КонецЕсли;
	
	Элементы.ПробитьЧек.Доступность = МожноПробитьЧек();
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтрокуКодов(Заказ,ТаблицаКодМестаЗаказа)
	СтрокаМестаЗаказа = "";
	СтрокиМестаЗаказа = ТаблицаКодМестаЗаказа.НайтиСтроки(Новый Структура("Заказ",Заказ));
	ИТ = 0;
	Для каждого строка из СтрокиМестаЗаказа цикл
		СтрокаМестаЗаказа =СтрокаМестаЗаказа+?(ИТ <>0,Символы.ПС,"")+строка.КодМестаЗаказа;
		ИТ = ИТ+1;
	КонецЦикла;
	Возврат СтрокаМестаЗаказа;
	
КонецФункции

&НаСервере
Функция СформироватьСтрокуЗСЯ(Заказ,ТаблицаЗСЯ)
	СтрокаЗСЯ = "";
	СтрокиЗСЯ = ТаблицаЗСЯ.НайтиСтроки(Новый Структура("Заказ",Заказ));
	ИТ = 0;
	Для каждого строка из СтрокиЗСЯ цикл
		СтрокаЗСЯ =СтрокаЗСЯ+?(ИТ <>0,Символы.ПС,"")+ строка.Зона+"_"+строка.Стеллаж+"_"+строка.Ячейка;
		ИТ = ИТ+1;
	КонецЦикла;
	Возврат СтрокаЗСЯ;
КонецФункции

&НаКлиенте
Процедура ЗаказыСамовывозВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки.Статус = ПредопределенноеЗначение("Справочник.СтатусыОбработкиЗаказа.ЗаказВТочкеСамовывоза") тогда
		Результат = ЗаказыСамовывозВыборНаСервере(ДанныеСтроки.Ссылка);
		Если ТипЗнч(Результат) = Тип("Строка") тогда
			ПоказатьПредупреждение(,Результат);
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЧек;
			ВывестиПредупреждение_ТоварыПоСкидкеАстразеникиВЧеке();
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(,"Возможна продажа заказа только в статусе ""Заказ в точке самовывоза""",,"Ошибка!");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаказыСамовывозВыборНаСервере(ЗаказСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказТовар.Ссылка КАК Заказ,
	|	ЗаказТовар.Товар,
	|	ЗаказТовар.Партия,
	|	ЗаказТовар.Цена,
	|	ЗаказТовар.Количество,
	|	ВЫБОР
	|		КОГДА ЗаказТовар.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЗаказТовар.Скидка / ЗаказТовар.Количество
	|	КОНЕЦ КАК СкидкаНаЕдиницу
	|ПОМЕСТИТЬ втЗаказыСоСкладаВПакетах_Итог
	|ИЗ
	|	Документ.Заказ.Товар КАК ЗаказТовар
	|ГДЕ
	|	ЗаказТовар.Ссылка.ТипКомплектацииЗаказа = ЗНАЧЕНИЕ(перечисление.ТипКомплектацииЗаказа.СборкаНаСкладеВПакеты_РаскладкаПакетовВАптеке)
	|	И ЗаказТовар.Ссылка.Проведен
	|	И ЗаказТовар.Ссылка В(&Заказы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказТовар.Ссылка КАК Заказ,
	|	ЗаказТовар.Товар,
	|	ЗаказТовар.Цена,
	|	СУММА(ЗаказТовар.Количество) КАК Количество,
	|	ВЫБОР
	|		КОГДА ЗаказТовар.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЗаказТовар.Скидка / ЗаказТовар.Количество
	|	КОНЕЦ КАК СкидкаНаЕдиницу
	|ПОМЕСТИТЬ втЗаказыСоСкладаВКоробке_СоставЗаказаСводно
	|ИЗ
	|	Документ.Заказ.Товар КАК ЗаказТовар
	|ГДЕ
	|	ЗаказТовар.Ссылка.ТипКомплектацииЗаказа = ЗНАЧЕНИЕ(перечисление.ТипКомплектацииЗаказа.СборкаНаСкладеВКоробку_КомплектацияВАптеке)
	|	И ЗаказТовар.Ссылка.Проведен
	|	И ЗаказТовар.Ссылка В(&Заказы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказТовар.Товар,
	|	ЗаказТовар.Цена,
	|	ЗаказТовар.Ссылка,
	|	ВЫБОР
	|		КОГДА ЗаказТовар.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЗаказТовар.Скидка / ЗаказТовар.Количество
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХранениеЗСЯПоТоварамОстатки.Документ КАК Заказ,
	|	ХранениеЗСЯПоТоварамОстатки.Товар,
	|	ХранениеЗСЯПоТоварамОстатки.Партия,
	|	ХранениеЗСЯПоТоварамОстатки.Партия.ГоденДо,
	|	ХранениеЗСЯПоТоварамОстатки.КоличествоОстаток КАК Количество,
	|	ХранениеЗСЯПоТоварамОстатки.ЗСЯ
	|ПОМЕСТИТЬ втЗаказыСоСкладаВКоробке_ВЯчейке
	|ИЗ
	|	РегистрНакопления.ХранениеЗСЯПоТоварам.Остатки(
	|			,
	|			Документ В
	|					(ВЫБРАТЬ
	|						втЗаказыСоСкладаВКоробке_СоставЗаказаСводно.Заказ
	|					ИЗ
	|						втЗаказыСоСкладаВКоробке_СоставЗаказаСводно КАК втЗаказыСоСкладаВКоробке_СоставЗаказаСводно)
	|				И Склад = &Склад) КАК ХранениеЗСЯПоТоварамОстатки
	|ГДЕ
	|	ХранениеЗСЯПоТоварамОстатки.КоличествоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказТовар.Ссылка КАК Заказ,
	|	ЗаказТовар.Товар,
	|	ЗаказТовар.Партия,
	|	ЗаказТовар.Цена,
	|	ЗаказТовар.Количество,
	|	ВЫБОР
	|		КОГДА ЗаказТовар.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЗаказТовар.Скидка / ЗаказТовар.Количество
	|	КОНЕЦ КАК СкидкаНаЕдиницу
	|ПОМЕСТИТЬ втЗаказыСборкаИКомплектацияВАптеке_Состав
	|ИЗ
	|	Документ.Заказ.Товар КАК ЗаказТовар
	|ГДЕ
	|	ЗаказТовар.Ссылка.ТипКомплектацииЗаказа = ЗНАЧЕНИЕ(перечисление.ТипКомплектацииЗаказа.СборкаИКомплектацияВАптеке)
	|	И ЗаказТовар.Ссылка.Проведен
	|	И ЗаказТовар.Ссылка В(&Заказы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХранениеЗСЯПоТоварамОстатки.Документ КАК Заказ,
	|	ХранениеЗСЯПоТоварамОстатки.Товар,
	|	ХранениеЗСЯПоТоварамОстатки.Партия,
	|	ХранениеЗСЯПоТоварамОстатки.КоличествоОстаток КАК Количество,
	|	ХранениеЗСЯПоТоварамОстатки.ЗСЯ
	|ПОМЕСТИТЬ втЗаказыСборкаИКомплектацияВАптеке_ВЯчейке
	|ИЗ
	|	РегистрНакопления.ХранениеЗСЯПоТоварам.Остатки(
	|			,
	|			Документ В
	|					(ВЫБРАТЬ
	|						втЗаказыСборкаИКомплектацияВАптеке_Состав.Заказ
	|					ИЗ
	|						втЗаказыСборкаИКомплектацияВАптеке_Состав КАК втЗаказыСборкаИКомплектацияВАптеке_Состав)
	|				И Склад = &Склад) КАК ХранениеЗСЯПоТоварамОстатки
	|ГДЕ
	|	ХранениеЗСЯПоТоварамОстатки.КоличествоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаказыСборкаИКомплектацияВАптеке_Состав.Заказ,
	|	втЗаказыСборкаИКомплектацияВАптеке_Состав.Товар,
	|	втЗаказыСборкаИКомплектацияВАптеке_Состав.Партия,
	|	ВЫБОР
	|		КОГДА втЗаказыСборкаИКомплектацияВАптеке_ВЯчейке.Количество < втЗаказыСборкаИКомплектацияВАптеке_Состав.Количество
	|			ТОГДА втЗаказыСборкаИКомплектацияВАптеке_ВЯчейке.Количество
	|		ИНАЧЕ втЗаказыСборкаИКомплектацияВАптеке_Состав.Количество
	|	КОНЕЦ КАК Количество,
	|	втЗаказыСборкаИКомплектацияВАптеке_Состав.Цена,
	|	втЗаказыСборкаИКомплектацияВАптеке_Состав.СкидкаНаЕдиницу,
	|	втЗаказыСборкаИКомплектацияВАптеке_ВЯчейке.ЗСЯ
	|ПОМЕСТИТЬ втЗаказыСборкаИКомплектацияВАптеке_Итог
	|ИЗ
	|	втЗаказыСборкаИКомплектацияВАптеке_Состав КАК втЗаказыСборкаИКомплектацияВАптеке_Состав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗаказыСборкаИКомплектацияВАптеке_ВЯчейке КАК втЗаказыСборкаИКомплектацияВАптеке_ВЯчейке
	|		ПО втЗаказыСборкаИКомплектацияВАптеке_Состав.Заказ = втЗаказыСборкаИКомплектацияВАптеке_ВЯчейке.Заказ
	|			И втЗаказыСборкаИКомплектацияВАптеке_Состав.Товар = втЗаказыСборкаИКомплектацияВАптеке_ВЯчейке.Товар
	|			И втЗаказыСборкаИКомплектацияВАптеке_Состав.Партия = втЗаказыСборкаИКомплектацияВАптеке_ВЯчейке.Партия
	|ГДЕ
	|	ВЫБОР
	|			КОГДА втЗаказыСборкаИКомплектацияВАптеке_ВЯчейке.Количество < втЗаказыСборкаИКомплектацияВАптеке_Состав.Количество
	|				ТОГДА втЗаказыСборкаИКомплектацияВАптеке_ВЯчейке.Количество
	|			ИНАЧЕ втЗаказыСборкаИКомплектацияВАптеке_Состав.Количество
	|		КОНЕЦ > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаказыСоСкладаВПакетах_Итог.Заказ,
	|	втЗаказыСоСкладаВПакетах_Итог.Товар,
	|	втЗаказыСоСкладаВПакетах_Итог.Партия,
	|	втЗаказыСоСкладаВПакетах_Итог.Цена,
	|	втЗаказыСоСкладаВПакетах_Итог.Количество,
	|	втЗаказыСоСкладаВПакетах_Итог.СкидкаНаЕдиницу,
	|	ЗНАЧЕНИЕ(Справочник.МестоЗСЯ.ПустаяСсылка) КАК ЗСЯ
	|ИЗ
	|	втЗаказыСоСкладаВПакетах_Итог КАК втЗаказыСоСкладаВПакетах_Итог
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втЗаказыСборкаИКомплектацияВАптеке_Итог.Заказ,
	|	втЗаказыСборкаИКомплектацияВАптеке_Итог.Товар,
	|	втЗаказыСборкаИКомплектацияВАптеке_Итог.Партия,
	|	втЗаказыСборкаИКомплектацияВАптеке_Итог.Цена,
	|	втЗаказыСборкаИКомплектацияВАптеке_Итог.Количество,
	|	втЗаказыСборкаИКомплектацияВАптеке_Итог.СкидкаНаЕдиницу,
	|	втЗаказыСборкаИКомплектацияВАптеке_Итог.ЗСЯ
	|ИЗ
	|	втЗаказыСборкаИКомплектацияВАптеке_Итог КАК втЗаказыСборкаИКомплектацияВАптеке_Итог
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаказыСоСкладаВКоробке_СоставЗаказаСводно.Заказ КАК Заказ,
	|	втЗаказыСоСкладаВКоробке_СоставЗаказаСводно.Товар КАК Товар,
	|	втЗаказыСоСкладаВКоробке_СоставЗаказаСводно.Цена КАК Цена,
	|	втЗаказыСоСкладаВКоробке_СоставЗаказаСводно.Количество,
	|	втЗаказыСоСкладаВКоробке_СоставЗаказаСводно.СкидкаНаЕдиницу
	|ИЗ
	|	втЗаказыСоСкладаВКоробке_СоставЗаказаСводно КАК втЗаказыСоСкладаВКоробке_СоставЗаказаСводно
	|
	|УПОРЯДОЧИТЬ ПО
	|	Цена УБЫВ
	|ИТОГИ ПО
	|	Заказ,
	|	Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаказыСоСкладаВКоробке_ВЯчейке.Заказ,
	|	втЗаказыСоСкладаВКоробке_ВЯчейке.Товар,
	|	втЗаказыСоСкладаВКоробке_ВЯчейке.Партия,
	|	втЗаказыСоСкладаВКоробке_ВЯчейке.ПартияГоденДо КАК ПартияГоденДо,
	|	втЗаказыСоСкладаВКоробке_ВЯчейке.Количество,
	|	втЗаказыСоСкладаВКоробке_ВЯчейке.ЗСЯ
	|ИЗ
	|	втЗаказыСоСкладаВКоробке_ВЯчейке КАК втЗаказыСоСкладаВКоробке_ВЯчейке
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартияГоденДо УБЫВ";
	
	Запрос.УстановитьПараметр("Заказы",ЗаказСсылка);
	Запрос.УстановитьПараметр("Склад" ,ПараметрыСеанса.ОсновнойСклад);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатЯвно 			  					  = МассивРезультатов[6];
	РезультатСоставЗаказовДляРаспределения 		  = МассивРезультатов[7];
	РезультатТоварВЯчейкахЗаказовДляРаспределения = МассивРезультатов[8];
	
	РасшифровкаОшибки = "";
	
	Если РезультатЯвно.Пустой() и (РезультатСоставЗаказовДляРаспределения.Пустой() и РезультатТоварВЯчейкахЗаказовДляРаспределения.Пустой())тогда
		РасшифровкаОшибки = "Не удалось получить данные о собранных товарах по выбранному заказу, сообщите о проблеме в IT отдел!!!";
		Возврат РасшифровкаОшибки;
	КонецЕсли;
	
	Если не РезультатЯвно.Пустой() тогда
		Выборка = РезультатЯвно.Выбрать();
		Пока Выборка.Следующий() цикл
			ДобавитьТоварВЧек(Выборка.Заказ,Выборка.Товар,Выборка.Партия,Выборка.Цена,Выборка.Количество,Выборка.ЗСЯ);
			ИзменитьКоличествоТовараВЧеке(Выборка.Заказ,Выборка.Товар,Выборка.Цена,Выборка.Количество,,Выборка.СкидкаНаЕдиницу,Ложь,Выборка.ЗСЯ);
		КонецЦикла;                                                                    
	КонецЕсли;	
	
	Если не (РезультатСоставЗаказовДляРаспределения.Пустой() и РезультатТоварВЯчейкахЗаказовДляРаспределения.Пустой()) тогда
		ТЗСобранныйТоварПоЗаказам = РезультатТоварВЯчейкахЗаказовДляРаспределения.Выгрузить();
		ВыборкаДокумент = РезультатСоставЗаказовДляРаспределения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокумент.Следующий() цикл
			ВыборкаТовар = ВыборкаДокумент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаТовар.Следующий() цикл
				Выборка = ВыборкаТовар.Выбрать();			
				Пока Выборка.Следующий() цикл
					МассивСтрокКУдалению = Новый Массив;
					МассивСтрокТоваров = ТЗСобранныйТоварПоЗаказам.НайтиСтроки(Новый Структура("Заказ,Товар",Выборка.Заказ,Выборка.Товар));
					Если МассивСтрокТоваров.Количество() > 0 тогда				
						КоличествоКРаспределению = Выборка.Количество;
						Для каждого Строка из МассивСтрокТоваров цикл
							КоличествоКСписанию = Мин(КоличествоКРаспределению,Строка.Количество);
							ДобавитьТоварВЧек(Выборка.Заказ,Выборка.Товар,Строка.Партия,Выборка.Цена,КоличествоКСписанию,Строка.ЗСЯ);
							КоличествоКРаспределению = КоличествоКРаспределению - КоличествоКСписанию;
							Строка.Количество = Строка.Количество - КоличествоКСписанию;
							Если Строка.Количество = 0 тогда
								МассивСтрокКУдалению.Добавить(Строка);
							КонецЕсли;
							Если КоличествоКРаспределению = 0 тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Для каждого строка из МассивСтрокКУдалению цикл
							ТЗСобранныйТоварПоЗаказам.Удалить(Строка);
						КонецЦикла;
						ИзменитьКоличествоТовараВЧеке(Выборка.Заказ,Выборка.Товар,Выборка.Цена,Выборка.Количество,,Выборка.СкидкаНаЕдиницу,Ложь);
					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;			
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьОтображениеЧека();
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстовоеПредставлениеЗСЯЗаказа(МассивЗаказов, Граница = неопределено)
	ТекстЗСЯ = "";
	Если Граница = Неопределено тогда
		Граница = Новый Граница(ТекущаяДата(),ВидГраницы.Включая);
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Документ КАК Заказ,
	|	ВложенныйЗапрос.Номер КАК Номер,
	|	ВложенныйЗапрос.Дата КАК Дата,
	|	ВложенныйЗапрос.Клиент КАК Клиент,
	|	ВложенныйЗапрос.Пакет КАК Пакет,
	|	ВложенныйЗапрос.ЗСЯ КАК ЗСЯ,
	|	ВложенныйЗапрос.Холод КАК Холод
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХранениеЗСЯОстатки.Документ КАК Документ,
	|		ХранениеЗСЯОстатки.Документ.Номер КАК Номер,
	|		ХранениеЗСЯОстатки.Документ.Дата КАК Дата,
	|		ХранениеЗСЯОстатки.Документ.Покупатель КАК Клиент,
	|		ЕСТЬNULL(ХранениеЗСЯОстатки.МестоЗаказа.Код, """") КАК Пакет,
	|		ХранениеЗСЯОстатки.ЗСЯ.Наименование КАК ЗСЯ,
	|		ХранениеЗСЯОстатки.ЗСЯ.ЗонаСсылка.Холод КАК Холод
	|	ИЗ
	|		РегистрНакопления.ХранениеЗСЯ.Остатки(&Граница, Документ В (&МассивЗаказов)) КАК ХранениеЗСЯОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХранениеЗСЯПоТоварамОстатки.Документ,
	|		ХранениеЗСЯПоТоварамОстатки.Документ.Номер,
	|		ХранениеЗСЯПоТоварамОстатки.Документ.Дата,
	|		ХранениеЗСЯПоТоварамОстатки.Документ.Покупатель,
	|		"""",
	|		ХранениеЗСЯПоТоварамОстатки.ЗСЯ.Наименование,
	|		ХранениеЗСЯПоТоварамОстатки.ЗСЯ.ЗонаСсылка.Холод
	|	ИЗ
	|		РегистрНакопления.ХранениеЗСЯПоТоварам.Остатки(&Граница, Документ В (&МассивЗаказов)) КАК ХранениеЗСЯПоТоварамОстатки) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Холод
	|ИТОГИ
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Клиент)
	|ПО
	|	Заказ,
	|	Холод";
	Запрос.УстановитьПараметр("Граница",Граница);
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	ВыборкаЗаказ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказ.Следующий() цикл
		ТекстЗСЯ = ТекстЗСЯ + "Заказ "+ СокрЛП(ВыборкаЗаказ.Номер) + " " + Формат(ВыборкаЗаказ.Дата,"ДФ=dd.MM.yy")+Символы.ПС;
		ВыборкаХолод = ВыборкаЗаказ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХолод.Следующий() цикл
			ТекстЗСЯ = ТекстЗСЯ + Формат(ВыборкаХолод.Холод,"БЛ=|Тепло:; БИ=|Холод:")+Символы.ПС;
			Выборка = ВыборкаХолод.Выбрать();
			Пока Выборка.Следующий() цикл
				ТекстЗСЯ = ТекстЗСЯ + ?(ЗначениеЗаполнено(Выборка.Пакет)," |Пакет"," |Ячейка") +Символы.ПС;
				ТекстЗСЯ = ТекстЗСЯ + " |" + ?(ЗначениеЗаполнено(Выборка.Пакет),Выборка.Пакет+" - ","")+ Выборка.ЗСЯ + Символы.ПС;
			КонецЦикла;
		КонецЦикла;
		ТекстЗСЯ = ТекстЗСЯ +Символы.ПС;
	КонецЦикла;
	
	Возврат ТекстЗСЯ;	
	
КонецФункции


&НаКлиенте
Процедура НайтиЧекПоКПК(Команда)
	
	Если Число(ЭтаФорма.Элементы.НомерКПК.ТекстРедактирования)=0 Тогда 
		Сообщить("Введите номер КПК с чека");
		Возврат;
	КонецЕсли;	
	
	РезультатСтруктура = НайтиЧекПоКПКНаСервере(ЭтаФорма.Элементы.НомерКПК.ТекстРедактирования);
	Если РезультатСтруктура.ВозвратВозможен тогда
		ВидимостьАстразеник();
		ОбновитьОтображениеЧека();
		ЭтаФорма.ТекущийЭлемент=ЭтаФорма.Элементы.СтраницаЧек;
	Иначе
		ПоказатьПредупреждение(,РезультатСтруктура.Предупреждение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НайтиЧекПоКПКНаСервере(НомерКПК)
	
	РезультатСтруктура = Новый Структура("ВозвратВозможен,Предупреждение",Ложь,"");
	
	Объект.ЧекВсе.Очистить();
	Объект.Чек.Очистить();
	Объект.ЧекОтображение.Очистить();
	ПоискТовара.Очистить();
	ПоискТовараАналог.Очистить();
	Объект.СтрокаПоиск = "";
	ЭтаФорма.ЗСЯЗаказа = "";
	
	Если Объект.ФлагСтарший Тогда
		КоличествоДней=15;
	Иначе	
		КоличествоДней=3;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ЧекиРеализация.Ссылка КАК Чек,
	|	ЧекиРеализация.Товар,
	|	ЧекиРеализация.Партия,
	|	ЧекиРеализация.Цена,
	|	ЧекиРеализация.Количество,
	|	ЧекиРеализация.Скидка,
	|	ЧекиРеализация.Сумма,
	|	ЧекиРеализация.Документ,
	|	ЧекиРеализация.Всего,
	|	ЧекиРеализация.Ссылка.RRN КАК rrn,
	|	ЧекиРеализация.Ссылка.authcode КАК authcode,
	|	ЧекиРеализация.Ссылка.НомерЧека КАК НомерЧека,
	|	ЧекиРеализация.Ссылка.ОплатаПоКарте КАК ОплатаПоКарте,
	|	ЧекиРеализация.Скидка / ЧекиРеализация.Количество КАК СкидкаНаЕдиницуТовара,
	|	ЧекиРеализация.НуженРецепт как НуженРецепт
	|ПОМЕСТИТЬ втЧекПоКПК
	|ИЗ
	|	Документ.Чеки.Реализация КАК ЧекиРеализация
	|ГДЕ
	|	ЧекиРеализация.Ссылка.ККМ = &ККМ
	|	И ЧекиРеализация.Ссылка.КПК = &КПК
	|	И ЧекиРеализация.Ссылка.Проведен
	|	И ЧекиРеализация.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЧекПоКПК.Чек КАК Чек,
	|	втЧекПоКПК.Товар,
	|	втЧекПоКПК.Партия,
	|	втЧекПоКПК.Цена,
	|	втЧекПоКПК.Количество,
	|	втЧекПоКПК.Скидка,
	|	втЧекПоКПК.Сумма,
	|	втЧекПоКПК.rrn КАК rrn,
	|	втЧекПоКПК.authcode КАК authcode,
	|	втЧекПоКПК.НомерЧека КАК НомерЧека,
	|	втЧекПоКПК.ОплатаПоКарте КАК ОплатаПоКарте,
	|	втЧекПоКПК.Документ,
	|	втЧекПоКПК.Всего,
	|	втЧекПоКПК.СкидкаНаЕдиницуТовара,
	|	втЧекПоКПК.НуженРецепт как НуженРецепт
	|ИЗ
	|	втЧекПоКПК КАК втЧекПоКПК
	|ИТОГИ
	|	МАКСИМУМ(rrn),
	|	МАКСИМУМ(authcode),
	|	МАКСИМУМ(НомерЧека),
	|	МАКСИМУМ(ОплатаПоКарте)
	|ПО
	|	Чек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Чеки.Ссылка КАК ЧекВозврата
	|ИЗ
	|	втЧекПоКПК КАК втЧекПоКПК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Чеки КАК Чеки
	|		ПО втЧекПоКПК.Чек = Чеки.ДокументОснование
	|			И (Чеки.Проведен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекиТаблицаСкидочныеПрограммы.НомерСтроки,
	|	ЧекиТаблицаСкидочныеПрограммы.OPERDATE,
	|	ЧекиТаблицаСкидочныеПрограммы.CARDNUMBER,
	|	ЧекиТаблицаСкидочныеПрограммы.ПроцентСкидки,
	|	ЧекиТаблицаСкидочныеПрограммы.Line,
	|	ЧекиТаблицаСкидочныеПрограммы.LineDoc,
	|	ЧекиТаблицаСкидочныеПрограммы.id_Товар,
	|	ЧекиТаблицаСкидочныеПрограммы.Количество,
	|	ЧекиТаблицаСкидочныеПрограммы.Сумма,
	|	ЧекиТаблицаСкидочныеПрограммы.СуммаСкидки,
	|	ЧекиТаблицаСкидочныеПрограммы.Цена,
	|	ЧекиТаблицаСкидочныеПрограммы.СтавкаНДС,
	|	ЧекиТаблицаСкидочныеПрограммы.PRODUCTCODE,
	|	ЧекиТаблицаСкидочныеПрограммы.НомерДокумента,
	|	ЧекиТаблицаСкидочныеПрограммы.project
	|ИЗ
	|	втЧекПоКПК КАК втЧекПоКПК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Чеки.ТаблицаСкидочныеПрограммы КАК ЧекиТаблицаСкидочныеПрограммы
	|		ПО втЧекПоКПК.Чек = ЧекиТаблицаСкидочныеПрограммы.Ссылка";
	
	Запрос.УстановитьПараметр("ККМ",ККМСсылка);
	Запрос.УстановитьПараметр("КПК",НомерКПК);
	Запрос.УстановитьПараметр("ДатаНачала",ТекущаяДата()-(60*60*24*КоличествоДней));
	Запрос.УстановитьПараметр("ДатаОкончания",ТекущаяДата()+(60*60*24));
	Запрос.УстановитьПараметр("Операц", перечисления.ТорговыеОперации.Продажа);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатЧек = МассивРезультатов[1];
	РезультатЧекВозврата = МассивРезультатов[2];
	РезультатСкидочныеПрограммы = МассивРезультатов[3];
	Если РезультатЧек.Пустой() тогда
		ЭтаФорма.ОплатаКартой=Ложь;
		Объект.rrn="";
		Объект.КодАвторизации="";
		ЭтаФорма.ЧекВозвратСсылка = документы.Чеки.ПустаяСсылка();
		РезультатСтруктура.Вставить("Предупреждение","Не найден в сегодняшнем числе!");
		Возврат РезультатСтруктура;
	Иначе
		Если не РезультатЧекВозврата.Пустой() тогда
			ВыборкаЧекВозврата = РезультатЧекВозврата.Выбрать();
			Пока ВыборкаЧекВозврата.Следующий() цикл
				РезультатСтруктура.Вставить("Предупреждение","По чеку с КПК "+НомерКПК+" уже был возврат.
				|Документ возврата """+Строка(ВыборкаЧекВозврата.ЧекВозврата)+"""");
				Возврат РезультатСтруктура;
			КонецЦикла;
		КонецЕсли;
		
		ВыборкаЧеки = РезультатЧек.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЧеки.Следующий() цикл
			ЭтаФорма.ОплатаКартой		= ВыборкаЧеки.ОплатаПоКарте;
			Объект.rrn					= ВыборкаЧеки.rrn;
			Объект.КодАвторизации		= ВыборкаЧеки.authcode;
			Объект.Возврат_НомерЧека	= ВыборкаЧеки.НомерЧека;
			ЭтаФорма.ЧекВозвратСсылка   = ВыборкаЧеки.Чек;
			Выборка = ВыборкаЧеки.Выбрать();
			Пока Выборка.Следующий() цикл
				ДокументПродажи = ?(ЗначениеЗаполнено(Выборка.Документ),Выборка.Документ,Выборка.Чек);
				ДобавитьТоварВЧек(ДокументПродажи,Выборка.Товар,Выборка.Партия,Выборка.Цена,Выборка.Количество);
				ИзменитьКоличествоТовараВЧеке(ДокументПродажи,Выборка.Товар,Выборка.Цена,Выборка.Количество,Истина,Выборка.СкидкаНаЕдиницуТовара,Истина);
			КонецЦикла;
		КонецЦикла;
		ЭтаФорма.ВозвратПродажи=Истина;
		РезультатСтруктура.Вставить("ВозвратВозможен",Истина);
	КонецЕсли;
	
	
	//Хортюк С.Б. 22.03.2017 АстраЗенника(
	Если не РезультатСкидочныеПрограммы.Пустой() тогда
		Выборка = РезультатСкидочныеПрограммы.Выбрать();
		Пока Выборка.Следующий() цикл
			СтрокаАЗ = ТаблицаСкидкиАстраЗеника.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаАЗ,Выборка);
		КонецЦикла;
		ТаблицаШК = ТаблицаСкидкиАстраЗеника.Выгрузить(,"НомерКарты");
		ТаблицаШК.Свернуть("НомерКарты");
		Для каждого строкаШК из ТаблицаШК цикл
			ПолучитьСтруктуруОписанияКартыАстаЗеник(СтрокаШК.НомерКарты);	
		КонецЦикла;
		ТаблицаСкидочныхКарт.НайтиСтроки(Новый Структура("Буклет",Истина));
		Для каждого СтрокаКарты из ТаблицаСкидочныхКарт цикл
			СтрокиДляПроставкиБуклета = ТаблицаСкидкиАстраЗеника.НайтиСтроки(Новый Структура("НомерКарты,project",СтрокаКарты.НомерКарты,СтрокаКарты.project));
			Для каждого строка из СтрокиДляПроставкиБуклета цикл
				Строка.Буклет = Истина;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	//Хортюк С.Б. 22.03.2017 АстраЗенника)
	Возврат РезультатСтруктура;
КонецФункции

&НаКлиенте
Процедура ВывестиСуммуСдачи()
	Если (Объект.СуммаПокупателя>0) И (Объект.Чек.Итог("Сумма")>0) Тогда 
		Объект.СуммаСдачи=Объект.СуммаПокупателя-Объект.Чек.Итог("Сумма");
	Иначе
		Объект.СуммаСдачи=0;
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура СуммаПокупателяПриИзменении(Элемент)
	ВывестиСуммуСдачи();
	Элементы.ПробитьЧек.Доступность = МожноПробитьЧек();
КонецПроцедуры

&НаКлиенте
Процедура GetLastError()
	Перем КодОшибки, ТекстОшибки;
	КодОшибки = ТерминалОплаты.GetLastError(ТекстОшибки);
	Если КодОшибки = 0 Тогда
		Сообщить("Ошибок нет");
	Иначе
		Сообщить("(" + XMLСтрока(КодОшибки) + ") " + ТекстОшибки, СтатусСообщения.ОченьВажное);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОплатаКартойЧек(Команда)
	Если ЭтаФорма.Элементы.ОплатаКартой.Доступность тогда
		Если ЭтаФорма.ВозвратПродажи Тогда
			ПоказатьПредупреждение(,"Это возврат, смена типа оплаты невозможна!");
			Возврат;
		КонецЕсли;	
		Если ЭтаФорма.ОплатаКартой Тогда
			ЭтаФорма.ОплатаКартой=Ложь;
		Иначе
			ЭтаФорма.ОплатаКартой=Истина;
		КонецЕсли; 
		ОбновитьОтображениеЧека();
	Иначе
		ПоказатьПредупреждение(,"Не работает терминал эквайринга, смена типа оплаты невозможна!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТестТерминалаОплаты(Команда)
	Перем текст;
	
	Если ТерминалОплаты.DeviceTest(текст, "") Тогда
		Сообщить(текст, СтатусСообщения.Обычное);
	Иначе
		Сообщить(текст, СтатусСообщения.ОченьВажное);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечатьЦенников(Команда)
	Перем ЧислоПустыхСтрок;
	Если ПечатьЦенниковНаПринтер тогда
		
		
		ТД = КомандаПечатьЦенниковНаСервереА4();
		Если ТипЗнч(тд) = Тип("ТабличныйДокумент") тогда
			ТД.Показать();
		КонецЕсли;
		
		ТоварыДляПечатиЦенников.Очистить();//Хортюк
		
	Иначе
		ЧислоПустыхСтрок = 1;
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Вы действительно хотите распечатать ценники? Необходимо предварительно подготовить оборудование для печати!", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		МассивСтрок = новый Массив;
		МассивСтрок = КомандаПечатьЦенниковНаСервере();
		ТоварыДляПечатиЦенников.Очистить();//Хортюк
		
		Если МассивСтрок <> Неопределено и МассивСтрок.Количество() > 0 Тогда
			
// ЕМ ***********************************************			
			
			Для ИндексСтрока = 0 По МассивСтрок.Количество() - 1  Цикл
				
				ЭлементМассива = МассивСтрок[ИндексСтрока];
		
		    // !!!!!!!!!!
				
				//Если Цел(Число(ИндексСтрока)/30) = Число(ИндексСтрока)/30 и ИндексСтрока>0 Тогда
				//	Режим = РежимДиалогаВопрос.ДаНет;
				//	Ответ = Вопрос("Продолжаем печать ценников?", Режим, 0);
				//	Если Ответ = КодВозвратаДиалога.Нет Тогда
				//		Прервать;
				//	КонецЕсли;
				//	
				//КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;	
			
		ФискальноеУстройство = Объект.ККТ; //ПолучитьФискальноеУстройство();
		Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ФискальноеУстройство.Доступность = Ложь;
		
		ПозицииЦенника = ПолучитьШаблонЦенника(МассивСтрок);
		НефискальныеДокументы = Новый Массив();
		НефискальныеДокументы.Добавить(ПозицииЦенника);
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("Ценник_КомандаВыполнитьЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьПечатьТекстовыхДокументов(ОповещениеПриЗавершении, УникальныйИдентификатор, НефискальныеДокументы, ФискальноеУстройство);
	
			
			
//*********************************************** ЕМ 			
			
			
			//Если Объект.ТипККМ = ПредопределенноеЗначение("Перечисление.ТипККМ.ШТРИХ_М") тогда		
			//	FR.НомерЛУ=1;
			//	FR.УстановитьАктивноеЛУ();
			//	FR.Connect();
			//	
			//	Для ИндексСтрока = 0 По МассивСтрок.Количество() - 1  Цикл
			//		
			//		ЭлементМассива = МассивСтрок[ИндексСтрока];
			//		
			//		FR.Password=30;
			//		FR.StringForPrinting="   " + ЭлементМассива.Фирма; 
			//		FR.FontType = 4;
			//		FR.PrintStringWithFont();		
			//		
			//		FR.Password=30;
			//		FR.StringForPrinting=" ";  
			//		FR.FontType = 5;
			//		FR.PrintStringWithFont();
			//		
			//		FR.Password=30;
			//		
			//		FR.StringForPrinting=" " + Лев(ЭлементМассива.Товар,35);
			//		FR.PrintString();
			//		
			//		FR.Password=30;
			//		FR.StringForPrinting=" "+Сред(ЭлементМассива.Товар,36,35);		
			//		FR.PrintString();
			//		
			//		FR.Password=30;
			//		FR.StringForPrinting="     " + ЭлементМассива.Цена;  
			//		FR.FontType = 2;
			//		FR.PrintStringWithFont();
			//		
			//		Страна = СокрЛП(ЭлементМассива.Страна);
			//		ДлСтр = СтрДлина(Страна);
			//		Если ДлСтр > 21 тогда
			//			Страна = Лев(Страна,21);
			//			ДлСтр = 21;
			//		КонецЕсли;
			//		Поставщик = СокрЛП(ЭлементМассива.Поставщик);
			//		ДлПос = СтрДлина(Поставщик);
			//		Если ДлПос > 20 тогда
			//			Поставщик = Лев(Поставщик,20);
			//			ДлПос = 20;
			//		КонецЕсли;
			//		Дл = ДлПос+ДлСтр;
			//		ПропускСтроки = "";
			//		Если Дл < 42 Тогда
			//			Для к = 1 по 42 - Дл Цикл
			//				ПропускСтроки = ПропускСтроки + " ";
			//			КонецЦикла;
			//		КонецЕсли;
			//		FR.Password=30;  
			//		FR.StringForPrinting= Поставщик + ПропускСтроки + Страна; 
			//		FR.FontType = 5;
			//		FR.PrintStringWithFont();
			//		
			//		Дл = СтрДлина(ЭлементМассива.СрокГодности);
			//		ПропускСтроки = "";
			//		Если Дл < 42 Тогда
			//			Для к = 1 по 42 - Дл Цикл
			//				ПропускСтроки = ПропускСтроки + " ";
			//			КонецЦикла;
			//		КонецЕсли;
			//		
			//		FR.Password=30;
			//		FR.StringForPrinting= ПропускСтроки + ЭлементМассива.СрокГодности;  
			//		FR.FontType = 5;
			//		FR.PrintStringWithFont();				
			//		
			//		FR.Password=30;
			//		FR.StringForPrinting=" ";
			//		Пока ЧислоПустыхСтрок < 7 Цикл
			//			FR.PrintString();
			//			ЧислоПустыхСтрок = ЧислоПустыхСтрок+1;
			//		КонецЦикла;
			//		FR.Password=30;
			//		FR.CutType=1;
			//		FR.CutCheck();
			//		ЧислоПустыхСтрок = 1;
			//		
			//		Если Цел(Число(ИндексСтрока)/30) = Число(ИндексСтрока)/30 и ИндексСтрока>0 Тогда
			//			Режим = РежимДиалогаВопрос.ДаНет;
			//			Ответ = Вопрос("Продолжаем печать ценников?", Режим, 0);
			//			Если Ответ = КодВозвратаДиалога.Нет Тогда
			//				Прервать;
			//			КонецЕсли;
			//			
			//		КонецЕсли;
			//		
			//	КонецЦикла;
			//	
			//Иначе
			//	Для ИндексСтрока = 0 По МассивСтрок.Количество() - 1  Цикл
			//		
			//		ЭлементМассива = МассивСтрок[ИндексСтрока];
			//		
			//		FR_atol.Password=30;
			//		FR_atol.caption = ЭлементМассива.Фирма; 
			//		FR_atol.Alignment = 1;
			//		FR_atol.RecFont = 1;
			//		FR_atol.RecBrightness = 14;
			//		FR_atol.FontDblHeight = Ложь;
			//		FR_atol.PrintField();		
			//		
			//		FR_atol.Password=30;
			//		FR_atol.caption =" ";  
			//		FR_atol.RecFont = 7;
			//		FR_atol.RecBrightness = 9;
			//		FR_atol.PrintField();		
			//		
			//		ИмяТовараСокр = Лев(ЭлементМассива.Товар,96);
			//		
			//		FR_atol.Password=30;
			//		FR_atol.Caption= ИмяТовараСокр;
			//		FR_atol.Alignment = 0;
			//		FR_atol.TextWrap = 2;
			//		FR_atol.RecFont = 2;
			//		FR_atol.PrintField();
			//		
			//		FR_atol.Caption= " ";  
			//		FR_atol.RecFont = 7;
			//		FR_atol.PrintField();
			//		
			//		FR_atol.Password=30;
			//		FR_atol.Caption= ЭлементМассива.Цена;  
			//		FR_atol.RecFont = 1;
			//		FR_atol.TextWrap = 0;
			//		FR_atol.Alignment = 1;
			//		FR_atol.RecBrightness = 14;
			//		FR_atol.RecFontHeight = 1;
			//		FR_atol.PrintField();				
			//		
			//		Страна = СокрЛП(ЭлементМассива.Страна);
			//		ДлСтр = СтрДлина(Страна);
			//		Если ДлСтр > 24 тогда
			//			Страна = Лев(Страна,24);
			//			ДлСтр = 24;
			//		КонецЕсли;
			//		Поставщик = СокрЛП(ЭлементМассива.Поставщик);
			//		ДлПос = СтрДлина(Поставщик);
			//		Если ДлПос > 23 тогда
			//			Поставщик = Лев(Поставщик,23);
			//			ДлПос = 23;
			//		КонецЕсли;
			//		Дл = ДлПос+ДлСтр;
			//		ПропускСтроки = "";
			//		Если Дл < 48 Тогда
			//			Для к = 1 по 48 - Дл Цикл
			//				ПропускСтроки = ПропускСтроки + " ";
			//			КонецЦикла;
			//		КонецЕсли;
			//		FR_atol.Password=30;  
			//		FR_atol.Alignment = 0;
			//		FR_atol.RecBrightness = 10;
			//		FR_atol.Caption= Поставщик + ПропускСтроки + Страна;
			//		FR_atol.RecFontHeight = 0;
			//		FR_atol.RecFont = 7;
			//		FR_atol.PrintField();
			//		
			//		Дл = СтрДлина(ЭлементМассива.СрокГодности);
			//		ПропускСтроки = "";
			//		Если Дл < 48 Тогда
			//			Для к = 1 по 48 - Дл Цикл
			//				ПропускСтроки = ПропускСтроки + " ";
			//			КонецЦикла;
			//		КонецЕсли;
			//		
			//		FR_atol.Password=30;
			//		FR_atol.Caption= ПропускСтроки + ЭлементМассива.СрокГодности;  
			//		FR_atol.RecFont = 7;
			//		FR_atol.PrintField();				
			//		
			//		FR_atol.Caption= " ";  
			//		FR_atol.RecFont = 1;
			//		FR_atol.PrintField();
			//		FR_atol.Caption= " ";  
			//		FR_atol.RecFont = 1;
			//		FR_atol.PrintField();
			//		FR_atol.Caption= " ";  
			//		FR_atol.RecFont = 1;
			//		FR_atol.PrintField();
			//		
			//		FR_atol.Password=30;
			//		FR_atol.FullCut();
			//		
			//		Если Цел(Число(ИндексСтрока)/30) = Число(ИндексСтрока)/30 и ИндексСтрока>0 Тогда
			//			Режим = РежимДиалогаВопрос.ДаНет;
			//			Ответ = Вопрос("Продолжаем печать ценников?", Режим, 0);
			//			Если Ответ = КодВозвратаДиалога.Нет Тогда
			//				Прервать;
			//			КонецЕсли;
			//			
			//		КонецЕсли;
			//		
			//	КонецЦикла;
			//	
			//КонецЕсли;	
			
		//КонецЕсли;
		
		ВидНоменклатуры = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КомандаПечатьЦенниковНаСервереА4()
	
	
	Об = обработки.ПечатьЦенников.Создать();
	Если КомандаПечатьЦенниковНаСервере(Об.Товары) = Истина тогда
		
		Возврат Об.ПечатьЦенников();
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	
КонецФункции

&НаСервере
Функция КомандаПечатьЦенниковНаСервере(ТабЧастьОбработки = неопределено)
	
	Результат = новый Массив;
	
	ТабЗнач = Новый ТаблицаЗначений;
	ТабЗнач.Колонки.Добавить("Товар",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабЗнач.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка"));
	ТабЗнач.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число"));
	ТабЗнач.Колонки.Добавить("Страна",Новый ОписаниеТипов("Строка"));
	ТабЗнач.Колонки.Добавить("СрокГодности",Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТабЗнач.Колонки.Добавить("Поставщик",Новый ОписаниеТипов("Строка"));
	ТабЗнач.Колонки.Добавить("Производитель",Новый ОписаниеТипов("Строка"));
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураЗСЯ.Номенклатура КАК Ссылка
	|ПОМЕСТИТЬ ВТНоменклатураПоАдресации
	|ИЗ
	|	РегистрСведений.ЗСЯНоменклатуры КАК НоменклатураЗСЯ
	|ГДЕ
	|	НоменклатураЗСЯ.Склад = &Склад
	|	И ВЫБОР
	|			КОГДА &Зона <> НЕОПРЕДЕЛЕНО
	|				ТОГДА &Зона = НоменклатураЗСЯ.Зона
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Стеллаж <> НЕОПРЕДЕЛЕНО
	|				ТОГДА &Стеллаж = НоменклатураЗСЯ.Стеллаж
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Ячейка <> НЕОПРЕДЕЛЕНО
	|				ТОГДА &Ячейка = НоменклатураЗСЯ.Ячейка
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ВидНоменклатуры <> НЕОПРЕДЕЛЕНО
	|				ТОГДА НоменклатураЗСЯ.Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ &ПечатьЦенниковПоМассиву
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	&ПечатьЦенниковПоМассиву
	|	И Номенклатура.Ссылка В(&МассивНоменклатурыДляПечати)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиТовараОстатки.Товар,
	|	ОстаткиТовараОстатки.Партия
	|ПОМЕСТИТЬ ВТТоварИПартияДляПечати
	|ИЗ
	|	РегистрНакопления.ОстаткиТовара.Остатки(
	|			&Период,
	|			Отдел = &Склад
	|				И Партия.ГоденДо >= &ГоденДоПереоценка
	|				И Товар В
	|					(ВЫБРАТЬ
	|						ВТНоменклатураПоАдресации.Ссылка
	|					ИЗ
	|						ВТНоменклатураПоАдресации КАК ВТНоменклатураПоАдресации)) КАК ОстаткиТовараОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТовараОстатки.Товар,
	|	ОстаткиТовараОстатки.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТоварИПартияДляПечати.Товар,
	|	ВТТоварИПартияДляПечати.Партия,
	|	ЦеныПрайсЛиста.Ссылка КАК ЦенаПартииПрайсЛиста,
	|	ЕСТЬNULL(ВТТоварИПартияДляПечати.Партия.Производитель.Родитель.Наименование, """") КАК Страна,
	|	ЕСТЬNULL(ВТТоварИПартияДляПечати.Партия.Документ.Клиент.Наименование, ЕСТЬNULL(ВТТоварИПартияДляПечати.Партия.Клиент.Наименование, """")) КАК Поставщик,
	|	ВТТоварИПартияДляПечати.Партия.ГоденДо КАК ГоденДо,
	|	ЦеныПартии.Цена КАК ЦенаПартии
	|ПОМЕСТИТЬ втТоварИЦенаПартииПрайсЛиста
	|ИЗ
	|	ВТТоварИПартияДляПечати КАК ВТТоварИПартияДляПечати
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЦеныПрайсЛиста КАК ЦеныПрайсЛиста
	|		ПО ВТТоварИПартияДляПечати.Товар = ЦеныПрайсЛиста.Владелец
	|			И (ЦеныПрайсЛиста.ТипЦены = &ТипЦены)
	|			И (ЦеныПрайсЛиста.РегионРаботы = &РегионРаботы)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЦеныПартии КАК ЦеныПартии
	|		ПО ВТТоварИПартияДляПечати.Партия = ЦеныПартии.Владелец
	|			И (ЦеныПартии.ТипЦены = &ТипЦены)
	|			И (ЦеныПартии.РегионРаботы = &РегионРаботы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварИЦенаПартииПрайсЛиста.Товар,
	|	МИНИМУМ(втТоварИЦенаПартииПрайсЛиста.ГоденДо) КАК ГоденДо
	|ПОМЕСТИТЬ втМинимальныеСрокиГодности
	|ИЗ
	|	втТоварИЦенаПартииПрайсЛиста КАК втТоварИЦенаПартииПрайсЛиста
	|
	|СГРУППИРОВАТЬ ПО
	|	втТоварИЦенаПартииПрайсЛиста.Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварИЦенаПартииПрайсЛиста.Товар.Наименование КАК Наименование,
	|	втТоварИЦенаПартииПрайсЛиста.Товар,
	|	втТоварИЦенаПартииПрайсЛиста.ЦенаПартииПрайсЛиста,
	|	втТоварИЦенаПартииПрайсЛиста.Страна,
	|	втТоварИЦенаПартииПрайсЛиста.ГоденДо КАК СрокГодности,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ЕСТЬNULL(ЦенаНоменклатурыСрезПоследних.СпецПредложение, 0)) <= 0
	|			ТОГДА МАКСИМУМ(ВЫБОР
	|						КОГДА ЕСТЬNULL(ЦенаНоменклатурыСрезПоследних.Цена, 0) > 0
	|							ТОГДА ЦенаНоменклатурыСрезПоследних.Цена
	|						ИНАЧЕ втТоварИЦенаПартииПрайсЛиста.ЦенаПартии
	|					КОНЕЦ)
	|		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(ЦенаНоменклатурыСрезПоследних.СпецПредложение, 0))
	|	КОНЕЦ КАК Цена,
	|	втТоварИЦенаПартииПрайсЛиста.Поставщик,
	|	втТоварИЦенаПартииПрайсЛиста.Товар.КраткоеНаименование КАК КраткоеНаименование,
	|	втТоварИЦенаПартииПрайсЛиста.Товар.Производитель.Наименование КАК Производитель
	|ИЗ
	|	втТоварИЦенаПартииПрайсЛиста КАК втТоварИЦенаПартииПрайсЛиста
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦенаНоменклатуры.СрезПоследних(
	|				&Период,
	|				ЦенаПрайсЛиста В
	|					(ВЫБРАТЬ
	|						втТоварИЦенаПартииПрайсЛиста.ЦенаПартииПрайсЛиста
	|					ИЗ
	|						втТоварИЦенаПартииПрайсЛиста КАК втТоварИЦенаПартииПрайсЛиста)) КАК ЦенаНоменклатурыСрезПоследних
	|		ПО втТоварИЦенаПартииПрайсЛиста.ЦенаПартииПрайсЛиста = ЦенаНоменклатурыСрезПоследних.ЦенаПрайсЛиста
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМинимальныеСрокиГодности КАК втМинимальныеСрокиГодности
	|		ПО втТоварИЦенаПартииПрайсЛиста.Товар = втМинимальныеСрокиГодности.Товар
	|			И втТоварИЦенаПартииПрайсЛиста.ГоденДо = втМинимальныеСрокиГодности.ГоденДо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦенаНоменклатуры.СрезПоследних(
	|				&ПериодВчера,
	|				ЦенаПрайсЛиста В
	|					(ВЫБРАТЬ
	|						втТоварИЦенаПартииПрайсЛиста.ЦенаПартииПрайсЛиста
	|					ИЗ
	|						втТоварИЦенаПартииПрайсЛиста КАК втТоварИЦенаПартииПрайсЛиста)) КАК ЦенаНоменклатурыСрезПоследнихВчера
	|		ПО втТоварИЦенаПартииПрайсЛиста.ЦенаПартииПрайсЛиста = ЦенаНоменклатурыСрезПоследнихВчера.ЦенаПрайсЛиста
	|
	|СГРУППИРОВАТЬ ПО
	|	втТоварИЦенаПартииПрайсЛиста.Товар,
	|	втТоварИЦенаПартииПрайсЛиста.ЦенаПартииПрайсЛиста,
	|	втТоварИЦенаПартииПрайсЛиста.Товар.Наименование,
	|	втТоварИЦенаПартииПрайсЛиста.Поставщик,
	|	втТоварИЦенаПартииПрайсЛиста.Страна,
	|	втТоварИЦенаПартииПрайсЛиста.ГоденДо,
	|	втТоварИЦенаПартииПрайсЛиста.Товар.КраткоеНаименование,
	|	втТоварИЦенаПартииПрайсЛиста.Товар.Производитель.Наименование
	|
	|ИМЕЮЩИЕ
	|	(ВЫБОР
	|			КОГДА МАКСИМУМ(ЕСТЬNULL(ЦенаНоменклатурыСрезПоследних.СпецПредложение, 0)) <= 0
	|				ТОГДА МАКСИМУМ(ВЫБОР
	|							КОГДА ЕСТЬNULL(ЦенаНоменклатурыСрезПоследних.Цена, 0) > 0
	|								ТОГДА ЦенаНоменклатурыСрезПоследних.Цена
	|							ИНАЧЕ втТоварИЦенаПартииПрайсЛиста.ЦенаПартии
	|						КОНЕЦ)
	|			ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(ЦенаНоменклатурыСрезПоследних.СпецПредложение, 0))
	|		КОНЕЦ <> ВЫБОР
	|			КОГДА МАКСИМУМ(ЕСТЬNULL(ЦенаНоменклатурыСрезПоследнихВчера.СпецПредложение, 0)) <= 0
	|				ТОГДА МАКСИМУМ(ВЫБОР
	|							КОГДА ЕСТЬNULL(ЦенаНоменклатурыСрезПоследнихВчера.Цена, 0) > 0
	|								ТОГДА ЦенаНоменклатурыСрезПоследнихВчера.Цена
	|							ИНАЧЕ втТоварИЦенаПартииПрайсЛиста.ЦенаПартии
	|						КОНЕЦ)
	|			ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(ЦенаНоменклатурыСрезПоследних.СпецПредложение, 0))
	|		КОНЕЦ
	|		ИЛИ &ПечатьЦенниковПоМассиву
	|		ИЛИ &ПечататьВсе) И
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ЕСТЬNULL(ЦенаНоменклатурыСрезПоследних.СпецПредложение, 0)) <= 0
	|			ТОГДА МАКСИМУМ(ВЫБОР
	|						КОГДА ЕСТЬNULL(ЦенаНоменклатурыСрезПоследних.Цена, 0) > 0
	|							ТОГДА ЦенаНоменклатурыСрезПоследних.Цена
	|						ИНАЧЕ втТоварИЦенаПартииПрайсЛиста.ЦенаПартии
	|					КОНЕЦ)
	|		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(ЦенаНоменклатурыСрезПоследних.СпецПредложение, 0))
	|	КОНЕЦ > 0";
	МассивНоменклатурыДляПечатиЦенников = ТоварыДляПечатиЦенников.Выгрузить().ВыгрузитьКолонку("Товар");
	ПечатьЦенниковПоМассиву = Ложь;
	Если МассивНоменклатурыДляПечатиЦенников.Количество() > 0 тогда
		ПечатьЦенниковПоМассиву = Истина;
	КонецЕсли;
	Запрос.УстановитьПараметр("Склад", ПараметрыСеанса.ОсновнойСклад);
	Запрос.УстановитьПараметр("Зона", ?(ЗначениеЗаполнено(ЗонаХранения),Строка(ЗонаХранения),Неопределено));
	Запрос.УстановитьПараметр("Стеллаж", ?(ЗначениеЗаполнено(СтеллажХранения),Строка(СтеллажХранения),Неопределено));
	Запрос.УстановитьПараметр("Ячейка", ?(ЗначениеЗаполнено(ЯчейкаХранения),Строка(ЯчейкаХранения),Неопределено));
	Запрос.УстановитьПараметр("ВидНоменклатуры", ?(ЗначениеЗаполнено(ВидНоменклатуры),ВидНоменклатуры,Неопределено));
	Запрос.УстановитьПараметр("ТипЦены", Объект.ТипЦены);
	Запрос.УстановитьПараметр("РегионРаботы", Объект.РегионРаботы); 
	Запрос.УстановитьПараметр("Период", ТекущаяДата()); 
	Запрос.УстановитьПараметр("ПечататьВсе", ПечататьВсе); 
	Запрос.УстановитьПараметр("МассивНоменклатурыДляПечати",МассивНоменклатурыДляПечатиЦенников);
	Запрос.УстановитьПараметр("ПечатьЦенниковПоМассиву",ПечатьЦенниковПоМассиву);
	Запрос.УстановитьПараметр("ПериодВчера",ТекущаяДата()-24*3600);
	Запрос.УстановитьПараметр("ГоденДоПереоценка",ТекущаяДата()+3600*24*60);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		НоваяСтрока = ТабЗнач.Добавить();
		НоваяСтрока.Наименование=Выборка.Наименование;
		НоваяСтрока.Цена=Формат(Выборка.Цена,"ЧН=0; ЧГ=");
		НоваяСтрока.Страна= СокрЛП(Выборка.Страна);
		НоваяСтрока.СрокГодности=Выборка.СрокГодности;
		НоваяСтрока.Поставщик=СокрЛП(Выборка.Поставщик);
		НоваяСтрока.Товар = Выборка.Товар;
		НоваяСтрока.Производитель = Выборка.Производитель;
	КонецЦикла; 
	
	Если ТабЗнач.Количество()=0 Тогда 
		Сообщить("Нет строк для печати!");
		Возврат Неопределено;
	КонецЕсли;	
	
	Если ТабЧастьОбработки <> неопределено и ПечатьЦенниковНаПринтер тогда
		Для каждого строка из ТабЗнач цикл
			НоваяСтрока = ТабЧастьОбработки.Добавить();
			НоваяСтрока.Цена=строка.Цена;
			НоваяСтрока.Страна= СокрЛП(строка.Страна);
			НоваяСтрока.СрокГодности=строка.СрокГодности;
			НоваяСтрока.Поставщик=СокрЛП(строка.Поставщик);
			НоваяСтрока.Товар = строка.Товар;
			НоваяСтрока.Производитель = строка.Производитель;	
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;
	
	
	
	
	Для каждого СтрокаТЗ Из ТабЗнач Цикл
		
		СтруктураЦенник = новый Структура("Фирма,Товар,Цена,Страна,СрокГодности,Поставщик");
		СтруктураЦенник.Фирма = "ООО ЕАПТЕКА";
		СтруктураЦенник.Товар = СтрокаТЗ.Наименование;
		СтруктураЦенник.Цена = Формат(СтрокаТЗ.Цена,"ЧН=0; ЧГ=") +" руб.";
		СтруктураЦенник.СТрана = "Страна: "+СтрокаТЗ.Страна;
		СтруктураЦенник.СрокГодности = "Срок годности:"+Формат(СтрокаТЗ.СрокГодности,"ДФ=dd.MM.yyyy");
		СтруктураЦенник.Поставщик = "Поставщик:"+СокрЛП(СтрокаТЗ.Поставщик);
		
		
		
		Результат.Добавить(СтруктураЦенник);
		СтруктураЦенник = "";
		
	КонецЦикла;
	
	
	
	Возврат Результат;
	
КонецФункции

#Область РаботаСЭквайринговымТерминаломIngenico

&НаКлиенте

// ЕМ **************************************

&НаКлиенте
Процедура ВыполнитьОперациюПоПлатежнойКарте(НомерКарты, Сумма, НомерЧека, СсылочныйНомер, КодАвторизации, ТипТранзакции)
	
	ЭтаФорма.Доступность = Ложь; //При необходимости можно заблокировать интерфейс пользователя.
	
	ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыОперации.ТипТранзакции  = ТипТранзакции;//"AuthorizeSales";
	ПараметрыОперации.СуммаОперации  = Сумма;
	ПараметрыОперации.НомерЧека      = НомерЧека;
	//ПараметрыОперации.СсылочныйНомер = СсылочныйНомер;
	
	ОтображатьСообщения = Ложь; //Не отображать сообщения об ошибке. Сообщения на экран выводиться в процедуре обработки оповещения.
	
	Оповещение = Новый ОписаниеОповещения("ОперацияПоПлатежнойКартеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение, УникальныйИдентификатор, 
	Объект.ЭквайринговыйТерминал, 
	Объект.ККТ,    // ссылка на справочник подкл. оборуд - касса
	ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПоПлатежнойКартеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина; //При необходимости разблокируем интерфейс пользователя.
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'Операция завершена.'");
		Сообщить(ТекстСообщения); 
		
		КодАвторизации = ?(РезультатВыполнения.Свойство("КодАвторизации"), РезультатВыполнения.КодАвторизации, "");
		Объект.СсылочныйНомер = ?(РезультатВыполнения.Свойство("СсылочныйНомер"), РезультатВыполнения.СсылочныйНомер, "");
		НомерКарты = ?(РезультатВыполнения.Свойство("НомерКарты"), РезультатВыполнения.НомерКарты, "");
		НомерЧека = ?(РезультатВыполнения.Свойство("НомерЧека"), РезультатВыполнения.НомерЧека, "");
		
		ЧекЗаполнен = Ложь;
		Попытка
			ЧекЗаполнен = ЗаполнитьДокументЧекПоБезналу(Объект.ЧекСсылка, Объект.СсылочныйНомер, КодАвторизации, НомерКарты);
		Исключение
			ЧекЗаполнен = Ложь;
			Сообщить("Не удалось заполнить чек");
		КонецПопытки;
		
		Если ЧекЗаполнен Тогда
			ФУ_НапечататьЧекПоШаблону();
		КонецЕсли;
		
	Иначе 
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

//*************************************** ЕМ
#КонецОбласти

// ЕМ ********* Чек *****************************
#Область ККТ

&НаКлиенте
Процедура ДействияПослеПечатиЧека()
	
	// ЕМ *************************************
	Если ЗначениеЗаполнено(НомерКПК) Тогда
		ТекНомерКПК = НомерКПК;
	Иначе    // касса не фискализирована
		ТекНомерКПК = "00001";
	КонецЕсли; 
	//************************************* ЕМ 
	ПровестиДокументЧек(Объект.ЧекСсылка, ТекНомерКПК);
	
	Если НЕ ЭтаФорма.ВозвратПродажи тогда
		Если ПодключениеСМС тогда
			ФормаТелефона = ПолучитьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВводаТелефона",Новый Структура("Заголовок,Пояснение","Ввод телефона для промокода","Предложите клиенту получить промо код на первый заказ через мобильное приложение."+Символы.ПС+"Скидка на 250 рублей при заказе от 2000 рублей"),ЭтаФорма,Истина);
			Телефон = ФормаТелефона.ОткрытьМодально();
			Если Телефон <> неопределено тогда
				ОтправитьСМСПромоВФоне(Объект.ЧекСсылка,Телефон,Объект.СотрудникСсылка);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	Объект.СуммаПокупателя=0;
	
	
	Если ЭтаФорма.ВозвратПродажи Тогда 
		ЭтаФорма.ВозвратПродажи = Ложь;
	КонецЕсли;
	
	Объект.rrn="";
	Объект.КодАвторизации="";
	
	Объект.СтрокаПоиск="";
	
	ВывестиСуммуСдачи();
	Элементы.ПробитьЧек.Доступность = МожноПробитьЧек();
	
	// декорация СуммаВКассе
	РасчетСуммаНаличныеКасса();
	ЭтаФорма.ОплатаКартой = Ложь;
	
	Элементы.ГруппаАстраЗеника.Видимость = Ложь;
	
	ЭтаФорма.ЧекВозвратСсылка = ПредопределенноеЗначение("Документ.Чеки.ПустаяСсылка");
	ОтменитьСканированиеАстраЗеника();
	ОчиститьЧек();
	
КонецПроцедуры

&НаСервере	
Функция ПолучитьШаблонЧека()
	
	// Общие параметры чека
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	// Параметры установлены по умолчанию.
	ТипРасчета = ?(НЕ ЭтаФорма.ВозвратПродажи,
					Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств,
					Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств);
	ОбщиеПараметры.ТипРасчета = ТипРасчета;
	ОбщиеПараметры.Электронно = Ложь;
	
	ОбщиеПараметры.ПокупательEmail = Неопределено;
	ОбщиеПараметры.ПокупательНомер = Неопределено;
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.Кассир          = Объект.СотрудникФИО;
	
	СистемаНалогообложения = ККМФирма.СистемаНалогообложения;
	ОбщиеПараметры.СистемаНалогообложения = СистемаНалогообложения;
	ОбщиеПараметры.ОрганизацияНазвание = ККМФирма.ПолнНаименование;
	ОбщиеПараметры.ОрганизацияИНН = ККМФирма.ИНН;
	//ОбщиеПараметры.ОрганизацияКПП = "770901001";
	
// ЕМ **************************************************	
	
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = НомерЧека;
	ОбщиеПараметры.НомерСмены     = НомерСмены;
//************************************************** ЕМ 	
	
	Отправляет1СSMS = Ложь;
	Отправляет1СEmail = Ложь;
	НесколькоВидовОплат = Ложь;
	ОбщиеПараметры.Отправляет1СSMS   = Отправляет1СSMS;   // SMS отправляет средствами 1C.
	ОбщиеПараметры.Отправляет1СEmail = Отправляет1СEmail; // Email отправляет средствами 1C.
	
	ОбщиеПараметры.АдресРасчетов  = ККМФирма.ЮридическийАдрес;    //"г.Москва, Дмитровское ш. д.9";
	//ОбщиеПараметры.МестоРасчетов  =     //"Торговый островок на 1 этаже";
	
	// Фискальная строка
	Для Каждого СтрокаТЧ Из Объект.Чек Цикл
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		СтрокаПозицииЧека.Наименование = СокрЛП(СтрокаТЧ.Товар);
		СтрокаПозицииЧека.Количество   = СтрокаТЧ.Количество;
		СтрокаПозицииЧека.Цена         = СтрокаТЧ.Цена;
		СтрокаПозицииЧека.Сумма        = СтрокаТЧ.Сумма;
		СтрокаПозицииЧека.НомерСекции  = 1;
		СтавкаНДС    = РегистрыСведений.СтавкиНДСПоНоменклатуре.ВернутьСтавкуНДСПоНоменклатуре(СтрокаТЧ.Товар, ТекущаяДата(), Ложь);
		СтавкаНДСКод = СтавкаНДС.Код;
		СтрокаПозицииЧека.СтавкаНДС    = СтавкаНДСКод;
		//СтрокаПозицииЧека.СуммаНДС = Окр(СтрокаПозицииЧека.Сумма/(100 + СтавкаНДСКод) * СтавкаНДСКод, 2);

		//Если ПризнакиСпособаРасчета Тогда
		//	СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
		//КонецЕсли;
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	КонецЦикла;
	
		СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты(); 
		СтрокаОплаты.Сумма = Объект.СуммаПокупателя; 
		СтрокаОплаты.ТипОплаты = ?(ОплатаКартой,
							ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"),
							ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"));
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	//КонецЕсли;
	//****************************************************
	
	Возврат ОбщиеПараметры;
	
КонецФункции

&НаКлиенте
Процедура ФУ_НапечататьЧекПоШаблону()
	
	ФискальноеУстройство = Объект.ККТ; //ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = ПолучитьШаблонЧека();
	
	МенеджерОборудованияКлиентСервер.ПровестиФорматоЛогическийКонтроль(ПараметрыОперации, ФискальноеУстройство); 
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_КомандаВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ОчиститьСообщения();
	//Элементы.ФискальноеУстройство.Доступность = Истина;
	
	НомерСмены  = Неопределено; 
	НомерЧека   = Неопределено;
	СтатусСмены = Неопределено;
	ФискальныйПризнак = Неопределено;
	СайтПроверкиОФД   = Неопределено;
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='Операция завершена.'");
		Если РезультатВыполнения.ВыходныеПараметры.Количество() > 0 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + РезультатВыполнения.ВыходныеПараметры[0];
			Если РезультатВыполнения.ВыходныеПараметры.Количество() > 1 Тогда
				НомерСмены = РезультатВыполнения.ВыходныеПараметры[0]; 
				НомерКПК  = РезультатВыполнения.ВыходныеПараметры[1];
				Если РезультатВыполнения.ВыходныеПараметры.Количество() > 2 Тогда
					СтатусСмены  = РезультатВыполнения.ВыходныеПараметры[2];
				КонецЕсли;
				Если РезультатВыполнения.ВыходныеПараметры.Количество() > 4 Тогда
					ФискальныйПризнак  = РезультатВыполнения.ВыходныеПараметры[4];
				КонецЕсли;
				Если РезультатВыполнения.ВыходныеПараметры.Количество() > 5 Тогда
					СайтПроверкиОФД  = РезультатВыполнения.ВыходныеПараметры[5];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДействияПослеПечатиЧека();
		
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	РасчетСуммаНаличныеКасса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЧек()
	
	ЗаписатьФактОчисткиЧека();
	Объект.ЧекВсе.Очистить();
	Объект.Чек.Очистить();
	Объект.ЧекОтображение.Очистить();
	ПоискТовара.Очистить();
	ПоискТовараАналог.Очистить();
	Объект.СуммаПокупателя=0;
	Объект.rrn="";
	Объект.КодАвторизации="";
	ЭтаФорма.ВозвратПродажи = Ложь;
	ЧекВозвратСсылка = ПредопределенноеЗначение("Документ.Чеки.ПустаяСсылка");
	ОтменитьСканированиеАстраЗеника();
	ЭтаФорма.ОплатаКартой=Ложь;
	ПоказатьНаДисплее("Добро пожаловать","");
	Если Элементы.ГруппаЧекСдача.Видимость Тогда		
		Элементы.ГруппаАстраЗеника.Видимость = Ложь;	
	КонецЕсли;
	ОбновитьОтображениеЧека();
	
КонецПроцедуры

#КонецОбласти
//************** Чек ************************ ЕМ 

#Область ФискальныйРегистратор

//&НаКлиенте
//Процедура ФискальныйРегистраторАннулировать(fr = неопределено, slip= неопределено)
//	
//	Если Объект.ТипККМ = ПредопределенноеЗначение("Перечисление.ТипККМ.ШТРИХ_М") тогда
//		FR.Password=30;
//		FR.SysAdminCancelCheck();
//		PaperStatus();
//	Иначе
//		FR_atol.CancelCheck();
//	КонецЕсли;
//	ПечатьКвитанцииSlip(FR, Slip);
//	
//КонецПроцедуры

//&НаКлиенте
//Функция ПечатьКвитанцииSlip(FR, Slip)
//	Перем Результат, ВсегоСтрок;
//	
//	Результат	= Ложь;
//	ВсегоСтрок	= 0;	
//	
//	Если Slip <> Неопределено Тогда
//		ВсегоСтрок = СтрЧислоСтрок(Slip);
//		
//		Для Сч = 1 По ВсегоСтрок Цикл
//			Стр = СтрПолучитьСтроку(Slip, Сч);
//			Если Найти(Стр,"[cut]") > 0 Тогда
//				СтрокаОбрезки = СтрЗаменить(Стр, "[cut]", "");
//				
//				// Выполняем обрезание
//				НапечататьСтроку("");
//				НапечататьСтроку("");
//				НапечататьСтроку("");
//				Если Объект.ТипККМ = ПредопределенноеЗначение("Перечисление.ТипККМ.ШТРИХ_М") тогда
//					FR.Password=30;
//					FR.CutType=1; //Признак типа отрезки чека: TRUE – неполная отрезка, FALSE – полная отрезка.
//					FR.CutCheck();
//				Иначе
//					FR_atol.Password=30;
//					FR_atol.FullCut();
//				КонецЕсли;
//				
//				//Попытка печати СтрокаОбрезки
//				Если СтрДлина(СтрокаОбрезки) > 0 Тогда
//					НапечататьСтроку(СтрокаОбрезки);
//				КонецЕсли;
//			Иначе
//				НапечататьСтроку(Стр);
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//	Если ВсегоСтрок>0 Тогда
//		Для Сч = 1 По 5 Цикл 
//			НапечататьСтроку("");
//		КонецЦикла;
//		Если Объект.ТипККМ = ПредопределенноеЗначение("Перечисление.ТипККМ.ШТРИХ_М") тогда
//			FR.Password=30;
//			FR.CutType=0; //Признак типа отрезки чека: TRUE – неполная отрезка, FALSE – полная отрезка.
//			FR.CutCheck();
//		Иначе
//			FR_atol.Password=30;
//			FR_atol.PartialCut();
//		КонецЕсли;
//		
//	Иначе
//		//**Контрольная печать строки**
//		НапечататьСтроку("");
//	КонецЕсли;
//	
//	Возврат Результат;
//КонецФункции

#КонецОбласти


//Хортюк С.Б. 22.03.2017 АстраЗенника(
#Область Скидка_АстраЗенника
&НаКлиенте
Функция АлгоритмЛуна(ШтрКод) Экспорт
	Попытка
		N = СтрДлина(ШтрКод);    
		sum = 0;
		Для i = 1 по N-1 Цикл
			p = Сред(ШтрКод,N-i,1);
			if (i/2 <> Цел(i/2) ) then
				p = 2*p;
				if (p > 9) then 
					p = p - 9;
				endif;
			endif;
			sum = sum + p;   
		КонецЦикла;
		sum = (sum/10) - Цел(sum/10);
		if (sum <> 0) then 
			sum = 10 - sum*10;
		endif;      
		Если Прав(ШтрКод,1) = Формат(sum,"ЧН=0; ЧГ=") тогда
			Возврат истина;
		Иначе
			Сообщить("Карта не прошла проверку на валидность!");
			Возврат Ложь;
		КонецЕсли;
	Исключение
		Сообщить("Карта не прошла проверку на валидность!");
		Возврат Ложь;
	КонецПопытки;
КонецФункции 

&НаСервере
Процедура ПолучитьСтруктуруОписанияКартыАстаЗеник(ШтрихКод,ПрограммаБезБуклета = Ложь,ИмяРеквизитаЭтоНоваяКарта = "")
	ШтрихКодПроверка = Лев(ШтрихКод,18);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	astro_card_types.id КАК id,
	|	astro_card_types.description КАК description,
	|	astro_card_types.code КАК code,
	|	t_astro_used_booklets.check_date КАК ДатаИспользования,
	|	astro_card_types.project КАК project,
	|	ВЫБОР
	|		КОГДА astro_card_types.description ПОДОБНО ""%Booklet%""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Буклет,
	|	astro_card_types.project.БезБуклета как БезБуклета
	|ИЗ
	|	РегистрСведений.astro_card_types КАК astro_card_types
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.t_astro_used_booklets КАК t_astro_used_booklets
	|		ПО (t_astro_used_booklets.booklet_barcode = &ШК)
	|			И (НЕ t_astro_used_booklets.Удалить)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.astro_card_block КАК astro_card_block
	|		ПО (astro_card_block.card_number = &ШК)
	|			И (&ТекущаяДата МЕЖДУ astro_card_block.stop_date И astro_card_block.reactivation_date)
	|ГДЕ
	|	&ШтрихКодПроверка МЕЖДУ astro_card_types._from И astro_card_types.to
	|	И astro_card_block.id ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("ШтрихКодПроверка",ШтрихКодПроверка);
	Запрос.УстановитьПараметр("ШК",ШтрихКод);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		Если Выборка.Буклет тогда  
			ДатаИспользованияБуклета = Выборка.ДатаИспользования;
			Если ДатаИспользованияБуклета <> null тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Буклет "+Прав(ШтрихКод,10)+" уже был использован "+Формат(ДатаИспользованияБуклета,"ДФ='d MMMM yyyy'")+" !";
				Сообщение.Сообщить();
				Прервать;
			КонецЕсли;
		КонецЕсли;
		МассивСтрок = ТаблицаСкидочныхКарт.НайтиСтроки(Новый Структура("project,Буклет",Выборка.project,Выборка.Буклет));
		
		Для каждого СтрокаКарты из МассивСтрок цикл
			ТаблицаСкидочныхКарт.Удалить(СтрокаКарты);
		КонецЦикла;
		
		НоваяСтрока = ТаблицаСкидочныхКарт.Добавить();
		ПрограммаБезБуклета = Выборка.БезБуклета; 
		НоваяСтрока.НомерКарты = ШтрихКод;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
		МассивСтрок = ЭлементыФормыСкидочныеПрограммы.НайтиСтроки(Новый Структура("project,Роль",Выборка.project,?(Выборка.Буклет,"Буклет","Карта")));
		Для каждого строка из МассивСтрок цикл
			ЭтаФорма[строка.ИмяРеквизита] = прав(ШтрихКод,10);
		КонецЦикла;
		МассивСтрок = ЭлементыФормыСкидочныеПрограммы.НайтиСтроки(Новый Структура("project,Роль",Выборка.project,"ЭтоНоваяКарта"));
		
		Для каждого строка из МассивСтрок цикл
			Если Выборка.Буклет тогда
				ЭтаФорма[Строка.ИмяРеквизита] = Истина;
			КонецЕсли;
			ИмяРеквизитаЭтоНоваяКарта = Строка.ИмяРеквизита;
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьАстразеник()
	
	МассивПросканированныхПроектов = ТаблицаСкидочныхКарт.Выгрузить(,"Project");	
	МассивПросканированныхПроектов.Свернуть("Project");
	МассивПросканированныхПроектов = МассивПросканированныхПроектов.ВыгрузитьКолонку("Project");
	
	ТаблицаПроектовЭлементы = ЭлементыФормыСкидочныеПрограммы.Выгрузить();
	
	МассивПоректов = ТаблицаПроектовЭлементы.Скопировать(,"Project");
	МассивПоректов.Свернуть("Project");
	МассивПоректов = МассивПоректов.ВыгрузитьКолонку("Project");
	
	Для каждого Проект из МассивПоректов цикл
		
		СтраницаПроекта = ТаблицаПроектовЭлементы.НайтиСтроки(Новый Структура("Project,Родитель",Проект,"СкидочныеПрограммы"))[0].ИмяЭлемента;	  
		
		Если МассивПросканированныхПроектов.Найти(Проект)<> неопределено тогда
			Элементы[СтраницаПроекта].Видимость = Истина;	
		Иначе
			Элементы[СтраницаПроекта].Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	Элементы.АстраЗеникаОтменитьСканированиеКарты.Видимость = МассивПросканированныхПроектов.Количество() <> 0 и не ЭтаФорма.ВозвратПродажи;	
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуСкидкиАстраЗеникаПоЧеку()
	
	Если Объект.Чек.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСкидкиАстраЗеника.Очистить();
	
	Для каждого строка из Объект.Чек цикл
		Строка.Сумма = Строка.Цена*Строка.Количество;
		Строка.Скидка = 0;
		Строка.Всего = Строка.Сумма;
	КонецЦикла;
	
	ТаблицаПараметровСкидки = ТаблицаСкидочныхКарт.Выгрузить(,"НомерКарты,project,Буклет,code");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПараметровСкидки.НомерКарты,
	|	ТаблицаПараметровСкидки.Буклет,
	|	ВЫРАЗИТЬ(ТаблицаПараметровСкидки.project КАК Справочник.СкидочныеПрограммыПоКарте) КАК project,
	|	ТаблицаПараметровСкидки.code
	|ПОМЕСТИТЬ ТаблицаПараметровСкидки
	|ИЗ
	|	&ТаблицаПараметровСкидки КАК ТаблицаПараметровСкидки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Чек.НомерСтроки,
	|	ВЫРАЗИТЬ(Чек.Партия КАК Справочник.Партии) КАК Партия,
	|	Чек.Количество,
	|	Чек.Цена,
	|	Чек.Товар
	|ПОМЕСТИТЬ втЧек
	|ИЗ
	|	&Чек КАК Чек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЧек.НомерСтроки,
	|	втЧек.Партия,
	|	втЧек.Количество,
	|	втЧек.Цена,
	|	втЧек.Товар КАК Номенклатура,
	|	МАКСИМУМ(ЗаводскиеШК.Наименование) КАК ШтрихКод,
	|	ЕСТЬNULL(СтавкиНДСПоНоменклатуреСрезПоследних.СтавкаНДС.Ставка, 0) КАК СтавкаНДС
	|ПОМЕСТИТЬ втРазвернуто
	|ИЗ
	|	втЧек КАК втЧек
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаводскиеШК КАК ЗаводскиеШК
	|		ПО втЧек.Партия.Владелец = ЗаводскиеШК.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСПоНоменклатуре.СрезПоследних(
	|				&Период,
	|				Товар В
	|					(ВЫБРАТЬ
	|						втЧек.Партия.Владелец
	|					ИЗ
	|						втЧек КАК втЧек)) КАК СтавкиНДСПоНоменклатуреСрезПоследних
	|		ПО (СтавкиНДСПоНоменклатуреСрезПоследних.Товар = втЧек.Партия.Владелец)
	|
	|СГРУППИРОВАТЬ ПО
	|	втЧек.Партия,
	|	втЧек.НомерСтроки,
	|	втЧек.Количество,
	|	втЧек.Цена,
	|	втЧек.Товар,
	|	ЕСТЬNULL(СтавкиНДСПоНоменклатуреСрезПоследних.СтавкаНДС.Ставка, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРазвернутоБезНДС.НомерСтроки,
	|	втРазвернутоБезНДС.Партия,
	|	1 КАК Количество,
	|	втРазвернутоБезНДС.Цена,
	|	втРазвернутоБезНДС.Номенклатура,
	|	втРазвернутоБезНДС.ШтрихКод,
	|	втРазвернутоБезНДС.СтавкаНДС,
	|	втРазвернутоБезНДС.Цена * ЕСТЬNULL(astro_card_rules.discount, 0) / 100 КАК Скидка,
	|	ТаблицаПараметровСкидки.project,
	|	astro_card_rules.discount КАК ПроцентСкидки,
	|	ТаблицаПараметровСкидки.НомерКарты
	|ПОМЕСТИТЬ втБуклет
	|ИЗ
	|	втРазвернуто КАК втРазвернутоБезНДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.astro_card_rules КАК astro_card_rules
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПараметровСкидки КАК ТаблицаПараметровСкидки
	|			ПО astro_card_rules.project = ТаблицаПараметровСкидки.project
	|				И astro_card_rules.card_type = ТаблицаПараметровСкидки.code
	|				И (ТаблицаПараметровСкидки.Буклет)
	|		ПО втРазвернутоБезНДС.ШтрихКод = astro_card_rules.sku
	|ГДЕ
	|	&Период МЕЖДУ astro_card_rules._from И astro_card_rules.to
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(втБуклет.Скидка) КАК Скидка,
	|	втБуклет.project
	|ПОМЕСТИТЬ втБуклетСкидка
	|ИЗ
	|	втБуклет КАК втБуклет
	|
	|СГРУППИРОВАТЬ ПО
	|	втБуклет.project
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	втБуклет.НомерСтроки,
	|	втБуклет.Партия,
	|	втБуклет.Количество,
	|	втБуклет.Цена,
	|	втБуклет.Номенклатура,
	|	втБуклет.ШтрихКод,
	|	втБуклет.СтавкаНДС,
	|	втБуклет.project,
	|	втБуклет.ПроцентСкидки,
	|	втБуклет.НомерКарты
	|ПОМЕСТИТЬ втБуклетИтог
	|ИЗ
	|	втБуклетСкидка КАК втБуклетСкидка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втБуклет КАК втБуклет
	|		ПО (втБуклет.Скидка = втБуклетСкидка.Скидка)
	|			И втБуклетСкидка.project = втБуклет.project
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втБуклетИтог.НомерСтроки,
	|	втБуклетИтог.Партия,
	|	втБуклетИтог.Количество,
	|	втБуклетИтог.Цена,
	|	втБуклетИтог.Номенклатура,
	|	втБуклетИтог.ШтрихКод,
	|	втБуклетИтог.СтавкаНДС,
	|	втБуклетИтог.ПроцентСкидки КАК ПроцентСкидки,
	|	1 КАК Буклет,
	|	ВЫРАЗИТЬ(втБуклетИтог.Номенклатура КАК Справочник.Номенклатура).ID_77 КАК ИДНоменклатуры,
	|	втБуклетИтог.project,
	|	втБуклетИтог.НомерКарты
	|ИЗ
	|	втБуклетИтог КАК втБуклетИтог
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втРазвернуто.НомерСтроки,
	|	втРазвернуто.Партия,
	|	втРазвернуто.Количество - ЕСТЬNULL(втБуклетИтог.Количество, 0),
	|	втРазвернуто.Цена,
	|	втРазвернуто.Номенклатура,
	|	втРазвернуто.ШтрихКод,
	|	втРазвернуто.СтавкаНДС,
	|	astro_card_rules.discount,
	|	0,
	|	ВЫРАЗИТЬ(втРазвернуто.Номенклатура КАК Справочник.Номенклатура).ID_77,
	|	ТаблицаПараметровСкидки.project,
	|	ТаблицаПараметровСкидки.НомерКарты
	|ИЗ
	|	втРазвернуто КАК втРазвернуто
	|		ЛЕВОЕ СОЕДИНЕНИЕ втБуклетИтог КАК втБуклетИтог
	|		ПО втРазвернуто.НомерСтроки = втБуклетИтог.НомерСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.astro_card_rules КАК astro_card_rules
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПараметровСкидки КАК ТаблицаПараметровСкидки
	|			ПО astro_card_rules.card_type = ТаблицаПараметровСкидки.code
	|				И astro_card_rules.project = ТаблицаПараметровСкидки.project
	|				И (&Период МЕЖДУ astro_card_rules._from И astro_card_rules.to)
	|		ПО втРазвернуто.ШтрихКод = astro_card_rules.sku
	|ГДЕ
	|	втРазвернуто.Количество - ЕСТЬNULL(втБуклетИтог.Количество, 0) > 0";
	Запрос.УстановитьПараметр("ТаблицаПараметровСкидки",ТаблицаПараметровСкидки);
	Запрос.УстановитьПараметр("Период",ТекущаяДата());
	Запрос.УстановитьПараметр("Чек", Объект.Чек.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НомерСтроки = 1;
	Пока Выборка.Следующий() Цикл
		Строка = ТаблицаСкидкиАстраЗеника.Добавить();
		Строка.НомерСтрокиЧека = Выборка.НомерСтроки;
		Строка.idТовара = Выборка.ИДНоменклатуры;
		Строка.ШтрихКод =  Выборка.ШтрихКод;
		Строка.Буклет =  Выборка.Буклет;
		Строка.НомерКарты = Выборка.НомерКарты;	
		Строка.ПроцентСкидки = Выборка.ПроцентСкидки;
		Строка.Количество = Выборка.Количество;
		Строка.Цена = Формат(Выборка.Цена,"ЧГ=");
		Строка.Сумма = Формат(Строка.Количество*Строка.Цена,"ЧГ="); 
		Строка.Скидка = Формат(Строка.Сумма - Строка.Количество*(Строка.Цена-Строка.Цена*Строка.ПроцентСкидки/100),"ЧГ=");
		Строка.СтавкаНДС = Выборка.СтавкаНДС;
		Строка.НомерСтроки = НомерСтроки; 
		Строка.project = Выборка.project;
	КонецЦикла;
	
	Для каждого строка из Объект.Чек цикл
		Строки = ТаблицаСкидкиАстраЗеника.НайтиСтроки(Новый Структура("НомерСтрокиЧека",Строка(Строка.НомерСтроки)));
		Скидка = 0;
		Для каждого СтрокаСкидка из строки цикл
			Скидка = Скидка + Число(СтрокаСкидка.Скидка);
		КонецЦикла;
		Строка.Скидка = Скидка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьСкидкаАстраЗеника()
	
	Если ТаблицаСкидочныхКарт.Количество() > 0 тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура АстраЗеникаОтменитьСканированиеКарты(Команда)
	
	ОтменитьСканированиеАстраЗеника();
	ОбновитьОтображениеЧека();
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСканированиеАстраЗеника()
	
	ТаблицаСкидкиАстраЗеника.Очистить();
	ТаблицаСкидочныхКарт.Очистить();
	Для каждого строка из ЭлементыФормыСкидочныеПрограммы цикл
		Если строка.Роль = "Буклет" или строка.Роль = "Карта"  тогда
			ЭтаФорма[строка.ИмяРеквизита] = "";
		ИначеЕсли строка.Роль = "ЭтоНоваяКарта" тогда
			ЭтаФорма[строка.ИмяРеквизита] = Ложь;
		КонецЕсли;
	КонецЦикла;
	Для каждого строка из Объект.Чек цикл
		Строка.Скидка = 0;
		Строка.Сумма = Строка.Цена*Строка.Количество;
	КонецЦикла;
	ВидимостьАстразеник();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПредупреждение_ТоварыПоСкидкеАстразеникиВЧеке()
	СкидочныеПроектыВЧеке = ПроверитьТоварыВЧекеПоАстраЗенике();
	Если СкидочныеПроектыВЧеке.Количество() > 0 тогда
		Текст = "В чеке есть товары по которым есть скидка по картам:";
		Для каждого Наименование из СкидочныеПроектыВЧеке цикл
			Текст = Текст + """"+Наименование+"""" + Символы.ПС;
		КонецЦикла;
		ПоказатьПредупреждение(,Текст+"Предложите клиенту оформить скидочную карту!",10,"Скидочные карты");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьТоварыВЧекеПоАстраЗенике()
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Товар КАК Справочник.Номенклатура) КАК Товар
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	astro_card_rules.project.Наименование КАК Проект
	|ИЗ
	|	втТовары КАК втТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаводскиеШК КАК ЗаводскиеШК
	|		ПО втТовары.Товар = ЗаводскиеШК.Владелец
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.astro_card_rules КАК astro_card_rules
	|		ПО (ЗаводскиеШК.Наименование = astro_card_rules.sku)
	|ГДЕ
	|	НЕ astro_card_rules.project В (&ПросканированныеПроекты)
	|
	|СГРУППИРОВАТЬ ПО
	|	astro_card_rules.project.Наименование";
	Запрос.УстановитьПараметр("Товары",Объект.Чек.Выгрузить(,"Товар"));
	Запрос.УстановитьПараметр("ПросканированныеПроекты",ТаблицаСкидочныхКарт.Выгрузить(,"project").ВыгрузитьКолонку("project"));
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультат.ВыгрузитьКолонку("Проект");
	
КонецФункции

#КонецОбласти

#Область Атол

&НаКлиенте
Процедура ЗакрытиеЧекаККМ()
	
	Если Объект.ТипККМ = ПредопределенноеЗначение("Перечисление.ТипККМ.ШТРИХ_М") тогда
		PaperStatus();
		FR.Password = 30;
		//ТЕСТ!//
		//FR.SysAdminCancelCheck();
		FR.CloseCheck();
		//ТЕСТ!//
		Код=FR.ResultCode;		
		Пока Код <> 0 Цикл		
			Если Код=107 Тогда
				Предупреждение("Ошибка кассы нет бумаги! Вставьте бумагу.",5);
			ИначеЕсли Код=108 Тогда
				Предупреждение("Ошибка кассы нет контрольной ленты! Вставьте бумагу.",5);
			ИначеЕсли Код=80 Тогда	//Идет печать предыдущей команды                   
				Состояние("Идет печать предыдущей команды");
			ИначеЕсли Код=6 Тогда	//ФП в режиме ввода данных
				Состояние("ФП в режиме ввода данных");
			ИначеЕсли Код=163 Тогда	//
				FR.EKLZInterrupt();
				Состояние("Режим вывода отчета из ЭКЛЗ");
			ИначеЕсли Код=88 Тогда
				FR.ContinuePrint();
			Иначе                   
				Предупреждение("Ошибка кассы: "+FR.ResultCodeDescription+"! Код ошибки "+Строка(Код),5);
			КонецЕсли;
			PaperStatus();
			FR.Password = 30;
			//ТЕСТ!//
			FR.CloseCheck();
			//FR.SysAdminCancelCheck();
			//ТЕСТ!//
			Код=FR.ResultCode;
		КонецЦикла; 
		FR.Password = 30;
		FR.CutType=0; //Признак типа отрезки чека: TRUE – неполная отрезка, FALSE – полная отрезка.
		FR.CutCheck();
	Иначе
		Если ЭтаФорма.ОплатаКартой тогда
			FR_atol.typeClose = 1;
		Иначе
			FR_atol.typeClose = 0;	
		КонецЕсли;
		//ТЕСТ!//
		КодОшибки = FR_atol.CloseCheck();
		//КодОшибки = 0;
		//FR_atol.CancelCheck();
		//ТЕСТ!//
		Пока КодОшибки <> 0 цикл
			Если КодОшибки = -3807 тогда
				Предупреждение("Ошибка кассы нет бумаги! Вставьте бумагу.",5);	
			Иначе
				Предупреждение("Не удалось пробить чек, код ошибки : """+Строка(КодОшибки)+Символы.ПС + FR_atol.ResultDescription);
			КонецЕсли;		
			Если ЭтаФорма.ОплатаКартой тогда
				FR_atol.typeClose = 1;
			Иначе
				FR_atol.typeClose = 0;	
			КонецЕсли;
			//ТЕСТ!//
			КодОшибки =  FR_atol.CloseCheck();
			//КодОшибки = 0;
			//FR_atol.CancelCheck();
			//ТЕСТ!//
		КонецЦикла;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеККМ(НомерККМ)
	Попытка
		FR.Password = 30;
		FR.DrawerNumber = 0;  
		FR.GetECRStatus();  
		
		НомерККМ = FR.SerialNumber;
	Исключение
		
	КонецПопытки;
	
	Если не ЗначениеЗаполнено(НомерККМ) тогда
		Попытка
			FR_atol.GetStatus();
			НомерККМ = Прав(FR_atol.СерийныйНомер,8);
		Исключение
			Возврат;
		КонецПопытки;
		Объект.ТипККМ = ПредопределенноеЗначение("Перечисление.ТипККМ.АТОЛ");	
	Иначе
		Объект.ТипККМ = ПредопределенноеЗначение("Перечисление.ТипККМ.ШТРИХ_М");
	КонецЕсли;
	
КонецПроцедуры

// ЕМ ****************************************************
&НаСервере
// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьСерийныйНомерККТ()
	
	СерийныйНомер = "";
	
	Если ЗначениеЗаполнено(Объект.ККТ) Тогда
		СерийныйНомер = Объект.ККТ.СерийныйНомер;
	КонецЕсли; 

	Возврат СерийныйНомер;

КонецФункции // ПолучитьСерийныйНомерККТ()
//**************************************************** ЕМ 
 
&НаСервере
Функция ПолучитьСтавкиНДС(МассивНоменклатуры)
	
	СоответствиеСтавокНДС = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтавкиНДСПоНоменклатуреСрезПоследних.Товар,
	|	СтавкиНДСПоНоменклатуреСрезПоследних.СтавкаНДС.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СтавкиНДСПоНоменклатуре.СрезПоследних(&Дата, Товар В (&Товар)) КАК СтавкиНДСПоНоменклатуреСрезПоследних";
	Запрос.УстановитьПараметр("Товар",МассивНоменклатуры);
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		СоответствиеСтавокНДС.Вставить(Выборка.Товар,Выборка.Ставка);	
	КонецЦИкла;
	
	Возврат СоответствиеСтавокНДС;
	
КонецФункции

//Хортюк
&НаКлиенте
Процедура ПечатьЦенниковПоШК(Команда)
	Элементы.ТоварыДляПечатиЦенников.Видимость = НЕ Элементы.ТоварыДляПечатиЦенников.Видимость;	
	Элементы.ПоАдреации.Видимость = НЕ Элементы.ТоварыДляПечатиЦенников.Видимость;
	ТоварыДляПечатиЦенников.Очистить();
	ЗонаХранения = 0;
	СтеллажХранения = 0;
	ЯчейкаХранения = 0;
	ВидНоменклатуры = ПредопределенноеЗначение("Справочник.ВидыНоменклатуры.ПустаяСсылка");
КонецПроцедуры

&НаСервере
Процедура ДобавитьТоварВПечатьЧеков(ШК)
	
	НайденныйТовар = ТоварНайтиПоШК(ШК);
	Если ЗначениеЗаполнено(ПоискТовара) тогда
		Если ТоварыДляПечатиЦенников.НайтиСтроки(Новый Структура("Товар", НайденныйТовар)).Количество() = 0 Тогда
			СтрокаПЦ = ТоварыДляПечатиЦенников.Добавить();	
			СтрокаПЦ.Товар = НайденныйТовар;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТоварНайтиПоШК(ШК)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаводскиеШК.Владелец
	|ИЗ
	|	Справочник.ЗаводскиеШК КАК ЗаводскиеШК
	|ГДЕ
	|	ЗаводскиеШК.Наименование = &ШК";
	
	Запрос.УстановитьПараметр("ШК",ШК);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		Возврат Выборка.Владелец;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция НайтиЗаказПоШКМестаЗаказа(ШК,Сообщение)
	
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаклейкиМестЗаказа.Документ.Номер как Заказ
	|ИЗ
	|	Справочник.НаклейкиМестЗаказа КАК НаклейкиМестЗаказа
	|ГДЕ
	|	НаклейкиМестЗаказа.Наименование ПОДОБНО &ШК";
	Запрос.УстановитьПараметр("ШК","%"+ШК+"%");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Сообщение = "Заказ не найден!";
		Возврат "";
	КонецЕсли;
	Выборка = результат.Выбрать();
	Пока Выборка.Следующий() цикл
		возврат СокрЛП(Выборка.Заказ);	
	КонецЦикла;
	
КонецФункции


&НаКлиенте
Процедура ЭТ_ВыполнитьОперациюЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'Операция выполнена успешно.'");
		ЭТНомерСсылкиОперации = ?(РезультатВыполнения.Свойство("СсылочныйНомер"), РезультатВыполнения.СсылочныйНомер, "");
		ЭТНомерКарты = ?(РезультатВыполнения.Свойство("НомерКарты"), РезультатВыполнения.НомерКарты, "");
		ЭТНомерЧека = ?(РезультатВыполнения.Свойство("НомерЧекаЭТ"), РезультатВыполнения.НомерЧекаЭТ, "");
		ЭТКодАвторизации = ?(РезультатВыполнения.Свойство("КодАвторизации"), РезультатВыполнения.КодАвторизации, "");
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ZОтчетТерминал(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭТ_ВыполнитьОперациюЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(ОписаниеОповещения, УникальныйИдентификатор, Объект.ЭквайринговыйТерминал);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗСЯЗаказаНаККМ(Команда)
	Если СтрРазделить(ЗСЯЗаказа,Символы.ПС,Ложь).Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	МассивСтрокПечати = СтрРазделить(ЗСЯЗаказа,Символы.ПС,Истина);
	
	// Общие параметры чека
	//ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
		
	НефискальныйДокумент = Новый Массив();
		
	Для каждого Cтрока из МассивСтрокПечати цикл
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека(Cтрока);
		НефискальныйДокумент.Добавить(СтрокаПозицииЧека);
	
	КонецЦикла;
	//НапечататьСтроку(" ",,Истина);
	
	ФискальноеУстройство = Объект.ККТ;
	
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	//Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	//ПозицииЧека = ПолучитьШаблонЧека().ПозицииЧека;
	НефискальныеДокументы = Новый Массив();
	НефискальныеДокументы.Добавить(НефискальныйДокумент);
	//НефискальныеДокументы.Добавить(ПозицииЧека);
	//
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_ДопКомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПечатьТекстовыхДокументов(ОповещениеПриЗавершении, УникальныйИдентификатор, НефискальныеДокументы, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаКартойНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОплатаКартойЧек(Неопределено);
	Элементы.ПробитьЧек.Доступность = МожноПробитьЧек();
КонецПроцедуры

&НаСервере
Процедура РасформироватьСамовывозыНаСервере()
	
	ДеревоЗаказовКРасформированию = РеквизитФормыВЗначение("РасформированиеСамовывозов");
	СписокСтрокКРасформированию = ДеревоЗаказовКРасформированию.Строки.НайтиСтроки(Новый Структура("Расформировать",Истина));
	Если СписокСтрокКРасформированию.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	МассивЗаказов = Новый Массив;
	Для каждого Строка из СписокСтрокКРасформированию цикл
		МассивЗаказов.Добавить(Строка.Заказ);
	КонецЦикла;
	
	ДокументВозврат = Документы.ВозвратОтПокупателя.СоздатьДокумент();
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Расформирование");
	СтруктураЗаполнения.Вставить("МассивЗаказов",МассивЗаказов);
	СтруктураЗаполнения.Вставить("Дата",ТекущаяДата());
	СтруктураЗаполнения.Вставить("Отдел",ПараметрыСеанса.ОсновнойСклад);
	
	ДокументВозврат.Заполнить(СтруктураЗаполнения);	
	ДокументВозврат.Записать(РежимЗаписиДокумента.Проведение);
	
	ЗСЯЗаказа = "Расформированные заказы:"+Символы.ПС;
	ЗСЯЗаказа = ЗСЯЗаказа + ПолучитьТекстовоеПредставлениеЗСЯЗаказа(МассивЗаказов,Новый Граница(ДокументВозврат.МоментВремени(),ВидГраницы.Исключая));
		
	РасформированиеСамовывозов.ПолучитьЭлементы().Очистить();
КонецПроцедуры

&НаКлиенте
Процедура РасформироватьСамовывозы(Команда)
	Если Вопрос("Расформировать выбранные самовывозы?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
		РасформироватьСамовывозыНаСервере();
		ПечатьЗСЯЗаказаНаККМ("");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗаказовДляРасформированияНаСервере()
	РасформированиеСамовывозов.ПолучитьЭлементы().Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыСборкиЗаказовСрезПоследних.Документ КАК Заказ,
	|	СтатусыСборкиЗаказовСрезПоследних.Статус,
	|	ВЫБОР
	|		КОГДА СтатусыАктуальностиЗаказовСрезПоследних.СтатусАктуальности = ЗНАЧЕНИЕ(справочник.СтатусыАктуальностиЗаказов.Отменен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отменен,
	|	СтатусыСборкиЗаказовСрезПоследних.Документ.СрокХранения КАК СрокХранения
	|ИЗ
	|	РегистрСведений.СтатусыСборкиЗаказов.СрезПоследних(, ) КАК СтатусыСборкиЗаказовСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыАктуальностиЗаказов.СрезПоследних КАК СтатусыАктуальностиЗаказовСрезПоследних
	|		ПО СтатусыСборкиЗаказовСрезПоследних.Документ = СтатусыАктуальностиЗаказовСрезПоследних.Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заказ КАК Заказ
	|		ПО СтатусыСборкиЗаказовСрезПоследних.Документ = Заказ.Ссылка
	|ГДЕ
	|	Заказ.Проведен
	|	И Заказ.ТочкаСамовывоза.АдресХранения = &АдресХранения
	|	И НЕ Заказ.Ссылка В (&МассивЗаказовВЧеке)
	|	И Заказ.ТипДоставки = ЗНАЧЕНИЕ(Перечисление.ТипДоставки.Самовывоз)
	|	И (СтатусыАктуальностиЗаказовСрезПоследних.СтатусАктуальности = ЗНАЧЕНИЕ(справочник.СтатусыАктуальностиЗаказов.Отменен)
	|			ИЛИ СтатусыАктуальностиЗаказовСрезПоследних.СтатусАктуальности <> ЗНАЧЕНИЕ(справочник.СтатусыАктуальностиЗаказов.ОжидаетОбработкиМРК)
	|				И НАЧАЛОПЕРИОДА(Заказ.СрокХранения, ДЕНЬ) < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ))
	|	И СтатусыСборкиЗаказовСрезПоследних.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбработкиЗаказа.ЗаказВТочкеСамовывоза)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Отменен УБЫВ,
	|	СрокХранения УБЫВ";
	Запрос.УстановитьПараметр("АдресХранения", ПараметрыСеанса.ТекущийАдресХранения);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("МассивЗаказовВЧеке", Объект.ЧекОтображение.Выгрузить(,"Документ").ВыгрузитьКолонку("Документ"));
	ВыборкаДокумент = Запрос.Выполнить().Выбрать();
	СтрокиРасформированиеСамовывозов = РасформированиеСамовывозов.ПолучитьЭлементы();
	Пока ВыборкаДокумент.Следующий() цикл
		СтрокаЗаказ = СтрокиРасформированиеСамовывозов.Добавить();
		СтрокаЗаказ.Заказ = ВыборкаДокумент.Заказ;
		СтрокаЗаказ.Статус = ВыборкаДокумент.Статус;
		СтрокаЗаказ.Отменен = ВыборкаДокумент.Отменен;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗаказовДляРасформирования(Команда)
	ОбновитьСписокЗаказовДляРасформированияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РасформированиеСамовывозовРасформироватьПриИзменении(Элемент)
	РасформированиеСамовывозовРасформироватьПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура РасформированиеСамовывозовРасформироватьПриИзмененииНаСервере()
	ЗСЯЗаказа = "";
	ДеревоЗаказовКРасформированию = РеквизитФормыВЗначение("РасформированиеСамовывозов");
	СписокСтрокКРасформированию = ДеревоЗаказовКРасформированию.Строки.НайтиСтроки(Новый Структура("Расформировать",Истина));
	Если СписокСтрокКРасформированию.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	МассивЗаказов = Новый Массив;
	Для каждого Строка из СписокСтрокКРасформированию цикл
		МассивЗаказов.Добавить(Строка.Заказ);
	КонецЦикла;
	ЗСЯЗаказа = "Расформированные заказы:"+Символы.ПС;
	ЗСЯЗаказа = ЗСЯЗаказа + ПолучитьТекстовоеПредставлениеЗСЯЗаказа(МассивЗаказов);
КонецПроцедуры

&НаСервере
Процедура КомандаУдалитьЗаказНаСервере(ЗаказСсылка)
	СтрокиКУдалению = Объект.ЧекВсе.НайтиСтроки(Новый Структура("Документ",ЗаказСсылка));
	Для каждого строка из СтрокиКУдалению цикл
		Объект.ЧекВсе.Удалить(Строка);
	КонецЦикла;
	ОбновитьОтображениеЧека();
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьЗаказ(Команда)
	ЗаказСсылка = Элементы.ЧекОтображение.ТекущиеДанные.Документ;
	Если ЗначениеЗаполнено(ЗаказСсылка) и ТипЗнч(ЗаказСсылка) = Тип("ДокументСсылка.Заказ") тогда
		КомандаУдалитьЗаказНаСервере(ЗаказСсылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЧекОтображениеПриАктивизацииСтроки(Элемент)
	Если Элементы.ЧекОтображение.ТекущиеДанные = неопределено тогда
		Элементы.ЧекОтображениеКомандаУдалитьЗаказ.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	ЗаказСсылка = Элементы.ЧекОтображение.ТекущиеДанные.Документ;
	Если ЗначениеЗаполнено(ЗаказСсылка) и ТипЗнч(ЗаказСсылка) = Тип("ДокументСсылка.Заказ") и не ВозвратПродажи тогда
		Элементы.ЧекОтображениеКомандаУдалитьЗаказ.Доступность = Истина;
	Иначе
		Элементы.ЧекОтображениеКомандаУдалитьЗаказ.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

//Хортюк
#КонецОбласти

// ЕМ ****************************************************
#Область СлужебныеПроцедурыИФункции

&НаСервере
// Проверяет и заполняет необходимые параметры для работы.
//
// Параметры:
//  Отказ - Булево
//
Функция ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации)
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка определения рабочего места'");
		
		ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Не смогли определить рабочее место.
													|Обратитесь к администратору системы.'");
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КассыККМ.Ссылка КАК КассаККМ
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК КассыККМ
	|ГДЕ
	|	НЕ КассыККМ.ПометкаУдаления
	|	И КассыККМ.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККТ)
	|	И КассыККМ.РабочееМесто = &РабочееМестоККМ
	|	И КассыККМ.УстройствоИспользуется
	|";
	
	Запрос.УстановитьПараметр("РабочееМестоККМ", РабочееМесто);
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультатаЗапроса = Результат.Выгрузить();
	
	Если ТаблицаРезультатаЗапроса.Количество() = 0  Тогда
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
		
		ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Не смогли определить доступные кассы ККМ.
													|Обратитесь к администратору системы.'");
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаТаблицаРезультатаЗапросаСкопированная = ТаблицаРезультатаЗапроса.Скопировать();
	ТаблицаТаблицаРезультатаЗапросаСкопированная.Свернуть("КассаККМ");
	
	//ДоступныеКассыККМ.ЗагрузитьЗначения(ТаблицаТаблицаРезультатаЗапросаСкопированная.ВыгрузитьКолонку("КассаККМ"));
	Объект.ККТ = ТаблицаТаблицаРезультатаЗапросаСкопированная[0].КассаККМ;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьРегистрацииПродаж(ПараметрыИнформации)
	
	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
	//	
	//	Дата = Дата('00010101');
	//	РасчетноеВремяЗакрытияКассы = Дата('00010101');
	//	Для каждого ПроверяемаяКасса Из ДоступныеКассыККМ Цикл
	//	
	//		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(ПроверяемаяКасса.Значение);
	//		
	//		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
	//		
	//		ТекстОшибкиЗаголовок = НСтр("ru='Кассовая смена не открыта!'");
	//		Если НЕ ЗначениеЗаполнено(Дата) Тогда
	//			Дата = ТекущаяДатаСеанса();
	//		КонецЕсли;
	//		
	//		Если КассоваяСмена = Неопределено Тогда
	//			ПараметрыИнформации.ЗаголовокИнформации = ТекстОшибкиЗаголовок;
	//			
	//			ПараметрыИнформации.ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//				НСтр("ru = 'Касса ККМ №%1 -'") +" " + ТекстОшибкиЗаголовок,
	//				ПроверяемаяКасса.Значение
	//			);
	//			
	//			Дата = Дата('00010101');
	//			
	//			Возврат Ложь;
	//		Иначе
	//			РасчетноеВремяЗакрытияТекущейКассы = КассоваяСмена.НачалоКассовойСмены + 60*60*24;
	//			
	//			Если РасчетноеВремяЗакрытияТекущейКассы > Дата Тогда
	//				Если РасчетноеВремяЗакрытияКассы = Дата('00010101') 
	//					ИЛИ РасчетноеВремяЗакрытияКассы > РасчетноеВремяЗакрытияТекущейКассы Тогда
	//						РасчетноеВремяЗакрытияКассы = РасчетноеВремяЗакрытияТекущейКассы;
	//				КонецЕсли;
	//			КонецЕсли;
	//			
	//			Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Дата, ТекстОшибкиЗаголовок) Тогда
	//				
	//				ПараметрыИнформации.ЗаголовокИнформации = ТекстОшибкиЗаголовок;
	//				
	//				ПараметрыИнформации.ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//					НСтр("ru = 'Касса ККМ №%1 -'") +" " + ТекстОшибкиЗаголовок,
	//					ПроверяемаяКасса.Значение
	//				);
	//				
	//				Дата = Дата('00010101');
	//				
	//				Возврат Ложь;
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//	КонецЦикла;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Проверяет и заполняет эквайринговый терминал.
//
// Параметры:
//  Отказ - Булево
//
Функция ЗаполнитьЭквайринговыйТерминал(ПараметрыИнформации)
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка определения рабочего места'");
		
		ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Не смогли определить рабочее место.
													|Обратитесь к администратору системы.'");
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭквайринговыеТерминалы.Ссылка КАК ЭТ
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И ЭквайринговыеТерминалы.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал)
	|	И ЭквайринговыеТерминалы.РабочееМесто = &РабочееМестоККМ
	|	И ЭквайринговыеТерминалы.УстройствоИспользуется
	|";
	
	Запрос.УстановитьПараметр("РабочееМестоККМ", РабочееМесто);
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультатаЗапроса = Результат.Выгрузить();
	
	Если ТаблицаРезультатаЗапроса.Количество() = 0  Тогда
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка определения доступных терминалов'");
		
		ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Не смогли определить доступные эквайринговые терминалы.
													|Обратитесь к администратору системы.'");
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаТаблицаРезультатаЗапросаСкопированная = ТаблицаРезультатаЗапроса.Скопировать();
	ТаблицаТаблицаРезультатаЗапросаСкопированная.Свернуть("ЭТ");
	
	//ДоступныеКассыККМ.ЗагрузитьЗначения(ТаблицаТаблицаРезультатаЗапросаСкопированная.ВыгрузитьКолонку("КассаККМ"));
	Объект.ЭквайринговыйТерминал = ТаблицаТаблицаРезультатаЗапросаСкопированная[0].ЭТ;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьРабочееМесто()
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	КонецЕсли;
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	
	//ЭтаФорма.Заголовок = "Рабочее место кассира";
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		Заголовок = НСтр("ru = 'Рабочее место кассира: не указано рабочее место'");
	Иначе
		Заголовок = НСтр("ru = 'Рабочее место кассира:'") + " " + РабочееМесто;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДенежныйЯщик(Команда)
	
	//ФискальноеУстройство = ПолучитьФискальноеУстройство();
	ФискальноеУстройство = Объект.ККТ;
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	//Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_ДопКомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОткрытиеДенежногоЯщика(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ДопКомандаВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ОчиститьСообщения();
	//Элементы.ФискальноеУстройство.Доступность = Истина;
	
	НомерСмены  = Неопределено; 
	НомерЧека   = Неопределено;
	СтатусСмены = Неопределено;
	ФискальныйПризнак = Неопределено;
	СайтПроверкиОФД   = Неопределено;
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='Операция завершена.'");
		Если РезультатВыполнения.ВыходныеПараметры.Количество() > 0 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + РезультатВыполнения.ВыходныеПараметры[0];
			Если РезультатВыполнения.ВыходныеПараметры.Количество() > 1 Тогда
				НомерСмены = РезультатВыполнения.ВыходныеПараметры[0]; 
				НомерЧека  = РезультатВыполнения.ВыходныеПараметры[1];
				Если РезультатВыполнения.ВыходныеПараметры.Количество() > 2 Тогда
					СтатусСмены  = РезультатВыполнения.ВыходныеПараметры[2];
				КонецЕсли;
				Если РезультатВыполнения.ВыходныеПараметры.Количество() > 4 Тогда
					ФискальныйПризнак  = РезультатВыполнения.ВыходныеПараметры[4];
				КонецЕсли;
				Если РезультатВыполнения.ВыходныеПараметры.Количество() > 5 Тогда
					СайтПроверкиОФД  = РезультатВыполнения.ВыходныеПараметры[5];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		// Пишем лог
		//ОтветОтУстройства = ОтветОтУстройства + ТекстСообщения + Символы.ПС;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьШаблонЦенника(МассивСтрок)

	ПозицииЦенника = Новый Массив();		
	Для ИндексСтрока = 0 По МассивСтрок.Количество() - 1  Цикл
		
		ЭлементМассива = МассивСтрок[ИндексСтрока];

    // !!!!!!!!!!
		
		//Если Цел(Число(ИндексСтрока)/30) = Число(ИндексСтрока)/30 и ИндексСтрока>0 Тогда
		//	Режим = РежимДиалогаВопрос.ДаНет;
		//	Ответ = Вопрос("Продолжаем печать ценников?", Режим, 0);
		//	Если Ответ = КодВозвратаДиалога.Нет Тогда
		//		Прервать;
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПозицииЦенника;

КонецФункции // ПолучитьШаблонЦенника()

&НаКлиенте
Функция МожноПробитьЧек()
	
	Можно = ЭтаФорма.ОплатаКартой ИЛИ
			ЭтаФорма.ВозвратПродажи ИЛИ
			(Объект.СуммаПокупателя>=Объект.Чек.Итог("Сумма"));
			
	Возврат Можно;
	
КонецФункции // МожноПробитьЧек()

&НаКлиенте
Процедура ЧекОтображениеПриИзменении(Элемент)
	Элементы.ПробитьЧек.Доступность = МожноПробитьЧек();
КонецПроцедуры


#КонецОбласти
//**************************************************** ЕМ 


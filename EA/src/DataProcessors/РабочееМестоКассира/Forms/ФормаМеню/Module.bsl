
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОповещениеОткрытьФормуПроверкиНепробитыхЧеков(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытияФормы = НСтр("ru = 'Закрытие смены'") Тогда
		ПродолжитьОткрытиеОбработкиЗакрытияКассовойСмены(ДополнительныеПараметры.КассаККМ);
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Закрытие кассовой смены прервано пользователем.'");
		
		ОбщегоНазначенияКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаСуммыФактическойВыемки(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	СуммаФактическойВыемки = 0;
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		ЗначениеВыбораЧисло = РезультатОткрытияФормы.ВведенноеЧисло;
		Если ЗначениеЗаполнено(ЗначениеВыбораЧисло) Тогда
			СуммаФактическойВыемки = ЗначениеВыбораЧисло;
		КонецЕсли;
		
		ЗавершитьОткрытиеОбработкиЗакрытияКассовойСмены(ДополнительныеПараметры.КассаККМ, СуммаФактическойВыемки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуНастройкиРМК(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуЗакрытияКассовойСмены(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Оповестить("ИзменениеСостоянияКассовойСмены", ДополнительныеПараметры.КассаККМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаЗакрытьСмену(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если НЕ ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
			Возврат;
		КонецЕсли;
		КассаККМ = ДополнительныеПараметры.КассаККМ;
		ТекстОшибки = "";
		Если НЕ ВозможностьЗакрытияСмены(КассаККМ, ТекстОшибки) Тогда
			ОбщегоНазначенияКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ВыполнитьЗакрытиеСмены();

	//	ДополнительныеПараметры = Новый Структура;
	//	ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
	//	ОбработчикОповещения= Новый ОписаниеОповещения("ОповещениеОткрытьФормуПроверкиНепробитыхЧеков", ЭтотОбъект, ДополнительныеПараметры);
	//	ПройденаПроверкаНепробитыхЧеков = РозничныеПродажиКлиент.ПройденаПроверкаНепробитыхЧеков(КассаККМ, ОбработчикОповещения);
	//	
	//	Если ПройденаПроверкаНепробитыхЧеков Тогда
	//		ПродолжитьОткрытиеОбработкиЗакрытияКассовойСмены(КассаККМ);
	//	КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаЗакрытьРМК(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если НЕ ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
			ПараметрЗакрытияФормы = "";
			СанкционированноеЗакрытие = Ложь;
			Возврат;
		КонецЕсли;
		
		ПроверятьЗакрытиеКассовойСменыПередВыходомИзРМК = Ложь;
		
		Если ДополнительныеПараметры.Действие = "ПередЗакрытием" Тогда
			Если ЗначениеЗаполнено(ПараметрЗакрытияФормы)  Тогда
				Закрыть(ПараметрЗакрытияФормы);
			Иначе
				Закрыть();
			КонецЕсли;
		ИначеЕсли ДополнительныеПараметры.Действие = "ЗавершитьРаботуСистемы" Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрЗакрытияФормы = "";
	СанкционированноеЗакрытие = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	//ПараметрыСеанса.ФормаРабочегоМестаКассира = Строка(УникальныйИдентификатор);
	
	УстановитьДоступностьЭлементов();
	
	//Магазин = ПараметрыСеанса.ТекущийМагазин;
	
	//Если НЕ ЗначениеЗаполнено(Магазин) Тогда
	//	ПолучитьДоступныеМагазины();
	//	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыбораМагазина;
	//Иначе
	//	СтрокаТаблицыМагазинов = Магазины.Добавить();
	//	СтрокаТаблицыМагазинов.Магазин = Магазин;
	//КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = МенеджерОборудованияВызовСервераПереопределяемый.ИспользоватьПодключаемоеОборудование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если Не ВебКлиент Тогда
	мИмяКомпьютера = ИмяКомпьютера();
	#КонецЕсли  
	
	ПолучитьРабочееМесто();
	

	// ПодключаемоеОборудование
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);  	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещенияПриПодключении, ЭтаФорма, "ДисплейПокупателя");
	// Конец ПодключаемоеОборудование
	
	ПодключитьОбработчикОжидания("ПроверитьВозможностьРаботыПриОткрытии", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ЗаголовокИнформации = НСтр("ru = 'При подключении оборудования произошла ошибка:'");
		ТекстИнформации     = РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
	Иначе
		ВывестиИнформациюНаДисплейПокупателя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если (НЕ СанкционированноеЗакрытие И Магазины.Количество() > 0) ИЛИ ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Действие", "ПередЗакрытием");
	
	ПроверитьЗакрытиеКассовойСменыПередВыходомИзРМК(Отказ, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	//ОбщегоНазначенияРТВызовСервера.УстановитьЗначениеПараметраСеанса("ФормаРабочегоМестаКассира", "");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФормуМенюРМК" Тогда
		
		УстановитьДоступностьЭлементов();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МагазиныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыборМагазинаКлиент()
	
КонецПроцедуры

&НаКлиенте
Процедура КассыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыборКассыКлиент()
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРегистрацияПродажНажатие(Элемент)
	
	ОчиститьСообщения();
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	Если ПроверитьВозможностьРегистрацииПродаж(ПараметрыИнформации) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РабочееМесто"  , РабочееМесто);
		//ПараметрыФормы.Вставить("Магазин"       , Магазин);
		ПараметрыФормы.Вставить("мИмяКомпьютера", мИмяКомпьютера);
		
		ПараметрыФормы.Вставить("РасчетноеВремяЗакрытияКассы", РасчетноеВремяЗакрытияКассы);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.Форма", ПараметрыФормы, ЭтотОбъект,,,,, Режим);
	Иначе
		ОбщегоНазначенияКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытиеСменыНажатие(Элемент)
	
	ОчиститьСообщения();
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		
		Если ДоступныеКассыККМ = Неопределено ИЛИ ДоступныеКассыККМ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДоступныеКассыСУчетомОткрытия(Ложь);
		
		Если Кассы.Количество() = 0 Тогда
			
			ЗаголовокИнформации = НСтр("ru = 'Ошибка открытия смены'");
			ТекстИнформации = НСтр("ru = 'Нет касс с закрытыми сменами.'");
			ОбщегоНазначенияКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
			
			Возврат;
			
		КонецЕсли;
		
		РежимВыбораКассы = "ОткрытьСмену";
		Если Кассы.Количество() > 1  Тогда
			
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыбораКассы;
			Возврат;
			
		КонецЕсли;
		
		ОткрытьСмену(Кассы[0].ПодключаемоеОборудование)
		
	Иначе
		ОбщегоНазначенияКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтчетБезГашенияНажатие(Элемент)
	
	ОчиститьСообщения();
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		
		Если ДоступныеКассыККМ = Неопределено ИЛИ ДоступныеКассыККМ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДоступныеКассыСУчетомОткрытия(Истина, Истина);
		
		Если Кассы.Количество() = 0 Тогда
			
			ЗаголовокИнформации = НСтр("ru = 'Ошибка печати отчета без гашения'");
			ТекстИнформации = НСтр("ru = 'Нет доступных касс.'");
			ОбщегоНазначенияКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
			
			Возврат;
			
		КонецЕсли;
		
		Если Кассы.Количество() > 1  Тогда
			
			РежимВыбораКассы = "НапечататьОтчетБезГашения";
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыбораКассы;
			Возврат;
			
		КонецЕсли;
		
		НапечататьОтчетБезГашения(Кассы[0].Касса)
		
	Иначе
		ОбщегоНазначенияКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗакрытиеСменыНажатие(Элемент)
	
	ОчиститьСообщения();
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		
		Если ДоступныеКассыККМ = Неопределено ИЛИ ДоступныеКассыККМ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДоступныеКассыСУчетомОткрытия(Истина);
		
		Если Кассы.Количество() = 0 Тогда
			
			ЗаголовокИнформации = НСтр("ru = 'Ошибка закрытия смены'");
			ТекстИнформации = НСтр("ru = 'Нет касс с открытыми сменами.'");
			ОбщегоНазначенияКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
			
			Возврат;
			
		КонецЕсли;
		
		Если Кассы.Количество() > 1  Тогда
			
			РежимВыбораКассы = "ЗакрытьСмену";
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыбораКассы;
			Возврат;
			
		КонецЕсли;
		
		ЗакрытьСмену(Кассы[0].Касса)
		
	Иначе
		ОбщегоНазначенияКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСводныйОтчетНажатие(Элемент)
	
	ОчиститьСообщения();
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Документ.СводныйОтчетПоКассовойСмене.ФормаОбъекта",,,,,,, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаРМКНажатие(Элемент)
	
	ОчиститьСообщения();
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуНастройкиРМК", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаНастройкиРМК",, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбменДаннымиНажатие(Элемент)
	
	ОчиститьСообщения();
	ОбменДаннымиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗакрытьНажатие(Элемент)
	
	СанкционированноеЗакрытие = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗавершениеРаботыНажатие(Элемент)
	
	СанкционированноеЗакрытие = Истина;
	
	Если МодальныйРежим Тогда
		//СоединенияИБКлиент.ЗавершитьРаботуЭтогоСеанса(Ложь);
		//ПараметрЗакрытияФормы = "ЗавершитьРаботуСистемы";
		//Закрыть(ПараметрЗакрытияФормы);
		ЗавершитьРаботуСистемы(Ложь);
	Иначе
		Отказ = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Действие", "ЗавершитьРаботуСистемы");
		
		ПроверитьЗакрытиеКассовойСменыПередВыходомИзРМК(Отказ, ДополнительныеПараметры);
		Если НЕ Отказ Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаНазадКСпискуКнопок(Команда)
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаКнопок;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКассы(Команда)
	ВыборКассыКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОперацияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Доступность = Истина;
	
	ТекстСообщения = ?(РезультатВыполнения.Результат, НСтр("ru='Операция успешно завершена.'"), РезультатВыполнения.ОписаниеОшибки);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	//Пользователь = глЗначениеПеременной("ПользовательИзмененныхПрав");
	//Если Пользователь = Неопределено 
	//	ИЛИ НЕ ЗначениеЗаполнено(Пользователь) Тогда
	//	Пользователь = Пользователи.ТекущийПользователь();
	//КонецЕсли;
	
	//Элементы.ДекорацияОтчетБезГашения.Доступность = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтчетОСменеБезГашения, Ложь, Пользователь);
	//
	//Элементы.ДекорацияЗакрытиеСмены.Доступность = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЗакрытиеСмены, Ложь, Пользователь);
	//
	//Элементы.ДекорацияСводныйОтчет.Доступность = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьФормированиеСводныйОтчетПоКассовойСмене, Ложь, Пользователь)
	//										   И НЕ ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто();
	//
	//Элементы.ДекорацияНастройкаРМК.Доступность = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНастройкуРМК, Ложь, Пользователь);
	//
	//Элементы.ДекорацияОбменДанными.Доступность = ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто();
	//
	//Элементы.ДекорацияЗакрыть.Доступность = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьВыходИзРМК, Ложь, Пользователь);
	
	//ПроверятьЗакрытиеКассовойСменыПередВыходомИзРМК = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ПроверятьЗакрытиеКассовойСменыПередВыходомИзРМК, Ложь, Пользователь);
	ПроверятьЗакрытиеКассовойСменыПередВыходомИзРМК = Истина;
	
КонецПроцедуры // УстановитьДоступностьЭлементов()

&НаСервере
// Проверяет и заполняет необходимые параметры для работы.
//
// Параметры:
//  Отказ - Булево
//
Функция ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации)
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка определения рабочего места'");
		
		ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Не смогли определить рабочее место.
													|Обратитесь к администратору системы.'");
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КассыККМ.Ссылка КАК КассаККМ,
	//|	КассыККМ.Магазин,
	|	КассыККМ.Фирма КАК Организация,
	//|	ВЫБОР
	//|		КОГДА КассыККМ.ПодключаемоеОборудование.ТипОборудования = &ККТОнлайн
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК НеобходимостьПроверятьФизЛицо
	|	ИСТИНА КАК НеобходимостьПроверятьФизЛицо
	|ИЗ
	|	Справочник.ККМ КАК КассыККМ
	|ГДЕ
	|	НЕ КассыККМ.ПометкаУдаления
	//|	И НЕ КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ККМOffline)
	|	И КассыККМ.ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККТ)
	|	И КассыККМ.РабочееМесто = &РабочееМестоККМ
	|	И КассыККМ.ПодключаемоеОборудование.УстройствоИспользуется
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассыККМ.Наименование";
	
	Запрос.УстановитьПараметр("РабочееМестоККМ", РабочееМесто);
	//Запрос.УстановитьПараметр("ККТОнлайн"      , Перечисления.ТипыПодключаемогоОборудования.ККТ);
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультатаЗапроса = Результат.Выгрузить();
	
	Если ТаблицаРезультатаЗапроса.Количество() = 0  Тогда
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
		
		ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Не смогли определить доступные кассы ККМ.
													|Обратитесь к администратору системы.'");
		Возврат Ложь;
	КонецЕсли;
	
	//СтруктураПоиска = Новый Структура;
	//СтруктураПоиска.Вставить("НеобходимостьПроверятьФизЛицо", Истина);
	//
	//СтрокиТаблицы = ТаблицаРезультатаЗапроса.НайтиСтроки(СтруктураПоиска);
	//
	//Если СтрокиТаблицы.Количество() > 0 Тогда
	//	Пользователь = глЗначениеПеременной("ПользовательИзмененныхПрав");
	//	Если Пользователь = Неопределено 
	//		ИЛИ НЕ ЗначениеЗаполнено(Пользователь) Тогда
	//		Пользователь = Пользователи.ТекущийПользователь();
	//	КонецЕсли;
	//	
	//	Если НЕ ЗначениеЗаполнено(Пользователь.ФизическоеЛицо) Тогда
	//		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка определения кассира'");
	//		
	//		ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Не смогли определить кассира.
	//													|Администратору необходимо задать пользователю соответствующее физ. лицо.'");
	//		Возврат Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	
	ТаблицаТаблицаРезультатаЗапросаСкопированная = ТаблицаРезультатаЗапроса.Скопировать();
	ТаблицаТаблицаРезультатаЗапросаСкопированная.Свернуть("КассаККМ");
	ДоступныеКассыККМ.ЗагрузитьЗначения(ТаблицаТаблицаРезультатаЗапросаСкопированная.ВыгрузитьКолонку("КассаККМ"));
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьРегистрацииПродаж(ПараметрыИнформации)
	
	Если ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		
		Дата = Дата('00010101');
		РасчетноеВремяЗакрытияКассы = Дата('00010101');
		Для каждого ЭлементМассива Из ДоступныеКассыККМ Цикл
		
			ПроверяемаяКасса = ЭлементМассива.Значение;
		
			СтруктураСостояниеКассовойСмены = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(ПроверяемаяКасса.ПодключаемоеОборудование);
			
			ТекстОшибкиЗаголовок = НСтр("ru='Кассовая смена не открыта!'");
			Если НЕ ЗначениеЗаполнено(Дата) Тогда
				Дата = ТекущаяДатаСеанса();
			КонецЕсли;
			
			Если СтруктураСостояниеКассовойСмены = Неопределено ИЛИ
				СтруктураСостояниеКассовойСмены.КассоваяСмена = Неопределено Тогда
				ПараметрыИнформации.ЗаголовокИнформации = ТекстОшибкиЗаголовок;
				
				ПараметрыИнформации.ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Касса ККМ №%1 -'") +" " + ТекстОшибкиЗаголовок,
					ПроверяемаяКасса
				);
				
				Дата = Дата('00010101');
				
				Возврат Ложь;
			Иначе
				КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
				РасчетноеВремяЗакрытияТекущейКассы = КассоваяСмена.НачалоКассовойСмены + 60*60*24;
				
				Если РасчетноеВремяЗакрытияТекущейКассы > Дата Тогда
					Если РасчетноеВремяЗакрытияКассы = Дата('00010101') 
						ИЛИ РасчетноеВремяЗакрытияКассы > РасчетноеВремяЗакрытияТекущейКассы Тогда
							РасчетноеВремяЗакрытияКассы = РасчетноеВремяЗакрытияТекущейКассы;
					КонецЕсли;
				КонецЕсли;
				
				
	//			СтруктураСостояниеКассовойСмены = КассовыеСменыВызовСервера.ОписаниеКассовойСмены(КассоваяСмена);
	//
	//			Если СтруктураСостояниеКассовойСмены.Статус <> Перечисления.СтатусыКассовойСмены.Открыта Тогда
				Если НЕ КассовыеСменыВызовСервера.СменаОткрыта(КассоваяСмена, Дата, ТекстОшибкиЗаголовок) Тогда
					
					ПараметрыИнформации.ЗаголовокИнформации = ТекстОшибкиЗаголовок;
					
					ПараметрыИнформации.ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Касса ККМ №%1 -'") +" " + ТекстОшибкиЗаголовок,
						ПроверяемаяКасса
					);
					
					Дата = Дата('00010101');
					
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьРабочееМесто()
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	КонецЕсли;
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		Заголовок = НСтр("ru = 'РМК: не указано рабочее место'");
	Иначе
		Заголовок = НСтр("ru = 'РМК:'") + " " + РабочееМесто;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДоступныеМагазины()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.Ссылка КАК Магазин
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	НЕ Магазины.ПометкаУдаления
	|	И НЕ Магазины.СкладУправляющейСистемы";
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Магазины.Загрузить(ТаблицаЗапроса);
	
КонецПроцедуры

// Процедура формирует массив касс с учетом открытия смен.
//
// Параметры:
//  ПроверкаКассСОткрытымиСменами - Булево: 
//                                  Истина - формируется список касс с открытыми сменами
//                                  Ложь   - формируется список касс с закрытыми сменами.
//
&НаСервере
Процедура ЗаполнитьДоступныеКассыСУчетомОткрытия(ПроверкаКассСОткрытымиСменами, ВсеКассы = Ложь)
	
	Кассы.Очистить();
	
	Для каждого ЭлементМассива Из ДоступныеКассыККМ Цикл
		
		ПроверяемаяКасса = ЭлементМассива.Значение;
		
		СтруктураСостояниеКассовойСмены = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(ПроверяемаяКасса.ПодключаемоеОборудование);
		
		Если СтруктураСостояниеКассовойСмены = Неопределено ИЛИ
			(СтруктураСостояниеКассовойСмены.Статус = Перечисления.СтатусыКассовойСмены.Открыта) = ПроверкаКассСОткрытымиСменами ИЛИ
			ВсеКассы Тогда
			
			СтрокаКассы = Кассы.Добавить();
			СтрокаКассы.Касса = ПроверяемаяКасса;
			СтрокаКассы.ПодключаемоеОборудование = ПроверяемаяКасса.ПодключаемоеОборудование;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВозможностьЗакрытияСмены(КассаККМ, ТекстОшибки)
	
	СтруктураСостояниеКассовойСмены = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(КассаККМ.ПодключаемоеОборудование);
	
	Если СтруктураСостояниеКассовойСмены.Статус <> Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта!'");
		
		Возврат Ложь;
	КонецЕсли;
	
	КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьСмену(КассаККМ)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаЗакрытьСмену", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбщегоНазначенияКлиент.ВывестиВопросДляРМКУправляемой(НСтр("ru = 'Закрыть смену?'"),,,ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОткрытиеОбработкиЗакрытияКассовойСмены(КассаККМ)
	
	//СуммаФактическойВыемки = 0;
	//ДополнительныеПараметры = Новый Структура;
	//ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
	//
	//ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаСуммыФактическойВыемки", ЭтотОбъект, ДополнительныеПараметры);
	//СуммаВыемкиЗапрошена = РозничныеПродажиКлиент.ЗапроситьСуммуФактическойВыемки(КассаККМ, ОбработчикОповещения, УникальныйИдентификатор);
	//Если НЕ СуммаВыемкиЗапрошена Тогда
	//	ЗавершитьОткрытиеОбработкиЗакрытияКассовойСмены(КассаККМ, СуммаФактическойВыемки);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОткрытиеОбработкиЗакрытияКассовойСмены(КассаККМ, СуммаФактическойВыемки)
	
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("КассаККМ"                   , КассаККМ);
	//ПараметрыФормы.Вставить("ВыполнитьЗакрытиеСразу"     , Истина);
	//ПараметрыФормы.Вставить("ДокументыОткрыватьМодально" , Истина);
	//ПараметрыФормы.Вставить("ВыводитьСообщенияВРежимеРМК", Истина);
	//ПараметрыФормы.Вставить("СуммаФактическойВыемки"     , СуммаФактическойВыемки);
	//
	//ДополнительныеПараметры = Новый Структура;
	//ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
	//
	//ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуЗакрытияКассовойСмены", ЭтотОбъект, ДополнительныеПараметры);
	//Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	//ОткрытьФорму("Обработка.ЗакрытиеКассовойСмены.Форма.Форма", ПараметрыФормы, ЭтотОбъект,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСмену(КассаККМПодключаемоеОборуджование)

	РезультатВыбора = КассаККМПодключаемоеОборуджование;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Доступность = Ложь;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
	Кассир = "";
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияКлиентСерверПереопределяемый.ОбработкаЗаполненияИмяКассира(Кассир, СтандартнаяОбработка); 
	ПараметрыОперации.Кассир = ?(Не СтандартнаяОбработка, Кассир, НСтр("ru='Администратор'")); 
	
	ДополнительныеПараметры = Новый Структура();
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяПодсистемыФискальныхУстройств() Тогда
		МодульКассовыеСменыКлиентПереопределяемый = МенеджерОборудованияКлиентПовтИсп.ОбщийМодуль("КассовыеСменыКлиентПереопределяемый");
		МодульКассовыеСменыКлиентПереопределяемый.УправлениеФУЗаполнитьДополнительныеПараметрыПередОткрытиемСмены(РезультатВыбора, ДополнительныеПараметры);
	КонецЕсли;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, РезультатВыбора,
			"ККТ", ДополнительныеПараметры);
	
КонецПроцедуры    // ОткрытьСмену

&НаКлиенте
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ВыполнитьЗакрытиеСмены()
	
	ОчиститьСообщения();
	Доступность = Ложь;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
	Кассир = "";
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияКлиентСерверПереопределяемый.ОбработкаЗаполненияИмяКассира(Кассир, СтандартнаяОбработка); 
	ПараметрыОперации.Кассир = ?(Не СтандартнаяОбработка, Кассир, НСтр("ru='Администратор'")); 
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, 
																	УникальныйИдентификатор, 
																	ПараметрыОперации,
																	Кассы[0].ПодключаемоеОборудование,
																	,
																	КассоваяСмена);
	
КонецПроцедуры // ВыполнитьЗакрытиеСмены()
 
&НаКлиенте
Процедура ОткрытьСменуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	ПараметрыИнформации = ОбщегоНазначенияКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка открытия смены'");
	
	Если РезультатВыполнения.Результат Тогда 
		
		ОписаниеОшибки = "";
		ТекстПереходящегоОстатка = "";  
		
		Результат = ОткрытьКассовуюСменуСервер(Параметры.КассаККМ, ОписаниеОшибки, ТекстПереходящегоОстатка);
		Если Не Результат Тогда
			ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
		                            |Смена не открыта.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
			ОбщегоНазначенияКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
		ИначеЕсли ЗначениеЗаполнено(ТекстПереходящегоОстатка) Тогда
			ЗаголовокИнформации = НСтр("ru = 'Сумма остатка в кассе на начало смены'");
			ОбщегоНазначенияКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстПереходящегоОстатка);
		КонецЕсли;
		
		Оповестить("ИзменениеСостоянияКассовойСмены", Параметры.КассаККМ);
	
	Иначе
		ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
						|%ОписаниеОшибки%
						|Смена не открыта на фискальном устройстве.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
		ОбщегоНазначенияКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьОтчетБезГашения(КассаККМ)

	//Результат = Ложь;
	//
	//ПараметрыКассыККМ       = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(КассаККМ);
	//ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	//
	//ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	//
	//ПараметрыИнформации = ОбщегоНазначенияКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	//ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка печати отчета без гашения'");
	//
	//Если ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьКассуККМБезПодключенияОборудования Тогда
	//	
	//	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
	//	ФИОКассира = ОбщегоНазначенияРТВызовСервера.ФИОФизЛицаПользователяСУчетомИзмененныхПрав();
	//	Если Не ФИОКассира = "" Тогда
	//		ПараметрыОперации.Кассир = ФИОКассира;
	//	Иначе
	//		ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
	//	КонецЕсли;
	//	
	//	ЭтаФорма.Доступность = Ложь;
	//	Оповещение = Новый ОписаниеОповещения("НапечататьОтчетБезГашенияЗавершение", ЭтотОбъект);
	//	МенеджерОборудованияКлиент.НачатьФормированиеОтчетаБезГашения(Оповещение, УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройства);
	//КонецЕсли;
	
	
	ОчиститьСообщения();
	Доступность = Ложь;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
	Кассир = "";
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияКлиентСерверПереопределяемый.ОбработкаЗаполненияИмяКассира(Кассир, СтандартнаяОбработка); 
	ПараметрыОперации.Кассир = ?(Не СтандартнаяОбработка, Кассир, НСтр("ru='Администратор'")); 
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("НапечататьОтчетБезГашенияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФормированиеОтчетаБезГашения(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьОтчетБезГашенияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда 
		
		ТекстСообщения = НСтр("ru = 'При снятии отчета на фискальном устройсве произошла ошибка.
						|%ОписаниеОшибки%
						|Отчет на фискальном регистраторе не сформирован.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		
		ПараметрыИнформации = ОбщегоНазначенияКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка печати отчета без гашения'");
		ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
		
		ОбщегоНазначенияКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбменДаннымиСервер()
	
	Если ОбменДаннымиВызовСервера.ОбменДаннымиВключен("ПоРабочемуМесту", ПланыОбмена.ПоРабочемуМесту.ЭтотУзел()) 
		И ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто() Тогда
		
		ВыборкаУзлов = ПланыОбмена.ПоРабочемуМесту.Выбрать();
		Пока ВыборкаУзлов.Следующий() Цикл
			Если ВыборкаУзлов.Ссылка <> ПланыОбмена.ПоРабочемуМесту.ЭтотУзел() Тогда
				ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(ВыборкаУзлов.Ссылка, ОбменДаннымиСервер.ПараметрыОбмена() ,Ложь);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Процедура осуществляет вывод информации на дисплей покупателя по команде.
//
&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя()

	Если Не ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	Строка1 = НСтр("ru = 'КАССА НЕ РАБОТАЕТ'");
	Строка2 = НСтр("ru = 'СЕРВИСНЫЙ РЕЖИМ'");
	
	Описание = Новый ОписаниеОповещения("ВывестиИнформациюНаДисплейПокупателяЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыводИнформацииНаДисплейПокупателя(Описание,,, Строка1 + Символы.ПС + Строка2);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателяЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ЗаголовокИнформации = НСтр("ru = 'При использовании дисплея покупателя произошла ошибка.'"); 
		ОбщегоНазначенияКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ОткрытьКассовуюСменуСервер(КассаККМ, ОписаниеОшибки, ТекстПереходящегоОстатка)
	
	//ЕМ ********************************
	//Возврат КассовыеСменыВызовСервера. РозничныеПродажиСервер.ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки, ТекстПереходящегоОстатка);
	Возврат Ложь;
	//******************************** ЕМ 
	
КонецФункции

&НаКлиенте
Процедура ВыборКассыКлиент()
	
	ТекущиеДанные = Элементы.Кассы.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Если РежимВыбораКассы = "ОткрытьСмену" Тогда
			ОткрытьСмену(ТекущиеДанные.Касса);
		ИначеЕсли РежимВыбораКассы = "ЗакрытьСмену" Тогда
			ЗакрытьСмену(ТекущиеДанные.Касса);
		ИначеЕсли РежимВыбораКассы = "НапечататьОтчетБезГашения" Тогда
			НапечататьОтчетБезГашения(ТекущиеДанные.Касса);
		КонецЕсли;
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаКнопок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборМагазинаКлиент()
	
	ТекущиеДанные = Элементы.Магазины.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Магазин = ТекущиеДанные.Магазин;
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаКнопок;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗакрытиеКассовойСменыПередВыходомИзРМК(Отказ, ДополнительныеПараметры)
	
	Если ПроверятьЗакрытиеКассовойСменыПередВыходомИзРМК Тогда
		
		ЗаполнитьДоступныеКассыСУчетомОткрытия(Истина);
		Если Кассы.Количество() > 0 Тогда
			Отказ = Истина;
			Если Кассы.Количество() > 1 Тогда
				ЗаголовокИнформации = НСтр("ru = 'Смены не закрыты.'");
			Иначе
				ЗаголовокИнформации = НСтр("ru = 'Смена не закрыта.'");
			КонецЕсли;
			ТекстИнформации = НСтр("ru = 'Хотите выйти из РМК?'");
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаЗакрытьРМК", ЭтотОбъект, ДополнительныеПараметры);
			ОбщегоНазначенияКлиент.ВывестиВопросДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации, , ОбработчикОповещения);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьРаботыПриОткрытии()
	ОчиститьСообщения();
	ПолучитьРабочееМесто();
	
	ПараметрыИнформации = ОбщегоНазначенияКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	Если НЕ ПроверитьОбщуюВозможностьРаботы(ПараметрыИнформации) Тогда
		ОбщегоНазначенияКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
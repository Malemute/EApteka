
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	ПолучитьОборудованиеРМНаСервере();
	ТекущийПЛУ = 1;
	
	ШтрихкодEAN8 = "46120441";
	ШтрихкодEAN13 = "2900001462105";
	ШтрихкодCODE39 = "2PMP-468-PJM";
	ШтрихкодQR = "http://www.1c.ru";
	
	ПечатьШтрихкодаEAN8 = Истина;
	ПечатьШтрихкодаEAN13 = Истина;
	ПечатьШтрихкодаCODE39 = Истина;
	ПечатьШтрихкодаQR = Истина;
	
	Отправляет1СEmail = Ложь;
	Отправляет1СSMS   = Ложь;
	
	НефискальнаяКвитанция = Ложь;
	
	ЭТСумма  = 10.12;
	СуммаИнкассации = 10.12;
	
	ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	ФискальноеУстройствоТип = Перечисления.ТипыПодключаемогоОборудования.ККТ;
	СистемаНалогообложения  = Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
	ПризнакАгента = Перечисления.ПризнакиАгента.Агент;
	
	ТипЭквайринговойОперации = "AuthorizeSales";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если Источник = "ПодключаемоеОборудование" Тогда
		// Отладочное
		Лог = "Получено внешнее событие
		      |Источник = " + Источник + "
		      |Событие = "  + ИмяСобытия;
		ОбновитьОтображениеДанных();
	
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1));
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1));
			КонецЕсли;
			ПолученыШтрихкоды(Данные);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			
			Если Параметр[1] = Неопределено Тогда
				ПолученКодКарты(Параметр[0], Параметр[0]);
			Иначе
				ПолученКодКарты(Параметр[0], Параметр[1][1]);
			КонецЕсли;
			
		ИначеЕсли ИмяСобытия = "RFID" Тогда
			
			Для Каждого Элемент Из Параметр Цикл
				МеткаRFID = МеткиRFID.Добавить();
				ЗаполнитьЗначенияСвойств(МеткаRFID, Элемент);
			КонецЦикла;
				
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолученыШтрихкоды(МассивДанных)

	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " Имя команды: ПолученыШтрихкоды" + Символы.ПС;
	Сч = 0;

	ТаблицаЗагрузкиИзТСД.Очистить();
	ЧислоКодов = МассивДанных.Количество();
	Для каждого СтрокаЗагрузки Из МассивДанных Цикл
		Сч = Сч + 1;
		НоваяСтрока = ТаблицаЗагрузкиИзТСД.Добавить();
		НоваяСтрока.Штрихкод   = СтрокаЗагрузки.Штрихкод;
		НоваяСтрока.Количество = СтрокаЗагрузки.Количество;
		Лог = Лог + "Штрихкод" + ?(ЧислоКодов > 1,"(" + Сч + ")", "") + ": " + СтрокаЗагрузки.Штрихкод;
		Лог = Лог + " Количество: " + СтрокаЗагрузки.Количество + Символы.ПС;
	КонецЦикла;
	Лог = Лог + "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;

	ДанныеСканера = МассивДанных[0].Штрихкод; // Выводим считанные данные
	ТипШтрихкода  = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(МассивДанных[0].Штрихкод);
	
	ОбновитьОтображениеДанных();

	Возврат Истина;

КонецФункции

&НаКлиенте
Функция ПолученКодКарты(КодКарты, ДанныеДорожек)

	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(), "ДЛФ=T") + " Имя команды: ПолученКодКарты" + Символы.ПС;
	Лог = Лог + "Код карты: " + КодКарты + Символы.ПС;
	Если ТипЗнч(ДанныеДорожек) = Тип("Массив") Тогда
		Для НомерДорожки = 1 По ДанныеДорожек.Количество() Цикл
			НоваяСтрока = ТаблицаЗагрузкиИзТСД.Добавить();
			Лог = Лог + "ДанныеДорожки(" + НомерДорожки + "): " + ДанныеДорожек[НомерДорожки - 1] + Символы.ПС;
		КонецЦикла;
		// Выводим считанные данные
		Дорожка1 = ?(ДанныеДорожек.Количество() > 0, ДанныеДорожек[0], "");
		Дорожка2 = ?(ДанныеДорожек.Количество() > 1, ДанныеДорожек[1], "");
		Дорожка3 = ?(ДанныеДорожек.Количество() > 2, ДанныеДорожек[2], "");
		
	ИначеЕсли ТипЗнч(ДанныеДорожек) = Тип("Строка") Тогда
		Дорожка1 = ДанныеДорожек;
		Лог = Лог + "ДанныеДорожек: " + ДанныеДорожек + Символы.ПС;
	КонецЕсли;
	
	Лог = Лог + "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
	ОбновитьОтображениеДанных();

	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ДанныеСканераПриИзменении(Элемент)
	
	ТипШтрихкода  = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(ДанныеСканера);
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.НачатьОтключениеВсегоОборудования();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииНаСервере

&НаСервере
Процедура ПолучитьОборудованиеРМНаСервере()

	Отбор = Новый Структура("РабочееМесто", РабочееМесто);
	ОборудованиеРМ = Справочники.ПодключаемоеОборудование.Выбрать(,, Отбор);
	Пока ОборудованиеРМ.Следующий() Цикл
		Если НЕ ОборудованиеРМ.УстройствоИспользуется Или ОборудованиеРМ.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		_ТипОборудования = ОборудованиеРМ.ТипОборудования;
		Если _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода Тогда
			СканерШК = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор Тогда
			ФР = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
			ККТ = ОборудованиеРМ.Ссылка;
		//ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных Тогда
		//	ТСД = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя Тогда
			Дисплей = ОборудованиеРМ.Ссылка;
		//ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт Тогда
		//	СчитывательМК = ОборудованиеРМ.Ссылка;
		//ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СчитывательRFID Тогда
		//	СчитывательRFID = ОборудованиеРМ.Ссылка;
		//ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы Тогда
		//	Весы = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал Тогда
			ЭТ = ОборудованиеРМ.Ссылка;
		//ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		//	ВесыСПечатьюЭтикеток = ОборудованиеРМ.Ссылка;
		//ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККМОфлайн Тогда
		//	ККМOffline = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков Тогда
			ПринтерЧеков = ОборудованиеРМ.Ссылка;
		//ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЭтикеток Тогда
		//	ПринтерЭтикеток = ОборудованиеРМ.Ссылка;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОчиститьКэш()
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокиМакетаСлипЧека()
   
  Возврат Обработки.ТестированиеПодключаемогоОборудования.ПолучитьМакет("МакетЧеков").ПолучитьТекст();

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПолучитьТекущееТО(ИмяТипа)
	Если ИмяТипа = "ФР" Тогда
		Оборудование = ФР;
	ИначеЕсли ИмяТипа = "ККТ" Тогда
		Оборудование = ККТ;
	ИначеЕсли ИмяТипа = "ТСД" Тогда
		Оборудование = ТСД;
	ИначеЕсли ИмяТипа = "Дисплей" Тогда
		Оборудование = Дисплей;
	ИначеЕсли ИмяТипа = "Весы" Тогда
		Оборудование = Весы;
	ИначеЕсли ИмяТипа = "ЭТ" Тогда
		Оборудование = ЭТ;
	ИначеЕсли ИмяТипа = "Сканер" Тогда
		Оборудование = СканерШК;
	ИначеЕсли ИмяТипа = "RFID" Тогда
		Оборудование = СчитывательRFID;
	ИначеЕсли ИмяТипа = "СМК" Тогда
		Оборудование = СчитывательМК;
	ИначеЕсли ИмяТипа = "ВесыСПечатьюЭтикеток" Тогда
		Оборудование = ВесыСПечатьюЭтикеток;
	ИначеЕсли ИмяТипа = "ПринтерЧеков" Тогда
		Оборудование = ПринтерЧеков;
	ИначеЕсли ИмяТипа = "ПЭ" Тогда
		Оборудование = ПринтерЭтикеток;
	КонецЕсли;
	Возврат Оборудование;
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура РабочееМестоПриИзменении(Элемент)

	// Заполняем оборудование рабочего места.
	ПолучитьОборудованиеРМНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьУстройствоВыполнить_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " Имя команды: Подключить - Завершение" + Символы.ПС;
	ОписаниеОшибки = ?(РезультатВыполнения.Результат, "Команда выполнена успешно!", РезультатВыполнения.ОписаниеОшибки);
	
	// Пишем лог
	Лог = Лог + Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " " + ОписаниеОшибки + Символы.ПС +
	      "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьУстройствоВыполнить(Команда)

	// Получаем имя типу оборудования.
	ИмяТипа = СтрЗаменить(ТекущийЭлемент.Имя, "Подключить", "");
	// Получаем оборудование по типу.
	Оборудование = ПолучитьТекущееТО(ИмяТипа);
	Если Оборудование.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьУстройствоВыполнить_Завершение", ЭтотОбъект);                                 
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(ОповещенияПриПодключении, УникальныйИдентификатор, Оборудование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьУстройствоВыполнить_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " Имя команды: Отключить - Завершение" + Символы.ПС;
	ОписаниеОшибки = ?(РезультатВыполнения.Результат, "Команда выполнена успешно!", РезультатВыполнения.ОписаниеОшибки);
	
	Лог = Лог + Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " " + ОписаниеОшибки + Символы.ПС +
	      "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьУстройствоВыполнить(Команда)
	
	// Получаем имя типу оборудования.
	ИмяТипа = СтрЗаменить(ТекущийЭлемент.Имя,"Отключить","");
	// Получаем оборудование по типу.
	Оборудование = ПолучитьТекущееТО(ИмяТипа);
	Если Оборудование.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ОтключитьУстройствоВыполнить_Завершение", ЭтотОбъект);                                 
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоИдентификатору(ОповещенияПриПодключении, УникальныйИдентификатор, Оборудование);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьУстройствоВыполнить(Команда)
	
	// Получаем имя типу оборудования.
	ИмяТипа = СтрЗаменить(ТекущийЭлемент.Имя,"Настроить","");
	// Получаем оборудование по типу.
	Оборудование = ПолучитьТекущееТО(ИмяТипа);
	Если Оборудование.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.ВыполнитьНастройкуОборудования(Оборудование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКэшВыполнить()
	
	ОчиститьКэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестВыполнить_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " Имя команды: ТестУстройства - Завершение" + Символы.ПС;
	ОписаниеОшибки = ?(РезультатВыполнения.Результат, "Команда выполнена успешно!", РезультатВыполнения.ОписаниеОшибки);
	
	Если РезультатВыполнения.ВыходныеПараметры.Количество() > 1 Тогда
		ОписаниеОшибки = РезультатВыполнения.ВыходныеПараметры[1];
	Иначе
		ОписаниеОшибки = "";
	КонецЕсли;

	Если РезультатВыполнения.Результат Тогда
		ОписаниеОшибки = "Команда выполнена успешно." + Символы.ПС + ОписаниеОшибки;
	Иначе
		ОписаниеОшибки = "Тест не был пройден." + + Символы.ПС + ОписаниеОшибки;
	КонецЕсли;
	
	// Пишем лог
	Лог = Лог + Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " " + ОписаниеОшибки + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестВыполнить(Команда)
	
	// Получаем имя типу оборудования.
	ИмяТипа = СтрЗаменить(ТекущийЭлемент.Имя,"Тест","");
	// Получаем оборудование по типу.
	Оборудование = ПолучитьТекущееТО(ИмяТипа);
	Если Оборудование.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(Оборудование);
	Если НЕ ПараметрыУстройства.Количество() > 0  Тогда
		ОписаниеОшибки = НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.
		|Сделать это можно при помощи формы ""Настройка параметров"" модели
		|подключаемого оборудования в форме ""Подключение и настройка оборудования"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	Иначе
		ВходныеПараметры = Неопределено;
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ТестВыполнить_Завершение", ЭтотОбъект);       
		МенеджерОборудованияКлиент.НачатьВыполнениеДополнительнойКоманды(ОповещениеПриЗавершении, "CheckHealth", ВходныеПараметры, Оборудование, ПараметрыУстройства)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсеПодключенноеОборудованиеВыполнить()
	
	МенеджерОборудованияКлиент.НачатьОтключениеВсегоОборудования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоставляемыеДрайвера(Команда)
	
	МенеджерОборудованияВызовСервераПереопределяемый.ОбновлениеБиблиотеки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыККМ

&НаКлиенте
Функция ПолучитьШаблонЧекаПечатиШтрихкодов()
	
	Текст = ФУТекст;
	
	Если ПечатьШтрихкодаEAN8 Тогда
		Текст = Текст + Символы.ПС + "|ШтрихКод|EAN8|" + ШтрихкодEAN8;
	КонецЕсли;
	
	Если ПечатьШтрихкодаEAN13 Тогда
		Текст = Текст + Символы.ПС + "|ШтрихКод|EAN13|" + ШтрихкодEAN13;
	КонецЕсли;
	
	Если ПечатьШтрихкодаCODE39 Тогда
		Текст = Текст + Символы.ПС + "|ШтрихКод|CODE39|" + ШтрихкодCODE39;
	КонецЕсли;
	
	Если ПечатьШтрихкодаQR Тогда
		Текст = Текст + Символы.ПС + "|ШтрихКод|QR|" + ШтрихкодQR;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаСервере	
Функция ПолучитьШаблонЧека()
	
	// Общие параметры чека
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	// Параметры установлены по умолчанию.
	ОбщиеПараметры.ТипРасчета = ТипРасчета;
	ОбщиеПараметры.Электронно = Ложь;
	
	ОбщиеПараметры.ПокупательEmail = Неопределено;
	ОбщиеПараметры.ПокупательНомер = Неопределено;
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.Кассир          = "Иванов И.И";
	ОбщиеПараметры.СистемаНалогообложения = СистемаНалогообложения;
	ОбщиеПараметры.ОрганизацияНазвание = "ООО ""1C-СОФТ""";
	ОбщиеПараметры.ОрганизацияИНН = "7709860400";
	ОбщиеПараметры.ОрганизацияКПП = "770901001";
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = "1";
	ОбщиеПараметры.НомерСмены     = "1";
	ОбщиеПараметры.Отправляет1СSMS   = Отправляет1СSMS;   // SMS отправляет средствами 1C.
	ОбщиеПараметры.Отправляет1СEmail = Отправляет1СEmail; // Email отправляет средствами 1C. 
	ОбщиеПараметры.АдресРасчетов  = "г.Москва, Дмитровское ш. д.9";
	ОбщиеПараметры.МестоРасчетов  = "Торговый островок на 1 этаже";
	
	Если ДанныеАгента Тогда
		ОбщиеПараметры.ПризнакАгента = ПризнакАгента;
		ОбщиеПараметры.ДанныеАгента.ПлатежныйАгент.Операция = "Оплата";
		ОбщиеПараметры.ДанныеАгента.ПлатежныйАгент.Телефон = "+7(800)555-06-06";
		ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Телефон = "+7(495)231-36-45";
		ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Наименование = "КИВИ Банк (АО)";
		ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Адрес = "117648, г.Москва, мкр.Чертаново Северное, д.1А, корп.1";
		ОбщиеПараметры.ДанныеАгента.ОператорПеревода.ИНН = "7740000076";
		ОбщиеПараметры.ДанныеПоставщика.Телефон = "+7(800)250-05-05";
		ОбщиеПараметры.ДанныеПоставщика.Наименование = "Мобильные ТелеСистемы";
		ОбщиеПараметры.ДанныеПоставщика.ИНН = "7740000076";
	КонецЕсли;
	
	// Фискальная строка 1
	СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
	СтрокаПозицииЧека.Наименование = "Товарная позиция";
	СтрокаПозицииЧека.Количество   = 3;
	СтрокаПозицииЧека.Цена         = 100;
	СтрокаПозицииЧека.Сумма        = 330;
	СтрокаПозицииЧека.НомерСекции  = 1;
	СтрокаПозицииЧека.СтавкаНДС    = Неопределено;
	Если ПризнакиСпособаРасчета Тогда
		СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	КонецЕсли;
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	// Нефискальная строка
	ТекстоваяСтрокаЧека = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека();
	ТекстоваяСтрокаЧека = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека("Для подключение оборудования к автоматизированным системам на платформе «1С:Предприятие» используется ""1С:Библиотека подключаемого оборудования"". Библиотека предоставляет набор высокоуровневых механизмов для унифицированной работы с подключаемым оборудованием. Применение данной библиотеки позволяет ускорить реализацию поддержки широкого спектра моделей подключаемого оборудования в разрабатываемых конфигурациях, а также добавить готовые функциональные блоки в уже работающие прикладные решения.");
	ТекстоваяСтрокаЧека.ПереносСтроки = Истина;
	ОбщиеПараметры.ПозицииЧека.Добавить(ТекстоваяСтрокаЧека);
	
	// Фискальная строка 2
	СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
	СтрокаПозицииЧека.Наименование = "Оплата за телефон";
	СтрокаПозицииЧека.Количество   = 1;
	СтрокаПозицииЧека.Цена         = 100;
	СтрокаПозицииЧека.Сумма        = 100;
	СтрокаПозицииЧека.НомерСекции  = 1;
	СтрокаПозицииЧека.СтавкаНДС    = 18;
	Если ДанныеАгента Тогда
		СтрокаПозицииЧека.ДанныеАгента.ПлатежныйАгент.Операция = "Оплата";
		СтрокаПозицииЧека.ДанныеАгента.ПлатежныйАгент.Телефон = "+7(800)555-06-06";
		СтрокаПозицииЧека.ДанныеПоставщика.Телефон = "+7(800)250-05-05";
		СтрокаПозицииЧека.ДанныеПоставщика.Наименование = "Мобильные ТелеСистемы";
		СтрокаПозицииЧека.ДанныеПоставщика.ИНН = "7740000076";
	КонецЕсли;
	Если ПризнакиСпособаРасчета Тогда
		СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
	КонецЕсли;
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	// Фискальная строка 3
	СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
	СтрокаПозицииЧека.Наименование = "Другая товарная позиция c очень длинным наименование для проверки";
	СтрокаПозицииЧека.Количество   = 2;
	СтрокаПозицииЧека.Цена         = 100;
	СтрокаПозицииЧека.Сумма        = 150;
	СтрокаПозицииЧека.СуммаСкидок  = 50;
	СтрокаПозицииЧека.НомерСекции  = 1;
	Если Ндс10110 Тогда
		СтрокаПозицииЧека.СтавкаНДС = 110;
	Иначе
		СтрокаПозицииЧека.СтавкаНДС  = 10;
	КонецЕсли;
	Если ПризнакиСпособаРасчета Тогда
		СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс;
	КонецЕсли;
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	// Фискальная строка 4
	СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
	СтрокаПозицииЧека.Наименование = "Хлеб белый";
	СтрокаПозицииЧека.Количество   = 1;
	СтрокаПозицииЧека.Цена         = 30;
	СтрокаПозицииЧека.Сумма        = 30;
	СтрокаПозицииЧека.СуммаСкидок  = 0;
	СтрокаПозицииЧека.НомерСекции  = 3;
	СтрокаПозицииЧека.СтавкаНДС    = Неопределено;
	Если ПризнакиСпособаРасчета Тогда
		СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	КонецЕсли;
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	// Фискальная строка 5
	СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
	СтрокаПозицииЧека.Наименование = "Яблоки на развес";
	СтрокаПозицииЧека.Количество   = 0.61;
	СтрокаПозицииЧека.Цена         = 172.5;
	СтрокаПозицииЧека.Сумма        = 105.23;
	СтрокаПозицииЧека.НомерСекции  = 3;
	Если Ндс10110 Тогда
		СтрокаПозицииЧека.СтавкаНДС = 118;
	Иначе
		СтрокаПозицииЧека.СтавкаНДС = 18;
	КонецЕсли;
	Если ПризнакиСпособаРасчета Тогда
		СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	КонецЕсли;
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека("Накопление по карте: 234543443");
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека("Другая товарная позиция c очень длинным наименование для проверки");
	СтрокаПозицииЧека.ПереносСтроки = Истина;
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека("Другая f");
	СтрокаПозицииЧека.Выравнивание  = "Центр";
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыШтрихкодВСтрокеЧека("EAN13", "2900001462105");
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	Если НесколькоВидовОплат Тогда
		СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
		СтрокаОплаты.Сумма = 500; 
		СтрокаОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные");
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		
		СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
		СтрокаОплаты.Сумма = 300; 
		СтрокаОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата");
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		
		СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
		СтрокаОплаты.Сумма = 200; 
		СтрокаОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно");
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	Иначе
		СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты(); 
		СтрокаОплаты.Сумма = 1000; 
		СтрокаОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные");
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Если НефискальнаяКвитанция Тогда
		
		НефискальныйДокумент = Новый Массив();
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека("Накопление по карте: 234543443");
		НефискальныйДокумент.Добавить(СтрокаПозицииЧека);
	
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека("Другая товарная позиция c очень длинным наименование для проверки");
		СтрокаПозицииЧека.ПереносСтроки = Истина;
		НефискальныйДокумент.Добавить(СтрокаПозицииЧека);
	
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека("Другая f");
		СтрокаПозицииЧека.Выравнивание  = "Центр";
		НефискальныйДокумент.Добавить(СтрокаПозицииЧека);
	
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыШтрихкодВСтрокеЧека("EAN13", "2900001462105");
		НефискальныйДокумент.Добавить(СтрокаПозицииЧека);
	
		ОбщиеПараметры.НефискальныеДокументы.Добавить(НефискальныйДокумент);
		
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции

&НаКлиенте
Процедура ФУ_КомандаВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ОчиститьСообщения();
	Элементы.ФискальноеУстройство.Доступность = Истина;
	
	НомерСмены  = Неопределено; 
	НомерЧека   = Неопределено;
	СтатусСмены = Неопределено;
	ФискальныйПризнак = Неопределено;
	СайтПроверкиОФД   = Неопределено;
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='Операция завершена.'");
		Если РезультатВыполнения.ВыходныеПараметры.Количество() > 0 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + РезультатВыполнения.ВыходныеПараметры[0];
			Если РезультатВыполнения.ВыходныеПараметры.Количество() > 1 Тогда
				НомерСмены = РезультатВыполнения.ВыходныеПараметры[0]; 
				НомерЧека  = РезультатВыполнения.ВыходныеПараметры[1];
				Если РезультатВыполнения.ВыходныеПараметры.Количество() > 2 Тогда
					СтатусСмены  = РезультатВыполнения.ВыходныеПараметры[2];
				КонецЕсли;
				Если РезультатВыполнения.ВыходныеПараметры.Количество() > 4 Тогда
					ФискальныйПризнак  = РезультатВыполнения.ВыходныеПараметры[4];
				КонецЕсли;
				Если РезультатВыполнения.ВыходныеПараметры.Количество() > 5 Тогда
					СайтПроверкиОФД  = РезультатВыполнения.ВыходныеПараметры[5];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		// Пишем лог
		ОтветОтУстройства = ОтветОтУстройства + ТекстСообщения + Символы.ПС;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_КомандаПараметрыВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ОчиститьСообщения();
	Элементы.ФискальноеУстройство.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='Операция завершена.'");
		Если РезультатВыполнения.ВыходныеПараметры.Количество() > 0 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + РезультатВыполнения.ВыходныеПараметры[0];
			Сообщить("НомерСмены="  + РезультатВыполнения.ВыходныеПараметры[0]); 
			Сообщить("НомерЧека="   + РезультатВыполнения.ВыходныеПараметры[1]); 
			Сообщить("СтатусСмены=" + РезультатВыполнения.ВыходныеПараметры[2]); 
			ПараметрыСостояния = РезультатВыполнения.ВыходныеПараметры[4];
			Если ПараметрыСостояния <> Неопределено Тогда
				Для Каждого ПараметрСостояния Из ПараметрыСостояния Цикл
					Сообщить(ПараметрСостояния.Ключ + "=" + ПараметрСостояния.Значение);
				КонецЦикла;
			КонецЕсли
		КонецЕсли;
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		// Пишем лог
		ОтветОтУстройства = ОтветОтУстройства + ТекстСообщения + Символы.ПС;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФискальноеУстройство()
	
	Если ФискальноеУстройствоТип = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор") Тогда
		ФискальноеУстройство = ФР
	ИначеЕсли ФискальноеУстройствоТип = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ПринтерЧеков") Тогда
		ФискальноеУстройство = ПринтерЧеков
	Иначе
		ФискальноеУстройство = ККТ
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	Иначе
		Возврат ФискальноеУстройство;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ФУ_ОткрытьСмену(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;

	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
	ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ЗакрытьСмену(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
	ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ВнестиСумму(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = Новый Структура("ТипИнкассации, Сумма", 1, СуммаИнкассации);
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ИзъятьСумму(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = Новый Структура("ТипИнкассации, Сумма", 0, СуммаИнкассации);
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПечатьТекста(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	СтрокиПечати = ПолучитьСтрокиМакетаСлипЧека();
	//Печатаем слип чек
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, СтрокиПечати, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПечатьТекстовыхДокументов(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПозицииЧека = ПолучитьШаблонЧека().ПозицииЧека;
	НефискальныеДокументы = Новый Массив();
	НефискальныеДокументы.Добавить(ПозицииЧека);
	НефискальныеДокументы.Добавить(ПозицииЧека);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПечатьТекстовыхДокументов(ОповещениеПриЗавершении, УникальныйИдентификатор, НефискальныеДокументы, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ОтчетОТекущемСостоянииРасчетов(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
	ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФормированиеОтчетаОТекущемСостоянииРасчетов(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ОтчетБезГашения(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
	ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФормированиеОтчетаБезГашения(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ОперацияФН_Продолжить(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения <> Неопределено И Тип(РезультатВыполнения) = Тип("Структура") Тогда
		ФискальноеУстройство = ПолучитьФискальноеУстройство();
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьОперациюФНДляФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, РезультатВыполнения, ФискальноеУстройство); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ОперацияФН(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = Новый Структура("ФискальноеУстройство", ФискальноеУстройство);
	Обработчик = Новый ОписаниеОповещения("ФУ_ОперацияФН_Продолжить", ЭтотОбъект);
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ПараметрыФискализации", ПараметрыОперации,,,,,Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_НапечататьЧекПоШаблону(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = ПолучитьШаблонЧека();
	
	МенеджерОборудованияКлиентСервер.ПровестиФорматоЛогическийКонтроль(ПараметрыОперации, ФискальноеУстройство); 
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПечатьЧекаКоррекции(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОперацииЧекаКоррекции();
	ПараметрыОперации.ТипРасчета     = ТипРасчета;
	ПараметрыОперации.Сумма          = СуммаИнкассации;
	ПараметрыОперации.НаличнаяОплата = СуммаИнкассации;
	ПараметрыОперации.Кассир     = НСтр("ru='Администратор'");
	ПараметрыОперации.СистемаНалогообложения = СистемаНалогообложения;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьФормированиеЧекаКоррекцииНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПолучитьПараметрыЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Элементы.ФискальноеУстройство.Доступность = Истина;
	
	ОчиститьСообщения();
	
	Если РезультатВыполнения.Результат Тогда
		ПараметрыККТ = РезультатВыполнения.ВыходныеПараметры;
		Если ПараметрыККТ <> Неопределено Тогда
			Для Каждого ПараметрККТ из ПараметрыККТ Цикл
				Сообщить(ПараметрККТ.Ключ + "=" + ПараметрККТ.Значение);
			КонецЦикла;
		КонецЕсли
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		// Пишем лог
		ОтветОтУстройства = ОтветОтУстройства + ТекстСообщения + Символы.ПС;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПолучитьПараметры(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_ПолучитьПараметрыЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПолучениеПараметровФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПолучитьТекущееСостояние(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаПараметрыВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПолучениеТекущегоСостоянияФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство);

КонецПроцедуры

&НаКлиенте
Процедура ФУ_ОткрытьДенежныйЯщик(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОткрытиеДенежногоЯщика(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПолучитьШиринуСтроки(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПолучениеШириныСтрокиПечатающегоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПечатьТекстаИШтрихкода(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	СтрокиПечати = ПолучитьШаблонЧекаПечатиШтрихкодов();
	//Печатаем слип чек
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, СтрокиПечати, ФискальноеУстройство);

КонецПроцедуры

&НаКлиенте
Процедура ФУ_АннулироватьЧек(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОперацииАннулированияЧека();
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьАннулированиеЧекаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, ФискальноеУстройство);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыRFID

&НаКлиенте
Процедура RFID_ОперацияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Операция выполнена успешно:'") + РезультатВыполнения.ИдентификаторУстройства);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура RFID_ОткрытьСессию(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОткрытиеСессииСчитывателяRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID);
	
КонецПроцедуры

&НаКлиенте
Процедура RFID_ЗакрытьСессию(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗакрытиеСессииСчитывателяRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID);

КонецПроцедуры

&НаКлиенте
Процедура RFID_ЗаписатьВМеткуEPC(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущаяСрока = Элементы.МеткиRFID.ТекущиеДанные;
	Если ТекущаяСрока <> Неопределено Тогда
		ПараметрыЗаписи = МенеджерОборудованияКлиент.ПараметрыЗаписиМеткиRFID();
		ПараметрыЗаписи.TID = ТекущаяСрока.TID;
		ПараметрыЗаписи.EPC = ТекущаяСрока.EPC;
		ПараметрыЗаписи.БанкПамяти = "EPC";
		ПараметрыЗаписи.Данные = МенеджерОборудованияКлиентСервер.СформироватьДанныеSGTIN96(ТекущаяСрока.GTIN, ТекущаяСрока.СерийныйНомер);
		ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьЗаписьДанныхВМеткуRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура RFID_ЗаписатьВМеткуGTINSerial(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущаяСрока = Элементы.МеткиRFID.ТекущиеДанные;
	Если ТекущаяСрока <> Неопределено Тогда
		ПараметрыЗаписи = МенеджерОборудованияКлиент.ПараметрыЗаписиМеткиRFID();
		ПараметрыЗаписи.TID = ТекущаяСрока.TID;
		ПараметрыЗаписи.EPC = ТекущаяСрока.EPC;
		ПараметрыЗаписи.БанкПамяти = "EPC";
		ПараметрыЗаписи.Данные = МенеджерОборудованияКлиентСервер.СформироватьДанныеSGTIN96(ТекущаяСрока.GTIN, ТекущаяСрока.СерийныйНомер);
		ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьЗаписьДанныхВМеткуRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура RFID_ЗаписатьВМеткуUserMemory(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущаяСрока = Элементы.МеткиRFID.ТекущиеДанные;
	Если ТекущаяСрока <> Неопределено Тогда
		ПараметрыЗаписи = МенеджерОборудованияКлиент.ПараметрыЗаписиМеткиRFID();
		ПараметрыЗаписи.TID = ТекущаяСрока.TID;
		ПараметрыЗаписи.EPC = ТекущаяСрока.EPC;
		ПараметрыЗаписи.БанкПамяти = "USER";
		ПараметрыЗаписи.Данные = МенеджерОборудованияКлиентСервер.ПреобразоватьСтрокуВHEX(ТекущаяСрока.UserMemory);
		ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьЗаписьДанныхВМеткуRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID, ПараметрыЗаписи);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура RFID_ГенерироватьСерийныйНомер(Команда)
	
	ТекущаяСрока = Элементы.МеткиRFID.ТекущиеДанные;
	Если ТекущаяСрока <> Неопределено Тогда
		TID = ТекущаяСрока.TID;
		EPC = ТекущаяСрока.EPC;
		
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПолучитьСерийныйНомерПоTID(TID, EPC);
		Если РезультатВыполнения.Результат Тогда
			ТекущаяСрока.СерийныйНомер = Формат(РезультатВыполнения.СерийныйНомер, "ЧВН=; ЧГ=");
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыТСД

&НаКлиенте
Процедура ТСД_ОперацияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат И РезультатВыполнения.Свойство("ТаблицаТоваров") Тогда
		ТаблицаЗагрузкиИзТСД.Очистить();
		Для Каждого Позиция Из РезультатВыполнения.ТаблицаТоваров Цикл
			НоваяСтрока = ТаблицаЗагрузкиИзТСД.Добавить();
			НоваяСтрока.Штрихкод   = Позиция.Штрихкод;
			НоваяСтрока.Количество = Позиция.Количество;
			НоваяСтрока.МаркаАлкогольнойПродукции = ?(Позиция.Свойство("ШтрихкодМаркиАлкогольнойПродукции"), Позиция.ШтрихкодМаркиАлкогольнойПродукции, "");
			НоваяСтрока.СерийныйНомерАлкогольнойПродукции = ?(Позиция.Свойство("СерийныйНомерАлкогольнойПродукции"), Позиция.СерийныйНомерАлкогольнойПродукции, "");
		КонецЦикла;
	КонецЕсли;
	
	ТекстСообщения = ?(РезультатВыполнения.Результат, НСтр("ru='Операция выполнена успешна.'"), РезультатВыполнения.ОписаниеОшибки);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	Элементы.РаботаСТСД.Доступность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТСД_ОчиститьТаблицу(Команда)
	
	ТаблицаЗагрузкиИзТСД.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ЗагрузитьБезПодключения(Команда)
	
	Элементы.РаботаСТСД.Доступность = Ложь;
	
	ТаблицаЗагрузкиИзТСД.Очистить();
	ОповещенияПриЗагрузкеИзТСД = Новый ОписаниеОповещения("ТСД_ОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(ОповещенияПриЗагрузкеИзТСД, УникальныйИдентификатор, ТСДСворачиватьДанныеПриЗагрузке);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ВыгрузитьБезПодключенияВыполнить(Команда)
	
	Элементы.РаботаСТСД.Доступность = Ложь;
	
	ТаблицаТСД = Новый Массив;
	Для каждого текСтрока Из ТаблицаЗагрузкиИзТСД Цикл
		
		НоваяСтрока = Новый Структура;
		
		НоваяСтрока.Вставить("Штрихкод",					текСтрока.Штрихкод);
		НоваяСтрока.Вставить("Номенклатура",				текСтрока.Номенклатура);
		НоваяСтрока.Вставить("ЕдиницаИзмерения",			текСтрока.ЕдиницаИзмерения);
		НоваяСтрока.Вставить("ХарактеристикаНоменклатуры",	текСтрока.ХарактеристикаНоменклатуры);
		НоваяСтрока.Вставить("СерияНоменклатуры",			текСтрока.СерияНоменклатуры);
		НоваяСтрока.Вставить("Качество",					текСтрока.Качество);
		НоваяСтрока.Вставить("Цена",						текСтрока.Цена);
		НоваяСтрока.Вставить("Количество",					текСтрока.Количество);
		
		ТаблицаТСД.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ОповещенияПриВыгрузкеВТСД = Новый ОписаниеОповещения("ТСД_ОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыгрузкуДанныеВТСД(ОповещенияПриВыгрузкеВТСД, УникальныйИдентификатор, ТаблицаТСД, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ОчиститьТовары(Команда)
	
	Элементы.РаботаСТСД.Доступность = Ложь;
	
	ОповещенияПриЗавершении = Новый ОписаниеОповещения("ТСД_ОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОчисткуДанныеВТСД(ОповещенияПриЗавершении, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ЗаполнитьБазуДемоДанными(Команда)
	
	ТСД_ЗаполнитьДемоДанные(50);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ЗаполнитьБазуДемоДанными1000(Команда)
	
	ТСД_ЗаполнитьДемоДанные(1000);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ЗаполнитьДемоДанные(Количество)
	
	// Формирование тестовых данных.
	Для Итератор = 1 По Количество Цикл
		Строка = ТаблицаЗагрузкиИзТСД.Добавить();
		Строка.Штрихкод = ТекущийПЛУ;
		Строка.Номенклатура = "Наименование товара " + Строка(ТекущийПЛУ);	
		Строка.ЕдиницаИзмерения = "Штука";
		Строка.ХарактеристикаНоменклатуры = "Цвет" + Строка(ТекущийПЛУ);
		Строка.СерияНоменклатуры  = "Серия" + Строка(ТекущийПЛУ); 
		Строка.Качество  = "Качество"; 
		Строка.Цена = ТекущийПЛУ + 11.20;
		Строка.Количество = ТекущийПЛУ;
		ТекущийПЛУ = ТекущийПЛУ + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыДисплеиПокупателя

&НаКлиенте
Процедура ДП_ВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ТекстСообщения = ?(РезультатВыполнения.Результат, НСтр("ru='Операция завершена.'"), РезультатВыполнения.ОписаниеОшибки);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДП_ВывестиТекстВыполнить()
	
	Если Не ЗначениеЗаполнено(Дисплей) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ДП_ВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыводИнформацииНаДисплейПокупателя(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, Дисплей, ДПТекст); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДП_ОчиститьТекстВыполнить()
	
	Если Не ЗначениеЗаполнено(Дисплей) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ДП_ВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОчисткуДисплеяПокупателя(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, Дисплей); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыЭлектронныеВесы

&НаКлиенте
Процедура ЭВ_ПолучитьВесВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Элементы.РаботаВесовоеОборудование.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = НСтр("ru='Операция завершена.'");
		Если РезультатВыполнения.Вес = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Электронные весы вернули нулевой вес.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Вес = 0;
		Иначе
			Вес = РезультатВыполнения.Вес;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭВ_ТарироватьВыполнить(Команда)
	
	Если Не ЗначениеЗаполнено(Весы) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Элементы.РаботаВесовоеОборудование.Доступность = Ложь;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ЭВ_ПолучитьВесВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, Весы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭВ_ПолучитьВесВыполнить(Команда)
	
	Если Не ЗначениеЗаполнено(Весы) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Элементы.РаботаВесовоеОборудование.Доступность = Ложь;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ЭВ_ПолучитьВесВыполнитьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, Весы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыВесыСПечатьюЭтикеток

&НаКлиенте
Процедура ОперацияБезПодключенияЗавершение(Результат, Параметры) Экспорт
	
	Элементы.РаботаВесовоеОборудование.Доступность = Истина;
	
	ОчиститьСообщения();
	
	Если Результат.Результат Тогда
		Лог = "Операция завершилась успешно." + Символы.ПС;
	Иначе
		Лог = Результат.ОписаниеОшибки + Символы.ПС;
	КонецЕсли;
	
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивБазыТоваровВесовСПечатьюЭтикеток()

	МассивВыгрузки = Новый Массив();
	
	Для Каждого СтрокаТЧ Из ТаблицаТоваровВесовСПечатьюЭтикеток Цикл
		
		ЭлементМассива = Новый Структура;
		
		ЭлементМассива.Вставить("PLU",					СтрокаТЧ.PLU);
		ЭлементМассива.Вставить("Код",					СтрокаТЧ.Код);
		ЭлементМассива.Вставить("Штрихкод",				СтрокаТЧ.Штрихкод);
		ЭлементМассива.Вставить("Наименование",			СтрокаТЧ.Наименование);
		ЭлементМассива.Вставить("НаименованиеПолное",	СтрокаТЧ.НаименованиеПолное);
		ЭлементМассива.Вставить("Цена",					СтрокаТЧ.Цена);
		ЭлементМассива.Вставить("ОписаниеТовара",		СтрокаТЧ.ОписаниеТовара);
		ЭлементМассива.Вставить("СрокХранения",			СтрокаТЧ.СрокХранения);
		
		МассивВыгрузки.Добавить(ЭлементМассива);
		
	КонецЦикла;

	Возврат МассивВыгрузки;

КонецФункции

&НаКлиенте
Процедура ВесыOffline_Выгрузить(Команда)
	
	Если Не ЗначениеЗаполнено(ВесыСПечатьюЭтикеток) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Элементы.РаботаВесовоеОборудование.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияБезПодключенияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток(ОповещениеПриЗавершении, УникальныйИдентификатор, ПолучитьМассивБазыТоваровВесовСПечатьюЭтикеток(), ВесыСПечатьюЭтикеток);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыOffline_ОчиститьБазу(Команда)
	
	Если Не ЗначениеЗаполнено(ВесыСПечатьюЭтикеток) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Элементы.РаботаВесовоеОборудование.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияБезПодключенияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОчисткуТоваровВВесахСПечатьюЭтикеток(ОповещениеПриЗавершении, УникальныйИдентификатор, ВесыСПечатьюЭтикеток);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыOffline_ЗаполнитьБазуДемоДанными(Команда)
	
	ВесыOffline_ЗаполнитьДемоДанные(50);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыOffline_ЗаполнитьБазуДемоДанными1000(Команда)
	
	ВесыOffline_ЗаполнитьДемоДанные(1000);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыOffline_ЗаполнитьДемоДанные(Количество)
	
	// Формирование тестовых данных.
	Для Итератор = 1 По Количество Цикл
		Строка = ТаблицаТоваровВесовСПечатьюЭтикеток.Добавить();
		Строка.PLU = ТекущийПЛУ;
		Строка.Наименование = "Наименование товара " + Строка(ТекущийПЛУ);
		Строка.Цена = ТекущийПЛУ + 11.01;
		Строка.Код = ТекущийПЛУ;
		Строка.СрокХранения = 4;
		Строка.ОписаниеТовара = "Описание товара " + Строка(ТекущийПЛУ);
		ТекущийПЛУ = ТекущийПЛУ + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыOffline_ОчиститьДемоДанные(Команда)
	
	ТаблицаТоваровВесовСПечатьюЭтикеток.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыЭТ

&НаКлиенте
Процедура ЭТ_ВыполнитьОперациюЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Элементы.РаботаСЭТ.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'Операция выполнена успешно.'");
		ЭТНомерСсылкиОперации = ?(РезультатВыполнения.Свойство("СсылочныйНомер"), РезультатВыполнения.СсылочныйНомер, "");
		ЭТНомерКарты = ?(РезультатВыполнения.Свойство("НомерКарты"), РезультатВыполнения.НомерКарты, "");
		ЭТНомерЧека = ?(РезультатВыполнения.Свойство("НомерЧекаЭТ"), РезультатВыполнения.НомерЧекаЭТ, "");
		ЭТКодАвторизации = ?(РезультатВыполнения.Свойство("КодАвторизации"), РезультатВыполнения.КодАвторизации, "");
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭТ_ВыполнитьСверкуИтогов(Команда)
	
	Если Не ЗначениеЗаполнено(ЭТ) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();
	Элементы.РаботаСЭТ.Доступность = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭТ_ВыполнитьОперациюЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(ОписаниеОповещения, УникальныйИдентификатор, ЭТ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭТ_ВыполнитьОперацию(Команда)

	Если ЭТ.Пустая() Тогда
		ТекстСообщения = "ЭТ не выбран.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Элементы.РаботаСЭТ.Доступность = Ложь;
	
	ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыОперации.ТипТранзакции  = ТипЭквайринговойОперации;
	ПараметрыОперации.СуммаОперации  = ЭТСумма;
	ПараметрыОперации.НомерЧека      = ЭТНомерЧека;
	ПараметрыОперации.СсылочныйНомер = ЭТНомерСсылкиОперации;

	ОписаниеОповещения = Новый ОписаниеОповещения("ЭТ_ВыполнитьОперациюЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(ОписаниеОповещения, УникальныйИдентификатор, ЭТ, Неопределено, ПараметрыОперации); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЭТ_НапечататьПоследнийСлипЧек(Команда)
	
	СлипЧек = глПодключаемоеОборудование.ПоследнийСлипЧек;
	Если Не ПустаяСтрока(СлипЧек) Тогда
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, СлипЧек);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Отсутствует последний чек.
		    |Возможно после запуска приложения операции по картам еще не проводились.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыПринтерЭтикеток

&НаСервере
Функция ПолучитьРезультатВыполненияЗапроса(СКД)
	
	МассивНоменклатуры = Новый Массив;
	МассивНоменклатуры.Добавить(НоменклатураДляПечатиЭтикетки);
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
    Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	Настройки = Компоновщик.Настройки;
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("МассивНоменклатуры"));
	Параметр.Значение = МассивНоменклатуры;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПКД = Новый ПроцессорКомпоновкиДанных;
    ПКД.Инициализировать(КомпоновщикМакета.Выполнить(СКД, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")));
	
	ТЗ = Новый ТаблицаЗначений;
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(ТЗ);
    ПроцессорВывода.Вывести(ПКД);

    Возврат ТЗ;
	
КонецФункции

&НаСервере
Функция СформироватьДанныеДляПечати()
	
	СхемаКомпоновкиДанных = Справочники._ДемоЭтикеткиИЦенники.ПолучитьМакет("ПоляШаблонаЭтикетки");
	АдресХранилищаСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	СКД = ПолучитьИзВременногоХранилища(АдресХранилищаСКД);
	РезультатВыполненияЗапроса = ПолучитьРезультатВыполненияЗапроса(СКД);
	
	Поля = Новый Массив;
	
	Если РезультатВыполненияЗапроса.Количество()>0 Тогда
		Источник = РезультатВыполненияЗапроса[0];
		Для Каждого ТекПоле Из Этикетка.Поля Цикл
			Если ТекПоле.ТипЗаполнения = "Parameter" Тогда
				НовоеПоле = Новый Структура;
				НовоеПоле.Вставить("ИмяПоля", ТекПоле.Наименование);
				
				Попытка
					Значение = Вычислить("Источник." + ТекПоле.Значение);
				Исключение
					Значение = "";
				КонецПопытки;
				
				Если ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда
					Значение = Значение.Получить();
					Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
						Значение = Base64Строка(Значение);
					Иначе
						Значение = Строка(Значение);
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(Значение) Тогда
					НовоеПоле.Вставить("Значение", Значение);
				Иначе
					Если ЗначениеЗаполнено(ТекПоле.ЗначениеПоУмолчанию) Тогда
						НовоеПоле.Вставить("Значение", ТекПоле.ЗначениеПоУмолчанию);
					Иначе
						НовоеПоле.Вставить("Значение", "");
					КонецЕсли;
				КонецЕсли;
				Поля.Добавить(НовоеПоле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МассивЭтикеток = Новый Массив;
	НоваяЭтикетка = Новый Структура;
	НоваяЭтикетка.Вставить("Количество", 1);
	НоваяЭтикетка.Вставить("Поля", Поля);
	МассивЭтикеток.Добавить(НоваяЭтикетка);
	
	Возврат Новый Структура("МассивЭтикеток, XMLОписаниеМакета", МассивЭтикеток, Этикетка.XMLОписаниеМакета);
	
КонецФункции

&НаКлиенте
Процедура ПЭ_ПечатьЗавершение(РезультатПечати, ДополнительныеПараметры) Экспорт
	
	Если РезультатПечати.Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Печать завершена.'"));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПечати.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПЭ_Печать(Команда)
	
	ДанныеЗаполнены = Истина;
	
	Если Не ЗначениеЗаполнено(Этикетка) Тогда
		ТекстСообщения = НСтр("ru='Не выбрана этикетка для печати.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ДанныеЗаполнены = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НоменклатураДляПечатиЭтикетки) Тогда
		ТекстСообщения = НСтр("ru='Не выбрана номенклатура для печати этикетки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ДанныеЗаполнены = Ложь;
	КонецЕсли;
	
	Если ДанныеЗаполнены Тогда
		ДанныеДляПечати = СформироватьДанныеДляПечати();
		ОписаниеОповещениеПриЗавершенииПечати = Новый ОписаниеОповещения("ПЭ_ПечатьЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьПечатьЭтикеток(ОписаниеОповещениеПриЗавершенииПечати, УникальныйИдентификатор, ДанныеДляПечати.XMLОписаниеМакета, ДанныеДляПечати.МассивЭтикеток, ПринтерЭтикеток);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПЭ_Инициализация(Команда)
	
	Если ПринтерЭтикеток.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Принтер печати этикеток не выбран.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершенииПечати = Новый ОписаниеОповещения("ПЭ_ПечатьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьИнициализацияПринтераЭтикеток(ОписаниеОповещениеПриЗавершенииПечати, УникальныйИдентификатор, ПринтерЭтикеток);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ФискальноеУстройствоТипПриИзменении(Элемент)
	
	Элементы.ККТ_ОперацияФН.Видимость = ФискальноеУстройствоТип = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ")
	
КонецПроцедуры

#КонецОбласти


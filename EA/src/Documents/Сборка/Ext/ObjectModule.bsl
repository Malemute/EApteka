
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Движения.ТоварыКСборке.Очистить();
	Движения.ТоварыКСборке.Записывать = Истина;
	
	Движения.ОстаткиТовара.Очистить();
	Движения.ОстаткиТовара.Записывать = Истина;
	
	Для каждого СтрокаЗаказов из Товары цикл
		
		Движение = Движения.ТоварыКСборке.ДобавитьРасход();
		Движение.Документ = СтрокаЗаказов.Документ;
		Движение.Период = Дата;
		Движение.Регистратор = Ссылка;
		Движение.Склад = Склад;
		Движение.Товар = СтрокаЗаказов.Товар;
		Если ТипСборки <> Перечисления.ТипСборки.СборкаЗаказовИзКоробки тогда
			Движение.Партия = СтрокаЗаказов.Партия;
		КонецЕсли;
		Движение.ТипСборки = ТипСборки;
		Движение.КоличествоКСборке = СтрокаЗаказов.КоличествоСобрано+СтрокаЗаказов.КоличествоНеХватило;	
		
		Если  (СтрокаЗаказов.КоличествоСобрано > 0 и ТипСборки <> Перечисления.ТипСборки.СборкаПеремещения) или СтрокаЗаказов.КоличествоНеХватило > 0 тогда
			Движение = Движения.ТоварыКСборке.ДобавитьПриход();
			Движение.Документ = СтрокаЗаказов.Документ;
			Движение.Период = Дата;
			Движение.Регистратор = Ссылка;
			Движение.Склад = Склад;
			Движение.Товар = СтрокаЗаказов.Товар;
			Если ТипСборки <> Перечисления.ТипСборки.СборкаЗаказовИзКоробки тогда
				Движение.Партия = СтрокаЗаказов.Партия;
			КонецЕсли;
			Движение.ТипСборки = ТипСборки;
			Если ТипСборки = Перечисления.ТипСборки.СборкаПеремещения тогда
				Движение.КоличествоНаКомплектации = 0;	
			Иначе
				Движение.КоличествоНаКомплектации = СтрокаЗаказов.КоличествоСобрано;
			КонецЕсли;
			Движение.КоличествоНеХватило = СтрокаЗаказов.КоличествоНеХватило;
		КонецЕсли;
		
		Если ТипСборки = Перечисления.ТипСборки.СборкаЗаказа 
			или ТипСборки = Перечисления.ТипСборки.СборкаПеремещения тогда				
			Движение = Движения.ОстаткиТовара.ДобавитьРасход();
			Движение.Период = Дата;
			Движение.Регистратор = Ссылка;
			Движение.Товар = СтрокаЗаказов.Товар;
			Движение.Отдел = Склад;
			Движение.ДокументРезерва = СтрокаЗаказов.Документ;
			Движение.Партия = СтрокаЗаказов.Партия;
			Движение.Резерв = СтрокаЗаказов.КоличествоСобрано;	
		КонецЕсли;
	КонецЦикла;
	
	//Спишем остатки по потерям	
	Для каждого СтрокаПотери из Потери цикл
		
		Движение = Движения.ОстаткиТовара.ДобавитьРасход();
		Движение.Отдел = Склад;
		Движение.Регистратор = Ссылка;
		Движение.Период = Дата;
		Движение.Товар = СтрокаПотери.Товар;
		Движение.Партия = СтрокаПотери.Партия;
		Движение.ДокументРезерва = СтрокаПотери.Документ;
		Движение.Остаток = СтрокаПотери.Остаток;
		
		Движение = Движения.ОстаткиТовара.ДобавитьРасход();
		Движение.Отдел = Склад;
		Движение.Регистратор = Ссылка;
		Движение.Период = Дата;
		Движение.Товар = СтрокаПотери.Товар;
		Движение.Партия = СтрокаПотери.Партия;
		Движение.ДокументРезерва = СтрокаПотери.Документ;
		Движение.Резерв = СтрокаПотери.Резерв;
		
		Движение = Движения.ОстаткиТовара.ДобавитьПриход();
		Движение.Отдел = СкладПотерь;
		Движение.Регистратор = Ссылка;
		Движение.Период = Дата;
		Движение.Товар = СтрокаПотери.Товар;
		Движение.Партия = СтрокаПотери.Партия;
		Движение.Остаток = СтрокаПотери.Остаток+СтрокаПотери.Резерв;
		
	КонецЦикла;
	//Если это перемещение заполним результат сборки в документе основании
	Если ТипСборки = Перечисления.ТипСборки.СборкаПеремещения и ЗначениеЗаполнено(ДокументОснование) и не ДокументОснование.СборкаЗавершена тогда
		
		Движения.ТоварыКСборке.Записать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ТоварыКСборкеОстатки.КоличествоКСборкеОстаток) КАК КоличествоКСборкеОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыКСборке.Остатки(, Документ = &Документ) КАК ТоварыКСборкеОстатки
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыКСборкеОстатки.КоличествоКСборкеОстаток) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКСборкеОбороты.Товар,
		|	ТоварыКСборкеОбороты.Партия,
		|	ТоварыКСборкеОбороты.КоличествоКСборкеРасход - ЕСТЬNULL(СУММА(ЕСТЬNULL(СборкаТовары.КоличествоНеХватило, 0)), 0) КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыКСборке.Обороты КАК ТоварыКСборкеОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Сборка.Товары КАК СборкаТовары
		|		ПО ТоварыКСборкеОбороты.Документ = СборкаТовары.Ссылка.ДокументОснование
		|			И ТоварыКСборкеОбороты.Товар = СборкаТовары.Товар
		|			И ТоварыКСборкеОбороты.Партия = СборкаТовары.Партия
		|			И (СборкаТовары.Ссылка.Проведен)
		|ГДЕ
		|	ТоварыКСборкеОбороты.Документ = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКСборкеОбороты.Товар,
		|	ТоварыКСборкеОбороты.Партия,
		|	ТоварыКСборкеОбороты.КоличествоКСборкеРасход";
		
		Запрос.УстановитьПараметр("Документ", ДокументОснование);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		Перемещение = ДокументОснование.ПолучитьОбъект();
		ВыборкаТовары = МассивРезультатов[1].Выбрать();
		Пока ВыборкаТовары.Следующий() цикл
			МассивСтрок = Перемещение.Товары.НайтиСтроки(Новый Структура("Товар,Партия",ВыборкаТовары.Товар, ВыборкаТовары.Партия));
			Для каждого строка из МассивСтрок цикл
				Строка.Количество = ВыборкаТовары.Количество;
			КонецЦикла;
		КонецЦикла;
		
		Если МассивРезультатов[0].Пустой() тогда
			Перемещение.СборкаЗавершена = Истина;
		КонецЕсли;			
		Перемещение.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	//Установим статус заказа
	Если ТипСборки = Перечисления.ТипСборки.СборкаЗаказа тогда
		Движения.ТоварыКСборке.Записать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СборкаТовары.Документ
		|ПОМЕСТИТЬ втЗаказы
		|ИЗ
		|	Документ.Сборка.Товары КАК СборкаТовары
		|ГДЕ
		|	СборкаТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СборкаТовары.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКСборкеОстатки.Документ,
		|	СУММА(ТоварыКСборкеОстатки.КоличествоКСборкеОстаток) КАК КоличествоКСборкеОстаток
		|ПОМЕСТИТЬ втНеСобранныеЗаказы
		|ИЗ
		|	РегистрНакопления.ТоварыКСборке.Остатки(
		|			&Дата,
		|			Документ В
		|				(ВЫБРАТЬ
		|					втЗаказы.Документ
		|				ИЗ
		|					втЗаказы КАК втЗаказы)) КАК ТоварыКСборкеОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКСборкеОстатки.Документ
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыКСборкеОстатки.КоличествоКСборкеОстаток) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКСборкеОстатки.Документ,
		|	СУММА(ТоварыКСборкеОстатки.КоличествоНеХватилоОстаток) КАК КоличествоНеХватилоОстаток
		|ПОМЕСТИТЬ втЗаказыНаОбработкуМРК
		|ИЗ
		|	РегистрНакопления.ТоварыКСборке.Остатки(
		|			&Дата,
		|			Документ В
		|				(ВЫБРАТЬ
		|					втЗаказы.Документ
		|				ИЗ
		|					втЗаказы КАК втЗаказы
		|				ГДЕ
		|					ВЫРАЗИТЬ(втЗаказы.Документ КАК Документ.Заказ).ТипКомплектацииЗаказа = ЗНАЧЕНИЕ(перечисление.ТипКомплектацииЗаказа.СборкаИКомплектацияВАптеке)
		|					И втЗаказы.Документ ССЫЛКА Документ.Заказ)) КАК ТоварыКСборкеОстатки
		|ГДЕ
		|	ТоварыКСборкеОстатки.КоличествоНеХватилоОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКСборкеОстатки.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыАктуальностиЗаказовСрезПоследних.Документ
		|ПОМЕСТИТЬ втОтмененные
		|ИЗ
		|	РегистрСведений.СтатусыАктуальностиЗаказов.СрезПоследних(
		|			,
		|			Документ В
		|				(ВЫБРАТЬ
		|					втЗаказы.Документ
		|				ИЗ
		|					втЗаказы КАК втЗаказы
		|				ГДЕ
		|					ВЫРАЗИТЬ(втЗаказы.Документ КАК Документ.Заказ).ТипКомплектацииЗаказа = ЗНАЧЕНИЕ(перечисление.ТипКомплектацииЗаказа.СборкаИКомплектацияВАптеке)
		|					И втЗаказы.Документ ССЫЛКА Документ.Заказ)) КАК СтатусыАктуальностиЗаказовСрезПоследних
		|ГДЕ
		|	СтатусыАктуальностиЗаказовСрезПоследних.СтатусАктуальности = ЗНАЧЕНИЕ(справочник.СтатусыАктуальностиЗаказов.Отменен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ЕСТЬNULL(ХранениеЗСЯПоТоварамОстатки.КоличествоОстаток, 0)), 0) КАК КоличествоОстаток,
		|	втЗаказы.Документ КАК Документ
		|ПОМЕСТИТЬ втВсеВНехватило
		|ИЗ
		|	втЗаказы КАК втЗаказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ХранениеЗСЯПоТоварам.Остатки(
		|				&Дата,
		|				Документ В
		|					(ВЫБРАТЬ
		|						втЗаказы.Документ
		|					ИЗ
		|						втЗаказы КАК втЗаказы)) КАК ХранениеЗСЯПоТоварамОстатки
		|		ПО (ХранениеЗСЯПоТоварамОстатки.Документ = втЗаказы.Документ)
		|
		|СГРУППИРОВАТЬ ПО
		|	втЗаказы.Документ
		|
		|ИМЕЮЩИЕ
		|	ЕСТЬNULL(СУММА(ЕСТЬNULL(ХранениеЗСЯПоТоварамОстатки.КоличествоОстаток, 0)), 0) = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗаказы.Документ,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА втЗаказыНаОбработкуМРК.Документ ЕСТЬ NULL
		|					ИЛИ НЕ втОтмененные.Документ ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК НаОбработкуМРК,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА втВсеВНехватило.Документ ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ЗаказНеСобран
		|ИЗ
		|	втЗаказы КАК втЗаказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНеСобранныеЗаказы КАК втНеСобранныеЗаказы
		|		ПО втЗаказы.Документ = втНеСобранныеЗаказы.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗаказыНаОбработкуМРК КАК втЗаказыНаОбработкуМРК
		|		ПО втЗаказы.Документ = втЗаказыНаОбработкуМРК.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОтмененные КАК втОтмененные
		|		ПО втЗаказы.Документ = втОтмененные.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ втВсеВНехватило КАК втВсеВНехватило
		|		ПО втЗаказы.Документ = втВсеВНехватило.Документ
		|ГДЕ
		|	втНеСобранныеЗаказы.Документ ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	втЗаказы.Документ";
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("Дата",Новый Граница(Дата,ВидГраницы.Включая));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() цикл
			Если Выборка.ЗаказНеСобран тогда
				СтатусыДокументов.УстановитьСтатусСборкиЗаказа(Выборка.Документ,Ссылка,Справочники.СтатусыОбработкиЗаказа.Отменен,Сотрудник,Дата);
			Иначе
				СтатусыДокументов.УстановитьСтатусСборкиЗаказа(Выборка.Документ,Ссылка,Справочники.СтатусыОбработкиЗаказа.Собран,Сотрудник,Дата);
			КонецЕсли;
			Если Выборка.НаОбработкуМРК тогда
				СтатусыДокументов.УстановитьСтатусАктуальностиЗаказа(Выборка.Документ,Ссылка,Справочники.СтатусыАктуальностиЗаказов.ОжидаетОбработкиМРК,Сотрудник,Дата);	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

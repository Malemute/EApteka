
&НаКлиенте
Процедура КонструкторЗапроса(Команда)
	
	Попытка
		Конструктор = Новый КонструкторЗапроса;
	Исключение
		Предупреждение( "Конструктор запросов доступен только в режиме запуска ""толстый клиент""." );
		Возврат;
	КонецПопытки;
	
	Конструктор.РежимКомпоновкиДанных = Истина;
	Конструктор.АвтоДобавлениеПредставлений = Ложь;
	
	Если Не ПустаяСтрока( Объект.ТекстЗапроса ) Тогда
		Конструктор.Текст = Объект.ТекстЗапроса;
	КонецЕсли;
	
	Если Конструктор.ОткрытьМодально() = Истина Тогда
		
		Объект.ТекстЗапроса = Конструктор.Текст;
		
		ТекстЗапросаПриИзменении( Элементы.ТекстЗапроса );
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяНабораДанныхПриИзменении(Элемент)
	ИмяНабораДанныхПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИмяНабораДанныхПриИзмененииНаСервере()
	
	ОбъектКакОбъект = РеквизитФормыВЗначение( "Объект" );
	
	Если ПустаяСтрока( Объект.ИмяНабораДанных ) ИЛИ Не ОбъектКакОбъект.ЭтоКорректноеИмя( Объект.ИмяНабораДанных ) Тогда
		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.УстановитьДанные( Объект.ИмяНабораДанных );
		СообщениеПользователю.Текст = "Имя набора данных не является корректным именем";
		СообщениеПользователю.Сообщить();
		
	КонецЕсли;
	
	ОбновитьСписокВыбораВыраженияПриемника();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗапросаПриИзменении(Элемент)
	ТекстЗапросаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТекстЗапросаПриИзмененииНаСервере()
	
	ОбновитьСписокВыбораВыраженияПриемника();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОбъектаПриИзменении(Элемент)
	ВидОбъектаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВидОбъектаПриИзмененииНаСервере()
	
	ОбновитьСписокВыбораВыраженияИсточника();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	НаименованиеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НаименованиеПриИзмененииНаСервере()
	
	ОбновитьСписокВыбораВыраженияПриемника();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьСписокВыбораВыраженияИсточника();
	ОбновитьСписокВыбораВыраженияПриемника();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораВыраженияИсточника()
	
	СписокВыбораИсточникаСвязи = Элементы.НастройкаСвязиСОбъектомИсточникСвязи.СписокВыбора;
	СписокВыбораИсточникаСвязи.Очистить();
	
	СпискиВыбораВыраженийИсточника = Новый Структура;
	
	Если ЗначениеЗаполнено( Объект.ВидОбъекта ) Тогда
		
		СтруктураТаблицВидаОбъекта = СвязиИОтборы_Привилегированный.СформироватьСтруктуруВнешнихИсточниковДанныхПоВидуОбъекта( Объект.ВидОбъекта );
		
		Если СтруктураТаблицВидаОбъекта <> Неопределено Тогда
			
			ИмяСтруктурыШапкиОбъекта = "ТаблицаШапкаОбъекта";
			ИмяСтруктурыСинонимовТЧ = "СинонимыТабличныхЧастей";
			
			// обойдем структуру таблиц вида объекта
			Для Каждого КлючИЗначение Из СтруктураТаблицВидаОбъекта Цикл
				
				// структура синонимов пропускаем
				Если КлючИЗначение.Ключ = ИмяСтруктурыСинонимовТЧ Тогда
					Продолжить;
				КонецЕсли;
				
				// для шапки и ТЧ принцип формирования списков выбора немножко отличается
				Если КлючИЗначение.Ключ = ИмяСтруктурыШапкиОбъекта Тогда
					
					ИмяСпискаВыбора = "Шапка";
					ДополнениеКИмениКолонки = "";
					
				Иначе
					
					ИмяСпискаВыбора = КлючИЗначение.Ключ;
					ДополнениеКИмениКолонки = КлючИЗначение.Ключ + "." + КлючИЗначение.Ключ + "__";
					
					// ТЧ также добавим в список выбора источников связи
					СписокВыбораИсточникаСвязи.Добавить( КлючИЗначение.Ключ, КлючИЗначение.Ключ );
					
				КонецЕсли;
				
				// сформируем список выбора для текущей таблицы
				СписокВыбораВыраженийИсточникаТекущейТаблицы = Новый СписокЗначений;
				
				Для Каждого КолонкаТаблицы Из КлючИЗначение.Значение.Колонки Цикл
					СписокВыбораВыраженийИсточникаТекущейТаблицы.Добавить( ДополнениеКИмениКолонки + КолонкаТаблицы.Имя, ДополнениеКИмениКолонки + КолонкаТаблицы.Имя );
				КонецЦикла;
				
				// добавим сформированный списк в общий список
				СпискиВыбораВыраженийИсточника.Вставить( ИмяСпискаВыбора, СписокВыбораВыраженийИсточникаТекущейТаблицы );
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораВыраженияПриемника()
	
	СписокВыбора = Элементы.НастройкаСвязиСОбъектомВыражениеПриемник.СписокВыбора;
	СписокВыбора.Очистить();
	
	// обновим ТЧ Поля Запроса
	ОбъектКакОбъект = РеквизитФормыВЗначение( "Объект" );
	ОбъектКакОбъект.ПерезаполнитьПоляЗапроса();
	ЗначениеВРеквизитФормы( ОбъектКакОбъект, "Объект" );
	
	Для Каждого ПолеЗапроса Из Объект.ПоляЗапроса Цикл
		
		ПутьКДаннымПоля = Неопределено;
		
		Если ПолеЗапроса.Свойство( "ПутьКДанным", ПутьКДаннымПоля ) Тогда
			СписокВыбора.Добавить( ПутьКДаннымПоля, ПутьКДаннымПоля );
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСвязиСОбъектомПриАктивизацииЯчейки(Элемент)
	
	// если был переход в колонку Выражение Источник, то для нужно обновить список выбора
	Если Элементы.НастройкаСвязиСОбъектом.ТекущийЭлемент = Элементы.НастройкаСвязиСОбъектомВыражениеИсточник Тогда
		
		СписокВыбора = Элементы.НастройкаСвязиСОбъектомВыражениеИсточник.СписокВыбора;
		СписокВыбора.Очистить();
		
		// определим имя списка выбора через имя таблицы источника
		ИмяСпискаВыбора = Неопределено;
		
		Элементы.НастройкаСвязиСОбъектом.ТекущиеДанные.Свойство( "ИсточникСвязи", ИмяСпискаВыбора );
		
		Если ИмяСпискаВыбора = "" Тогда
			ИмяСпискаВыбора = "Шапка";
		КонецЕсли;
		
		// получим новый список выбора
		НовыйСписокВыбора = Неопределено;
		
		Если СпискиВыбораВыраженийИсточника.Свойство( ИмяСпискаВыбора, НовыйСписокВыбора ) Тогда
			
			// если новый список выбора получен, то скопируем его в список выбора элемента формы
			Для Каждого ЗначениеСпискаВыбора Из НовыйСписокВыбора Цикл
				СписокВыбора.Добавить( ЗначениеСпискаВыбора.Значение, ЗначениеСпискаВыбора.Представление );
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


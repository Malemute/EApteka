#Область РасчетЦеныПартии

Функция ЦенаПоследнейПартии(Товар,ТипЦены,РегионРаботы) Экспорт
	
	ВычЦена=0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныПартии.Цена,
	|	ЦеныПартии.Владелец.Документ.Дата КАК ВладелецДокументДата
	|ИЗ
	|	Справочник.ЦеныПартии КАК ЦеныПартии
	|ГДЕ
	|	ЦеныПартии.ТипЦены = &ТипЦены
	|	И ЦеныПартии.РегионРаботы = &РегионРаботы
	|	И ЦеныПартии.Владелец.Владелец = &Товар
	|	И ЦеныПартии.Владелец.Документ.ВычНП
	|	И ЦеныПартии.Цена > 0.1
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВладелецДокументДата УБЫВ";
	Запрос.УстановитьПараметр("ТипЦены",ТипЦены);
	Запрос.УстановитьПараметр("РегионРаботы", РегионРаботы);
	Запрос.УстановитьПараметр("Товар",Товар);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		ВычЦена = Выборка.Цена;
	КонецЦикла;
	
	Возврат ВычЦена
	
КонецФункции

Функция РасчетЦеныПартии(ТипЦены,Товар,ДатаДокумента,ЗНАЧ ЦенаПрихода,ЦенаПоследнейПартии,РеестроваяЦена, ЦенаПроизводителя,СтавкаНДСприх,Поставщик,РегионРаботы) Экспорт
	
	ЖВЛ=Товар.ЖизненноВажный;
	Если РеестроваяЦена>0 Тогда
		ЖВЛ=Истина;
	КонецЕсли;
	ПроцентНаценкиПост=0;
	ПроцентНаценкиМаксПост=0;
	
	
	Если ЦенаПрихода=0.01 Тогда
		ЦенаПрихода=ВернутьЦенуПоставщика(Товар,Поставщик);
		
		Если ЦенаПрихода=0 Тогда  
			Если ЦенаПоследнейПартии>0.01 Тогда
				Возврат ЦенаПоследнейПартии;
			Иначе
				Возврат 0.01;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;			
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныПрайсЛиста.Ссылка
	|ПОМЕСТИТЬ втЦеныПрайсЛиста
	|ИЗ
	|	Справочник.ЦеныПрайсЛиста КАК ЦеныПрайсЛиста
	|ГДЕ
	|	ЦеныПрайсЛиста.Владелец = &Товар
	|	И ЦеныПрайсЛиста.ТипЦены = &ТипЦены
	|	И ЦеныПрайсЛиста.РегионРаботы = &РегионРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦенаНоменклатурыСрезПоследних.Период,
	|	ЦенаНоменклатурыСрезПоследних.Цена,
	|	ЦенаНоменклатурыСрезПоследних.ПроцентНаценки,
	|	ЦенаНоменклатурыСрезПоследних.ПроцентНаценкиМакс,
	|	ЦенаНоменклатурыСрезПоследних.ЦенаПрайсЛиста
	|ИЗ
	|	РегистрСведений.ЦенаНоменклатуры.СрезПоследних(
	|			&Период,
	|			ЦенаПрайсЛиста В
	|				(ВЫБРАТЬ
	|					втЦеныПрайсЛиста.Ссылка
	|				ИЗ
	|					втЦеныПрайсЛиста КАК втЦеныПрайсЛиста)) КАК ЦенаНоменклатурыСрезПоследних";
	Запрос.УстановитьПараметр("РегионРаботы",РегионРаботы);
	Запрос.УстановитьПараметр("ТипЦены",ТипЦены);
	Запрос.УстановитьПараметр("Товар",Товар);
	Запрос.УстановитьПараметр("Период",ДатаДокумента);

	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() цикл
			ЦеныПрайсЛиста = Новый Структура("ЦеныПрайсЛиста,Цена,ПроцентНаценки,ПроцентНаценкиМакс", Выборка.ЦенаПрайсЛиста,Выборка.Цена, Выборка.ПроцентНаценки, Выборка.ПроцентНаценкиМакс);
		КонецЦикла;
		ФлагНашли = ЗначениеЗаполнено(ЦеныПрайсЛиста.ЦеныПрайсЛиста);
	Иначе
		ФлагНашли = Ложь;
	КонецЕсли;	
	Если не ФлагНашли Тогда
		Если ЖВЛ Тогда
			Возврат Цел((ПроцентНаценкиПоУмолчанию(ЦенаПрихода,ТипЦены,РегионРаботы)+100)*ЦенаПрихода/100)+1;
		Иначе
			Цена=0;                                                       
			ФиксЦена=0;
			ПроцентНаценки=ПроцентНаценкиПост;
			ПроцентНаценкиМакс=ПроцентНаценкиМаксПост;
		КонецЕсли;
	Иначе
		Цена=ЦеныПрайсЛиста.Цена;		
		ПроцентНаценки=ЦеныПрайсЛиста.ПроцентНаценки;
		ПроцентНаценкиМакс=ЦеныПрайсЛиста.ПроцентНаценкиМакс;	
	КонецЕсли;	
	
	//**Для реестра
	Если ЖВЛ Тогда
		Если (ЦенаПроизводителя=0) И (РеестроваяЦена<>0) Тогда
			ЦенаПроизводителя=РеестроваяЦена;
		КонецЕсли; 
		Если (ЦенаПроизводителя<>0) И (РеестроваяЦена=0) Тогда
			РеестроваяЦена=ЦенаПроизводителя;
		КонецЕсли; 
		Если (ЦенаПроизводителя=0) И (РеестроваяЦена=0) Тогда
			РеестроваяЦена=ЦенаПрихода/(1+(СтавкаНДСприх/100));
			ЦенаПроизводителя=РеестроваяЦена;
		КонецЕсли; 
		
		РозничнаяЦена1=ЦенаПрихода*(ПроцентНаценкиМакс+100)/100;
		
		РозничнаяЦена2=(((Мин(ЦенаПроизводителя,РеестроваяЦена)*РассчитатьПроцентНаценкиЖВЛ(РеестроваяЦена,Товар,РегионРаботы)/100)-0.01)*((100+СтавкаНДСприх)/100))+ЦенаПрихода;
		
		Если ПроцентНаценкиМакс>0 Тогда
			Если РозничнаяЦена1>РозничнаяЦена2 Тогда
				РозничнаяЦена=РозничнаяЦена2;
				
			Иначе
				РозничнаяЦена=РозничнаяЦена1;
			КонецЕсли;	
		Иначе
			РозничнаяЦена=РозничнаяЦена2;
		КонецЕсли;	
		
		Возврат Цел(РозничнаяЦена); 
	КонецЕсли;            
	
	Если (Цена>0) И ((ПроцентНаценки=0) И (ПроцентНаценкиМакс=0)) Тогда
		Возврат Цена;
	КонецЕсли; 
	Если ЦенаПрихода=0.01 Тогда
		Если ЦенаПоследнейПартии>0 Тогда
			Возврат ЦенаПоследнейПартии;
		Иначе
			Возврат ЦенаПрихода;
		КонецЕсли;
	КонецЕсли; 
	Если (ПроцентНаценки>0) ИЛИ (ПроцентНаценкиМакс>0) Тогда
		Если ЦенаПоследнейПартии=0 Тогда
			Если (ПроцентНаценки=0) И (ПроцентНаценкиМакс>0) Тогда
				ПроцентНаценки=ПроцентНаценкиМакс;
			ИначеЕсли (ПроцентНаценки>0) И (ПроцентНаценкиМакс=0) Тогда
				ПроцентНаценкиМакс=ПроцентНаценки;
			КонецЕсли;	
			СрПроцентНаценки=(ПроцентНаценки+ПроцентНаценкиМакс)/2;
			Возврат Цел(ЦенаПрихода*(СрПроцентНаценки+100)/100)+1;
		Иначе                    
			РозничнаяЦенаМин=ЦенаПрихода*(ПроцентНаценки+100)/100;
			РозничнаяЦенаМакс=ЦенаПрихода*(ПроцентНаценкиМакс+100)/100;           
			РозничнаяЦена=ЦенаПоследнейПартии;
			Если (ПроцентНаценки>0) И (РозничнаяЦенаМин>ЦенаПоследнейПартии) Тогда
				РозничнаяЦена=РозничнаяЦенаМин;
			КонецЕсли;
			Если (ПроцентНаценкиМакс>0) И (РозничнаяЦенаМакс<ЦенаПоследнейПартии) Тогда
				РозничнаяЦена=РозничнаяЦенаМакс;
			КонецЕсли;
			Возврат Цел(РозничнаяЦена)+1;
		КонецЕсли;	
	Иначе
		Возврат Цел((ПроцентНаценкиПоУмолчанию(ЦенаПрихода,ТипЦены,РегионРаботы)+100)*ЦенаПрихода/100)+1;
	КонецЕсли;		
КонецФункции

Функция ВернутьЦенуПоставщика(Товар,Поставщик)
	ЦенаПоставщика = 0.01;
	
	ТекстЗапроса = 
	"set nocount on
	|select isnull(cast(max(pl.price) as money),0) as Price
	|from ea5..price_list pl (nolock)
	| inner join ea5..suppliers s (nolock) on pl.id_supplier=s.id
	| inner join ea5..supplier_code sc (nolock) on pl.id_supplier=sc.supplier_id and pl.code=sc.code_post
	|where sc.CODE_EA5="+Товар.Код+" and s.code_1c='"+СокрЛП(Поставщик.Код)+"'";
	Результат = РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапроса,,Справочники.НастройкиПодключения.БазаCourierDS,Истина);
	//Если Результат <> НЕОПРЕДЕЛЕНО тогда
		Для каждого строка из Результат цикл
			ЦенаПоставщика = строка.Price;
		КонецЦикла;
	//КонецЦикла;
	
	Возврат ЦенаПоставщика	
	
КонецФункции

Функция ПроцентНаценкиПоУмолчанию(ЦенаПрихода,ТипЦены,РегионРаботы) Экспорт 
	ПроцентНаценки=15;
	
	//ТекстЗапроса=
	//"set nocount on
	//|select cast(v.nac as money) as nac
	//|from v_nac_def v 
	//|inner join t_tc tc (nolock) on v.id_tc=tc.id_tc          
	//|inner join t_rr rr (nolock) on v.id_reg=rr.id_rr
	//|where "+Формат(ЦенаПрихода,"ЧРД=.; ЧН=0; ЧГ=")+" between v.price_min and v.price_max 
	//|	and tc.name_tc='"+ТипЦены.Наименование+"'
	//|	and rr.name_rr='"+РегионРаботы.Наименование+"'";	
	//Результат = РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапроса,,Справочники.НастройкиПодключения.БазаCourierDS,Истина);
	//Если Результат <> НЕОПРЕДЕЛЕНО тогда
	//	Для каждого Строка из Результат цикл
	//		ПроцентНаценки = Строка.nac;
	//	КонецЦикла;
	//КонецЕсли;  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	v_nac_def.nac
	|ИЗ
	|	РегистрСведений.v_nac_def КАК v_nac_def
	|ГДЕ
	|	v_nac_def.id_tc = &id_tc
	|	И v_nac_def.id_reg = &id_reg
	|	И &Цена МЕЖДУ v_nac_def.price_min И v_nac_def.price_max";
	Запрос.УстановитьПараметр("id_tc",ТипЦены.ID_77);
	Запрос.УстановитьПараметр("id_reg",РегионРаботы.ID_77);
	Запрос.УстановитьПараметр("Цена",ЦенаПрихода);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		ПроцентНаценки = Выборка.nac;
	КонецЦикла;

	
	Возврат ПроцентНаценки	
	
КонецФункции

Функция РассчитатьПроцентНаценкиЖВЛ(ЦенаРеестра,Товар,РегионРаботы) Экспорт 
	ПроцентНаценки=0;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	v_gvls_rr.perc
	|ИЗ
	|	РегистрСведений.v_gvls_rr КАК v_gvls_rr
	|ГДЕ
	|	v_gvls_rr.id_rr = &id_rr
	|	И &ЦенаРеестра МЕЖДУ v_gvls_rr.min_price И v_gvls_rr.max_price";
	Запрос.УстановитьПараметр("id_rr",РегионРаботы.ID_77);
	Запрос.УстановитьПараметр("ЦенаРеестра",ЦенаРеестра);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		ПроцентНаценки = Выборка.perc;
	КонецЦикла;
	
	Возврат ПроцентНаценки	
	
КонецФункции

Функция ПолучитьНастройкиСозданияЦенПартии(Отдел,ДатаДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХранения.Владелец.РегионРаботы
	|ПОМЕСТИТЬ ВТ1
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|ГДЕ
	|	МестаХранения.Ссылка = &Отдел
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкаСозданияЦеныПартииСрезПоследних.РегионРаботы,
	|	НастройкаСозданияЦеныПартииСрезПоследних.ТипЦены
	|ИЗ
	|	РегистрСведений.НастройкаСозданияЦеныПартии.СрезПоследних(
	|			&ДатаДокумента,
	|			РегионРаботы В
	|				(ВЫБРАТЬ
	|					ВТ1.ВладелецРегионРаботы
	|				ИЗ
	|					ВТ1 КАК ВТ1)) КАК НастройкаСозданияЦеныПартииСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("Отдел", Отдел);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
	
КонецФункции

Процедура СоздатьЦеныПартии(Отдел,Дата,МассивПартий,Перезаполнять = Ложь) Экспорт
	
	ТаблицаНастроек = ОбщиеФункцииСервер.ПолучитьНастройкиСозданияЦенПартии(Отдел,Дата);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНастроек.РегионРаботы,
	|	ТаблицаНастроек.ТипЦены
	|ПОМЕСТИТЬ ТаблицаНастроек
	|ИЗ
	|	&ТаблицаНастроек КАК ТаблицаНастроек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНастроек.ТипЦены КАК ТипЦены,
	|	ТаблицаНастроек.РегионРаботы КАК РегионРаботы,
	|	Партии.Ссылка КАК Партия,
	|	Партии.Владелец КАК Товар,
	|	Партии.ЦенаПроизводителя,
	|	Партии.РеестроваяЦена,
	|	Партии.ЗакупочнаяЦена,
	|	Партии.СтавкаНДС.Код КАК СтавкаНДС,
	|	Партии.Клиент
	|ПОМЕСТИТЬ втПартии
	|ИЗ
	|	Справочник.Партии КАК Партии,
	|	ТаблицаНастроек КАК ТаблицаНастроек
	|ГДЕ
	|	Партии.Ссылка В(&МассивПартий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПартии.ТипЦены,
	|	втПартии.РегионРаботы,
	|	втПартии.Партия,
	|	ЕСТЬNULL(ЦеныПартии.Ссылка, ЗНАЧЕНИЕ(Справочник.ЦеныПартии.ПустаяСсылка)) КАК ЦенаПартии,
	|	втПартии.Товар,
	|	втПартии.ЦенаПроизводителя,
	|	втПартии.РеестроваяЦена,
	|	втПартии.ЗакупочнаяЦена,
	|	втПартии.СтавкаНДС,
	|	втПартии.Клиент
	|ИЗ
	|	втПартии КАК втПартии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЦеныПартии КАК ЦеныПартии
	|		ПО втПартии.Партия = ЦеныПартии.Владелец
	|			И втПартии.ТипЦены = ЦеныПартии.ТипЦены
	|			И втПартии.РегионРаботы = ЦеныПартии.РегионРаботы
	|ГДЕ
	|	(ЦеныПартии.Ссылка ЕСТЬ NULL
	|			ИЛИ &Перезаполнять)";
	Запрос.УстановитьПараметр("МассивПартий",МассивПартий);
	Запрос.УстановитьПараметр("Перезаполнять",Перезаполнять);
	Запрос.УстановитьПараметр("ТаблицаНастроек",ТаблицаНастроек);
	Выборка = Запрос.Выполнить().Выбрать();
	ЦенаПартии = Справочники.ЦеныПартии.ПустаяСсылка();
	Пока Выборка.Следующий() цикл
		Если не ЗначениеЗаполнено(Выборка.ЦенаПартии) тогда
			ЦенаПартииОбъект = Справочники.ЦеныПартии.СоздатьЭлемент();
		Иначе
			ЦенаПартииОбъект = 	Выборка.ЦенаПартии.ПолучитьОбъект();
		КонецЕсли;
			ЦПП=ОбщиеФункцииСервер.ЦенаПоследнейПартии(Выборка.Товар,Выборка.ТипЦены,Выборка.РегионРаботы);
			ЗаполнитьЗначенияСвойств(ЦенаПартииОбъект,Выборка,"ТипЦены,РегионРаботы");
			ЦенаПартииОбъект.Владелец = Выборка.Партия;
			РеестроваяЦена = Выборка.РеестроваяЦена;
			ЦенаПроизводителя = Выборка.ЦенаПроизводителя;
			ЗакупочнаяЦена = Выборка.ЗакупочнаяЦена;
			ВычЦенаПартии = ОбщиеФункцииСервер.РасчетЦеныПартии(Выборка.ТипЦены, Выборка.Товар,Дата,ЗакупочнаяЦена,ЦПП,РеестроваяЦена,ЦенаПроизводителя,Выборка.СтавкаНДС,Выборка.Клиент,Выборка.РегионРаботы);
			Если ВычЦенаПартии < ЗакупочнаяЦена тогда
				Если РеестроваяЦена >0 тогда
					ВычЦенаПартии = ЗакупочнаяЦена;
				Иначе
					Если ВычЦенаПартии<>0.01 тогда
						ВычЦенаПартии = цел(ЗакупочнаяЦена*1.04)+1;
					КонецЕсли;
				КонецЕсли;		
			КонецЕсли;
			ЦенаПартииОбъект.Цена = ВычЦенаПартии;
			ЦенаПартииОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

Функция ПолучитьСтавкуНДСТовара(Товар,Дата) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтавкиНДСПоНоменклатуреСрезПоследних.СтавкаНДС
	|ИЗ
	|	РегистрСведений.СтавкиНДСПоНоменклатуре.СрезПоследних(&Дата, Товар = &Товар) КАК СтавкиНДСПоНоменклатуреСрезПоследних";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Товар", Товар);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Возврат Выборка.СтавкаНДС;
	КонецЦикла;
	Возврат 0;
	
КонецФункции

Функция ПолучитьОтделПретензий(Отдел) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХранения.АдресХранения.СкладПретензий как СкладПретензий
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|ГДЕ
	|	МестаХранения.Ссылка = &Отдел";
	Запрос.УстановитьПараметр("Отдел",Отдел);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Возврат Выборка.СкладПретензий;
	КонецЦикла;
	Возврат справочники.МестаХранения.ПустаяСсылка();
	
	
КонецФункции

#Область ЗагрузкаДокументовПриход

Функция ПолучитьТаблицуДокументовКЗагрузке() Экспорт
	
	ТЗДокументы = Новый ТаблицаЗначений;
	ТекстЗапросаSQL = 
	"set nocount on             
	|declare @d datetime , @dc datetime
	|select @d=dateadd(mi,-30,getdate()) , @dc=getdate()-10
	|SELECT distinct doc.id_supplier, doc.ndoc, cast(doc.datedoc as datetime) as datedoc
	|FROM  ea5..overhead_list doc (nolock) 
	|WHERE doc.active=1 and doc.datedoc>'20150321' and doc.datedoc> @dc --and id_supplier!=273
	|order by 3";
КонецФункции

#КонецОбласти

Функция ПолучитьЗСЯ(Склад,Зона = Неопределено, Стелаж = Неопределено, Ячейка = Неопределено, Наименование = Неопределено,ВидЗСЯ = Неопределено,СоздаватьЕслиНет = Ложь) Экспорт
	
	ЗСЯ = Справочники.МестоЗСЯ.ПустаяСсылка();
	Если ЗначениеЗаполнено(Наименование) тогда
		ЗонаСимволРазделитель = СтрНайти(Наименование,"_",,,1);
		СтелажСимволРазделитель = СтрНайти(Наименование,"_",,,2);
		Зона = Сред(Наименование,0,ЗонаСимволРазделитель-1);
		Стелаж = Сред(Наименование,ЗонаСимволРазделитель+1,СтелажСимволРазделитель-СтелажСимволРазделитель-1); 
		Ячейка = Сред(Наименование,СтелажСимволРазделитель+1);
		Если Не ЗначениеЗаполнено(Ячейка) тогда
			Ячейка = "0";
		КонецЕсли;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестоЗСЯ.Ссылка,
	|	МестоЗСЯ.ВидМестаЗСЯ
	|ИЗ
	|	Справочник.МестоЗСЯ КАК МестоЗСЯ
	|ГДЕ
	|	МестоЗСЯ.Зона = &Зона
	|	И МестоЗСЯ.Стеллаж = &Стеллаж
	|	И МестоЗСЯ.Ячейка = &Ячейка
	|	И МестоЗСЯ.Отдел = &Отдел";
	//|	И (МестоЗСЯ.ВидМестаЗСЯ = &ВидМестаЗСЯ
	//|			ИЛИ &ВидМестаЗСЯ = ЗНАЧЕНИЕ(перечисление.ВидыМестЗся.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("Зона",Зона);
	Запрос.УстановитьПараметр("Стеллаж",Стелаж);
	Запрос.УстановитьПараметр("Ячейка",Ячейка);
	Запрос.УстановитьПараметр("Отдел",Склад);
	//Запрос.УстановитьПараметр("ВидМестаЗСЯ",?(ВидЗСЯ = Неопределено,Перечисления.ВидыМестЗСЯ.ПустаяСсылка(),ВидЗСЯ));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Если Выборка.ВидМестаЗСЯ = ВидЗСЯ или ВидЗСЯ = Неопределено тогда
			ЗСЯ = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если не ЗначениеЗаполнено(ЗСЯ) тогда
		Если СоздаватьЕслиНет тогда
			ЗСЯ = Справочники.МестоЗСЯ.СоздатьЭлемент();
			ЗСЯ.Наименование = Строка(Зона)+"_"+Строка(Стелаж)+"_"+Строка(Ячейка);
			ЗСЯ.Зона = Зона;
			ЗСЯ.Ячейка = Ячейка;
			ЗСЯ.Стеллаж = Стелаж;
			ЗСЯ.Отдел = Склад;
			ЗСЯ.ВидМестаЗСЯ = ?(ВидЗСЯ = Неопределено,Перечисления.ВидыМестЗСЯ.ПустаяСсылка(),ВидЗСЯ);
			ЗСЯ.Записать();
		Иначе
			Возврат Справочники.МестоЗСЯ.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗСЯ.Ссылка;
		
КонецФункции

Функция КонтрольныйСимволEAN(ШтрихКод, Тип) Экспорт
    
    Четн   = 0;
    Нечетн = 0;
    
    КоличествоИтераций = ?(Тип = 13, 6, 4);
    
    Для Индекс = 1 По КоличествоИтераций Цикл
        Если (Тип = 8) и (Индекс = КоличествоИтераций) Тогда
        Иначе
            Четн   = Четн   + Сред(ШтрихКод, 2 * Индекс, 1);
        КонецЕсли;
        Нечетн = Нечетн + Сред(ШтрихКод, 2 * Индекс - 1, 1);
    КонецЦикла;
    
    Если Тип = 13 Тогда
        Четн = Четн * 3;
    Иначе
        Нечетн = Нечетн * 3;
    КонецЕсли;
    
    КонтЦифра = 10 - (Четн + Нечетн) % 10;
    
    Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));
    
КонецФункции // КонтрольныйСимволEAN()

Функция ТаблицаСКД(СКД,НастройкиСКД = Неопределено,ВнешниеНаборыДанных = Неопределено) Экспорт
    
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить( СКД , ?(НастройкиСКД = неопределено,СКД.НастройкиПоУмолчанию,НастройкиСКД),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать( МакетКомпоновки , ВнешниеНаборыДанных );
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ТаблицаЗначений = Новый ТаблицаЗначений;
    ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
    
    Возврат ТаблицаЗначений;
    
КонецФункции

Процедура РасчитатьСтрокуТЗТоварыСервер(Строка, РасчетОтСуммы) Экспорт
	
	Если РасчетОтСуммы тогда
		Если Строка.Количество = 0 тогда
			Строка.Сумма = 0;
			Строка.Цена = 0;
		Иначе
			Строка.Цена = Окр(Строка.Сумма/Строка.Количество,2);
			Если (Строка.Количество-Строка.Недовоз-Строка.Перевоз-Строка.Брак)>0 тогда
				Строка.Сумма = Строка.Цена*(Строка.Количество-Строка.Недовоз-Строка.Перевоз-Строка.Брак);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Строка.Сумма = Строка.Цена*(Строка.Количество-Строка.Недовоз-Строка.Перевоз-Строка.Брак);		
	КонецЕсли;	
	
КонецПроцедуры

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 
Функция ПостроитьПуть(СтекИмен) Экспорт

	Путь = "";
	Для Каждого Имя Из СтекИмен Цикл
		Путь = Путь + ?(Путь = "", "", "|") + Имя;
	КонецЦикла;
	Возврат Путь;

КонецФункции
Функция ПривестиКТипу(текКолонка, текЗначение) Экспорт

	Если Строка(текКолонка.ТипЗначения) = "Строка" Тогда
		текЗначение = СокрЛП(текЗначение);

	ИначеЕсли Строка(текКолонка.ТипЗначения) = "Число" Тогда
		текЗначение = ?(текЗначение = "", 0, Число(текЗначение));

	ИначеЕсли Строка(текКолонка.ТипЗначения) = "Дата" И ТипЗнч(текЗначение) <> Тип("Дата") Тогда
		Если ПустаяСтрока(текЗначение) Тогда
			текЗначение = ТекущаяДата();
		Иначе
			Если СтрНайти(текЗначение, ".") > 0 Тогда
				ДатаМассив = РазложитьСтрокуВМассивПодстрок(текЗначение, ".");
			ИначеЕсли СтрНайти(текЗначение, "-") > 0 Тогда
				ДатаМассив = РазложитьСтрокуВМассивПодстрок(текЗначение, "-");
			Иначе
				ДатаМассив = РазложитьСтрокуВМассивПодстрок(текЗначение, ",");
			КонецЕсли; 
			
			Если СтрДлина(ДатаМассив[0]) = 4 Тогда
				// Формат даты ГГГГ.ММ.ДД
				текЗначение = Дата(ДатаМассив[0], ДатаМассив[1], ДатаМассив[2]);
			Иначе
				// Формат даты ДД.ММ.ГГГГ
				текЗначение = Дата(ДатаМассив[2], ДатаМассив[1], ДатаМассив[0]);
			КонецЕсли; 
		КонецЕсли;

	ИначеЕсли Строка(текКолонка.ТипЗначения) = "Булево" Тогда
		текЗначение = ?(текЗначение = "0", Ложь, Истина);
	КонецЕсли; 

	Возврат текЗначение;

КонецФункции
Функция ПодключитьсяКFTPСерверу(стрПараметры) Экспорт

    Соединение = Новый FTPСоединение(
		стрПараметры.АдресFTP,			// адрес ftp сервера
        21,								// порт сервера
        стрПараметры.ИмяПользователя,	// имя пользователя
        стрПараметры.Пароль,			// пароль пользователя
        Неопределено,					// прокси не используется
        Истина,							// пассивный режим работы
        0,								// таймаут (0 - без ограничений)
        Неопределено // незащищенное соединение
    );

    Возврат Соединение;

КонецФункции


Процедура ЗагрузитьПрайсыПоставщиков() Экспорт
	
	ДанныеЗагрузки = Новый Структура;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Поставщики.Поставщик,
		|	Поставщики.Договор,
		|	Поставщики.АдресFTP,
		|	Поставщики.Логин,
		|	Поставщики.Пароль,
		|	НастройкиПрайсовПоставщиков.Папка,
		|	НастройкиПрайсовПоставщиков.Маска,
		|	НастройкиПрайсовПоставщиков.Кодировка,
		|	НастройкиПрайсовПоставщиков.Формат,
		|	НастройкиПрайсовПоставщиков.Разделитель,
		|	НастройкиПрайсовПоставщиков.have_field_names,
		|	НастройкиПрайсовПоставщиков.Код,
		|	НастройкиПрайсовПоставщиков.Название,
		|	НастройкиПрайсовПоставщиков.КолВУпаковке,
		|	НастройкиПрайсовПоставщиков.ФормаВыпуска,
		|	НастройкиПрайсовПоставщиков.Производитель,
		|	НастройкиПрайсовПоставщиков.Цена,
		|	НастройкиПрайсовПоставщиков.ЦенаРег,
		|	НастройкиПрайсовПоставщиков.Остаток,
		|	НастройкиПрайсовПоставщиков.СтавкаНДС,
		|	НастройкиПрайсовПоставщиков.СтавкаНСП,
		|	НастройкиПрайсовПоставщиков.СрокГодности,
		|	НастройкиПрайсовПоставщиков.КодЕГК,
		|	НастройкиПрайсовПоставщиков.Баркод,
		|	НастройкиПрайсовПоставщиков.СтранаПроизводитель,
		|	НастройкиПрайсовПоставщиков.ЖВЛ,
		|	НастройкиПрайсовПоставщиков.Дата,
		|	НастройкиПрайсовПоставщиков.НачальнаяСтрока,
		|	НастройкиПрайсовПоставщиков.ИзПочты,
		|	НастройкиПрайсовПоставщиков.НеУстанавливатьМинКол
		|ИЗ
		|	РегистрСведений.Поставщики КАК Поставщики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПрайсовПоставщиков КАК НастройкиПрайсовПоставщиков
		|		ПО Поставщики.Поставщик = НастройкиПрайсовПоставщиков.Поставщик
		|			И Поставщики.Договор = НастройкиПрайсовПоставщиков.Договор
		|ГДЕ
		|	Поставщики.Активно = ИСТИНА";

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	структНастройки = Новый Структура;
	табЗагруженныйПрайс = Новый ТаблицаЗначений;
	табЗагруженныйПрайс.Колонки.Добавить("Коробочный", Новый ОписаниеТипов("Число"));
	табЗагруженныйПрайс.Колонки.Добавить("Баркод", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(20));
	табЗагруженныйПрайс.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	табЗагруженныйПрайс.Колонки.Добавить("ЖВЛ", Новый ОписаниеТипов("Булево"));
	табЗагруженныйПрайс.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(50));
	табЗагруженныйПрайс.Колонки.Добавить("КодЕГК", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(50));
	табЗагруженныйПрайс.Колонки.Добавить("Название", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(250));
	табЗагруженныйПрайс.Колонки.Добавить("КолВУпаковке", Новый ОписаниеТипов("Число"));
	табЗагруженныйПрайс.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Число"));
	табЗагруженныйПрайс.Колонки.Добавить("Производитель", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(250));
	табЗагруженныйПрайс.Колонки.Добавить("СрокГодности", Новый ОписаниеТипов("Дата"));
	табЗагруженныйПрайс.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("Число"));
	табЗагруженныйПрайс.Колонки.Добавить("СтавкаНСП", Новый ОписаниеТипов("Число"));
	табЗагруженныйПрайс.Колонки.Добавить("СтранаПроизводитель", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(250));
	табЗагруженныйПрайс.Колонки.Добавить("ФормаВыпуска", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(250));
	табЗагруженныйПрайс.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	табЗагруженныйПрайс.Колонки.Добавить("ЦенаРег", Новый ОписаниеТипов("Число"));
	табЗагруженныйПрайс.Колонки.Добавить("РежимХранения", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(50));
	табЗагруженныйПрайс.Колонки.Добавить("Холод", Новый ОписаниеТипов("Булево"));

	АктивныеНастройки = РезультатЗапроса.Выбрать();
	Пока АктивныеНастройки.Следующий() Цикл

		Если ПустаяСтрока(АктивныеНастройки.Логин) Тогда
			Продолжить;
		КонецЕсли; 

		структНастройки.Очистить();
		табЗагруженныйПрайс.Очистить();

		Для каждого текКолонка Из РезультатЗапроса.Колонки Цикл

			текЗначение = АктивныеНастройки[текКолонка.Имя];
			Если ЗначениеЗаполнено(текЗначение) Тогда
				структНастройки.Вставить(текКолонка.Имя, ?(ТипЗнч(текЗначение) = Тип("Строка"), СокрЛП(текЗначение), текЗначение));
			Иначе
				структНастройки.Вставить(текКолонка.Имя, ?(ТипЗнч(текЗначение) = Тип("Число"), 0, Неопределено));
			КонецЕсли;

		КонецЦикла; 

		ЗагрузитьПоставщика(структНастройки, табЗагруженныйПрайс);

	КонецЦикла; 

КонецПроцедуры
Процедура ЗагрузитьПоставщика(Настройка, табЗагруженныйПрайс)

	ОбщийкаталогАрхив = "C:\price\";
	КаталогАрхив = ОбщийкаталогАрхив + СокрЛП(Настройка.Папка);
	Если НайтиФайлы(ОбщийкаталогАрхив, СокрЛП(Настройка.Папка)).Количество() = 0 Тогда
		СоздатьКаталог(КаталогАрхив);
	КонецЕсли;

	ВременныйКаталог = КаталогВременныхФайлов() + СокрЛП(Настройка.Папка);
	Если НайтиФайлы(КаталогВременныхФайлов(), СокрЛП(Настройка.Папка)).Количество() = 0 Тогда
		СоздатьКаталог(ВременныйКаталог);
	КонецЕсли;
	ПолучитьФайлыС_FTP(Настройка, ВременныйКаталог);

	ЗагружаемыеФайлы = НайтиФайлы(ВременныйКаталог, Настройка.Маска);
	Если ЗагружаемыеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Для Индекс = 0 По ЗагружаемыеФайлы.ВГраница() Цикл

		текФайл = ЗагружаемыеФайлы[Индекс];
		Если ВРег(Настройка.Формат) = "DBF" Тогда
			ЗагрузитьПрайс_DBF(текФайл, Настройка, табЗагруженныйПрайс);

		ИначеЕсли ВРег(Настройка.Формат) = "TXT" Тогда
			ЗагрузитьПрайс_TXT(текФайл, Настройка, табЗагруженныйПрайс);

		ИначеЕсли СтрНайти(ВРег(Настройка.Формат), "ZIP") Тогда
			Если ВРег(Настройка.Формат) = "ZIPPROTEK" Тогда
				ЗагрузитьПрайс_ZipProtek(текФайл, Настройка, табЗагруженныйПрайс);
			Иначе
				// Хз чей это прайс
				Продолжить;
			КонецЕсли; 

		Иначе
			Продолжить;
		КонецЕсли;

		ПоместитьПрайсВРегистрСведений(Настройка, табЗагруженныйПрайс, текФайл.Имя);
		КопироватьФайл(текФайл.ПолноеИмя, КаталогАрхив + "\" + текФайл.Имя);
	КонецЦикла; 

	УдалитьФайлы(ВременныйКаталог);

КонецПроцедуры
Процедура ПолучитьФайлыС_FTP(Настройка, ВременныйКаталог)

	СтруктураПодключения = Новый Структура;
	СтруктураПодключения.Вставить("АдресFTP", СокрЛП(Настройка.АдресFTP));
	СтруктураПодключения.Вставить("ИмяПользователя", Настройка.Логин);
	СтруктураПодключения.Вставить("Пароль", Настройка.Пароль);
	Соединение = ПодключитьсяКFTPСерверу(СтруктураПодключения);
	Соединение.УстановитьТекущийКаталог("/price/");

	стрПрефикс = СтрЗаменить(Формат(ТекущаяДата(), "ДЛФ=DT"), ":", ".");
	стрКаталог = "/price/" + СокрЛП(Настройка.Папка);

    НайденныеФайлы = Соединение.НайтиФайлы(стрКаталог, СокрЛП(Настройка.Маска));
	Для Каждого Файл Из НайденныеФайлы Цикл
		НовоеИмяФайла = стрПрефикс + "_" + Файл.Имя;
		Соединение.Получить(
			Файл.ПолноеИмя, // что качаем
			ВременныйКаталог + "\" + НовоеИмяФайла // куда качаем
		);
		Соединение.Удалить(Файл.ПолноеИмя);

		НаборЗаписей = РегистрыСведений.ЛогЗагрузкиПрайсовПоставщиков.СоздатьМенеджерЗаписи();
		НаборЗаписей.Поставщик = Настройка.Поставщик;
		НаборЗаписей.Договор = Настройка.Договор;
		НаборЗаписей.Файл = НовоеИмяФайла;
		НаборЗаписей.Загружен = Ложь;
		НаборЗаписей.ДатаОперации = ТекущаяДата();
		НаборЗаписей.Записать();

	КонецЦикла;
	Соединение = "";

КонецПроцедуры

Процедура ЗагрузитьПрайс_DBF(текФайл, Настройка, табЗагруженныйПрайс)

	ИмяКоротко = "";
	Если СтрДлина(текФайл.ИмяБезРасширения) <= 6 Тогда
		ИмяКоротко = "t_" + СокрЛП(текФайл.ИмяБезРасширения) + "." + Настройка.Формат;
	Иначе
		ИмяКоротко = "t_" + Лев(СокрЛП(текФайл.ИмяБезРасширения), 6) + "." + Настройка.Формат;
	КонецЕсли;

	ВременныйФайл = КаталогВременныхФайлов() + ИмяКоротко;
	КопироватьФайл(текФайл.ПолноеИмя, ВременныйФайл);

	ФайлДБФ = Новый XBase;
	//ФайлДБФ.Кодировка = КодировкаXBase.ANSI;
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	ФайлДБФ.ОткрытьФайл(ВременныйФайл, , Истина);
	Если ФайлДБФ.КоличествоЗаписей() = 0 Тогда
		ФайлДБФ.ЗакрытьФайл();
		Возврат;
	КонецЕсли;

	ФайлДБФ.Первая();
	Если Настройка.НачальнаяСтрока > 0 Тогда
		Если ФайлДБФ.КоличествоЗаписей() <= Настройка.НачальнаяСтрока Тогда
			ФайлДБФ.Перейти(Настройка.НачальнаяСтрока)
		КонецЕсли; 
	КонецЕсли;

	Пока Не ФайлДБФ.ВКонце() Цикл

		СтрокаПрайса = табЗагруженныйПрайс.Добавить();
		СтрокаПрайса.Коробочный = 0;

		Для каждого текКолонка Из табЗагруженныйПрайс.Колонки Цикл

			НаименованиеКолонки = Неопределено;
			Настройка.Свойство(текКолонка.Имя, НаименованиеКолонки);
			Если НЕ НаименованиеКолонки = Неопределено Тогда
				Если ФайлДБФ.Поля.Найти(НаименованиеКолонки) = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				текЗначение = ФайлДБФ[НаименованиеКолонки];
				Если Строка(текКолонка.ТипЗначения) = "Строка" Тогда
					текЗначение = СокрЛП(текЗначение);
				КонецЕсли; 
				СтрокаПрайса[текКолонка.Имя] = текЗначение;

			КонецЕсли; 

		КонецЦикла; 
	    ФайлДБФ.Следующая(); // переходим к следующей записи
	КонецЦикла;    
	
	ФайлДБФ.ЗакрытьФайл();
	УдалитьФайлы(ВременныйФайл);

КонецПроцедуры
Процедура ЗагрузитьПрайс_TXT(текФайл, Настройка, табЗагруженныйПрайс);

	Если ПустаяСтрока(Настройка.Разделитель) Тогда
		Возврат;
	КонецЕсли;

	ИмяКоротко = "";
	Если СтрДлина(текФайл.ИмяБезРасширения) <= 6 Тогда
		ИмяКоротко = "t_" + СокрЛП(текФайл.ИмяБезРасширения) + "." + Настройка.Формат;
	Иначе
		ИмяКоротко = "t_" + Лев(СокрЛП(текФайл.ИмяБезРасширения), 6) + "." + Настройка.Формат;
	КонецЕсли;

	ВременныйФайл = КаталогВременныхФайлов() + ИмяКоротко;
	КопироватьФайл(текФайл.ПолноеИмя, ВременныйФайл);

	ТекстовыйФайл  = Новый ТекстовыйДокумент;
 	ТекстовыйФайл.Прочитать(
		ВременныйФайл,
		?(ПустаяСтрока(Настройка.Кодировка), КодировкаТекста.UTF8, СокрЛП(Настройка.Кодировка)));

	Для Индекс = (1 + Настройка.НачальнаяСтрока) По ТекстовыйФайл.КоличествоСтрок() Цикл

		СтрокаМассив = РазложитьСтрокуВМассивПодстрок(ТекстовыйФайл.ПолучитьСтроку(Индекс), Настройка.Разделитель);
		Если СтрокаМассив.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаПрайса = табЗагруженныйПрайс.Добавить();
		СтрокаПрайса.Коробочный = 0;
		Для каждого текКолонка Из табЗагруженныйПрайс.Колонки Цикл

			ИндексПоля = Неопределено;
			Настройка.Свойство(текКолонка.Имя, ИндексПоля);
			Если НЕ ИндексПоля = Неопределено Тогда
				ИндексПоля = Число(ИндексПоля);
				Если СтрокаМассив.ВГраница() < ИндексПоля Тогда
					Продолжить;
				КонецЕсли;

				текЗначение = СокрЛП(СтрокаМассив[ИндексПоля]);
				Если Строка(текКолонка.ТипЗначения) = "Число" Тогда
					текЗначение = ?(текЗначение = "", 0, Число(текЗначение));

				ИначеЕсли Строка(текКолонка.ТипЗначения) = "Дата" Тогда
					Если ПустаяСтрока(текЗначение) Тогда
						текЗначение = ТекущаяДата();
					Иначе
						ДатаМассив = РазложитьСтрокуВМассивПодстрок(текЗначение, ".");
						Если СтрДлина(ДатаМассив[0]) = 4 Тогда
							// Формат даты ГГГГ.ММ.ДД
							текЗначение = Дата(ДатаМассив[0], ДатаМассив[1], ДатаМассив[2]);
						Иначе
							// Формат даты ДД.ММ.ГГГГ
							текЗначение = Дата(ДатаМассив[2], ДатаМассив[1], ДатаМассив[0]);
						КонецЕсли; 
					КонецЕсли;

				ИначеЕсли Строка(текКолонка.ТипЗначения) = "Булево" Тогда
					текЗначение = ?(текЗначение = "0", Ложь, Истина);
				КонецЕсли; 
				СтрокаПрайса[текКолонка.Имя] = текЗначение;

			КонецЕсли; 

		КонецЦикла; 

	КонецЦикла;
	
	УдалитьФайлы(ВременныйФайл);

КонецПроцедуры

Процедура ЗагрузитьПрайс_ZipProtek(текФайл, Настройка, табЗагруженныйПрайс);

	ИмяКоротко = "";
	Если СтрДлина(текФайл.ИмяБезРасширения) <= 6 Тогда
		ИмяКоротко = "t_" + СокрЛП(текФайл.ИмяБезРасширения) + ".zip";
	Иначе
		ИмяКоротко = "t_" + Лев(СокрЛП(текФайл.ИмяБезРасширения), 6) + ".zip";
	КонецЕсли;

	стрДата = Формат(ТекущаяДата(), "ДЛФ=DT");
	ZipКаталог = КаталогВременныхФайлов() + "ZipProtek " + СтрЗаменить(стрДата, ":", ".");
	СоздатьКаталог(ZipКаталог);
	
	табКаталог_Protek = Новый ТаблицаЗначений;
	табКаталог_Protek.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(20));
	табКаталог_Protek.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(250));
	табКаталог_Protek.Колонки.Добавить("Изготовитель", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(250));
	табКаталог_Protek.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("Число"));
	табКаталог_Protek.Колонки.Добавить("ЗначенияСвойств", Новый ОписаниеТипов("Структура"));
	табКаталог_Protek.Колонки.Добавить("ЖВЛ", Новый ОписаниеТипов("Булево"));
	табКаталог_Protek.Колонки.Добавить("ДатаПрайса", Новый ОписаниеТипов("Дата"));
	табКаталог_Protek.Колонки.Добавить("РежимХранения", Новый ОписаниеТипов("Строка"),  Новый КвалификаторыСтроки(20));
	табКаталог_Protek.Колонки.Добавить("Холод", Новый ОписаниеТипов("Булево"));
	
	табКаталог_Protek.Колонки.Добавить("ЦенаРег", Новый ОписаниеТипов("Число"));
	табКаталог_Protek.Колонки.Добавить("SPACK", Новый ОписаниеТипов("Число"));
	табКаталог_Protek.Колонки.Добавить("SHEAF_QTY", Новый ОписаниеТипов("Число"));
	
	
	
	
	ВременныйФайл = ZipКаталог + "\" + ИмяКоротко;
	КопироватьФайл(текФайл.ПолноеИмя, ВременныйФайл);

	Архив = Новый ЧтениеZipФайла(ВременныйФайл);
	Для Каждого Элемент Из Архив.Элементы Цикл

		ФайлКаталог = Ложь;
		Если СтрНайти(Элемент.ИмяБезРасширения, "catalogue") = 1 Тогда
			ФайлКаталог = Истина;
		Иначе
			Если СтрНайти(Элемент.ИмяБезРасширения, "offer") = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

	    Архив.Извлечь(
	        Элемент, // элемент для извлечения
	        ZipКаталог,
	        РежимВосстановленияПутейФайловZIP.Восстанавливать,
	        "" // пароль
	    );

		Если ФайлКаталог Тогда
			Прочитать_XML_Каталог_ZipProtek(ZipКаталог + "\" + Элемент.ПолноеИмя, Настройка, табКаталог_Protek);
			Продолжить;
		КонецЕсли;

		Прочитать_XML_ZipProtek(ZipКаталог + "\" + Элемент.ПолноеИмя, Настройка, табЗагруженныйПрайс);
	КонецЦикла;

	// Дополним данные товара 
	ПолучитьСводнуюТаблицу(табКаталог_Protek, табЗагруженныйПрайс);
	
//	Для каждого СтрокаПрайса Из табЗагруженныйПрайс Цикл
//		Строки = табКаталог_Protek.НайтиСтроки(Новый Структура("Ид", СтрокаПрайса.Код));
//		Для каждого строкаКаталога из Строки цикл
//			СтрокаПрайса.РежимХранения = строкаКаталога.РежимХранения;
//			СтрокаПрайса.Дата = строкаКаталога.ДатаПрайса;
//			СтрокаПрайса.Холод = строкаКаталога.Холод;
//			СтрокаПрайса.СтавкаНДС = строкаКаталога.СтавкаНДС;
//			СтрокаПрайса.ЖВЛ = строкаКаталога.ЖВЛ;

//			КолВУпаковке = 0;
//			Если СтрокаПрайса.Коробочный = 1 Тогда
//				Если СтрокаКаталога.ЗначенияСвойств.Свойство("SPACK") Тогда
//					КолВУпаковке = Число(СтрокаКаталога.ЗначенияСвойств.SPACK);
//				КонецЕсли; 
//			Иначе
//				Если СтрокаКаталога.ЗначенияСвойств.Свойство("SHEAF_QTY") Тогда
//					КолВУпаковке = Число(СтрокаКаталога.ЗначенияСвойств.SHEAF_QTY);
//				КонецЕсли; 
//			КонецЕсли;
//			Если КолВУпаковке > 0 Тогда
//				СтрокаПрайса.КолВУпаковке = КолВУпаковке;
//			КонецЕсли;
//			
//			Если СтрокаКаталога.ЗначенияСвойств.Свойство("REG_GOS_PRICE") Тогда
//				СтрокаПрайса.ЦенаРег = Число(СтрокаКаталога.ЗначенияСвойств.REG_GOS_PRICE);
//				СтрокаПрайса.ЖВЛ = Истина;
//			КонецЕсли;

//			
////SPACK - задает cnt_pack если перебирается файл 2009
////SHEAF_QTY - задает cnt_pack если перебирается файл 1020
////REG_GOS_PRICE - задает zhvls и price_reg
////ZakMedCtg.1357 - задает vat как 0
////ZakMedCtg.16 и ZakMedCtg.1358 - задают zhvls как 1 и vat как 10
////ZakMedCtg.1226 - задает storage_conditions как +(2-8)C и cold как 1
////ZakMedCtg.1228 - задает storage_conditions как +(18-20)C

//		КонецЦикла;
//	КонецЦикла; 

	УдалитьФайлы(ZipКаталог);

КонецПроцедуры

Процедура ПолучитьСводнуюТаблицу(табКаталог_Protek, табЗагруженныйПрайс)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("табКаталог", табКаталог_Protek);
	Запрос.УстановитьПараметр("табЗагруженныйПрайс", табЗагруженныйПрайс);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПОДСТРОКА(табКаталог.Ид, 1, 20) КАК Код,
		|	ПОДСТРОКА(табКаталог.Наименование, 1, 250) КАК Наименование,
		|	ПОДСТРОКА(табКаталог.Изготовитель, 1, 250) КАК Изготовитель,
		|	табКаталог.ЖВЛ КАК ЖВЛ,
		|	табКаталог.СтавкаНДС КАК СтавкаНДС,
		|	табКаталог.ДатаПрайса КАК ДатаПрайса,
		|	ПОДСТРОКА(табКаталог.РежимХранения, 1, 20) КАК РежимХранения,
		|	табКаталог.Холод КАК Холод,
		|	табКаталог.ЦенаРег КАК ЦенаРег,
		|	табКаталог.SPACK КАК SPACK,
		|	табКаталог.SHEAF_QTY КАК SHEAF_QTY
		|ПОМЕСТИТЬ ВТ_табКаталог
		|ИЗ
		|	&табКаталог КАК табКаталог
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПОДСТРОКА(табЗагруженныйПрайс.Код, 1, 20) КАК Код,
		|	ПОДСТРОКА(табЗагруженныйПрайс.Название, 1, 250) КАК Название,
		|	табЗагруженныйПрайс.Коробочный,
		|	табЗагруженныйПрайс.Цена,
		|	табЗагруженныйПрайс.Остаток,
		|	табЗагруженныйПрайс.СтавкаНДС,
		|	табЗагруженныйПрайс.СрокГодности,
		|	ПОДСТРОКА(табЗагруженныйПрайс.КодЕГК, 1, 50) КАК КодЕГК,
		|	ПОДСТРОКА(табЗагруженныйПрайс.Баркод, 1, 20) КАК Баркод,
		|	ПОДСТРОКА(табЗагруженныйПрайс.ФормаВыпуска, 1, 250) КАК ФормаВыпуска,
		|	табЗагруженныйПрайс.ЖВЛ,
		|	табЗагруженныйПрайс.Дата,
		|	табЗагруженныйПрайс.ЦенаРег,
		|	табЗагруженныйПрайс.КолВУпаковке,
		|	ПОДСТРОКА(табЗагруженныйПрайс.Производитель, 1, 250) КАК Производитель,
		|	ПОДСТРОКА(табЗагруженныйПрайс.СтранаПроизводитель, 1, 250) КАК СтранаПроизводитель,
		|	табЗагруженныйПрайс.СтавкаНСП,
		|	табЗагруженныйПрайс.РежимХранения,
		|	табЗагруженныйПрайс.Холод
		|ПОМЕСТИТЬ ВТ_ЗагруженныйПрайс
		|ИЗ
		|	&табЗагруженныйПрайс КАК табЗагруженныйПрайс
		|ГДЕ
		|	табЗагруженныйПрайс.Цена > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗагруженныйПрайс.Код,
		|	ВТ_ЗагруженныйПрайс.Название,
		|	ВТ_ЗагруженныйПрайс.Коробочный,
		|	ВТ_ЗагруженныйПрайс.Цена,
		|	ВТ_ЗагруженныйПрайс.Остаток,
		|	ВТ_ЗагруженныйПрайс.СрокГодности,
		|	ВТ_ЗагруженныйПрайс.КодЕГК,
		|	ВТ_ЗагруженныйПрайс.Баркод,
		|	ВТ_ЗагруженныйПрайс.ФормаВыпуска,
		|	ВТ_ЗагруженныйПрайс.Производитель,
		|	ВТ_ЗагруженныйПрайс.СтранаПроизводитель,
		|	ВТ_ЗагруженныйПрайс.СтавкаНСП,
		|	ВТ_табКаталог.РежимХранения,
		|	ВТ_табКаталог.ДатаПрайса КАК Дата,
		|	ВТ_табКаталог.Холод,
		|	ВТ_табКаталог.СтавкаНДС,
		|	ВТ_табКаталог.ЖВЛ,
		|	ВТ_табКаталог.ЦенаРег КАК ЦенаРег,
		|	ВЫБОР
		|		КОГДА ВТ_ЗагруженныйПрайс.Коробочный = 1
		|			ТОГДА ВТ_табКаталог.SPACK
		|		ИНАЧЕ ВТ_табКаталог.SHEAF_QTY
		|	КОНЕЦ КАК КолВУпаковке
		|ИЗ
		|	ВТ_ЗагруженныйПрайс КАК ВТ_ЗагруженныйПрайс
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_табКаталог КАК ВТ_табКаталог
		|		ПО ВТ_ЗагруженныйПрайс.Код = ВТ_табКаталог.Код";

	табЗагруженныйПрайс = Запрос.Выполнить().Выгрузить().Скопировать();

КонецПроцедуры
 

Процедура Прочитать_XML_Каталог_ZipProtek(ПутьКФайлу, Настройка, табКаталог_Protek)

	СтекИмен = Новый СписокЗначений;
	Парсер = Новый ЧтениеXML;
    Парсер.ОткрытьФайл(ПутьКФайлу);
	ДатаПрайса = ТекущаяДата();

	Пока Парсер.Прочитать() Цикл
		Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если Парсер.Имя = "КоммерческаяИнформация" Тогда
				стрДатаПрайса = Парсер.ЗначениеАтрибута("ДатаФормирования");
				// "2017-12-04T09:05:42"
				стрГод	= Число(Лев(стрДатаПрайса, 4));
				стрМес	= Число(Сред(стрДатаПрайса, 6, 2));
				стрДень	= Число(Сред(стрДатаПрайса, 9, 2));
				стрЧас	= Число(Сред(стрДатаПрайса, 12, 2));
				стрМин	= Число(Сред(стрДатаПрайса, 15, 2));
				стрСек	= Число(Сред(стрДатаПрайса, 18, 2));
				ДатаПрайса = Дата(стрГод, стрМес, стрДень, стрЧас, стрМин, стрСек);

			ИначеЕсли Парсер.Имя = "Каталог" Тогда

				Пока Парсер.Прочитать() Цикл
					Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда

						Если Парсер.Имя <> "Товары" Тогда
							Продолжить;
						КонецЕсли;

						Пока Парсер.Прочитать() Цикл
							Если Парсер.Имя = "Товар" И Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
								СтрокаКаталога = табКаталог_Protek.Добавить();
								СтрокаКаталога.СтавкаНДС = 18;
								СтрокаКаталога.ДатаПрайса = ДатаПрайса;
								СтрокаКаталога.ЦенаРег = 0;
								СтрокаКаталога.SPACK = 1;
								СтрокаКаталога.SHEAF_QTY = 1;
								
								Прочитать_XML_Узел_Каталога(Парсер, СтрокаКаталога);
								
								Если СтрокаКаталога.ЗначенияСвойств.Свойство("SPACK") Тогда
									Попытка
										СтрокаКаталога.SPACK = Число(СтрокаКаталога.ЗначенияСвойств.SPACK);
									Исключение
									КонецПопытки; 
								КонецЕсли; 
								Если СтрокаКаталога.ЗначенияСвойств.Свойство("SHEAF_QTY") Тогда
									Попытка
										СтрокаКаталога.SHEAF_QTY = Число(СтрокаКаталога.ЗначенияСвойств.SHEAF_QTY);
									Исключение
									КонецПопытки; 
								КонецЕсли; 
								Если СтрокаКаталога.ЗначенияСвойств.Свойство("REG_GOS_PRICE") Тогда
									Попытка
										СтрокаКаталога.ЦенаРег = Число(СтрокаКаталога.ЗначенияСвойств.REG_GOS_PRICE);
									Исключение
									КонецПопытки; 
//									СтрокаПрайса.ЖВЛ = Истина;
								КонецЕсли;

							КонецЕсли;
						КонецЦикла;
					КонецЕсли; 
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
    КонецЦикла;

    Парсер.Закрыть();

КонецПроцедуры
Процедура Прочитать_XML_Узел_Каталога(Парсер, СтрокаКаталога)

	ИмяТекущегоУзла = Парсер.Имя;
	Пока Парсер.Прочитать() Цикл

		Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента И Парсер.Имя = "Группы" Тогда
			// Группы свойств товара
			Пока Парсер.Прочитать() Цикл
				Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Продолжить;
				ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.Текст Тогда
					Если Парсер.ИмеетЗначение Тогда
						текЗначение = СокрЛП(Парсер.Значение);
						Если текЗначение = "ZakMedCtg.1357" Тогда
							СтрокаКаталога.СтавкаНДС = 0;
						ИначеЕсли текЗначение = "ZakMedCtg.1358" Тогда
							СтрокаКаталога.СтавкаНДС = 10;
						ИначеЕсли текЗначение = "ZakMedCtg.1359" Тогда
							СтрокаКаталога.СтавкаНДС = 18;
						ИначеЕсли текЗначение = "ZakMedCtg.16" Тогда
							СтрокаКаталога.ЖВЛ = Истина;
						ИначеЕсли текЗначение = "ZakMedCtg.1226" Тогда
							СтрокаКаталога.РежимХранения = "+(2-8)C";
							СтрокаКаталога.Холод = Истина;
						ИначеЕсли текЗначение = "ZakMedCtg.1226" Тогда
							СтрокаКаталога.РежимХранения = "+(12-15)C";
							СтрокаКаталога.Холод = Истина;
						ИначеЕсли текЗначение = "ZakMedCtg.1228" Тогда
							СтрокаКаталога.РежимХранения = "+(18-20)C";
							СтрокаКаталога.Холод = Ложь;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента И Парсер.Имя = "Группы" Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента И Парсер.Имя = "ЗначенияСвойств" Тогда

			СтрЗначенияСвойств = Новый Структура;
			// Значения свойств товара
			Пока Парсер.Прочитать() Цикл
				Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента И Парсер.Имя = "ЗначенияСвойства" Тогда
					Прочитать_XML_ЗначенияСвойства_Каталога(Парсер, СтрЗначенияСвойств);
				ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента И Парсер.Имя = "ЗначенияСвойств" Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			СтрокаКаталога.ЗначенияСвойств = СтрЗначенияСвойств;

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Прочитать_XML_Узел_Каталога(Парсер, СтрокаКаталога)

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат;

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.Текст Тогда
			Если Парсер.ИмеетЗначение Тогда
				Если СтрНайти("Ид Наименование Изготовитель", ИмяТекущегоУзла) <> 0 Тогда
					СтрокаКаталога[ИмяТекущегоУзла] = Парсер.Значение;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура Прочитать_XML_ЗначенияСвойства_Каталога(Парсер, СтрЗначенияСвойств)

	ИмяТекущегоУзла = Парсер.Имя;
	Пока Парсер.Прочитать() Цикл

		Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Прочитать_XML_ЗначенияСвойства_Каталога(Парсер, СтрЗначенияСвойств);

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.Текст Тогда
			Если Парсер.ИмеетЗначение Тогда
				текЗначение = Парсер.Значение;
				Если ИмяТекущегоУзла = "Ид" Тогда
					ЗначениеПоИД = ПолучитьЗначениеИД(Парсер);
					СтрЗначенияСвойств.Вставить(текЗначение, ЗначениеПоИД);
				КонецЕсли; 
			КонецЕсли;

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьЗначениеИД(Парсер);

	ИмяТекущегоУзла = Парсер.Имя;
	Пока Парсер.Прочитать() Цикл

		Если Парсер.ТипУзла = ТипУзлаXML.Текст Тогда
			Если Парсер.ИмеетЗначение Тогда
				Возврат Парсер.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецФункции 

Процедура Прочитать_XML_ZipProtek(ПутьКФайлу, Настройка, табЗагруженныйПрайс)

	СтекИмен = Новый СписокЗначений;
	Парсер = Новый ЧтениеXML;
    Парсер.ОткрытьФайл(ПутьКФайлу);
	Коробочный = 0;
	//Если СтрНайти(ПутьКФайлу, "offer3_2,009") Тогда
	//	Коробочный = 1;
	//КонецЕсли;

	Пока Парсер.Прочитать() Цикл
		Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда

			Если Парсер.Имя = "Ид" Тогда
				Если Парсер.Значение = "2009" Тогда
					Коробочный = 1;
				КонецЕсли;
				Продолжить;
			КонецЕсли;

			Если Парсер.Имя <> "Предложения" Тогда
				Продолжить;
			КонецЕсли;

			Пока Парсер.Прочитать() Цикл
				Если Парсер.Имя = "Предложение" Тогда
					СтрокаПрайса = табЗагруженныйПрайс.Добавить();
					СтрокаПрайса.Коробочный = Коробочный;
					СтрокаПрайса.КолВУпаковке = 1;
					Прочитать_XML_Узел(Парсер, Настройка, табЗагруженныйПрайс, СтекИмен, СтрокаПрайса);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
    КонецЦикла;

    Парсер.Закрыть();

КонецПроцедуры
Процедура Прочитать_XML_Узел(Парсер, Настройка, табЗагруженныйПрайс, СтекИмен, СтрокаПрайса)

	Пока Парсер.Прочитать() Цикл

		Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда

			Если Парсер.Имя = "ЗначенияСвойств" Тогда
				Прочитать_XML_Узел_ЗначенияСвойств(Парсер, Настройка, табЗагруженныйПрайс, СтрокаПрайса);
				Продолжить;
			КонецЕсли;

	        СтекИмен.Добавить(Парсер.Имя);
			Прочитать_XML_Узел(Парсер, Настройка, табЗагруженныйПрайс, СтекИмен, СтрокаПрайса)

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.Текст Тогда
			Если Парсер.ИмеетЗначение Тогда

				текЗначение = Парсер.Значение;
		        ПолныйПуть = ПостроитьПуть(СтекИмен);

				Для каждого текКолонка Из табЗагруженныйПрайс.Колонки Цикл

					НаименованиеКолонки = Неопределено;
					Настройка.Свойство(текКолонка.Имя, НаименованиеКолонки);
					Если НЕ НаименованиеКолонки = Неопределено Тогда
						Если НаименованиеКолонки <> ПолныйПуть Тогда
							Продолжить;
						КонецЕсли;
						СтрокаПрайса[текКолонка.Имя] = ПривестиКТипу(текКолонка, текЗначение);
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	 		Если СтекИмен.Количество() > 0 Тогда
				СтекИмен.Удалить(СтекИмен.Количество() - 1);
			КонецЕсли;
			Возврат;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
Процедура Прочитать_XML_Узел_ЗначенияСвойств(Парсер, Настройка, табЗагруженныйПрайс, СтрокаПрайса)

	Пока Парсер.Прочитать() Цикл
		Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента И Парсер.Имя = "ЗначенияСвойства" Тогда
			Прочитать_XML_ЗначенияСвойства_Прайса(Парсер, Настройка, табЗагруженныйПрайс, СтрокаПрайса);
		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента И Парсер.Имя = "ЗначенияСвойств" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
Процедура Прочитать_XML_ЗначенияСвойства_Прайса(Парсер, Настройка, табЗагруженныйПрайс, СтрокаПрайса)

	ИмяТекущегоУзла = Парсер.Имя;
	Пока Парсер.Прочитать() Цикл

		Если Парсер.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Прочитать_XML_ЗначенияСвойства_Прайса(Парсер, Настройка, табЗагруженныйПрайс, СтрокаПрайса);

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.Текст Тогда
			Если Парсер.ИмеетЗначение Тогда

				Если ИмяТекущегоУзла = "Ид" Тогда
					текЗначение = "ЗначенияСвойств|" + СокрЛП(Парсер.Значение);
					Для каждого текКолонка Из табЗагруженныйПрайс.Колонки Цикл

						НаименованиеКолонки = Неопределено;
						Настройка.Свойство(текКолонка.Имя, НаименованиеКолонки);
						Если НЕ НаименованиеКолонки = Неопределено Тогда
							Если НаименованиеКолонки <> текЗначение Тогда
								Продолжить;
							КонецЕсли;
							ЗначениеПоИД = ПолучитьЗначениеИД(Парсер);
							СтрокаПрайса[текКолонка.Имя] = ПривестиКТипу(текКолонка, ЗначениеПоИД);
							Прервать;
						КонецЕсли; 
					КонецЦикла; 

				КонецЕсли; 
			КонецЕсли;

		ИначеЕсли Парсер.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
Процедура ПоместитьПрайсВРегистрСведений(Настройка, табЗагруженныйПрайс, ЗагружаемыйФайл)

	Если табЗагруженныйПрайс.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("табЗагруженныйПрайс", табЗагруженныйПрайс);
	Запрос.УстановитьПараметр("Поставщик", Настройка.Поставщик);
	Запрос.УстановитьПараметр("Договор", Настройка.Договор);
	Запрос.УстановитьПараметр("ДатаЗаписи", ТекущаяДата());

	Запрос.Текст =
		"ВЫБРАТЬ
		|	&Поставщик КАК Поставщик,
		|	&Договор КАК Договор,
		|	ПОДСТРОКА(табЗагруженныйПрайс.Код, 1, 50) КАК КодПоставщика,
		|	ПОДСТРОКА(табЗагруженныйПрайс.Название, 1, 250) КАК Наименование,
		|	табЗагруженныйПрайс.Коробочный КАК Коробочный,
		|	табЗагруженныйПрайс.Цена КАК price,
		|	табЗагруженныйПрайс.Остаток КАК cnt,
		|	табЗагруженныйПрайс.СтавкаНДС КАК СтавкаНДС,
		|	табЗагруженныйПрайс.СрокГодности КАК expiration,
		|	ПОДСТРОКА(табЗагруженныйПрайс.КодЕГК, 1, 50) КАК КодЕГК,
		|	ПОДСТРОКА(табЗагруженныйПрайс.Баркод, 1, 20) КАК ШК,
		|	ПОДСТРОКА(табЗагруженныйПрайс.ФормаВыпуска, 1, 250) КАК ФормаВыпуска,
		|	табЗагруженныйПрайс.ЖВЛ,
		|	табЗагруженныйПрайс.Дата КАК ДатаПрайса,
		|	табЗагруженныйПрайс.ЦенаРег КАК ЦенаРег,
		|	табЗагруженныйПрайс.КолВУпаковке КАК cnt_pack,
		|	ПОДСТРОКА(табЗагруженныйПрайс.Производитель, 1, 250) КАК Производитель,
		|	ПОДСТРОКА(табЗагруженныйПрайс.СтранаПроизводитель, 1, 250) КАК СтранаПроизводитель,
		|	табЗагруженныйПрайс.СтавкаНСП КАК СтавкаНСП,
		|	табЗагруженныйПрайс.Цена КАК price_post,
		|	табЗагруженныйПрайс.Цена КАК price_corr,
		|	&ДатаЗаписи КАК ДатаЗаписи
		|ПОМЕСТИТЬ ВТ_ЗагруженныйПрайс
		|ИЗ
		|	&табЗагруженныйПрайс КАК табЗагруженныйПрайс
		|ГДЕ
		|	табЗагруженныйПрайс.Цена > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Поставщики.Поставщик КАК Поставщик,
		|	ПрофильПоставщика.ДатаОжидаемойПоставки КАК delivery_date
		|ПОМЕСТИТЬ ВТ_Поставщики
		|ИЗ
		|	РегистрСведений.Поставщики КАК Поставщики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО Поставщики.Поставщик = Контрагенты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофильПоставщика КАК ПрофильПоставщика
		|		ПО (Контрагенты.ОсновнойПрофильПоставщика = ПрофильПоставщика.Ссылка)
		|ГДЕ
		|	Поставщики.Поставщик = &Поставщик
		|	И Поставщики.Договор = &Договор
		|	И Поставщики.Активно = ИСТИНА
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Поставщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТоварыПоставщика.Товар,
		|	ТоварыПоставщика.КодТовараПоставщика,
		|	ТоварыПоставщика.Наименование
		|ПОМЕСТИТЬ ВТ_ТоварыПоставщика
		|ИЗ
		|	РегистрСведений.ТоварыПоставщика КАК ТоварыПоставщика
		|ГДЕ
		|	ТоварыПоставщика.Поставщик = &Поставщик
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодТовараПоставщика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ТоварыПоставщика.Товар,
		|	ВТ_ЗагруженныйПрайс.Поставщик,
		|	ВТ_ЗагруженныйПрайс.Договор,
		|	ВТ_ЗагруженныйПрайс.Коробочный КАК box,
		|	ВТ_ЗагруженныйПрайс.КодПоставщика,
		|	ВТ_ЗагруженныйПрайс.Наименование,
		|	ВТ_ЗагруженныйПрайс.Производитель,
		|	ЗНАЧЕНИЕ(Справочник.РегионРаботы.Москва) КАК id_reg,
		|	0 КАК nac_max,
		|	0 КАК nac_min,
		|	ВТ_ЗагруженныйПрайс.price_corr,
		|	ВТ_ЗагруженныйПрайс.cnt_pack,
		|	0 КАК nac,
		|	ВТ_Поставщики.delivery_date,
		|	ВТ_ЗагруженныйПрайс.expiration,
		|	ВТ_ЗагруженныйПрайс.cnt,
		|	ВТ_ЗагруженныйПрайс.price,
		|	ВТ_ЗагруженныйПрайс.price_post,
		|	ВТ_ЗагруженныйПрайс.ШК,
		|	ВТ_ЗагруженныйПрайс.ДатаПрайса,
		|	ВТ_ЗагруженныйПрайс.ЖВЛ,
		|	ВТ_ЗагруженныйПрайс.КодЕГК,
		|	ВТ_ЗагруженныйПрайс.СтавкаНДС,
		|	ВТ_ЗагруженныйПрайс.СтавкаНСП,
		|	ВТ_ЗагруженныйПрайс.СтранаПроизводитель,
		|	ВТ_ЗагруженныйПрайс.ФормаВыпуска,
		|	ВТ_ЗагруженныйПрайс.ЦенаРег,
		|	ВТ_ЗагруженныйПрайс.ДатаЗаписи
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	ВТ_ЗагруженныйПрайс КАК ВТ_ЗагруженныйПрайс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Поставщики КАК ВТ_Поставщики
		|		ПО ВТ_ЗагруженныйПрайс.Поставщик = ВТ_Поставщики.Поставщик
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТоварыПоставщика КАК ВТ_ТоварыПоставщика
		|		ПО ВТ_ЗагруженныйПрайс.КодПоставщика = ВТ_ТоварыПоставщика.КодТовараПоставщика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Данные.Поставщик,
		|	ВТ_Данные.Договор,
		|	ВТ_Данные.КодПоставщика,
		|	ВТ_Данные.Наименование,
		|	ВТ_Данные.Товар,
		|	ВТ_Данные.box КАК ТипПрайса,
		|	ВТ_Данные.price КАК Цена,
		|	ВТ_Данные.cnt КАК Остаток,
		|	ВТ_Данные.СтавкаНДС,
		|	ВТ_Данные.expiration КАК СрокГодности,
		|	ВТ_Данные.КодЕГК КАК ЕГК,
		|	ВТ_Данные.ШК,
		|	ВТ_Данные.ФормаВыпуска,
		|	ВТ_Данные.ЖВЛ,
		|	ВТ_Данные.ДатаПрайса,
		|	ВТ_Данные.ЦенаРег,
		|	ВТ_Данные.cnt_pack КАК КолВУпаковке,
		|	ВТ_Данные.Производитель,
		|	ВТ_Данные.СтранаПроизводитель КАК Страна,
		|	ВТ_Данные.ДатаЗаписи
		|ПОМЕСТИТЬ ВТ_ПрайсЛистПоставщика
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Поставщик КАК Поставщик,
		|	ВложенныйЗапрос.КодТовараПоставщика,
		|	ВложенныйЗапрос.Наименование,
		|	ВТ_ТоварыПоставщика.Товар
		|ПОМЕСТИТЬ ВТ_НовыеТоварыПоставщика
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыПоставщика.КодТовараПоставщика КАК КодТовараПоставщика,
		|		ТоварыПоставщика.Наименование КАК Наименование
		|	ИЗ
		|		ВТ_ТоварыПоставщика КАК ТоварыПоставщика
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВТ_Данные.КодПоставщика,
		|		ВТ_Данные.Наименование
		|	ИЗ
		|		ВТ_Данные КАК ВТ_Данные) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТоварыПоставщика КАК ВТ_ТоварыПоставщика
		|		ПО (ВТ_ТоварыПоставщика.КодТовараПоставщика = ВложенныйЗапрос.КодТовараПоставщика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Данные.Товар,
		|	ВТ_Данные.Поставщик,
		|	ВТ_Данные.Договор,
		|	ВТ_Данные.box,
		|	ВТ_Данные.КодПоставщика,
		|	ВТ_Данные.Наименование,
		|	ВТ_Данные.Производитель,
		|	ВТ_Данные.id_reg,
		|	ВТ_Данные.nac_max,
		|	ВТ_Данные.nac_min,
		|	ВТ_Данные.price_corr,
		|	ВТ_Данные.cnt_pack,
		|	ВТ_Данные.nac,
		|	ВТ_Данные.delivery_date,
		|	ВТ_Данные.expiration,
		|	ВТ_Данные.cnt,
		|	ВТ_Данные.price,
		|	ВТ_Данные.price_post,
		|	ВТ_Данные.ШК,
		|	ВТ_Данные.ДатаПрайса,
		|	ВТ_Данные.ЖВЛ,
		|	ВТ_Данные.КодЕГК,
		|	ВТ_Данные.СтавкаНДС,
		|	ВТ_Данные.СтавкаНСП,
		|	ВТ_Данные.СтранаПроизводитель,
		|	ВТ_Данные.ФормаВыпуска,
		|	ВТ_Данные.ЦенаРег
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда

		НаборЗаписей = РегистрыСведений.supplier_price.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Поставщик.Установить(Настройка.Поставщик);
		НаборЗаписей.Отбор.Договор.Установить(Настройка.Договор);
		НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
		НаборЗаписей.Записать();
		НаборЗаписей = "";

	КонецЕсли;

	// Обновим товары поставщика
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_НовыеТоварыПоставщика.Поставщик,
		|	ВТ_НовыеТоварыПоставщика.КодТовараПоставщика,
		|	ВТ_НовыеТоварыПоставщика.Наименование,
		|	ВТ_НовыеТоварыПоставщика.Товар
		|ИЗ
		|	ВТ_НовыеТоварыПоставщика КАК ВТ_НовыеТоварыПоставщика";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда

		НаборЗаписей = РегистрыСведений.ТоварыПоставщика.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Поставщик.Установить(Настройка.Поставщик);
		НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
		НаборЗаписей.Записать();
		НаборЗаписей = "";

	КонецЕсли;

	// Заполним прайс поставщика
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВТ_ПрайсЛистПоставщика.Поставщик,
		|	ВТ_ПрайсЛистПоставщика.Договор,
		|	ВТ_ПрайсЛистПоставщика.КодПоставщика,
		|	ВТ_ПрайсЛистПоставщика.Наименование,
		|	ВТ_ПрайсЛистПоставщика.Товар,
		|	ВТ_ПрайсЛистПоставщика.ТипПрайса,
		|	ВТ_ПрайсЛистПоставщика.Цена,
		|	ВТ_ПрайсЛистПоставщика.Остаток,
		|	ВТ_ПрайсЛистПоставщика.СтавкаНДС,
		|	ВТ_ПрайсЛистПоставщика.СрокГодности,
		|	ВТ_ПрайсЛистПоставщика.ЕГК,
		|	ВТ_ПрайсЛистПоставщика.ШК,
		|	ВТ_ПрайсЛистПоставщика.ФормаВыпуска,
		|	ВТ_ПрайсЛистПоставщика.ЖВЛ,
		|	ВТ_ПрайсЛистПоставщика.ДатаПрайса,
		|	ВТ_ПрайсЛистПоставщика.ЦенаРег,
		|	ВТ_ПрайсЛистПоставщика.КолВУпаковке,
		|	ВТ_ПрайсЛистПоставщика.Производитель,
		|	ВТ_ПрайсЛистПоставщика.Страна,
		|	ВТ_ПрайсЛистПоставщика.ДатаЗаписи
		|ИЗ
		|	ВТ_ПрайсЛистПоставщика КАК ВТ_ПрайсЛистПоставщика";
	РезультатЗапроса = Запрос.Выполнить();
	НаборЗаписей = РегистрыСведений.ПрайсЛистПоставщика.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Поставщик.Установить(Настройка.Поставщик);
	НаборЗаписей.Отбор.Договор.Установить(Настройка.Договор);
	НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
	НаборЗаписей.Записать();
	НаборЗаписей = "";

	// Наследим загрузкой
	НаборЗаписей = РегистрыСведений.ЛогЗагрузкиПрайсовПоставщиков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Поставщик.Установить(Настройка.Поставщик);
	НаборЗаписей.Отбор.Договор.Установить(Настройка.Договор);
	НаборЗаписей.Отбор.Файл.Установить(ЗагружаемыйФайл);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей[0].Загружен = Истина;
		НаборЗаписей[0].ДатаОперации = ТекущаяДата();
	КонецЕсли;
	НаборЗаписей.Записать();
	НаборЗаписей = "";

КонецПроцедуры

//---------------------------------------------------------
// *** *** *** Выгрузка заказов *** *** *** *** 


Процедура ВыгрузитьЗаказыПоставщикам() Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику,
		|	Поставщики.Поставщик КАК Поставщик,
		|	Поставщики.Договор,
		|	Поставщики.АдресFTP,
		|	Поставщики.Логин,
		|	Поставщики.Пароль
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Поставщики КАК Поставщики
		|		ПО ЗаказПоставщику.Клиент = Поставщики.Поставщик
		|ГДЕ
		|	ЗаказПоставщику.Статус = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Поставщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиВыгрузкиЗаказовПоставщикам.Поставщик,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Папка,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Маска,
		|	НастройкиВыгрузкиЗаказовПоставщикам.НомерВыгрузки,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Формат,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Разделитель,
		|	НастройкиВыгрузкиЗаказовПоставщикам.have_field_names,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Кодировка,
		|	НастройкиВыгрузкиЗаказовПоставщикам.НомерЗаказа,
		|	НастройкиВыгрузкиЗаказовПоставщикам.ДатаЗаказа,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Код,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Название,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Количество,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Цена,
		|	НастройкиВыгрузкиЗаказовПоставщикам.НазваниеГрузополучателя,
		|	НастройкиВыгрузкиЗаказовПоставщикам.КодГрузополучателя,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Дата,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Клиент,
		|	НастройкиВыгрузкиЗаказовПоставщикам.POZ,
		|	НастройкиВыгрузкиЗаказовПоставщикам.PAYID,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Комметарий,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Отказ,
		|	НастройкиВыгрузкиЗаказовПоставщикам.Коробочный
		|ПОМЕСТИТЬ ВТ_Настройки
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВТ_Данные.Поставщик КАК Поставщик
		|	ИЗ
		|		ВТ_Данные КАК ВТ_Данные) КАК ВТ_Поставщик
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВыгрузкиЗаказовПоставщикам КАК НастройкиВыгрузкиЗаказовПоставщикам
		|		ПО ВТ_Поставщик.Поставщик = НастройкиВыгрузкиЗаказовПоставщикам.Поставщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Данные.Поставщик,
		|	ВТ_Данные.АдресFTP,
		|	ВТ_Данные.Логин,
		|	ВТ_Данные.Пароль
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные";
	ТабДанных = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаДанных Из ТабДанных Цикл

		Если ПустаяСтрока(СтрокаДанных.Логин) Тогда
			Продолжить;
		КонецЕсли; 

		слкПоставщик = СтрокаДанных.Поставщик;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВТ_Настройки.Поставщик,
		|	ВТ_Настройки.Папка,
		|	ВТ_Настройки.Маска,
		|	ВТ_Настройки.НомерВыгрузки,
		|	ВТ_Настройки.Формат,
		|	ВТ_Настройки.Разделитель,
		|	ВТ_Настройки.have_field_names,
		|	ВТ_Настройки.Кодировка,
		|	ВТ_Настройки.НомерЗаказа,
		|	ВТ_Настройки.ДатаЗаказа,
		|	ВТ_Настройки.Код,
		|	ВТ_Настройки.Название,
		|	ВТ_Настройки.Количество,
		|	ВТ_Настройки.Цена,
		|	ВТ_Настройки.НазваниеГрузополучателя,
		|	ВТ_Настройки.КодГрузополучателя,
		|	ВТ_Настройки.Дата,
		|	ВТ_Настройки.Клиент,
		|	ВТ_Настройки.POZ,
		|	ВТ_Настройки.PAYID,
		|	ВТ_Настройки.Комметарий,
		|	ВТ_Настройки.Отказ,
		|	ВТ_Настройки.Коробочный
		|ИЗ
		|	ВТ_Настройки КАК ВТ_Настройки
		|ГДЕ
		|	ВТ_Настройки.Поставщик = &Поставщик";
		Запрос.УстановитьПараметр("Поставщик", слкПоставщик);
		табНастроекПоставщика = Запрос.Выполнить().Выгрузить();
		Если табНастроекПоставщика.Количество() = 0 Тогда
			// Нет настроек
			Продолжить;
		КонецЕсли;

		// Установим соединение
		СтруктураПодключения = Новый Структура;
		СтруктураПодключения.Вставить("ИмяПользователя", СтрокаДанных.Логин);
		СтруктураПодключения.Вставить("Пароль", СтрокаДанных.Пароль);
		СтруктураПодключения.Вставить("АдресFTP", СтрокаДанных.АдресFTP);
		Соединение = ПодключитьсяКFTPСерверу(СтруктураПодключения);
		Соединение.УстановитьТекущийКаталог("/order");

		ВыгрузитьЗаказыПоставщика(Соединение, табНастроекПоставщика.Колонки, табНастроекПоставщика[0], Запрос);
		Соединение = "";

	КонецЦикла; 
	
	
	
КонецПроцедуры
Процедура ВыгрузитьЗаказыПоставщика(Соединение, КолонкиНастроек, текНастройка, Запрос)

	Если НРег(текНастройка.Формат) = "dbf" Тогда

		ВыгрузитьЗаказ_DBF(Соединение, КолонкиНастроек, текНастройка, Запрос);
	
	ИначеЕсли НРег(текНастройка.Формат) = "txt" Тогда
		
	
	ИначеЕсли НРег(текНастройка.Формат) = "xml" Тогда	
		
	Иначе
		Возврат;

	КонецЕсли; 


КонецПроцедуры

Функция СоздатьФайл_DBF(КолонкиНастроек, текНастройка, ИмяФайла, ПоляТаблицы, ПутьКНовомуDBF, ИмяФайлаDBF)

// Типы ещё бывают:
    // N - число
    // S - строка
    // D - дата
    // L - булево
    // F - число

	ФайлВыгрузки = Новый XBase;
//	ФайлВыгрузки.Кодировка = КодировкаXBase.ANSI;
	ФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
	ПоляТаблицы.Очистить();

	Для каждого текКолонка Из КолонкиНастроек Цикл

		Если СтрНайти("НомерЗаказа ДатаЗаказа Код Название Количество Цена КодГрузополучателя Дата Клиент POZ PAYID Комметарий Отказ Коробочный", текКолонка.Имя) = 0 Тогда
			Продолжить;
		КонецЕсли; 

		текЗначение = текНастройка[текКолонка.Имя];
		Если НЕ ЗначениеЗаполнено(текЗначение) Тогда
			Продолжить;
		КонецЕсли; 

		ДатаМассив = РазложитьСтрокуВМассивПодстрок(текЗначение, ",");

		ТипКолонки = "";
		Длина = "";

		ИмяКолонки = ДатаМассив[0];
		ПоляТаблицы.Вставить(текКолонка.Имя, ИмяКолонки);
		
		Если ДатаМассив.Количество() > 1 Тогда
			ТипКолонки = ДатаМассив[1];
		КонецЕсли; 

		Если ДатаМассив.Количество() > 2 Тогда
			Длина = Число(ДатаМассив[2]);
		КонецЕсли;

		ФайлВыгрузки.Поля.Добавить(
		    ИмяКолонки, // имя колонки
		    ТипКолонки, // тип
		    ?(Длина = "", "", Длина), // длина
		);
	КонецЦикла;

	ИмяФайлаDBF = Формат(ИмяФайла, "ЧЦ=8; ЧВН=; ЧГ=") + ".dbf";
	ПутьКНовомуDBF = КаталогВременныхФайлов() + ИмяФайлаDBF;
	ФайлВыгрузки.СоздатьФайл(ПутьКНовомуDBF, );

	Возврат ФайлВыгрузки;

КонецФункции // ()
Процедура ВыгрузитьЗаказ_DBF(Соединение, КолонкиНастроек, текНастройка, ОсновнойЗапрос)

	НомерВыгрузки = текНастройка.НомерВыгрузки;
	ОсновнойЗапрос.УстановитьПараметр("Поставщик", текНастройка.Поставщик);
	ОсновнойЗапрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Данные.ЗаказПоставщику,
	|	ВТ_Данные.Договор
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|ГДЕ
	|	ВТ_Данные.Поставщик = &Поставщик";

	ПоляТаблицы = Новый Соответствие;
	РезультатЗапроса = ОсновнойЗапрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл

		текДокумент = РезультатЗапроса.ЗаказПоставщику;
		текДоговор = РезультатЗапроса.Договор;

		ПолноеИмяФайла = "";
		ИмяФайла = "";
		ФайлВыгрузки = СоздатьФайл_DBF(КолонкиНастроек, текНастройка, НомерВыгрузки, ПоляТаблицы, ПолноеИмяФайла, ИмяФайла);

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", текДокумент);
		Запрос.УстановитьПараметр("КодГрузополучателя", текДоговор.КодПолучателя);
		Запрос.УстановитьПараметр("НазваниеГрузополучателя", текДоговор.СкладОприходования.АдресХранения.Адрес);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Запрос.УстановитьПараметр("НомерЗаказа", НомерВыгрузки);

		Запрос.Текст = 
			"ВЫБРАТЬ
			|	&НомерЗаказа КАК НомерЗаказа,
			|	ЗаказПоставщикуТовары.Ссылка.Дата КАК ДатаЗаказа,
			|	ЗаказПоставщикуТовары.КодТовараПоставщика КАК Код,
			|	ЕСТЬNULL(ТоварыПоставщика.Наименование, ЗаказПоставщикуТовары.Товар.Наименование) КАК Название,
			|	ЗаказПоставщикуТовары.Количество,
			|	ЗаказПоставщикуТовары.Цена,
			|	ЗаказПоставщикуТовары.КоличествоОтказ КАК Отказ,
			|	ЗаказПоставщикуТовары.Ссылка.Комментарий,
			|	&КодГрузополучателя КАК КодГрузополучателя,
			|	&НазваниеГрузополучателя КАК НазваниеГрузополучателя,
			|	&ТекущаяДата КАК Дата,
			|	0 КАК PAYID,
			|	"""" КАК POZ
			|ИЗ
			|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыПоставщика КАК ТоварыПоставщика
			|		ПО ЗаказПоставщикуТовары.Товар = ТоварыПоставщика.Товар
			|			И ЗаказПоставщикуТовары.КодТовараПоставщика = ТоварыПоставщика.КодТовараПоставщика
			|			И ЗаказПоставщикуТовары.Ссылка.Клиент = ТоварыПоставщика.Поставщик
			|ГДЕ
			|	ЗаказПоставщикуТовары.Ссылка = &Ссылка";

		ТабТоваров = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаДокумента Из ТабТоваров Цикл

			ФайлВыгрузки.Добавить();
			Для каждого ТекКолонка Из ТабТоваров.Колонки Цикл
				ИмяПоля = ПоляТаблицы.Получить(ТекКолонка.Имя);
				Если ИмяПоля <> Неопределено Тогда
					Если ТипЗнч(СтрокаДокумента[ТекКолонка.Имя]) = Тип("Строка") Тогда
						ФайлВыгрузки[ИмяПоля] = СокрЛП(СтрокаДокумента[ТекКолонка.Имя]);
					Иначе
						ФайлВыгрузки[ИмяПоля] = СтрокаДокумента[ТекКолонка.Имя];
					КонецЕсли; 
				КонецЕсли;
			КонецЦикла;
			ФайлВыгрузки.Записать();

		КонецЦикла; 

		_Флаг = Истина;
		Попытка

			ФайлВыгрузки.Записать();
			ФайлВыгрузки.ЗакрытьФайл();
			Соединение.Записать(ПолноеИмяФайла, ИмяФайла);

		Исключение
			_Флаг = НЕ _Флаг;
		КонецПопытки;
		
		Если _Флаг Тогда

			обДокумент = текДокумент.ПолучитьОбъект();
			обДокумент.НомерДокПоставщика = Формат(НомерВыгрузки, "ЧГ=");
			обДокумент.ИмяФайла = ИмяФайла;
			обДокумент.Статус = Истина;
			Попытка
				обДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			КонецПопытки;

			УдалитьФайлы(ПолноеИмяФайла);
			НомерВыгрузки = НомерВыгрузки + 1;

		КонецЕсли; 

	КонецЦикла; 

	Если НомерВыгрузки <> текНастройка.НомерВыгрузки Тогда

		НаборЗаписей = РегистрыСведений.НастройкиВыгрузкиЗаказовПоставщикам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Поставщик.Установить(текНастройка.Поставщик);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей[0].НомерВыгрузки = НомерВыгрузки;
		КонецЕсли;
		НаборЗаписей.Записать();
		НаборЗаписей = "";

	КонецЕсли; 

КонецПроцедуры


Функция ПолучитьЗаданиеНаСборку(Холод,Сотрудник,ТолькоКомплектация = Ложь,ТипСборки = неопределено,Документ = неопределено, СотрудникНазначаемый = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Если ТипСборки = неопределено тогда
		ТипСборки = перечисления.ТипСборки.СборкаЗаказа;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(СотрудникНазначаемый) тогда
		СотрудникНазначаемый = Сотрудник;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СборкаЗаказов_ЗаданиеНаСборку");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	ЭтоСборкаПеремещения = ТипСборки = Перечисления.ТипСборки.СборкаПеремещения;
	ЭтоКомплектацияКоробки = ТипСборки = Перечисления.ТипСборки.СборкаЗаказовИзКоробки;
	//Если ТипСборки <> перечисления.ТипСборки.СборкаПеремещения тогда
	Если не ЭтоСборкаПеремещения тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомплектацияЗаказов.Ссылка,
		|	КомплектацияЗаказов.ДокументОснование.Номер КАК НомерЗадания
		|ИЗ
		|	Документ.КомплектацияЗаказов КАК КомплектацияЗаказов
		|ГДЕ
		|	КомплектацияЗаказов.Сотрудник = &Сотрудник
		|	И НЕ КомплектацияЗаказов.КомплектацияЗавершена
		|	И НЕ КомплектацияЗаказов.ПометкаУдаления
		|	И КомплектацияЗаказов.ДокументОснование.ТипСборки = &ТипСборки";
		Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
		Запрос.УстановитьПараметр("ТипСборки",ТипСборки);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() цикл
			ЗафиксироватьТранзакцию();
			Если ЭтоКомплектацияКоробки тогда
				Возврат Новый Структура("Комплектация,НомерЗадания",Выборка.Ссылка,Выборка.НомерЗадания);
			Иначе
				Возврат Выборка.Ссылка;
			КонецЕсли;
		КонецЦикла;
		Если ТолькоКомплектация тогда
			ЗафиксироватьТранзакцию();
			Если ЭтоКомплектацияКоробки тогда
				Возврат Новый Структура("Комплектация,НомерЗадания",Документы.КомплектацияЗаказов.ПустаяСсылка(),"");
			Иначе
				Возврат Документы.КомплектацияЗаказов.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ "+?(ЭтоСборкаПеремещения,"ПЕРВЫЕ 50","ПЕРВЫЕ 50")+"
	|	СборкаЗаказов_ЗаданиеНаСборку.Документ,
	|	СборкаЗаказов_ЗаданиеНаСборку.Товар,
	|	СборкаЗаказов_ЗаданиеНаСборку.Партия,
	|	СборкаЗаказов_ЗаданиеНаСборку.Холод,
	|	СборкаЗаказов_ЗаданиеНаСборку.Сотрудник КАК Сотрудник,
	|	СборкаЗаказов_ЗаданиеНаСборку.Зона КАК Зона,
	|	СборкаЗаказов_ЗаданиеНаСборку.Стелаж КАК Стелаж,
	|	СборкаЗаказов_ЗаданиеНаСборку.Ячейка КАК Ячейка,
	|	СборкаЗаказов_ЗаданиеНаСборку.Количество,
	|	СборкаЗаказов_ЗаданиеНаСборку.Количество * СборкаЗаказов_ЗаданиеНаСборку.Товар.Объем КАК Объем,
	|	СборкаЗаказов_ЗаданиеНаСборку.ТипСборки
	|ИЗ
	|	РегистрСведений.СборкаЗаказов_ЗаданиеНаСборку КАК СборкаЗаказов_ЗаданиеНаСборку
	|ГДЕ
	|	(СборкаЗаказов_ЗаданиеНаСборку.Сотрудник = &Сотрудник
	|			ИЛИ СборкаЗаказов_ЗаданиеНаСборку.Сотрудник = ЗНАЧЕНИЕ(справочник.Сотрудники.ПустаяСсылка))
	|	И СборкаЗаказов_ЗаданиеНаСборку.Холод = &Холод
	|	И СборкаЗаказов_ЗаданиеНаСборку.ТипСборки = &ТипСборки
	|	И (СборкаЗаказов_ЗаданиеНаСборку.Документ = &Документ
	|			ИЛИ НЕОПРЕДЕЛЕНО = &Документ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник УБЫВ,
	|	Зона,
	|	Стелаж,
	|	Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СборкаЗаказов_ЗаданиеНаСборку.Документ,
	|	СборкаЗаказов_ЗаданиеНаСборку.Товар,
	|	СборкаЗаказов_ЗаданиеНаСборку.Партия,
	|	СборкаЗаказов_ЗаданиеНаСборку.Холод,
	|	СборкаЗаказов_ЗаданиеНаСборку.Сотрудник КАК Сотрудник,
	|	СборкаЗаказов_ЗаданиеНаСборку.Зона КАК Зона,
	|	СборкаЗаказов_ЗаданиеНаСборку.Стелаж КАК Стелаж,
	|	СборкаЗаказов_ЗаданиеНаСборку.Ячейка КАК Ячейка,
	|	СборкаЗаказов_ЗаданиеНаСборку.Количество,
	|	СборкаЗаказов_ЗаданиеНаСборку.ТипСборки
	|ИЗ
	|	РегистрСведений.СборкаЗаказов_ЗаданиеНаСборку КАК СборкаЗаказов_ЗаданиеНаСборку
	|ГДЕ
	|	(СборкаЗаказов_ЗаданиеНаСборку.Сотрудник = &Сотрудник
	|			ИЛИ СборкаЗаказов_ЗаданиеНаСборку.Сотрудник = ЗНАЧЕНИЕ(справочник.Сотрудники.ПустаяСсылка))
	|	И (СборкаЗаказов_ЗаданиеНаСборку.Документ = &Документ
	|			ИЛИ НЕОПРЕДЕЛЕНО = &Документ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник УБЫВ,
	|	Зона,
	|	Стелаж,
	|	Ячейка";
	Запрос.УстановитьПараметр("Холод",Холод);
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	Запрос.УстановитьПараметр("ТипСборки",ТипСборки);
	Запрос.УстановитьПараметр("Документ",Документ);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	МенеджерСборка = РегистрыСведений.СборкаЗаказов_ЗаданиеНаСборку.СоздатьМенеджерЗаписи();
	
	ОбъемСборки = 0;
	ОбъемКорзинки = Константы.ОбъемКорзинкиСборки.Получить();
	ит = 0;
	
	
	Если НЕ МассивРезультатов[1].Пустой() тогда
		Если не МассивРезультатов[0].Пустой() тогда
			Выборка = МассивРезультатов[0].Выбрать();
			Пока Выборка.Следующий() цикл
				Если Выборка.Сотрудник <> Сотрудник тогда
					Если ОбъемСборки + Выборка.Объем < ОбъемКорзинки  или ит = 0 или ЭтоСборкаПеремещения тогда 
						ЗаполнитьЗначенияСвойств(МенеджерСборка,Выборка);
						МенеджерСборка.Прочитать();
						МенеджерСборка.Сотрудник = СотрудникНазначаемый;
						МенеджерСборка.Записать();
						Если ТипСборки = Перечисления.ТипСборки.СборкаЗаказа тогда
							СтатусыДокументов.УстановитьСтатусСборкиЗаказа(Выборка.Документ,Перечисления.ОснованияУстановкиСтатусаДокумента.ПолученоЗаданиеНаСборку,
								Справочники.СтатусыОбработкиЗаказа.ПереданНаСборку,СотрудникНазначаемый);
						КонецЕсли;
						ит = ит + 1;
					Иначе
						ЗафиксироватьТранзакцию();
						Возврат Истина;
					КонецЕсли;
				КонецЕсли;
				ОбъемСборки = ОбъемСборки+Выборка.Объем;
			КонецЦикла;
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			//Иначе
			//	ЗафиксироватьТранзакцию();
			//	Возврат "Заданий со сборкой заказов в "+?(Холод,"холоде","тепле")+" нет, выбирете "+?(Холод,"тепло","холод")+"!";
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКСборкеОстатки.Документ,
	|	ТоварыКСборкеОстатки.Товар,
	|	ТоварыКСборкеОстатки.Партия,
	|	СУММА(ТоварыКСборкеОстатки.КоличествоКСборкеОстаток) КАК Количество,
	|	ЕСТЬNULL(НоменклатураЗСЯ.Зона, 999) КАК Зона,
	|	ЕСТЬNULL(НоменклатураЗСЯ.Стеллаж, 999) КАК Стелаж,
	|	ЕСТЬNULL(НоменклатураЗСЯ.Ячейка, 999) КАК Ячейка,
	|	ТоварыКСборкеОстатки.Товар.Холод КАК Холод,
	|	СУММА(ТоварыКСборкеОстатки.КоличествоКСборкеОстаток * НоменклатураСп.Объем) КАК Объем,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
	|	ТоварыКСборкеОстатки.ТипСборки
	|ИЗ
	|	РегистрНакопления.ТоварыКСборке.Остатки(
	|			&Период,
	|			Склад = &Склад
	|				И ТипСборки = &ТипСборки
	|				И (Документ = &Документ
	|					ИЛИ НЕОПРЕДЕЛЕНО = &Документ)) КАК ТоварыКСборкеОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗСЯНоменклатуры КАК НоменклатураЗСЯ
	|		ПО ТоварыКСборкеОстатки.Товар = НоменклатураЗСЯ.Номенклатура
	|			И ТоварыКСборкеОстатки.Склад = НоменклатураЗСЯ.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСп
	|		ПО ТоварыКСборкеОстатки.Товар = НоменклатураСп.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СборкаЗаказов_ЗаданиеНаСборку КАК СборкаЗаказов_ЗаданиеНаСборку
	|		ПО ТоварыКСборкеОстатки.Документ = СборкаЗаказов_ЗаданиеНаСборку.Документ
	|			И ТоварыКСборкеОстатки.Товар = СборкаЗаказов_ЗаданиеНаСборку.Товар
	|			И ТоварыКСборкеОстатки.Партия = СборкаЗаказов_ЗаданиеНаСборку.Партия
	|			И ТоварыКСборкеОстатки.ТипСборки = СборкаЗаказов_ЗаданиеНаСборку.ТипСборки
	|ГДЕ
	|	СборкаЗаказов_ЗаданиеНаСборку.Документ ЕСТЬ NULL 
	|	И ТоварыКСборкеОстатки.КоличествоКСборкеОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКСборкеОстатки.Документ,
	|	ТоварыКСборкеОстатки.Партия,
	|	ТоварыКСборкеОстатки.Товар,
	|	ЕСТЬNULL(НоменклатураЗСЯ.Зона, 999),
	|	ЕСТЬNULL(НоменклатураЗСЯ.Стеллаж, 999),
	|	ЕСТЬNULL(НоменклатураЗСЯ.Ячейка, 999),
	|	ТоварыКСборкеОстатки.Товар.Холод,
	|	ТоварыКСборкеОстатки.ТипСборки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Зона,
	|	Стелаж,
	|	Ячейка
	|ИТОГИ ПО
	|	Холод";
	
	Запрос.УстановитьПараметр("Склад", ПараметрыСеанса.ОсновнойСклад);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ТипСборки",ТипСборки);
	Запрос.УстановитьПараметр("Документ",Документ);
	
	ВыборкаХолод = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОбъемСборки = 0;
	Ит = 0;
	ЗаданиеНазначено = Ложь;
	ЗаданиеСформированно = Ложь;
	Пока ВыборкаХолод.Следующий() цикл
		ЗаданиеСформированно = Истина;
		Выборка = ВыборкаХолод.Выбрать();
		Пока Выборка.Следующий() цикл				
			МенеджерСборка = РегистрыСведений.СборкаЗаказов_ЗаданиеНаСборку.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерСборка,Выборка);
			ОбъемСборки = ОбъемСборки + Выборка.Объем;
			ИТ = ИТ + 1;
			Если  (ИТ = 1 или (ОбъемСборки < ОбъемКорзинки и ИТ <= 30) или ЭтоСборкаПеремещения) и Холод = Выборка.Холод тогда
				МенеджерСборка.Сотрудник = СотрудникНазначаемый;
				ЗаданиеНазначено = Истина;
			КонецЕсли;	
			СтатусыДокументов.УстановитьСтатусСборкиЗаказа(Выборка.Документ,Перечисления.ОснованияУстановкиСтатусаДокумента.ПолученоЗаданиеНаСборку,
				Справочники.СтатусыОбработкиЗаказа.ПереданНаСборку,СотрудникНазначаемый);
			МенеджерСборка.Записать();		
		КонецЦикла;					
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Если не ЗаданиеНазначено и ЗаданиеСформированно тогда
		ВозвращаемоеЗначение = "Заданий со сборкой заказов в "+?(Холод,"холоде","тепле")+" нет, попробуйте выбрать "+?(Холод,"тепло","холод")+"!";
	ИначеЕсли не ЗаданиеСформированно тогда
		ВозвращаемоеЗначение = "Нет заказов на сборку!";	
	Иначе
		ВозвращаемоеЗначение = Истина; 
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗарезервироватьТовар(СтруктураЗаказа) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заказ.Ссылка
	|ИЗ
	|	Документ.Заказ КАК Заказ
	|ГДЕ
	|	Заказ.ID_77 = &ID_77";
	Запрос.УстановитьПараметр("ID_77",СтруктураЗаказа.ID_77);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда	
		Заказ = Документы.Заказ.СоздатьДокумент();
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() цикл
			Если СтруктураЗаказа.Свойство("Отменен") тогда  
				Заказ = Выборка.Ссылка.ПолучитьОбъект();
				Заказ.Записать(РежимЗаписиДокумента.Проведение);
				Возврат Истина;
			Иначе 
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	СписокТоваров = Новый СписокЗначений;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ID_Товара",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки("9",ДопустимаяДлина.Фиксированная)));
	ТаблицаТоваров.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла));
	ТаблицаТоваров.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла));
	ТаблицаТоваров.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла));
	ТаблицаТоваров.Колонки.Добавить("Скидка",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла));
	ТаблицаТоваров.Колонки.Добавить("Всего",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла));
	
	Для каждого СтрокаСтруктура из СтруктураЗаказа.Товары цикл
		СтрокаТоваров = ТаблицаТоваров.Добавить();
		СтрокаТоваров.ID_Товара = СтрокаСтруктура.ТоварID;
		СтрокаТоваров.Количество = СтрокаСтруктура.Количество;
		СтрокаТоваров.Цена = СтрокаСтруктура.Цена;
		СтрокаТоваров.Сумма = СтрокаСтруктура.Сумма;
		СтрокаТоваров.Скидка = СтрокаСтруктура.Скидка;
		СтрокаТоваров.Всего = СтрокаСтруктура.Всего;	
	КонецЦикла;
	ТаблицаТоваров.Свернуть("ID_Товара,Цена","Количество,Сумма,Скидка,Всего");
	
	ТаблицаТоваровЗапрос = ТаблицаТоваров.Скопировать();
	ТаблицаТоваровЗапрос.Свернуть("ID_Товара","Количество");
	
	НачатьТранзакцию();
	
	Попытка
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыКРезерву.ID_Товара,
		|	ТоварыКРезерву.Количество
		|ПОМЕСТИТЬ втРезерв
		|ИЗ
		|	&ТаблицаТоваров КАК ТоварыКРезерву
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(втРезерв.Количество) КАК Количество,
		|	Номенклатура.Ссылка КАК ТоварСсылка,
		|	втРезерв.ID_Товара КАК ID_Товара
		|ПОМЕСТИТЬ втРезервСсылка
		|ИЗ
		|	втРезерв КАК втРезерв
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО втРезерв.ID_Товара = Номенклатура.ID_77
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура.Ссылка,
		|	втРезерв.ID_Товара
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиТовараОстатки.Товар,
		|	ОстаткиТовараОстатки.Партия,
		|	СУММА(ОстаткиТовараОстатки.ОстатокОстаток) КАК Остаток
		|ПОМЕСТИТЬ втОстаткиТоваровНаСкладе
		|ИЗ
		|	РегистрНакопления.ОстаткиТовара.Остатки(
		|			&ТекущаяДата,
		|			Отдел = &Отдел
		|				И Товар В
		|					(ВЫБРАТЬ
		|						втРезервСсылка.ТоварСсылка
		|					ИЗ
		|						втРезервСсылка КАК втРезервСсылка)) КАК ОстаткиТовараОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТовараОстатки.Товар,
		|	ОстаткиТовараОстатки.Партия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРезервСсылка.ID_Товара,
		|	втРезервСсылка.ТоварСсылка КАК Товар,
		|	втОстаткиТоваровНаСкладе.Партия,
		|	Естьnull(втОстаткиТоваровНаСкладе.Остаток,0) как Остаток,
		|	втРезервСсылка.Количество
		|ПОМЕСТИТЬ втРезервИОстатки
		|ИЗ
		|	втРезервСсылка КАК втРезервСсылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиТоваровНаСкладе КАК втОстаткиТоваровНаСкладе
		|		ПО втРезервСсылка.ТоварСсылка = втОстаткиТоваровНаСкладе.Товар
		|
		|СГРУППИРОВАТЬ ПО
		|	втРезервСсылка.ID_Товара,
		|	втРезервСсылка.ТоварСсылка,
		|	втОстаткиТоваровНаСкладе.Партия,
		|	втОстаткиТоваровНаСкладе.Остаток,
		|	втРезервСсылка.Количество
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРезервИОстатки.Товар
		|ИЗ
		|	втРезервИОстатки КАК втРезервИОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	втРезервИОстатки.Товар
		|
		|ИМЕЮЩИЕ
		|	(МАКСИМУМ(ЕСТЬNULL(втРезервИОстатки.Остаток, 0)) < СУММА(ЕСТЬNULL(втРезервИОстатки.Количество, 0))
		|		ИЛИ втРезервИОстатки.Товар = ЗНАЧЕНИЕ(справочник.Номенклатура.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРезервИОстатки.Товар КАК Товар,
		|	втРезервИОстатки.ID_Товара,
		|	втРезервИОстатки.Партия,
		|	втРезервИОстатки.Остаток КАК Остаток,
		|	втРезервИОстатки.Партия.ГоденДо КАК ПартияГоденДо
		|ИЗ
		|	втРезервИОстатки КАК втРезервИОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Товар,
		|	ПартияГоденДо";  
		Запрос.УстановитьПараметр("ТаблицаТоваров",ТаблицаТоваровЗапрос);
		Запрос.УстановитьПараметр("Отдел",ПараметрыСеанса.ОсновнойСклад);
		Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		Если НЕ МассивРезультатов[4].Пустой() тогда
			Возврат Ложь;
		КонецЕсли;
		
		
		Заказ.ID_77 = СтруктураЗаказа.ID_77;
		Заказ.Номер = Формат(СтруктураЗаказа.Номер,"ЧГ=");
		Заказ.Дата = Дата(СтруктураЗаказа.Дата);	
		Заказ.ДатаДоставки = Дата(СтруктураЗаказа.ДатаДоставки);
		Заказ.Сайт = СтруктураЗаказа.Сайт;
		Заказ.Всего = СтруктураЗаказа.Всего;
		Заказ.ТипЦены = Справочники.ТипЦены[СтруктураЗаказа.ТипЦены];
		Заказ.Покупатель = СтруктураЗаказа.Покупатель;
		Заказ.НомерЗаказаСайта = СтруктураЗаказа.НомерЗаказаСайта;
		Заказ.Телефон = СтруктураЗаказа.Телефон;
		Заказ.ВесЗаказа = СтруктураЗаказа.ВесЗаказа;
		Заказ.Отдел = Справочники.МестаХранения.НайтиПоРеквизиту("ID_77",СтруктураЗаказа.Отдел);
		Заказ.ТочкаСамовывоза = Справочники.ТочкиСамовывоза.НайтиПоРеквизиту("ID_77", СтруктураЗаказа.ТочкаСамовывоза);
		Заказ.ТипДоставки = Перечисления.ТипДоставки.Самовывоз;
		Заказ.СрокХранения = НачалоДня(Заказ.ДатаДоставки) + 3600*24*3;
		Заказ.СтатусОбработкиЗаказа = Справочники.СтатусыОбработкиЗаказа.ПереданНаСборку; 
		Заказ.ТипКомплектацииЗаказа = Перечисления.ТипКомплектацииЗаказа.СборкаИКомплектацияВАптеке;
		
		ТоварОстатки = МассивРезультатов[5].Выгрузить();	
		
		Заказ.Товар.Очистить();
		
		Для каждого Строка из ТаблицаТоваров цикл
			НадоСписать = Строка.Количество;
			СкидкаНаОдин = Строка.Скидка/Строка.Количество;
			СтрокиДляСписания = ТоварОстатки.НайтиСтроки(Новый Структура("ID_Товара",Строка.ID_Товара));	
			Для каждого СтрокаОстаток из СтрокиДляСписания цикл
				Если СтрокаОстаток.Остаток > 0 тогда
					СписываемоеПоСтроке = Мин(СтрокаОстаток.Остаток,НадоСписать);
					СтрокаТовар = Заказ.Товар.Добавить();
					СтрокаТовар.Товар = СтрокаОстаток.Товар;
					СтрокаТовар.Партия = СтрокаОстаток.Партия;
					СтрокаТовар.Количество = СписываемоеПоСтроке;
					СтрокаТовар.Цена = Строка.Цена;
					СтрокаТовар.Сумма = Строка.Цена*СписываемоеПоСтроке;
					СтрокаТовар.Скидка = СписываемоеПоСтроке*СкидкаНаОдин;
					СтрокаТовар.Всего = СписываемоеПоСтроке*СтрокаТовар.Цена - СтрокаТовар.Скидка;
					СтрокаОстаток.Остаток = СтрокаОстаток.Остаток - СписываемоеПоСтроке; 
					НадоСписать = НадоСписать - СписываемоеПоСтроке;
					Если НадоСписать = 0 тогда
						Прервать
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Заказ.Записать(РежимЗаписиДокумента.Проведение);
		
		СтатусыДокументов.УстановитьСтатусСборкиЗаказа(Заказ,Перечисления.ОснованияУстановкиСтатусаДокумента.HTTPСервисOrderReservation,Справочники.СтатусыОбработкиЗаказа.ЗаказСоздан);
		
		ЗафиксироватьТранзакцию();
		
		Возврат Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	
КонецФункции

Функция СнятиеРезерваПоОтмененнымЗаказам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКСборкеОстатки.Склад,
	|	ТоварыКСборкеОстатки.Документ,
	|	ТоварыКСборкеОстатки.Товар,
	|	ТоварыКСборкеОстатки.Партия
	|ПОМЕСТИТЬ втТоварыКСбокеПоОтменненнчым
	|ИЗ
	|	РегистрНакопления.ТоварыКСборке.Остатки(
	|			,
	|			ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипСборки.СборкаЗаказа)
	|				И Склад = &Склад
	|				И ВЫРАЗИТЬ(Документ КАК Документ.Заказ).СтатусыОбработкиЗаказа = &СтатусОтменен) КАК ТоварыКСборкеОстатки
	|ГДЕ
	|	ТоварыКСборкеОстатки.КоличествоКСборкеОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКСборкеОбороты.Документ
	|ПОМЕСТИТЬ втЗаказыСДвижениямиПоСборке
	|ИЗ
	|	РегистрНакопления.ТоварыКСборке.Обороты(
	|			,
	|			,
	|			,
	|			Документ В
	|				(ВЫБРАТЬ
	|					втТоварыКСбокеПоОтменненнчым.Документ
	|				ИЗ
	|					втТоварыКСбокеПоОтменненнчым КАК втТоварыКСбокеПоОтменненнчым)) КАК ТоварыКСборкеОбороты
	|ГДЕ
	|	ТоварыКСборкеОбороты.КоличествоКСборкеРасход <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыКСбокеПоОтменненнчым.Документ,
	|	втТоварыКСбокеПоОтменненнчым.Товар,
	|	втТоварыКСбокеПоОтменненнчым.Партия
	|ИЗ
	|	втТоварыКСбокеПоОтменненнчым КАК втТоварыКСбокеПоОтменненнчым
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗаказыСДвижениямиПоСборке КАК втЗаказыСДвижениямиПоСборке
	|		ПО втТоварыКСбокеПоОтменненнчым.Документ = втЗаказыСДвижениямиПоСборке.Документ
	|ГДЕ
	|	втЗаказыСДвижениямиПоСборке.Документ ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("Склад",ПараметрыСеанса.ОсновнойСклад);
	Запрос.УстановитьПараметр("СтатусОтменен",Справочники.СтатусыОбработкиЗаказа.Отменен);
	Выборка = Запрос.Выполнить().Выбрать();
	ДокументСборка = Документы.Сборка.СоздатьДокумент();
	ДокументСборка.Дата = ТекущаяДата();
	ДокументСборка.Склад = ПараметрыСеанса.ОсновнойСклад;
	ДокументСборка.ТипСборки = Перечисления.ТипСборки.СнятиеРезерваПоОтмененнымЗаказам;
	Пока Выборка.Следующий() цикл
		СборкаСтрока = ДокументСборка.Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(СборкаСтрока,Выборка);
	КонецЦикла;
	Если ДокументСборка.Товары.Количество() > 0 тогда
		ДокументСборка.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
КонецФункции


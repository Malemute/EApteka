//---%%% Тарасков - 19.10.2017 - Начало
Перем АдресХраненияТекущейБазы;
//---%%% Тарасков - 19.10.2017 - Конец

Процедура ЗаполнитьТаблицуНакладные() Экспорт
	
	Накладные.Очистить();
	ТаблицаIDСкладовТекущейБазы = ПолучитьIDСкладовТекущейБазы();
	ТаблицаКодовТекущейБазы = ПолучитьКодыСкладовТекущейБазы();
	Если ТаблицаКодовТекущейБазы.Количество() = 0  и ТаблицаIDСкладовТекущейБазы.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	МассивКодов = ТаблицаКодовТекущейБазы.ВыгрузитьКолонку("КодПолучателя");
	
	Если МассивКодов.Количество() = 0 тогда
		Условие = "";
	Иначе
		Условие = "doc.podrcd IN (";
		Для каждого Код из МассивКодов цикл
			Условие = Условие + "'"+Код+"',";	
		КонецЦикла;	
		Условие = Лев(Условие,СтрДлина(Условие)-1);
		Условие = Условие+") and  doc.podrcd <> '' ";
	КонецЕсли;
	
	МассивID = ТаблицаIDСкладовТекущейБазы.ВыгрузитьКолонку("ID_77");
	Если МассивID.Количество() = 0 тогда
		Условие2 = ""
	Иначе
		Условие2 =  " doc.SkladID IN ("; 
		Для каждого ID из МассивID цикл
			Если ЗначениеЗаполнено(СокрЛП(ID)) тогда
				Условие2 = Условие2 + "'"+ID+"',";	
			КонецЕсли;
		КонецЦикла;	
		Условие2 = Лев(Условие2,СтрДлина(Условие2)-1);
		Условие2 = Условие2+")";

	КонецЕсли;
	
	
	//---%%% Тарасков - 19.10.2017 - Начало
	// убрана проверка признака активности и добавлена его выгрузка
	//ТекстЗапросаSQL =
	//"set nocount on             
	//|SELECT distinct doc.id_supplier, doc.ndoc as НомерДокумента, cast(doc.datedoc as datetime) as ДатаДокумента, doc.podrcd as КодМестаХранения, doc.SkladID as СкладID
	//|INTO #doc
	//|FROM  ea5..overhead_list doc (nolock) 
	//|WHERE doc.active=1 AND datedoc between '"+Формат(ДатаНачала,"ДФ=yyyyMMdd")+"' AND  '"+Формат(ДатаОкончания,"ДФ=yyyyMMdd")+"' 
	//| AND ("+Условие+?(ЗначениеЗаполнено(Условие) и ЗначениеЗаполнено(Условие2)," OR "," ") +Условие2+")
	//|order by cast(doc.datedoc as datetime), doc.id_supplier, doc.ndoc
	//|
	//|SELECT doc.id_supplier, doc.НомерДокумента, doc.ДатаДокумента, doc.КодМестаХранения, sup.code_1c, doc.СкладID
	//|FROM #doc AS doc
	//|LEFT JOIN ea5..suppliers sup ON doc.id_supplier = sup.id 
	//|
	//|DROP TABLE #doc";
	ТекстЗапросаSQL =
	"set nocount on             
	|SELECT distinct
	| doc.id_supplier,
	| doc.ndoc as НомерДокумента,
	| cast(doc.datedoc as datetime) as ДатаДокумента,
	| doc.podrcd as КодМестаХранения,
	| doc.SkladID as СкладID,
	| doc.active as Активен
	|INTO #doc
	|FROM  ea5..overhead_list doc (nolock) 
	|WHERE datedoc between '"+Формат(ДатаНачала,"ДФ=yyyyMMdd")+"' AND  '"+Формат(ДатаОкончания,"ДФ=yyyyMMdd")+"' 
	| AND ("+Условие+?(ЗначениеЗаполнено(Условие) и ЗначениеЗаполнено(Условие2)," OR "," ") +Условие2+")
	| " + ?( ЗначениеЗаполнено( АдресХраненияТекущейБазы ), "AND doc.active=1", "" ) + "
	|order by cast(doc.datedoc as datetime), doc.id_supplier, doc.ndoc
	|
	|SELECT
	| doc.id_supplier,
	| doc.НомерДокумента,
	| doc.ДатаДокумента,
	| doc.КодМестаХранения,
	| sup.code_1c,
	| doc.СкладID,
	| doc.Активен
	|FROM #doc AS doc
	|LEFT JOIN ea5..suppliers sup ON doc.id_supplier = sup.id 
	|
	|DROP TABLE #doc";
	//---%%% Тарасков - 19.10.2017 - Конец
	
	ТаблицаПриходов = РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапросаSQL,,Справочники.НастройкиПодключения.БазаCourierDS,Истина);
	
	Для каждого Строка из ТаблицаПриходов цикл
		СтрокаТекБазы = ТаблицаКодовТекущейБазы.Найти(Строка.КодМестаХранения,"КодПолучателя");
		Если СтрокаТекБазы = Неопределено тогда
			СтрокаТекБазы = ТаблицаIDСкладовТекущейБазы.Найти(Строка.СкладID,"ID_77");
			Если СтрокаТекБазы = Неопределено тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтрокаНакладная = Накладные.Добавить();
		СтрокаНакладная.id_supplier = Формат(Строка.id_supplier,"ЧН=0; ЧГ=");
		СтрокаНакладная.ДатаДокумента = ПривестиЗначениеРеквизита( СтрокаНакладная.ДатаДокумента, Строка.ДатаДокумента );
		СтрокаНакладная.НомерДокумента = СокрЛП(Строка.НомерДокумента);
		СтрокаНакладная.Поставщик = ПолучитьПоставщикаПоКоду(Строка.code_1c);
		СтрокаНакладная.МестоХранения = СтрокаТекБазы.СкладОприходования;
		СтрокаНакладная.Фирма = СтрокаТекБазы.Фирма;
		//---%%% Тарасков - 19.10.2017 - Начало
		//СтрокаНакладная.Загружать = Истина;
		СтрокаНакладная.Активен = ПривестиЗначениеРеквизита( СтрокаНакладная.Активен, Строка.Активен );
		СтрокаНакладная.Загружать = ( СтрокаНакладная.Активен = Истина ИЛИ ЭтотОбъект.ЗагружатьНезависимоОтПризнакаАктивности = Истина );
		//---%%% Тарасков - 19.10.2017 - Конец
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПолучитьПоставщикаПоКоду(КодПоставщика)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Код = &Код";
	
	Запрос.УстановитьПараметр("Код",КодПоставщика);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьКодыСкладовТекущейБазы()
	
	//---%%% Тарасков 19.10.2017 - Начало
	//АдресХранения = Константы.АдресХраненияТекущейБазы.Получить();
	АдресХранения = ПолучитьЗагружаемыеАдресаХраненияТкущейБазы();
	//---%%% Тарасков 19.10.2017 - Конец
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Договоры.КодПолучателя,
	|	Договоры.СкладОприходования,
	|	Договоры.Фирма
	|ИЗ
	|	Справочник.Договоры КАК Договоры
	|ГДЕ
	//---%%% Тарасков 19.10.2017 - Начало
	//|	Договоры.СкладОприходования.Владелец = &АдресХранения";
	|	Договоры.СкладОприходования.Владелец В (&АдресХранения)";
	//---%%% Тарасков 19.10.2017 - Конец
	Запрос.УстановитьПараметр("АдресХранения", АдресХранения);
	Возврат  Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьIDСкладовТекущейБазы()
	
	//---%%% Тарасков 19.10.2017 - Начало
	//АдресХранения = Константы.АдресХраненияТекущейБазы.Получить();
	АдресХранения = ПолучитьЗагружаемыеАдресаХраненияТкущейБазы();
	//---%%% Тарасков 19.10.2017 - Конец
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МестаХранения.ID_77,
	|	МестаХранения.Ссылка КАК СкладОприходования,
	|	МестаХранения.АдресХранения.Фирма КАК Фирма
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|ГДЕ
	//---%%% Тарасков 19.10.2017 - Начало
	//|	МестаХранения.АдресХранения = &АдресХранения";
	|	МестаХранения.АдресХранения В (&АдресХранения)";
	//---%%% Тарасков 19.10.2017 - Конец
	Запрос.УстановитьПараметр("АдресХранения", АдресХранения);
	Возврат  Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьЗагружаемыеАдресаХраненияТкущейБазы()
//---%%% Тарасков 19.10.2017
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресаХраненияДляЗагрузкиПриходных.АдресХранения КАК АдресХранения
	|ИЗ
	|	РегистрСведений.АдресаХраненияДляЗагрузкиПриходных КАК АдресаХраненияДляЗагрузкиПриходных";
	
	МассивАдресовХранения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку( "АдресХранения" );
	
	АдресХраненияТекущейБазы = Константы.АдресХраненияТекущейБазы.Получить();
	Если ЗначениеЗаполнено( АдресХраненияТекущейБазы ) Тогда
		МассивАдресовХранения.Добавить( АдресХраненияТекущейБазы );
	КонецЕсли;
	
	Возврат МассивАдресовХранения;
	
КонецФункции

Процедура УстановитьСтатусПриходнойВSQL(Соединение,НомерДокумента,ДатаДокумента,id_supplier,Активность) 
	Если Активность = Истина тогда 
		АктивностьЧисло = 1;
	Иначе
		АктивностьЧисло = 0;
	КонецЕсли;
	ТекстЗапросаSQL = "update  ea5..overhead_list set active="+АктивностьЧисло+" where id_supplier="+id_supplier+" and ndoc='"+НомерДокумента+"' and datedoc='"+Формат(ДатаДокумента,"ДФ=yyyyMMdd")+"'";
	РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапросаSQL,Соединение);
	
КонецПроцедуры

Процедура ЗагрузитьДокументы() Экспорт
	
	//---%%% Тарасков - 19.10.2017 - Начало
	//ТекущаяБазаЭтоКопия = ОбменДаннымиПовтИсп.ТекущаяБазаЯвляетсяКопией();
	//
	//Если ТекущаяБазаЭтоКопия = Истина Тогда
	//	СтрокаСообщения = НСтр( "ru = 'Текущая база является копией. Документы будут загружены, но признак Активности во внешней таблице не будет снят! (Удостоверьтесь в правильности ввода эталонной строки соединения в справочнике ""Информационные базы"" в элементе ""Текущая база"". Текущая строка соединения -  %1 ).'" );
	//	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( СтрокаСообщения, СтрокаСоединенияИнформационнойБазы() );
	//	ОбменДаннымиСервер.СообщитьОбОшибке( СтрокаСообщения );
	//КонецЕсли;
	//---%%% Тарасков - 19.10.2017 - Конец
	
	ОписаниеОшибки = "";
	Соединение = РаботаСSQL.ПодключениеКСерверуSQLПоНастройке(Справочники.НастройкиПодключения.БазаCourierDS);
	Строки = Накладные.НайтиСтроки(Новый Структура("Загружать",Истина));
	ДокументыКВыгрузке = Накладные.Выгрузить(Строки); 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНакладные.НомерДокумента,
	|	ТаблицаНакладные.ДатаДокумента,
	|	ТаблицаНакладные.Поставщик
	|ПОМЕСТИТЬ втДанныеНакладные
	|ИЗ
	|	&ТаблицаНакладные КАК ТаблицаНакладные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеНакладные.НомерДокумента,
	|	втДанныеНакладные.ДатаДокумента,
	|	втДанныеНакладные.Поставщик
	|ИЗ
	|	втДанныеНакладные КАК втДанныеНакладные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Приходная КАК Приходная
	|		ПО втДанныеНакладные.НомерДокумента = Приходная.НомерОснования
	|			И втДанныеНакладные.ДатаДокумента = Приходная.ДатаОснования
	|			И втДанныеНакладные.Поставщик = Приходная.Клиент";
	
	Запрос.УстановитьПараметр("ТаблицаНакладные", ДокументыКВыгрузке);
	
	ТаблицаЗагруженные = Запрос.Выполнить().Выгрузить();
	
	МассивНоменклатурыНеЗагруженной = Новый Массив;
	Для каждого СтрокаШ из ДокументыКВыгрузке цикл
				
		СрокПоставщика=0;
		НомерДокумента = СтрокаШ.НомерДокумента;
		ДатаДокумента = СтрокаШ.ДатаДокумента;
		id_supplier = СтрокаШ.id_supplier;
		МестоХранения = СтрокаШ.МестоХранения;
		Поставщик = СтрокаШ.Поставщик;
		Фирма = СтрокаШ.Фирма;		
		
		//---%%% Тарасков - 19.10.2017 - Начало
		// документы грузятся все, но при этом признак активности нужно снимать не у всех
		//СниматьПризнакАктивности = ( СтрокаШ.Активен = Истина И МестоХранения.АдресХранения = АдресХраненияТекущейБазы И ТекущаяБазаЭтоКопия <> Истина );
		СниматьПризнакАктивности = ( СтрокаШ.Активен = Истина И МестоХранения.АдресХранения = АдресХраненияТекущейБазы);
		
		ПроверочныйЗапросSQL = 
		"SELECT 
		|	  prihod.IDDOC
		|	  ,prihod.[SP388]
		|      ,prihod.[SP478]
		|      ,prihod.[SP479]
		|  FROM [Nagat].[dbo].[DH386] prihod(NOLOCK)
		|	INNER JOIN [Nagat].[dbo]._1SJOURN j(NOLOCK)
		|		ON prihod.IDDOC = j.IDDOC		
		|WHERE prihod.[SP388] = '" + Поставщик.ID_77 + "'
		|     AND prihod.[SP478] = '" + СокрЛП( НомерДокумента ) + "'
		|     AND prihod.[SP479] = '" + Формат( ДатаДокумента, "ДФ=yyyy-dd-MM" )  +"'
		|     AND j.ISMARK = 0";
		
		Проверка = РаботаСSQL.ВыполнитьЗапросSQL(ПроверочныйЗапросSQL,Соединение,,Истина,ОписаниеОшибки);
		Если Проверка.Количество() > 0 тогда
			СниматьПризнакАктивности = Ложь;
		КонецЕсли;	
		//---%%% Тарасков - 19.10.2017 - Конец
		
		Если ТаблицаЗагруженные.НайтиСтроки(Новый Структура("НомерДокумента,ДатаДокумента,Поставщик",НомерДокумента,ДатаДокумента,Поставщик)).Количество() > 0 тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Документ "+НомерДокумента+" от "+Формат(Дата(ДатаДокумента),"ДФ=dd.MM.yyyy")+" контрагента "+Поставщик.Наименование+" уже загружен в базу";
			Сообщение.Сообщить();
			//---%%% Тарасков - 19.10.2017 - Начало
			//УстановитьСтатусПриходнойВSQL(Соединение,НомерДокумента,ДатаДокумента,id_supplier,Ложь);
			Если СниматьПризнакАктивности = Истина Тогда
				УстановитьСтатусПриходнойВSQL(Соединение,НомерДокумента,ДатаДокумента,id_supplier,Ложь);
			КонецЕсли;
			//---%%% Тарасков - 19.10.2017 - Конец
			Продолжить;
		КонецЕсли;
		
		ТекстЗапросаSQL = 
		"set nocount on 
		|SELECT max(doc.id) as id, doc.codepst, doc.name, doc.ndoc, cast(doc.datedoc as datetime) as datedoc, doc.ean13, cast(doc.regprc as money) as regprc , 
		|cast(doc.price1 as money) as pricepost, cast(doc.sums0_2 as money) as sums0_2,
		|cast(doc.price2 as money) as price, doc.ser, doc.gdate, doc.cntr, doc.firm, doc.sertorg, cast(doc.prcimp as money) as prcimp,
		|cast(case when isnumeric(doc.nds)=1 then doc.nds else 18.0 end as money) as nds, max(doc.numgtd) as numgtd, doc.sertif, doc.sertdate, doc.datepay, doc.massa,
		|cast(sum(doc.qnt) as money) as qnt, cast(sum(doc.sumnds10) as money) as sumnds10, cast(sum(doc.sumnds20) as money) as sumnds20,
		|cast(case when isnumeric(doc.numz)=1 then doc.numz end as money) as numz, Case When isnull(doc.billnum,'') = '' then doc.ndoc else doc.billnum end as billnum,
		|cast(doc.podrcd as varchar(50)) as podrcd, prod_match.code as nom_matching_code, doc.SkladID, doc.ver, doc.id_supplier
		|INTO #OVHL
		|FROM  ea5..overhead_list doc (nolock)
		|LEFT JOIN courierDS.dbo.t_product_matching prod_match (nolock) on doc.id_supplier = prod_match.id_supplier and doc.codepst = prod_match.code_pst 
		|WHERE doc.ndoc = '"+СокрЛП(НомерДокумента)+"' and doc.datedoc='"+Формат(ДатаДокумента,"ДФ=dd.MM.yyyy")+"' and doc.id_supplier="+id_supplier+"
		|GROUP BY doc.codepst, doc.name, doc.ndoc, cast(doc.datedoc as datetime), doc.ean13, cast(doc.regprc as money), cast(doc.price1 as money),
		|cast(doc.price2 as money), doc.ser, doc.gdate, doc.cntr, doc.firm, doc.sertorg, cast(doc.prcimp as money),
		|cast(case when isnumeric(doc.nds)=1 then doc.nds else 18.0 end as money), doc.sertif, doc.sertdate, doc.datepay, 
		|doc.massa,cast(case when isnumeric(doc.numz)=1 then doc.numz end as money), cast(doc.sums0_2 as money),
		|Case When isnull(doc.billnum,'') = '' then doc.ndoc else doc.billnum end, cast(doc.podrcd as varchar(50)),prod_match.code, doc.SkladID, doc.ver, doc.id_supplier
		|order by doc.name
		|
		|SELECT ndoc,datedoc,id_supplier, MAX(ver) as ver
		|INTO #OVHL_MaxVer
		|FROM #OVHL
		|GROUP BY ndoc,datedoc,id_supplier
		|
		|SELECT OVHL.*
		|FROM #OVHL OVHL
		|INNER JOIN #OVHL_MaxVer OVHL_MaxVer
		|ON OVHL_MaxVer.id_supplier = OVHL.id_supplier
		|AND OVHL_MaxVer.ndoc = OVHL.ndoc
		|AND OVHL_MaxVer.datedoc = OVHL.datedoc
		|AND OVHL_MaxVer.ver = OVHL.ver
		|
		|DROP TABLE #OVHL_MaxVer, #OVHL
		|";
		ТаблицаПриходов = РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапросаSQL,Соединение,,Истина,ОписаниеОшибки);
		
		
		Если ТаблицаПриходов = Неопределено тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Документ "+НомерДокумента+" от "+Формат(Дата(ДатаДокумента),"ДФ=dd.MM.yyyy")+" контрагента "+Поставщик.Наименование+" не выгружен из-за ошибки:"+Символы.ПС + ОписаниеОшибки;
			Сообщение.Сообщить();	
		КонецЕсли;
		
		
		Документ = Неопределено;
		Для каждого строка из ТаблицаПриходов цикл
			Если Документ = неопределено тогда
				МассивНоменклатурыНеЗагруженной.Очистить();
				Документ = документы.Приходная.СоздатьДокумент();
				Документ.НомерОснования = ПривестиЗначениеРеквизита(Документ.НомерОснования,Строка.ndoc);
				Документ.ДатаОснования = ПривестиЗначениеРеквизита(Документ.ДатаОснования,Строка.datedoc);
				Документ.ДатаОплаты = ПривестиЗначениеРеквизита(Документ.ДатаОплаты,Строка.datepay);
				Документ.НДСПоставщика = ПривестиЗначениеРеквизита(Документ.НДСПоставщика,Строка.sumnds10) + ПривестиЗначениеРеквизита(Документ.НДСПоставщика,Строка.sumnds20);		
				Документ.ОрдернаяСхема = 1;
				Документ.НомерСчФ = ПривестиЗначениеРеквизита(Документ.НомерСчФ,Строка.billnum);
				Документ.РасчетОтСуммы = Истина;
				Документ.Клиент = Поставщик;
				Документ.Договор = Справочники.Договоры.НайтиПоРеквизиту("КодПолучателя",Строка.podrcd,,Поставщик);
				Если ЗначениеЗаполнено(Документ.Договор) и не ЗначениеЗаполнено(Документ.ДатаОплаты) тогда
					 Документ.ДатаОплаты = Документ.ДатаОснования + Документ.Договор.Отсрочка*24*3600;
				КонецЕсли;
				
				
				Если НЕ ЗначениеЗаполнено(Поставщик.ОсновнойПрофильПоставщика) Тогда
					СрокПоставщика=Поставщик.ОсновнойПрофильПоставщика.СрокГодностиПоУмолчанию;
				КонецЕсли;
				
				ФлагФабр=0;
				Если Поставщик.Код="О372230" Тогда
					ФлагФабр=1;
				КонецЕсли;    
				Если ЗначениеЗаполнено(Поставщик) тогда
					Документ.Упрощенка = Поставщик.Упрощенка;
				КонецЕсли;
				Документ.Отдел = МестоХранения;
				Документ.Фирма = Фирма;
				Если ЗначениеЗаполнено(Документ.ДатаОплаты) тогда
					Документ.РазрешенаПриемка = Истина;
				КонецЕсли;
			КонецЕсли;
			
			НаименованиеПоставщика=Строка.name;
			КодСтроки=Строка.id;
			ШтрихКод = "";
			ШтрихКод=ПривестиЗначениеРеквизита(ШтрихКод,Строка.ean13);
			Количество=Строка.qnt;
			Цена=Строка.price; 
			Сумма=Строка.sums0_2; 
			Если (Цена=0) И (Сумма>0) И (Количество>0) Тогда
				Цена=Сумма/Количество;
			КонецЕсли;	
			Если Цена=0 Тогда
				Цена=0.01;
			КонецЕсли;	
			Серия=Строка.ser;
			ГоденДо=Строка.gdate;
			Страна=Строка.cntr;
			Производитель=Строка.firm;
			Если ФлагФабр=1 Тогда
				Производитель="Пьер Фабр";
				Страна="Франция";
			КонецЕсли;
			
			СтавкаНДС=Строка.nds;
			ЦенаРеестра=Строка.regprc;
			ЦенаПроизводителя=Строка.pricepost;
			НаценкаПроизводителя=Строка.prcimp;
			КодПоставщика=Строка.codepst;
			ГТД=Строка.numgtd;
			Сертификат=Строка.sertif;
			СертификатДо=Строка.sertdate;
			Выдан=Строка.sertorg;
			Вес=ПривестиЗначениеРеквизита(0,Строка.massa);
			НомерЗаказа=Строка.numz;
			
			СтрокаТовар = Документ.Товары.Добавить();
			СтрокаТовар.КодСтроки = ПривестиЗначениеРеквизита(СтрокаТовар.КодСтроки,КодСтроки);
			СтрокаТовар.НомерЗаказаПоставщику = ПривестиЗначениеРеквизита(СтрокаТовар.НомерЗаказаПоставщику,НомерЗаказа);
			СтрокаТовар.ШК_Ovh_list = ШтрихКод;
			КодТовара = "";
			
			Попытка
				Если СтрДлина(ГТД)>0 Тогда
					НомГТД = Справочники.НомераГТД.НайтиПоНаименованию(ГТД);
					Если не ЗначениеЗаполнено(НомГТД)  Тогда
						НомГТД = Справочники.НомераГТД.СоздатьЭлемент();
						НомГТД.Наименование=ГТД;
						НомГТД.Записать();					
					КонецЕсли;	
					СтрокаТовар.НомерГТД = НомГТД;
				КонецЕсли;	
			Исключение
			КонецПопытки;
			
			ТоварПоШтрихКоду = справочники.Номенклатура.ПустаяСсылка();
			Если СтрДлина(ШтрихКод) > 0 тогда
				ТоварПоШтрихКоду = ПолучитьТоварПоШтрихКоду(ШтрихКод);
			КонецЕсли;
			
			ВыбТовар = ТоварПоШтрихКоду;
			
			ТоварПоКодуПоставщика = ПолучитьТоварПоКодуПоставщика(КодПоставщика,id_supplier,Соединение);
			
			Если ЗначениеЗаполнено(ТоварПоКодуПоставщика) тогда
				Если ЗначениеЗаполнено(ТоварПоШтрихКоду) и ТоварПоШтрихКоду <> ТоварПоКодуПоставщика тогда
					ШтрихКодТовараПоКодуПоставщика = ПолучитьШтрихКодПоТовару(ТоварПоКодуПоставщика);
					Если ЗначениеЗаполнено(ШтрихКодТовараПоКодуПоставщика) тогда
						//ТекстЗапросаSQL="delete t_ov_bk where id="+Формат(КодСтроки,"ЧРГ=; ЧГ=")+" 
						//|insert t_ov_bk (id, code_tov, bk) values ("+Формат(КодСтроки,"ЧРГ=; ЧГ=")+","+ТоварПоКодуПоставщика.Код+",'"+ШтрихКод+"')";	
						//РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапросаSQL,Соединение);
					КонецЕсли;
				Иначе
					ВыбТовар = ТоварПоКодуПоставщика;
					Если Вес > 0 и ВыбТовар.Вес = 0 тогда
						ОбъектТовар = ТоварПоКодуПоставщика.ПолучитьОбъект();
						ОбъектТовар.Вес = Вес;
						ОбъектТовар.Записать();
					КонецЕсли;
				КонецЕсли;		
			КонецЕсли;
			
			Коэффициент=1;
			Если ЗначениеЗаполнено(ВыбТовар) тогда
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Деление.Коэффициент,
				|	Деление.Тип,
				|	Деление.ТоварПолучаемый
				|ИЗ
				|	Справочник.Деление КАК Деление
				|ГДЕ
				|	Деление.Владелец = &Товар
				|	И НЕ Деление.ПометкаУдаления
				|	И Деление.Тип <> 3";
				Запрос.УстановитьПараметр("Товар",ВыбТовар);
				Результат = Запрос.Выполнить();
				Если не Результат.Пустой() тогда
					Выборка = Результат.Выбрать();
					Пока Выборка.Следующий() цикл
						ТоварПолучаемый = Выборка.ТоварПолучаемый;
						Коэффициент = Выборка.Коэффициент;
						Тип = Выборка.Тип;
					КонецЦикла;
					Если Коэффициент <> 1 тогда
						ТекстЗапросаSQL = 
						"set nocount on
						|select cast(isPharm as money) as isPharm from t_rr_sklad (nolock) where id_sklad='"+Документ.Отдел.ID_77+"' and is_own=1";
						t_rr_sklad = РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапросаSQL,Соединение,,Истина);
						Для каждого СтрСклад из t_rr_sklad цикл
							isPharm =?(СтрСклад.isPharm = 1, Истина, Ложь); 
						КонецЦикла;
						Если (Тип = 1 ИЛИ Тип = 2) И isPharm или (Тип = 0 ИЛИ Тип = 2) и не isPharm тогда
							ВыбТовар = ТоварПолучаемый;
						Иначе 
							Коэффициент = 1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				СтрокаТовар.Товар = ВыбТовар;
				СтавкаНДСТовара = РегистрыСведений.СтавкиНДСПоНоменклатуре.ВернутьСтавкуНДСПоНоменклатуре(ВыбТовар,Документ.ДатаОснования,Истина);
				Если СтавкаНДСТовара<>СтавкаНДС и НЕ Документ.Клиент.Упрощенка тогда
					СтавкаНДСТовара = справочники.СтавкиНДС.ВернутьСтавкуНДС(СтавкаНДС);
					Если ЗначениеЗаполнено(СтавкаНДСТовара) тогда
						РегистрыСведений.СтавкиНДСПоНоменклатуре.УстановитьСтавкуНДСДляНоменклатуры(ВыбТовар,СтавкаНДСТовара,ДобавитьМесяц(ТекущаяДата(),-1));
						//ТекстЗапросаSQL = "insert t_nds (code, name, nds) values ('"+ВыбТовар.Код+"','"+СокрЛП(ВыбТовар.Наименование)+"',"+Строка(СтавкаНДС)+")";
						//РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапросаSQL,Соединение);
					КонецЕсли;
				КонецЕсли;
				Если СтрДлина(СокрЛП(Производитель)) = 0 тогда
					Если ЗначениеЗаполнено(СтрокаТовар.Товар) тогда
						Если ЗначениеЗаполнено(СтрокаТовар.Товар.Производитель) тогда
							Производитель = СтрокаТовар.Товар.Производитель.Наименование;
							Страна = СтрокаТовар.Товар.Производитель.Родитель.Наименование;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Коэффициент = 0 тогда
					Коэффициент = 1;
				КонецЕсли;
				СтрокаТовар.Количество= ПривестиЗначениеРеквизита(СтрокаТовар.Количество,Количество)*Коэффициент;
				СтрокаТовар.Цена= ПривестиЗначениеРеквизита(СтрокаТовар.Цена,Цена)/Коэффициент;
				СтрокаТовар.Сумма= СтрокаТовар.Количество* СтрокаТовар.Цена;
				СтрокаТовар.СуммаНДС= СтрокаТовар.Сумма - (СтрокаТовар.Сумма/(1+(СтавкаНДС/100)));
				СтрокаТовар.ЦенаПроизводителя= ПривестиЗначениеРеквизита(СтрокаТовар.ЦенаПроизводителя,ЦенаПроизводителя)/Коэффициент;
				СтрокаТовар.РеестроваяЦена= ПривестиЗначениеРеквизита(СтрокаТовар.РеестроваяЦена,ЦенаРеестра)/Коэффициент;
				Если СрокПоставщика > 0 тогда
					Если СокрЛП(Серия) = "" тогда
						СтрокаТовар.Серия = "-";
					Иначе
						СтрокаТовар.Серия = ПривестиЗначениеРеквизита(СтрокаТовар.Серия,Серия);
					КонецЕсли;
					Если не ЗначениеЗаполнено(ГоденДо) тогда
						СтрокаТовар.ГоденДо = ДобавитьМесяц(ТекущаяДата(),СрокПоставщика);	
					Иначе
						СтрокаТовар.ГоденДо = ПривестиЗначениеРеквизита(СтрокаТовар.ГоденДо,ГоденДо);
					КонецЕсли;
				Иначе
					СтрокаТовар.Серия = ПривестиЗначениеРеквизита(СтрокаТовар.Серия,Серия);
					СтрокаТовар.ГоденДо = ПривестиЗначениеРеквизита(СтрокаТовар.ГоденДо,ГоденДо);
				КонецЕсли;
				СтрокаТовар.Сертификат = ПривестиЗначениеРеквизита(СтрокаТовар.Сертификат,Сертификат);
				СтрокаТовар.СертификатДо = ПривестиЗначениеРеквизита(СтрокаТовар.СертификатДо,СертификатДо);
				СтрокаТовар.Выдан = ПривестиЗначениеРеквизита(СтрокаТовар.Выдан,Выдан);
				
				Если СтрДлина(Страна) > 0 тогда
					ПроизводителиСтрана = НайтиСтрану(СокрЛП(Страна));	
				Иначе
					ПроизводителиСтрана = НайтиСтрану("Без страны");
				КонецЕсли;
				
				Если СтрДлина(Производитель)>0 Тогда //Завод
					ПроизводителиЗавод = НайтиПроизводителя(ПроизводителиСтрана,Производитель);
					СтрокаТовар.Производитель = ПроизводителиЗавод;
				КонецЕсли;	
				
			КонецЕсли;
			Если не ЗначениеЗаполнено(ВыбТовар) тогда
				МассивНоменклатурыНеЗагруженной.Добавить(НаименованиеПоставщика);
			КонецЕсли;
			Если Документ.РазрешенаПриемка тогда
				Если СтрокаТовар.Серия = "" тогда
					Документ.РазрешенаПриемка = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыбТовар) тогда
					Если СокрЛП(ВыбТовар.Код) <> СокрЛП(строка.nom_matching_code) тогда
						Документ.РазрешенаПриемка = Ложь;	
					КонецЕсли;
					ПрайсЛист = Справочники.ПрайсЛист.НайтиПоРеквизиту("Товар",ВыбТовар);
					Если ЗначениеЗаполнено(ПрайсЛист) тогда
						Если ПрайсЛист.ЖВЛ тогда
							Если СтрокаТовар.РеестроваяЦена > 0 и СтрокаТовар.ЦенаПроизводителя > 0 тогда
								Если СтрокаТовар.РеестроваяЦена > СтрокаТовар.ЦенаПроизводителя*2 или СтрокаТовар.ЦенаПроизводителя < СтрокаТовар.РеестроваяЦена*2 тогда
									Документ.РазрешенаПриемка = Ложь;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Документ.РазрешенаПриемка = Ложь;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Документ.СуммаПоставщика = Документ.Товары.Итог("Сумма");
		Документ.Дата = ТекущаяДата();
		
		ТекстЗапросаSQL ="set nocount on 
		|select ndoc, datedoc, 
		|case  when sumpay>0 then sumpay
		| when sum(sums0)>0 then sum(sums0) 
		| else sum(sum_naked+sumsnds) 
		| end sumpay,
		|case  when sumnds10>0 then sumnds10 
		| when sum(sumnds10_1)>0 then sum(sumnds10_1) 
		| when sum(sumsnds)>0 and sum(cast(nds as money))>0 then sum(case when cast(nds as money)=10 then sumsnds else 0 end) 
		| when sum_invoice_products_vat10>0 and sum10>0 then sum_invoice_products_vat10-sum10
		| when sum_invoice_products_vat10>0 then sum_invoice_products_vat10/110*10
		| when sum(sum_list_products_vat10)>0 then sum(sum_list_products_vat10)/110*10
		| when sum(sums0)>0 and sum(sum10_1)>0 then sum(case when cast(nds as money)=10 then sums0-sum10_1 else 0 end) 
		| when sum(sumnds1)>0 then sum(case when cast(nds as money)=10 then sumnds1*qnt else 0 end) 
		| else sum(case when cast(nds as money)=10 then (price2*qnt)/110*10 else 0 end)
		| end sumnds10, 
		|case  when sumnds20>0 then sumnds20
		| when sum(sumnds20_1)>0 then sum(sumnds20_1) 
		| when sum(sumsnds)>0 and sum(cast(nds as money))>0 then sum(case when cast(nds as money)=18 then sumsnds else 0 end) 
		| when sum_invoice_products_vat18>0 and sum20>0 then sum_invoice_products_vat18-sum20
		| when sum_invoice_products_vat18>0 then sum_invoice_products_vat18/118*18
		| when sum(sum_list_products_vat18)>0 then sum(sum_list_products_vat18)/118*18
		| when sum(sums0)>0 and sum(sum20_1)>0 then sum(case when cast(nds as money)=18 then sums0-sum20_1 else 0 end) 
		| when sum(sumnds1)>0 then sum(case when cast(nds as money)=18 then sumnds1*qnt else 0 end) 
		| else sum(case when cast(nds as money)=18 then (price2*qnt)/118*18 else 0 end)
		| end sumnds20,
		|case  when sum0>0 then sum0
		| when sum(sum0_1)>0 then sum(sum0_1) 
		| when sum(sums0)>0 then sum(case when cast(nds as money)=0 then sums0 else 0 end) 
		| when (sum_invoice_products_vat18>0 or sum_invoice_products_vat10>0) and sumpay>0 then sumpay-sum_invoice_products_vat10-sum_invoice_products_vat18
		| when sum(sum_naked)>0 then sum(case when cast(nds as money)=0 then sum_naked else 0 end) 
		| else sum(case when cast(nds as money)=0 then price2*qnt else 0 end)
		| end sum0,
		|case  when sum10>0 then sum10
		| when sum_invoice_products_vat10>0 and sumnds10>0 then sum_invoice_products_vat10-sumnds10
		| when sum_invoice_products_vat10>0 then sum_invoice_products_vat10/110*100
		| when sum(sum_list_products_vat10)>0 then sum(sum_list_products_vat10)/110*100
		| when sum(sum10_1)>0 then sum(sum10_1) 
		| when sum(sums0)>0 then sum(case when cast(nds as money)=10 then sums0-sumsnds else 0 end)
		| when sum(sum_naked)>0 then sum(case when cast(nds as money)=10 then sum_naked else 0 end) 
		| else sum(case when cast(nds as money)=10 then (price2*qnt)/110*100 else 0 end) 
		| end sum10,
		|case  when sum20>0 then sum20
		| when sum_invoice_products_vat18>0 and sumnds20>0 then sum_invoice_products_vat18-sumnds20
		| when sum_invoice_products_vat18>0 then sum_invoice_products_vat18/118*100
		| when sum(sum_list_products_vat18)>0 then sum(sum_list_products_vat18)/118*100
		| when sum(sum20_1)>0 then sum(sum20_1) 
		| when sum(sums0)>0 then sum(case when cast(nds as money)=18 then sums0-sumsnds else 0 end) 
		| when sum(sum_naked)>0 then sum(case when cast(nds as money)=18 then sum_naked else 0 end) 
		| else sum(case when cast(nds as money)=18 then (price2*qnt)/118*100 else 0 end)
		| end sum20
		|into #doc     
		|from ea5..overhead_list o (nolock)
		|where o.ndoc = '"+СокрЛП(НомерДокумента)+"' and o.datedoc='"+Формат(ДатаДокумента,"ДФ=dd.MM.yyyy")+"' and o.id_supplier="+id_supplier+"
		|group by ndoc, datedoc,sumpay, sumnds10, sumnds20, sum0, sum10, sum20,sum_invoice_products_vat10,sum_invoice_products_vat18
		|order by 2 desc
		|
		|select sumpay as sumpay, --Сумма поставщика
		|cast(sumnds10+sumnds20 as money) as sumnds , --НДС поставщика
		|cast(sumnds10 as money) as sumnds10,
		|cast(sumnds20 as money) as sumnds20,
		|cast(sum0 as money) as sum0,--Сумма0
		|cast(sum10 as money) as sum10,--Сумма10
		|cast(sum20 as money) as  sum20 --Сумма20
		|from #doc d
		|
		|drop table #doc
        |";
		ТаблицаНДС = РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапросаSQL,Соединение,,Истина,ОписаниеОшибки);
		Если ТаблицаНДС = Неопределено тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Документ "+НомерДокумента+" от "+Формат(Дата(ДатаДокумента),"ДФ=dd.MM.yyyy")+" контрагента "+Поставщик.Наименование+" не выгружен из-за ошибки:"+Символы.ПС + ОписаниеОшибки;
			Сообщение.Сообщить();	
		КонецЕсли;
		Для каждого строкаНДС из ТаблицаНДС цикл
			Документ.СуммаНДС10= ПривестиЗначениеРеквизита(Документ.СуммаНДС10,строкаНДС.sumnds10);
			Документ.СуммаНДС20= ПривестиЗначениеРеквизита(Документ.СуммаНДС20,строкаНДС.sumnds20);
			Документ.Сумма0= ПривестиЗначениеРеквизита(Документ.Сумма0,строкаНДС.sum0);
			Документ.Сумма10= ПривестиЗначениеРеквизита(Документ.Сумма10,строкаНДС.sum10);
			Документ.Сумма20=  ПривестиЗначениеРеквизита(Документ.Сумма20,строкаНДС.sum20);
		
			Документ.СуммаПоставщика=Документ.СуммаНДС10+Документ.СуммаНДС20+Документ.Сумма0+Документ.Сумма10+Документ.Сумма20;
			Документ.НДСПоставщика=Документ.СуммаНДС10+Документ.СуммаНДС20;
		КонецЦикла;
		Документ.ТипНакладной = Перечисления.ТипыПрихНакл.Закупка;
		Документ.СтатусПриходнойНакладной = Перечисления.СтатусПриходнойНакладной.Создан;
		Если не МассивНоменклатурыНеЗагруженной.Количество() = 0 тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Документ "+НомерДокумента+" от "+ ДатаДокумента +" контрагента "+Поставщик.Наименование+" НЕ загружен в базу"+Символы.ПС+"Не найдены товары:";
			Сообщение.Сообщить();		
			Для каждого СтрокаНом из МассивНоменклатурыНеЗагруженной цикл
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрокаНом;
				Сообщение.Сообщить();
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		//---%%% Тарасков - 19.10.2017 - Начало
		// проверка на загруженность в 7.7 сделана выше
		//ПроверочныйЗапросSQL = 
		//"SELECT 
		//|	  prihod.IDDOC
		//|	  ,prihod.[SP388]
		//|      ,prihod.[SP478]
		//|      ,prihod.[SP479]
		//|  FROM [Nagat].[dbo].[DH386] prihod(NOLOCK)
		//|	INNER JOIN [Nagat].[dbo]._1SJOURN j(NOLOCK)
		//|		ON prihod.IDDOC = j.IDDOC		
		//|WHERE prihod.[SP388] = '"+Документ.Клиент.ID_77+"'
		//|     AND prihod.[SP478] = '"+СокрЛП(Документ.НомерОснования)+"'
		//|     AND prihod.[SP479] = '"+Формат(Документ.ДатаОснования,"ДФ=yyyy-dd-MM")+"'
		//|     AND j.ISMARK = 0";
		//
		//Проверка = РаботаСSQL.ВыполнитьЗапросSQL(ПроверочныйЗапросSQL,Соединение,,Истина,ОписаниеОшибки);
		//Если Проверка.Количество() > 0 тогда
		//	Сообщение = Новый СообщениеПользователю;
		//	Сообщение.Текст = "Документ "+НомерДокумента+" от "+Формат(Дата(ДатаДокумента),"ДФ=dd.MM.yyyy")+" контрагента "+Поставщик.Наименование+" не выгружен из-за ошибки:"+Символы.ПС + "Документ уже загружен в базу 7.7";
		//	Сообщение.Сообщить();
		//	Продолжить;
		//КонецЕсли;	
		//---%%% Тарасков - 19.10.2017 - Конец
		Документ.Записать(РежимЗаписиДокумента.Проведение);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Документ "+НомерДокумента+" от "+ ДатаДокумента +" контрагента "+Поставщик.Наименование+" загружен в базу";
		Сообщение.Сообщить();
		//---%%% Тарасков - 19.10.2017 - Начало
		//УстановитьСтатусПриходнойВSQL(Соединение,НомерДокумента,ДатаДокумента,id_supplier,Ложь);
		Если СниматьПризнакАктивности = Истина Тогда
			УстановитьСтатусПриходнойВSQL(Соединение,НомерДокумента,ДатаДокумента,id_supplier,Ложь);
		КонецЕсли;
		//---%%% Тарасков - 19.10.2017 - Конец
	КонецЦикла;
	Накладные.Очистить();
КонецПроцедуры

Функция НайтиПроизводителя(ПроизводительСтрана,Производитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Производители.Ссылка
	|ИЗ
	|	Справочник.Производители КАК Производители
	|ГДЕ
	|	Производители.Родитель = &ПроизводительСтрана
	|	И НЕ Производители.ЭтоГруппа
	|	И НЕ Производители.ПометкаУдаления
	|	И Производители.Наименование = &Производитель";
	Запрос.УстановитьПараметр("ПроизводительСтрана", ПроизводительСтрана);
	Запрос.УстановитьПараметр("Производитель", Производитель);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	ПроизводительНовый = Справочники.Производители.СоздатьЭлемент();
	ПроизводительНовый.Родитель = ПроизводительСтрана;
	ПроизводительНовый.Наименование = Производитель;
	ПроизводительНовый.Записать();
	Возврат ПроизводительНовый.Ссылка;
	
	
КонецФункции

Функция НайтиСтрану(Страна)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Производители.Ссылка
	|ИЗ
	|	Справочник.Производители КАК Производители
	|ГДЕ
	|	НЕ Производители.ПометкаУдаления
	|	И Производители.ЭтоГруппа
	|	И Производители.Наименование = &Страна";
	Запрос.УстановитьПараметр("Страна",Страна);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	СтранаГруппа = Справочники.Производители.СоздатьГруппу();
	СтранаГруппа.Наименование = Страна;
	СтранаГруппа.Записать();
	
	Возврат СтранаГруппа.Ссылка;
	
	
КонецФункции

Функция ПривестиЗначениеРеквизита(Реквизит, Знач Значение)
	
	ТипЗначенияРеквизита = ТипЗнч(Реквизит);
	Если Значение = null или не ЗначениеЗаполнено(Значение) тогда
		Если ТипЗначенияРеквизита = Тип("Дата") тогда
			Значение = Дата("00010101");
		ИначеЕсли ТипЗначенияРеквизита = Тип("Число") тогда
			Значение = 0;
		ИначеЕсли ТипЗначенияРеквизита = Тип("Булево") тогда
			Значение = Ложь;
		ИначеЕсли ТипЗначенияРеквизита = Тип("Строка") тогда
			Значение = "";
		КонецЕсли;
	Иначе
		Если ТипЗначенияРеквизита = Тип("Дата") тогда
			Значение = Дата(Значение);
		ИначеЕсли ТипЗначенияРеквизита = Тип("Число") тогда
			Значение = Число(Значение);
		ИначеЕсли ТипЗначенияРеквизита = Тип("Булево") тогда
			Если Значение = 0 тогда
				Значение = Ложь;
			Иначе
				Значение = Истина;
			КонецЕсли;
		ИначеЕсли ТипЗначенияРеквизита = Тип("Строка") тогда
			Значение = СокрЛП(Строка(Значение));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьТоварПоШтрихКоду(ШК)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаводскиеШК.Владелец
	|ИЗ
	|	Справочник.ЗаводскиеШК КАК ЗаводскиеШК
	|ГДЕ
	|	ЗаводскиеШК.Наименование = &ШК";
	Запрос.УстановитьПараметр("ШК",ШК);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Возврат Выборка.Владелец;
	КонецЦикла;
	Возврат справочники.Номенклатура.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьТоварПоКодуПоставщика(КодПоставщика, ИдПоставщика,Соединение)
	
	КодТовара = "";
	ТекстЗапросаSQl="set nocount on select top 1 code.code_ea5 from ea5..supplier_code code (nolock) where code.code_post='"+КодПоставщика+"' and code.supplier_id="+ИдПоставщика;
	ТаблицаКодовПоставщика = РаботаСSQL.ВыполнитьЗапросSQL(ТекстЗапросаSQl,Соединение,,Истина);
	Для каждого строка из ТаблицаКодовПоставщика цикл
		КодТовара = ПривестиЗначениеРеквизита(КодТовара,Строка.code_ea5);
		КодТовара = СтрЗаменить(КодТовара,Символы.НПП,"");
	КонецЦикла;
	Если ЗначениеЗаполнено(КодТовара) тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Код = &Код";
		Запрос.УстановитьПараметр("Код",КодТовара);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() цикл
			Возврат Выборка.Ссылка;
		КонецЦикла;
	Иначе 
		Возврат Справочники.Номенклатура.ПустаяСсылка()
	КонецЕсли;
	
	
КонецФункции

Функция ПолучитьШтрихКодПоТовару(Товар)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаводскиеШК.Ссылка
	|ИЗ
	|	Справочник.ЗаводскиеШК КАК ЗаводскиеШК
	|ГДЕ
	|	ЗаводскиеШК.Владелец = &Товар";
	Запрос.УстановитьПараметр("Товар",Товар);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	Возврат справочники.ЗаводскиеШК.ПустаяСсылка();
	
КонецФункции

//---%%% Тарасков - 19.10.2017 - Начало
АдресХраненияТекущейБазы = Константы.АдресХраненияТекущейБазы.Получить();
ЭтотОбъект.ЗагружатьНезависимоОтПризнакаАктивности = Истина;
//---%%% Тарасков - 19.10.2017 - Конец
